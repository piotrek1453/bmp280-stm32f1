
bmp280-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007ac8  08007ac8  00008ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ba8  08007ba8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  08007ba8  08007ba8  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ba8  08007ba8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba8  08007ba8  00008ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bac  08007bac  00008bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007bb0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce0  2000006c  08007c1c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  08007c1c  00009d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af35  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa2  00000000  00000000  00023fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00027f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001277  00000000  00000000  00029720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001beab  00000000  00000000  0002a997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e113  00000000  00000000  00046842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099247  00000000  00000000  00064955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdb9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068dc  00000000  00000000  000fdbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001044bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ab0 	.word	0x08007ab0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08007ab0 	.word	0x08007ab0

08000150 <BMP280_CalibrationConstantsRead_I2C>:
uint16_t dig_T1, dig_P1;
int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8,
    dig_P9;

void BMP280_CalibrationConstantsRead_I2C(I2C_HandleTypeDef i2c_handle,
                                         uint8_t device_address) {
 8000150:	b084      	sub	sp, #16
 8000152:	b580      	push	{r7, lr}
 8000154:	b08a      	sub	sp, #40	@ 0x28
 8000156:	af02      	add	r7, sp, #8
 8000158:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800015c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t calibrationConstantsRaw[26];

  HAL_I2C_Mem_Read_DMA(&i2c_handle, device_address, BMP280_REG_CALIB00, 1,
 8000160:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000164:	b299      	uxth	r1, r3
 8000166:	231a      	movs	r3, #26
 8000168:	9301      	str	r3, [sp, #4]
 800016a:	1d3b      	adds	r3, r7, #4
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	2301      	movs	r3, #1
 8000170:	2288      	movs	r2, #136	@ 0x88
 8000172:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000176:	f001 fff7 	bl	8002168 <HAL_I2C_Mem_Read_DMA>
                       calibrationConstantsRaw, 26);

  dig_T1 = calibrationConstantsRaw[0] | calibrationConstantsRaw[1] << 8;
 800017a:	793b      	ldrb	r3, [r7, #4]
 800017c:	b21a      	sxth	r2, r3
 800017e:	797b      	ldrb	r3, [r7, #5]
 8000180:	021b      	lsls	r3, r3, #8
 8000182:	b21b      	sxth	r3, r3
 8000184:	4313      	orrs	r3, r2
 8000186:	b21b      	sxth	r3, r3
 8000188:	b29a      	uxth	r2, r3
 800018a:	4b36      	ldr	r3, [pc, #216]	@ (8000264 <BMP280_CalibrationConstantsRead_I2C+0x114>)
 800018c:	801a      	strh	r2, [r3, #0]
  dig_T2 = calibrationConstantsRaw[2] | calibrationConstantsRaw[3] << 8;
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	b21a      	sxth	r2, r3
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	021b      	lsls	r3, r3, #8
 8000196:	b21b      	sxth	r3, r3
 8000198:	4313      	orrs	r3, r2
 800019a:	b21a      	sxth	r2, r3
 800019c:	4b32      	ldr	r3, [pc, #200]	@ (8000268 <BMP280_CalibrationConstantsRead_I2C+0x118>)
 800019e:	801a      	strh	r2, [r3, #0]
  dig_T3 = calibrationConstantsRaw[4] | calibrationConstantsRaw[5] << 8;
 80001a0:	7a3b      	ldrb	r3, [r7, #8]
 80001a2:	b21a      	sxth	r2, r3
 80001a4:	7a7b      	ldrb	r3, [r7, #9]
 80001a6:	021b      	lsls	r3, r3, #8
 80001a8:	b21b      	sxth	r3, r3
 80001aa:	4313      	orrs	r3, r2
 80001ac:	b21a      	sxth	r2, r3
 80001ae:	4b2f      	ldr	r3, [pc, #188]	@ (800026c <BMP280_CalibrationConstantsRead_I2C+0x11c>)
 80001b0:	801a      	strh	r2, [r3, #0]

  dig_P1 = calibrationConstantsRaw[6] | calibrationConstantsRaw[7] << 8;
 80001b2:	7abb      	ldrb	r3, [r7, #10]
 80001b4:	b21a      	sxth	r2, r3
 80001b6:	7afb      	ldrb	r3, [r7, #11]
 80001b8:	021b      	lsls	r3, r3, #8
 80001ba:	b21b      	sxth	r3, r3
 80001bc:	4313      	orrs	r3, r2
 80001be:	b21b      	sxth	r3, r3
 80001c0:	b29a      	uxth	r2, r3
 80001c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000270 <BMP280_CalibrationConstantsRead_I2C+0x120>)
 80001c4:	801a      	strh	r2, [r3, #0]
  dig_P2 = calibrationConstantsRaw[8] | calibrationConstantsRaw[9] << 8;
 80001c6:	7b3b      	ldrb	r3, [r7, #12]
 80001c8:	b21a      	sxth	r2, r3
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	021b      	lsls	r3, r3, #8
 80001ce:	b21b      	sxth	r3, r3
 80001d0:	4313      	orrs	r3, r2
 80001d2:	b21a      	sxth	r2, r3
 80001d4:	4b27      	ldr	r3, [pc, #156]	@ (8000274 <BMP280_CalibrationConstantsRead_I2C+0x124>)
 80001d6:	801a      	strh	r2, [r3, #0]
  dig_P3 = calibrationConstantsRaw[10] | calibrationConstantsRaw[11] << 8;
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	b21a      	sxth	r2, r3
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
 80001de:	021b      	lsls	r3, r3, #8
 80001e0:	b21b      	sxth	r3, r3
 80001e2:	4313      	orrs	r3, r2
 80001e4:	b21a      	sxth	r2, r3
 80001e6:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <BMP280_CalibrationConstantsRead_I2C+0x128>)
 80001e8:	801a      	strh	r2, [r3, #0]
  dig_P4 = calibrationConstantsRaw[12] | calibrationConstantsRaw[13] << 8;
 80001ea:	7c3b      	ldrb	r3, [r7, #16]
 80001ec:	b21a      	sxth	r2, r3
 80001ee:	7c7b      	ldrb	r3, [r7, #17]
 80001f0:	021b      	lsls	r3, r3, #8
 80001f2:	b21b      	sxth	r3, r3
 80001f4:	4313      	orrs	r3, r2
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	4b20      	ldr	r3, [pc, #128]	@ (800027c <BMP280_CalibrationConstantsRead_I2C+0x12c>)
 80001fa:	801a      	strh	r2, [r3, #0]
  dig_P5 = calibrationConstantsRaw[14] | calibrationConstantsRaw[15] << 8;
 80001fc:	7cbb      	ldrb	r3, [r7, #18]
 80001fe:	b21a      	sxth	r2, r3
 8000200:	7cfb      	ldrb	r3, [r7, #19]
 8000202:	021b      	lsls	r3, r3, #8
 8000204:	b21b      	sxth	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b21a      	sxth	r2, r3
 800020a:	4b1d      	ldr	r3, [pc, #116]	@ (8000280 <BMP280_CalibrationConstantsRead_I2C+0x130>)
 800020c:	801a      	strh	r2, [r3, #0]
  dig_P6 = calibrationConstantsRaw[16] | calibrationConstantsRaw[17] << 8;
 800020e:	7d3b      	ldrb	r3, [r7, #20]
 8000210:	b21a      	sxth	r2, r3
 8000212:	7d7b      	ldrb	r3, [r7, #21]
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	b21b      	sxth	r3, r3
 8000218:	4313      	orrs	r3, r2
 800021a:	b21a      	sxth	r2, r3
 800021c:	4b19      	ldr	r3, [pc, #100]	@ (8000284 <BMP280_CalibrationConstantsRead_I2C+0x134>)
 800021e:	801a      	strh	r2, [r3, #0]
  dig_P7 = calibrationConstantsRaw[18] | calibrationConstantsRaw[19] << 8;
 8000220:	7dbb      	ldrb	r3, [r7, #22]
 8000222:	b21a      	sxth	r2, r3
 8000224:	7dfb      	ldrb	r3, [r7, #23]
 8000226:	021b      	lsls	r3, r3, #8
 8000228:	b21b      	sxth	r3, r3
 800022a:	4313      	orrs	r3, r2
 800022c:	b21a      	sxth	r2, r3
 800022e:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <BMP280_CalibrationConstantsRead_I2C+0x138>)
 8000230:	801a      	strh	r2, [r3, #0]
  dig_P8 = calibrationConstantsRaw[20] | calibrationConstantsRaw[21] << 8;
 8000232:	7e3b      	ldrb	r3, [r7, #24]
 8000234:	b21a      	sxth	r2, r3
 8000236:	7e7b      	ldrb	r3, [r7, #25]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	b21b      	sxth	r3, r3
 800023c:	4313      	orrs	r3, r2
 800023e:	b21a      	sxth	r2, r3
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <BMP280_CalibrationConstantsRead_I2C+0x13c>)
 8000242:	801a      	strh	r2, [r3, #0]
  dig_P9 = calibrationConstantsRaw[22] | calibrationConstantsRaw[23] << 8;
 8000244:	7ebb      	ldrb	r3, [r7, #26]
 8000246:	b21a      	sxth	r2, r3
 8000248:	7efb      	ldrb	r3, [r7, #27]
 800024a:	021b      	lsls	r3, r3, #8
 800024c:	b21b      	sxth	r3, r3
 800024e:	4313      	orrs	r3, r2
 8000250:	b21a      	sxth	r2, r3
 8000252:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <BMP280_CalibrationConstantsRead_I2C+0x140>)
 8000254:	801a      	strh	r2, [r3, #0]
}
 8000256:	bf00      	nop
 8000258:	3720      	adds	r7, #32
 800025a:	46bd      	mov	sp, r7
 800025c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr
 8000264:	20000088 	.word	0x20000088
 8000268:	2000008c 	.word	0x2000008c
 800026c:	2000008e 	.word	0x2000008e
 8000270:	2000008a 	.word	0x2000008a
 8000274:	20000090 	.word	0x20000090
 8000278:	20000092 	.word	0x20000092
 800027c:	20000094 	.word	0x20000094
 8000280:	20000096 	.word	0x20000096
 8000284:	20000098 	.word	0x20000098
 8000288:	2000009a 	.word	0x2000009a
 800028c:	2000009c 	.word	0x2000009c
 8000290:	2000009e 	.word	0x2000009e

08000294 <BMP280_InitI2C>:
 * filter data to the sensor
 */
//@{
bool BMP280_InitI2C(uint8_t osrs_t, uint8_t osrs_p, uint8_t acq_mode,
                    uint8_t t_sb, uint8_t filter_tc,
                    I2C_HandleTypeDef i2c_handle, uint8_t device_address) {
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b097      	sub	sp, #92	@ 0x5c
 8000298:	af12      	add	r7, sp, #72	@ 0x48
 800029a:	4604      	mov	r4, r0
 800029c:	4608      	mov	r0, r1
 800029e:	4611      	mov	r1, r2
 80002a0:	461a      	mov	r2, r3
 80002a2:	4623      	mov	r3, r4
 80002a4:	71fb      	strb	r3, [r7, #7]
 80002a6:	4603      	mov	r3, r0
 80002a8:	71bb      	strb	r3, [r7, #6]
 80002aa:	460b      	mov	r3, r1
 80002ac:	717b      	strb	r3, [r7, #5]
 80002ae:	4613      	mov	r3, r2
 80002b0:	713b      	strb	r3, [r7, #4]
  uint8_t writeBuffer, readBuffer = 0; // Variables used for applying changes to
 80002b2:	2300      	movs	r3, #0
 80002b4:	737b      	strb	r3, [r7, #13]
                                   // selected bits in device registers */
  HAL_StatusTypeDef status;

  BMP280_CalibrationConstantsRead_I2C(i2c_handle, device_address);
 80002b6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80002ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80002bc:	4668      	mov	r0, sp
 80002be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002c2:	2244      	movs	r2, #68	@ 0x44
 80002c4:	4619      	mov	r1, r3
 80002c6:	f007 f9b2 	bl	800762e <memcpy>
 80002ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d0:	f7ff ff3e 	bl	8000150 <BMP280_CalibrationConstantsRead_I2C>

  status = HAL_I2C_Mem_Read(&i2c_handle, device_address, BMP280_REG_ID, 1,
 80002d4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80002d8:	b299      	uxth	r1, r3
 80002da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2301      	movs	r3, #1
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	f107 030d 	add.w	r3, r7, #13
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	22d0      	movs	r2, #208	@ 0xd0
 80002f2:	f001 fcd1 	bl	8001c98 <HAL_I2C_Mem_Read>
 80002f6:	4603      	mov	r3, r0
 80002f8:	73fb      	strb	r3, [r7, #15]
                            &readBuffer, 1, HAL_MAX_DELAY);

  // Reset the device
  writeBuffer = 0xB6;
 80002fa:	23b6      	movs	r3, #182	@ 0xb6
 80002fc:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle, device_address, BMP280_REG_RESET, 1,
 80002fe:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000302:	b299      	uxth	r1, r3
 8000304:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	9302      	str	r3, [sp, #8]
 800030e:	2301      	movs	r3, #1
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	f107 030e 	add.w	r3, r7, #14
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2301      	movs	r3, #1
 800031a:	22e0      	movs	r2, #224	@ 0xe0
 800031c:	f001 fbc2 	bl	8001aa4 <HAL_I2C_Mem_Write>
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
                             &writeBuffer, 1, HAL_MAX_DELAY);

  HAL_Delay(100);
 8000324:	2064      	movs	r0, #100	@ 0x64
 8000326:	f000 fd59 	bl	8000ddc <HAL_Delay>

  // Write timing and IIR data to config register
  writeBuffer = (t_sb << 5) | (filter_tc << 2);
 800032a:	793b      	ldrb	r3, [r7, #4]
 800032c:	015b      	lsls	r3, r3, #5
 800032e:	b25a      	sxtb	r2, r3
 8000330:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	b25b      	sxtb	r3, r3
 8000338:	4313      	orrs	r3, r2
 800033a:	b25b      	sxtb	r3, r3
 800033c:	b2db      	uxtb	r3, r3
 800033e:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle, device_address, BMP280_REG_CONFIG, 1,
 8000340:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000344:	b299      	uxth	r1, r3
 8000346:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800034a:	f04f 33ff 	mov.w	r3, #4294967295
 800034e:	9302      	str	r3, [sp, #8]
 8000350:	2301      	movs	r3, #1
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	f107 030e 	add.w	r3, r7, #14
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2301      	movs	r3, #1
 800035c:	22f5      	movs	r2, #245	@ 0xf5
 800035e:	f001 fba1 	bl	8001aa4 <HAL_I2C_Mem_Write>
 8000362:	4603      	mov	r3, r0
 8000364:	73fb      	strb	r3, [r7, #15]
                             &writeBuffer, 1, HAL_MAX_DELAY);

  HAL_Delay(100);
 8000366:	2064      	movs	r0, #100	@ 0x64
 8000368:	f000 fd38 	bl	8000ddc <HAL_Delay>

  status = HAL_I2C_Mem_Read(&i2c_handle, device_address, BMP280_REG_CONFIG, 1,
 800036c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000370:	b299      	uxth	r1, r3
 8000372:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000376:	f04f 33ff 	mov.w	r3, #4294967295
 800037a:	9302      	str	r3, [sp, #8]
 800037c:	2301      	movs	r3, #1
 800037e:	9301      	str	r3, [sp, #4]
 8000380:	f107 030d 	add.w	r3, r7, #13
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2301      	movs	r3, #1
 8000388:	22f5      	movs	r2, #245	@ 0xf5
 800038a:	f001 fc85 	bl	8001c98 <HAL_I2C_Mem_Read>
 800038e:	4603      	mov	r3, r0
 8000390:	73fb      	strb	r3, [r7, #15]
                            &readBuffer, 1, HAL_MAX_DELAY);

  if (readBuffer != writeBuffer) {
 8000392:	7b7a      	ldrb	r2, [r7, #13]
 8000394:	7bbb      	ldrb	r3, [r7, #14]
 8000396:	429a      	cmp	r2, r3
 8000398:	d001      	beq.n	800039e <BMP280_InitI2C+0x10a>
    return false;
 800039a:	2300      	movs	r3, #0
 800039c:	e03d      	b.n	800041a <BMP280_InitI2C+0x186>
  }

  // Write oversampling and mode data to ctrl_meas register
  writeBuffer = (osrs_t << 5) | (osrs_p << 2) | (acq_mode << 0);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	015b      	lsls	r3, r3, #5
 80003a2:	b25a      	sxtb	r2, r3
 80003a4:	79bb      	ldrb	r3, [r7, #6]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	4313      	orrs	r3, r2
 80003ac:	b25a      	sxtb	r2, r3
 80003ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	b25b      	sxtb	r3, r3
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle, device_address, BMP280_REG_CTRL_MEAS,
 80003ba:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80003be:	b299      	uxth	r1, r3
 80003c0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80003c4:	f04f 33ff 	mov.w	r3, #4294967295
 80003c8:	9302      	str	r3, [sp, #8]
 80003ca:	2301      	movs	r3, #1
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	f107 030e 	add.w	r3, r7, #14
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2301      	movs	r3, #1
 80003d6:	22f4      	movs	r2, #244	@ 0xf4
 80003d8:	f001 fb64 	bl	8001aa4 <HAL_I2C_Mem_Write>
 80003dc:	4603      	mov	r3, r0
 80003de:	73fb      	strb	r3, [r7, #15]
                             1, &writeBuffer, 1, HAL_MAX_DELAY);

  HAL_Delay(100);
 80003e0:	2064      	movs	r0, #100	@ 0x64
 80003e2:	f000 fcfb 	bl	8000ddc <HAL_Delay>

  status = HAL_I2C_Mem_Read(&i2c_handle, device_address, BMP280_REG_CTRL_MEAS,
 80003e6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80003ea:	b299      	uxth	r1, r3
 80003ec:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80003f0:	f04f 33ff 	mov.w	r3, #4294967295
 80003f4:	9302      	str	r3, [sp, #8]
 80003f6:	2301      	movs	r3, #1
 80003f8:	9301      	str	r3, [sp, #4]
 80003fa:	f107 030d 	add.w	r3, r7, #13
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2301      	movs	r3, #1
 8000402:	22f4      	movs	r2, #244	@ 0xf4
 8000404:	f001 fc48 	bl	8001c98 <HAL_I2C_Mem_Read>
 8000408:	4603      	mov	r3, r0
 800040a:	73fb      	strb	r3, [r7, #15]
                            1, &readBuffer, 1, HAL_MAX_DELAY);

  if (readBuffer != writeBuffer) {
 800040c:	7b7a      	ldrb	r2, [r7, #13]
 800040e:	7bbb      	ldrb	r3, [r7, #14]
 8000410:	429a      	cmp	r2, r3
 8000412:	d001      	beq.n	8000418 <BMP280_InitI2C+0x184>
    return false;
 8000414:	2300      	movs	r3, #0
 8000416:	e000      	b.n	800041a <BMP280_InitI2C+0x186>
  }

  return true;
 8000418:	2301      	movs	r3, #1
} //@}
 800041a:	4618      	mov	r0, r3
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bd90      	pop	{r4, r7, pc}
	...

08000424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_DMA_Init+0x48>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a0f      	ldr	r2, [pc, #60]	@ (800046c <MX_DMA_Init+0x48>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <MX_DMA_Init+0x48>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	2105      	movs	r1, #5
 8000446:	2010      	movs	r0, #16
 8000448:	f000 fda1 	bl	8000f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800044c:	2010      	movs	r0, #16
 800044e:	f000 fdba 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	2105      	movs	r1, #5
 8000456:	2011      	movs	r0, #17
 8000458:	f000 fd99 	bl	8000f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800045c:	2011      	movs	r0, #17
 800045e:	f000 fdb2 	bl	8000fc6 <HAL_NVIC_EnableIRQ>

}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <vApplicationIdleHook>:

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  memory allocated by the kernel to any task that has since been deleted. */
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
  // printf("idle task\r\n");
  //  vTaskDelay(pdMS_TO_TICKS(1000));
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of USART2TxMutex */
  USART2TxMutexHandle = osMutexNew(&USART2TxMutex_attributes);
 8000480:	480b      	ldr	r0, [pc, #44]	@ (80004b0 <MX_FREERTOS_Init+0x34>)
 8000482:	f003 fd8b 	bl	8003f9c <osMutexNew>
 8000486:	4603      	mov	r3, r0
 8000488:	4a0a      	ldr	r2, [pc, #40]	@ (80004b4 <MX_FREERTOS_Init+0x38>)
 800048a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of statusTask */
  statusTaskHandle = osThreadNew(vStatusTask, NULL, &statusTask_attributes);
 800048c:	4a0a      	ldr	r2, [pc, #40]	@ (80004b8 <MX_FREERTOS_Init+0x3c>)
 800048e:	2100      	movs	r1, #0
 8000490:	480a      	ldr	r0, [pc, #40]	@ (80004bc <MX_FREERTOS_Init+0x40>)
 8000492:	f003 fcab 	bl	8003dec <osThreadNew>
 8000496:	4603      	mov	r3, r0
 8000498:	4a09      	ldr	r2, [pc, #36]	@ (80004c0 <MX_FREERTOS_Init+0x44>)
 800049a:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(vLedTask, NULL, &ledTask_attributes);
 800049c:	4a09      	ldr	r2, [pc, #36]	@ (80004c4 <MX_FREERTOS_Init+0x48>)
 800049e:	2100      	movs	r1, #0
 80004a0:	4809      	ldr	r0, [pc, #36]	@ (80004c8 <MX_FREERTOS_Init+0x4c>)
 80004a2:	f003 fca3 	bl	8003dec <osThreadNew>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4a08      	ldr	r2, [pc, #32]	@ (80004cc <MX_FREERTOS_Init+0x50>)
 80004aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	08007b6c 	.word	0x08007b6c
 80004b4:	200000a8 	.word	0x200000a8
 80004b8:	08007b24 	.word	0x08007b24
 80004bc:	080004d1 	.word	0x080004d1
 80004c0:	200000a0 	.word	0x200000a0
 80004c4:	08007b48 	.word	0x08007b48
 80004c8:	08000519 	.word	0x08000519
 80004cc:	200000a4 	.word	0x200000a4

080004d0 <vStatusTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_vStatusTask */
void vStatusTask(void *argument)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStatusTask */
  /* Infinite loop */
  while (true && osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 80004d8:	e00b      	b.n	80004f2 <vStatusTask+0x22>
    printf("test\r\n");
 80004da:	480d      	ldr	r0, [pc, #52]	@ (8000510 <vStatusTask+0x40>)
 80004dc:	f006 fef6 	bl	80072cc <puts>
    osMutexRelease(USART2TxMutexHandle);
 80004e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <vStatusTask+0x44>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f003 fe51 	bl	800418c <osMutexRelease>
    osDelay(1000);
 80004ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ee:	f003 fd27 	bl	8003f40 <osDelay>
  while (true && osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <vStatusTask+0x44>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f04f 31ff 	mov.w	r1, #4294967295
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 fde8 	bl	80040d0 <osMutexAcquire>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0e9      	beq.n	80004da <vStatusTask+0xa>
  }
  /* USER CODE END vStatusTask */
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	08007aec 	.word	0x08007aec
 8000514:	200000a8 	.word	0x200000a8

08000518 <vLedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vLedTask */
void vLedTask(void *argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vLedTask */
  /* Infinite loop */
  while (true) {
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000520:	2104      	movs	r1, #4
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <vLedTask+0x28>)
 8000524:	f001 f960 	bl	80017e8 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
 8000528:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800052c:	4805      	ldr	r0, [pc, #20]	@ (8000544 <vLedTask+0x2c>)
 800052e:	f001 f95b 	bl	80017e8 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000536:	f003 fd03 	bl	8003f40 <osDelay>
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 800053a:	bf00      	nop
 800053c:	e7f0      	b.n	8000520 <vLedTask+0x8>
 800053e:	bf00      	nop
 8000540:	40010c00 	.word	0x40010c00
 8000544:	40011000 	.word	0x40011000

08000548 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055c:	4b38      	ldr	r3, [pc, #224]	@ (8000640 <MX_GPIO_Init+0xf8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a37      	ldr	r2, [pc, #220]	@ (8000640 <MX_GPIO_Init+0xf8>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b35      	ldr	r3, [pc, #212]	@ (8000640 <MX_GPIO_Init+0xf8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0310 	and.w	r3, r3, #16
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000574:	4b32      	ldr	r3, [pc, #200]	@ (8000640 <MX_GPIO_Init+0xf8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a31      	ldr	r2, [pc, #196]	@ (8000640 <MX_GPIO_Init+0xf8>)
 800057a:	f043 0320 	orr.w	r3, r3, #32
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b2f      	ldr	r3, [pc, #188]	@ (8000640 <MX_GPIO_Init+0xf8>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0320 	and.w	r3, r3, #32
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b2c      	ldr	r3, [pc, #176]	@ (8000640 <MX_GPIO_Init+0xf8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a2b      	ldr	r2, [pc, #172]	@ (8000640 <MX_GPIO_Init+0xf8>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <MX_GPIO_Init+0xf8>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <MX_GPIO_Init+0xf8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a25      	ldr	r2, [pc, #148]	@ (8000640 <MX_GPIO_Init+0xf8>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <MX_GPIO_Init+0xf8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0308 	and.w	r3, r3, #8
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c2:	4820      	ldr	r0, [pc, #128]	@ (8000644 <MX_GPIO_Init+0xfc>)
 80005c4:	f001 f8f8 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	481e      	ldr	r0, [pc, #120]	@ (8000648 <MX_GPIO_Init+0x100>)
 80005ce:	f001 f8f3 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_2_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_2_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4816      	ldr	r0, [pc, #88]	@ (8000644 <MX_GPIO_Init+0xfc>)
 80005ec:	f000 ff60 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80005f0:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80005f4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	4812      	ldr	r0, [pc, #72]	@ (800064c <MX_GPIO_Init+0x104>)
 8000602:	f000 ff55 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000606:	f64f 733b 	movw	r3, #65339	@ 0xff3b
 800060a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060c:	2303      	movs	r3, #3
 800060e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_GPIO_Init+0x100>)
 8000618:	f000 ff4a 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_1_Pin;
 800061c:	2304      	movs	r3, #4
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4619      	mov	r1, r3
 8000632:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_GPIO_Init+0x100>)
 8000634:	f000 ff3c 	bl	80014b0 <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	40011000 	.word	0x40011000
 8000648:	40010c00 	.word	0x40010c00
 800064c:	40010800 	.word	0x40010800

08000650 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	@ (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	@ (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f001 f8c5 	bl	800181c <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f93a 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000ac 	.word	0x200000ac
 80006a4:	40005400 	.word	0x40005400
 80006a8:	000186a0 	.word	0x000186a0

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a3b      	ldr	r2, [pc, #236]	@ (80007b4 <HAL_I2C_MspInit+0x108>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d16f      	bne.n	80007ac <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	4b3a      	ldr	r3, [pc, #232]	@ (80007b8 <HAL_I2C_MspInit+0x10c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a39      	ldr	r2, [pc, #228]	@ (80007b8 <HAL_I2C_MspInit+0x10c>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b37      	ldr	r3, [pc, #220]	@ (80007b8 <HAL_I2C_MspInit+0x10c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006e4:	23c0      	movs	r3, #192	@ 0xc0
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e8:	2312      	movs	r3, #18
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4831      	ldr	r0, [pc, #196]	@ (80007bc <HAL_I2C_MspInit+0x110>)
 80006f8:	f000 feda 	bl	80014b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fc:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <HAL_I2C_MspInit+0x10c>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a2d      	ldr	r2, [pc, #180]	@ (80007b8 <HAL_I2C_MspInit+0x10c>)
 8000702:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000706:	61d3      	str	r3, [r2, #28]
 8000708:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <HAL_I2C_MspInit+0x10c>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000714:	4b2a      	ldr	r3, [pc, #168]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 8000716:	4a2b      	ldr	r2, [pc, #172]	@ (80007c4 <HAL_I2C_MspInit+0x118>)
 8000718:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800071a:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000720:	4b27      	ldr	r3, [pc, #156]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800072c:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000732:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000738:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000744:	481e      	ldr	r0, [pc, #120]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 8000746:	f000 fc4d 	bl	8000fe4 <HAL_DMA_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000750:	f000 f8de 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a1a      	ldr	r2, [pc, #104]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 8000758:	639a      	str	r2, [r3, #56]	@ 0x38
 800075a:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <HAL_I2C_MspInit+0x114>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 8000762:	4a1a      	ldr	r2, [pc, #104]	@ (80007cc <HAL_I2C_MspInit+0x120>)
 8000764:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 8000768:	2210      	movs	r2, #16
 800076a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 8000774:	2280      	movs	r2, #128	@ 0x80
 8000776:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 8000792:	f000 fc27 	bl	8000fe4 <HAL_DMA_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 800079c:	f000 f8b8 	bl	8000910 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a09      	ldr	r2, [pc, #36]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 80007a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <HAL_I2C_MspInit+0x11c>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005400 	.word	0x40005400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010c00 	.word	0x40010c00
 80007c0:	20000100 	.word	0x20000100
 80007c4:	40020080 	.word	0x40020080
 80007c8:	20000144 	.word	0x20000144
 80007cc:	4002006c 	.word	0x4002006c

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b098      	sub	sp, #96	@ 0x60
 80007d4:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 facf 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f829 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f7ff feb3 	bl	8000548 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e2:	f7ff fe1f 	bl	8000424 <MX_DMA_Init>
  MX_I2C1_Init();
 80007e6:	f7ff ff33 	bl	8000650 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80007ea:	f000 fa2b 	bl	8000c44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("System initializing\r\n");
 80007ee:	480e      	ldr	r0, [pc, #56]	@ (8000828 <main+0x58>)
 80007f0:	f006 fd6c 	bl	80072cc <puts>
  // BMP280_CalibrationConstantsRead_I2C(hi2c1, BMP280_DEVICE_ADDRESS_VDDIO);
  // BMP280_Wake_I2C(hi2c1, BMP280_DEVICE_ADDRESS_VDDIO);
  BMP280_InitI2C(
 80007f4:	23ec      	movs	r3, #236	@ 0xec
 80007f6:	9316      	str	r3, [sp, #88]	@ 0x58
 80007f8:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <main+0x5c>)
 80007fa:	ab01      	add	r3, sp, #4
 80007fc:	4611      	mov	r1, r2
 80007fe:	2254      	movs	r2, #84	@ 0x54
 8000800:	4618      	mov	r0, r3
 8000802:	f006 ff14 	bl	800762e <memcpy>
 8000806:	2304      	movs	r3, #4
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	23a0      	movs	r3, #160	@ 0xa0
 800080c:	2203      	movs	r2, #3
 800080e:	211c      	movs	r1, #28
 8000810:	20e0      	movs	r0, #224	@ 0xe0
 8000812:	f7ff fd3f 	bl	8000294 <BMP280_InitI2C>
      BMP280_VAL_CTRL_MEAS_MODE_NORMAL, BMP280_VAL_CTRL_CONFIG_T_SB_1000,
      BMP280_VAL_CTRL_CONFIG_FILTER_2, hi2c1, BMP280_DEVICE_ADDRESS_GND);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000816:	f003 fa83 	bl	8003d20 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800081a:	f7ff fe2f 	bl	800047c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800081e:	f003 fab1 	bl	8003d84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true) {
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <main+0x52>
 8000826:	bf00      	nop
 8000828:	08007af4 	.word	0x08007af4
 800082c:	200000ac 	.word	0x200000ac

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b090      	sub	sp, #64	@ 0x40
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0318 	add.w	r3, r7, #24
 800083a:	2228      	movs	r2, #40	@ 0x28
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f006 fe24 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000852:	2301      	movs	r3, #1
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000856:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800085a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800086e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 0318 	add.w	r3, r7, #24
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fae9 	bl	8002e50 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000884:	f000 f844 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fd56 	bl	8003354 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008ae:	f000 f82f 	bl	8000910 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3740      	adds	r7, #64	@ 0x40
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <__io_putchar>:
 */

/**
 * @brief putchar() override - redirect printf to USART2
 */
int __io_putchar(int ch) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 80008c4:	e000      	b.n	80008c8 <__io_putchar+0xc>
    asm("nop");
 80008c6:	bf00      	nop
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <__io_putchar+0x2c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f8      	beq.n	80008c6 <__io_putchar+0xa>
  }
  USART2->DR = (ch & 0xFF); // write data to TX register
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a04      	ldr	r2, [pc, #16]	@ (80008e8 <__io_putchar+0x2c>)
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	6053      	str	r3, [r2, #4]
  return ch;
 80008dc:	687b      	ldr	r3, [r7, #4]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	40004400 	.word	0x40004400

080008ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 fa51 	bl	8000da4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40000800 	.word	0x40000800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <Error_Handler+0x8>

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000922:	4b18      	ldr	r3, [pc, #96]	@ (8000984 <HAL_MspInit+0x68>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a17      	ldr	r2, [pc, #92]	@ (8000984 <HAL_MspInit+0x68>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6193      	str	r3, [r2, #24]
 800092e:	4b15      	ldr	r3, [pc, #84]	@ (8000984 <HAL_MspInit+0x68>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_MspInit+0x68>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <HAL_MspInit+0x68>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_MspInit+0x68>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	210f      	movs	r1, #15
 8000956:	f06f 0001 	mvn.w	r0, #1
 800095a:	f000 fb18 	bl	8000f8e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_MspInit+0x6c>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <HAL_MspInit+0x6c>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	40010000 	.word	0x40010000

0800098c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	@ 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009a2:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <HAL_InitTick+0xe8>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a33      	ldr	r2, [pc, #204]	@ (8000a74 <HAL_InitTick+0xe8>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <HAL_InitTick+0xe8>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ba:	f107 0210 	add.w	r2, r7, #16
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 fe35 	bl	8003634 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d103      	bne.n	80009dc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d4:	f002 fe06 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 80009d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80009da:	e004      	b.n	80009e6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009dc:	f002 fe02 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 80009e0:	4603      	mov	r3, r0
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009e8:	4a23      	ldr	r2, [pc, #140]	@ (8000a78 <HAL_InitTick+0xec>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9b      	lsrs	r3, r3, #18
 80009f0:	3b01      	subs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <HAL_InitTick+0xf0>)
 80009f6:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <HAL_InitTick+0xf4>)
 80009f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009fa:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <HAL_InitTick+0xf0>)
 80009fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a02:	4a1e      	ldr	r2, [pc, #120]	@ (8000a7c <HAL_InitTick+0xf0>)
 8000a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a06:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_InitTick+0xf0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <HAL_InitTick+0xf0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_InitTick+0xf0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000a1a:	4818      	ldr	r0, [pc, #96]	@ (8000a7c <HAL_InitTick+0xf0>)
 8000a1c:	f002 fe58 	bl	80036d0 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11b      	bne.n	8000a66 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a2e:	4813      	ldr	r0, [pc, #76]	@ (8000a7c <HAL_InitTick+0xf0>)
 8000a30:	f002 fea6 	bl	8003780 <HAL_TIM_Base_Start_IT>
 8000a34:	4603      	mov	r3, r0
 8000a36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a42:	201e      	movs	r0, #30
 8000a44:	f000 fabf 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d808      	bhi.n	8000a60 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	201e      	movs	r0, #30
 8000a54:	f000 fa9b 	bl	8000f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_InitTick+0xf8>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e002      	b.n	8000a66 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a66:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3738      	adds	r7, #56	@ 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	20000188 	.word	0x20000188
 8000a80:	40000800 	.word	0x40000800
 8000a84:	20000004 	.word	0x20000004

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <DMA1_Channel6_IRQHandler+0x10>)
 8000ac2:	f000 fbc1 	bl	8001248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000144 	.word	0x20000144

08000ad0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <DMA1_Channel7_IRQHandler+0x10>)
 8000ad6:	f000 fbb7 	bl	8001248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000100 	.word	0x20000100

08000ae4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <TIM4_IRQHandler+0x10>)
 8000aea:	f002 fe9b 	bl	8003824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000188 	.word	0x20000188

08000af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
  }

  return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e009      	b.n	8000b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff feb5 	bl	80008bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf1      	blt.n	8000b44 <_write+0x12>
  }
  return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_close>:

int _close(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b90:	605a      	str	r2, [r3, #4]
  return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f006 fcea 	bl	80075d4 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20005000 	.word	0x20005000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	200001d0 	.word	0x200001d0
 8000c34:	20001d50 	.word	0x20001d50

08000c38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_USART2_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f002 ff72 	bl	8003b64 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f7ff fe43 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200001d4 	.word	0x200001d4
 8000c94:	40004400 	.word	0x40004400

08000c98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d12f      	bne.n	8000d18 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a13      	ldr	r2, [pc, #76]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480b      	ldr	r0, [pc, #44]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000cfc:	f000 fbd8 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d00:	2308      	movs	r3, #8
 8000d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <HAL_UART_MspInit+0x90>)
 8000d14:	f000 fbcc 	bl	80014b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d18:	bf00      	nop
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010800 	.word	0x40010800

08000d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff ff84 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d32:	490c      	ldr	r1, [pc, #48]	@ (8000d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d34:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a09      	ldr	r2, [pc, #36]	@ (8000d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d48:	4c09      	ldr	r4, [pc, #36]	@ (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f006 fc43 	bl	80075e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5a:	f7ff fd39 	bl	80007d0 <main>
  bx lr
 8000d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d68:	08007bb0 	.word	0x08007bb0
  ldr r2, =_sbss
 8000d6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d70:	20001d4c 	.word	0x20001d4c

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f8f5 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f7ff fdfc 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fdc2 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_IncTick+0x1c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	2000021c 	.word	0x2000021c

08000dc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <HAL_GetTick+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	2000021c 	.word	0x2000021c

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff fff0 	bl	8000dc8 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffe0 	bl	8000dc8 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4906      	ldr	r1, [pc, #24]	@ (8000ebc <__NVIC_EnableIRQ+0x34>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff4f 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff64 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ffb2 	bl	8000f14 <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff81 	bl	8000ec0 <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff57 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e043      	b.n	8001082 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <HAL_DMA_Init+0xa8>)
 8001002:	4413      	add	r3, r2
 8001004:	4a22      	ldr	r2, [pc, #136]	@ (8001090 <HAL_DMA_Init+0xac>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	009a      	lsls	r2, r3, #2
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <HAL_DMA_Init+0xb0>)
 8001016:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800102e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001032:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800103c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	bffdfff8 	.word	0xbffdfff8
 8001090:	cccccccd 	.word	0xcccccccd
 8001094:	40020000 	.word	0x40020000

08001098 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_DMA_Start_IT+0x20>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e04b      	b.n	8001150 <HAL_DMA_Start_IT+0xb8>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d13a      	bne.n	8001142 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2202      	movs	r2, #2
 80010d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f000 f9af 	bl	8001454 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 020e 	orr.w	r2, r2, #14
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e00f      	b.n	8001130 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0204 	bic.w	r2, r2, #4
 800111e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 020a 	orr.w	r2, r2, #10
 800112e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e005      	b.n	800114e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800114a:	2302      	movs	r3, #2
 800114c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800114e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d005      	beq.n	800117c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2204      	movs	r2, #4
 8001174:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e051      	b.n	8001220 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 020e 	bic.w	r2, r2, #14
 800118a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a22      	ldr	r2, [pc, #136]	@ (800122c <HAL_DMA_Abort_IT+0xd4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d029      	beq.n	80011fa <HAL_DMA_Abort_IT+0xa2>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <HAL_DMA_Abort_IT+0xd8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d022      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x9e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001234 <HAL_DMA_Abort_IT+0xdc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01a      	beq.n	80011f0 <HAL_DMA_Abort_IT+0x98>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1e      	ldr	r2, [pc, #120]	@ (8001238 <HAL_DMA_Abort_IT+0xe0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d012      	beq.n	80011ea <HAL_DMA_Abort_IT+0x92>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <HAL_DMA_Abort_IT+0xe4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00a      	beq.n	80011e4 <HAL_DMA_Abort_IT+0x8c>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <HAL_DMA_Abort_IT+0xe8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d102      	bne.n	80011de <HAL_DMA_Abort_IT+0x86>
 80011d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011dc:	e00e      	b.n	80011fc <HAL_DMA_Abort_IT+0xa4>
 80011de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011e2:	e00b      	b.n	80011fc <HAL_DMA_Abort_IT+0xa4>
 80011e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e8:	e008      	b.n	80011fc <HAL_DMA_Abort_IT+0xa4>
 80011ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ee:	e005      	b.n	80011fc <HAL_DMA_Abort_IT+0xa4>
 80011f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f4:	e002      	b.n	80011fc <HAL_DMA_Abort_IT+0xa4>
 80011f6:	2310      	movs	r3, #16
 80011f8:	e000      	b.n	80011fc <HAL_DMA_Abort_IT+0xa4>
 80011fa:	2301      	movs	r3, #1
 80011fc:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_DMA_Abort_IT+0xec>)
 80011fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4798      	blx	r3
    } 
  }
  return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020008 	.word	0x40020008
 8001230:	4002001c 	.word	0x4002001c
 8001234:	40020030 	.word	0x40020030
 8001238:	40020044 	.word	0x40020044
 800123c:	40020058 	.word	0x40020058
 8001240:	4002006c 	.word	0x4002006c
 8001244:	40020000 	.word	0x40020000

08001248 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	2204      	movs	r2, #4
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d04f      	beq.n	8001310 <HAL_DMA_IRQHandler+0xc8>
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d04a      	beq.n	8001310 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d107      	bne.n	8001298 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0204 	bic.w	r2, r2, #4
 8001296:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a66      	ldr	r2, [pc, #408]	@ (8001438 <HAL_DMA_IRQHandler+0x1f0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d029      	beq.n	80012f6 <HAL_DMA_IRQHandler+0xae>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a65      	ldr	r2, [pc, #404]	@ (800143c <HAL_DMA_IRQHandler+0x1f4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d022      	beq.n	80012f2 <HAL_DMA_IRQHandler+0xaa>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a63      	ldr	r2, [pc, #396]	@ (8001440 <HAL_DMA_IRQHandler+0x1f8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d01a      	beq.n	80012ec <HAL_DMA_IRQHandler+0xa4>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a62      	ldr	r2, [pc, #392]	@ (8001444 <HAL_DMA_IRQHandler+0x1fc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d012      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x9e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a60      	ldr	r2, [pc, #384]	@ (8001448 <HAL_DMA_IRQHandler+0x200>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00a      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x98>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a5f      	ldr	r2, [pc, #380]	@ (800144c <HAL_DMA_IRQHandler+0x204>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d102      	bne.n	80012da <HAL_DMA_IRQHandler+0x92>
 80012d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012d8:	e00e      	b.n	80012f8 <HAL_DMA_IRQHandler+0xb0>
 80012da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012de:	e00b      	b.n	80012f8 <HAL_DMA_IRQHandler+0xb0>
 80012e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80012e4:	e008      	b.n	80012f8 <HAL_DMA_IRQHandler+0xb0>
 80012e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012ea:	e005      	b.n	80012f8 <HAL_DMA_IRQHandler+0xb0>
 80012ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f0:	e002      	b.n	80012f8 <HAL_DMA_IRQHandler+0xb0>
 80012f2:	2340      	movs	r3, #64	@ 0x40
 80012f4:	e000      	b.n	80012f8 <HAL_DMA_IRQHandler+0xb0>
 80012f6:	2304      	movs	r3, #4
 80012f8:	4a55      	ldr	r2, [pc, #340]	@ (8001450 <HAL_DMA_IRQHandler+0x208>)
 80012fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8094 	beq.w	800142e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800130e:	e08e      	b.n	800142e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	2202      	movs	r2, #2
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d056      	beq.n	80013ce <HAL_DMA_IRQHandler+0x186>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d051      	beq.n	80013ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0320 	and.w	r3, r3, #32
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10b      	bne.n	8001350 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 020a 	bic.w	r2, r2, #10
 8001346:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a38      	ldr	r2, [pc, #224]	@ (8001438 <HAL_DMA_IRQHandler+0x1f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d029      	beq.n	80013ae <HAL_DMA_IRQHandler+0x166>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a37      	ldr	r2, [pc, #220]	@ (800143c <HAL_DMA_IRQHandler+0x1f4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d022      	beq.n	80013aa <HAL_DMA_IRQHandler+0x162>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a35      	ldr	r2, [pc, #212]	@ (8001440 <HAL_DMA_IRQHandler+0x1f8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01a      	beq.n	80013a4 <HAL_DMA_IRQHandler+0x15c>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a34      	ldr	r2, [pc, #208]	@ (8001444 <HAL_DMA_IRQHandler+0x1fc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d012      	beq.n	800139e <HAL_DMA_IRQHandler+0x156>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <HAL_DMA_IRQHandler+0x200>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00a      	beq.n	8001398 <HAL_DMA_IRQHandler+0x150>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a31      	ldr	r2, [pc, #196]	@ (800144c <HAL_DMA_IRQHandler+0x204>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d102      	bne.n	8001392 <HAL_DMA_IRQHandler+0x14a>
 800138c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001390:	e00e      	b.n	80013b0 <HAL_DMA_IRQHandler+0x168>
 8001392:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001396:	e00b      	b.n	80013b0 <HAL_DMA_IRQHandler+0x168>
 8001398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800139c:	e008      	b.n	80013b0 <HAL_DMA_IRQHandler+0x168>
 800139e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013a2:	e005      	b.n	80013b0 <HAL_DMA_IRQHandler+0x168>
 80013a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a8:	e002      	b.n	80013b0 <HAL_DMA_IRQHandler+0x168>
 80013aa:	2320      	movs	r3, #32
 80013ac:	e000      	b.n	80013b0 <HAL_DMA_IRQHandler+0x168>
 80013ae:	2302      	movs	r3, #2
 80013b0:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <HAL_DMA_IRQHandler+0x208>)
 80013b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d034      	beq.n	800142e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013cc:	e02f      	b.n	800142e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	2208      	movs	r2, #8
 80013d4:	409a      	lsls	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d028      	beq.n	8001430 <HAL_DMA_IRQHandler+0x1e8>
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d023      	beq.n	8001430 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 020e 	bic.w	r2, r2, #14
 80013f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f202 	lsl.w	r2, r1, r2
 8001406:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
    }
  }
  return;
 800142e:	bf00      	nop
 8001430:	bf00      	nop
}
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020008 	.word	0x40020008
 800143c:	4002001c 	.word	0x4002001c
 8001440:	40020030 	.word	0x40020030
 8001444:	40020044 	.word	0x40020044
 8001448:	40020058 	.word	0x40020058
 800144c:	4002006c 	.word	0x4002006c
 8001450:	40020000 	.word	0x40020000

08001454 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f202 	lsl.w	r2, r1, r2
 8001470:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b10      	cmp	r3, #16
 8001480:	d108      	bne.n	8001494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001492:	e007      	b.n	80014a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	60da      	str	r2, [r3, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b08b      	sub	sp, #44	@ 0x2c
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	e169      	b.n	8001798 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014c4:	2201      	movs	r2, #1
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	429a      	cmp	r2, r3
 80014de:	f040 8158 	bne.w	8001792 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001750 <HAL_GPIO_Init+0x2a0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d05e      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 80014ec:	4a98      	ldr	r2, [pc, #608]	@ (8001750 <HAL_GPIO_Init+0x2a0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d875      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 80014f2:	4a98      	ldr	r2, [pc, #608]	@ (8001754 <HAL_GPIO_Init+0x2a4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d058      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 80014f8:	4a96      	ldr	r2, [pc, #600]	@ (8001754 <HAL_GPIO_Init+0x2a4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d86f      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 80014fe:	4a96      	ldr	r2, [pc, #600]	@ (8001758 <HAL_GPIO_Init+0x2a8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d052      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 8001504:	4a94      	ldr	r2, [pc, #592]	@ (8001758 <HAL_GPIO_Init+0x2a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d869      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 800150a:	4a94      	ldr	r2, [pc, #592]	@ (800175c <HAL_GPIO_Init+0x2ac>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d04c      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 8001510:	4a92      	ldr	r2, [pc, #584]	@ (800175c <HAL_GPIO_Init+0x2ac>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d863      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 8001516:	4a92      	ldr	r2, [pc, #584]	@ (8001760 <HAL_GPIO_Init+0x2b0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d046      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
 800151c:	4a90      	ldr	r2, [pc, #576]	@ (8001760 <HAL_GPIO_Init+0x2b0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d85d      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 8001522:	2b12      	cmp	r3, #18
 8001524:	d82a      	bhi.n	800157c <HAL_GPIO_Init+0xcc>
 8001526:	2b12      	cmp	r3, #18
 8001528:	d859      	bhi.n	80015de <HAL_GPIO_Init+0x12e>
 800152a:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <HAL_GPIO_Init+0x80>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	080015ab 	.word	0x080015ab
 8001534:	08001585 	.word	0x08001585
 8001538:	08001597 	.word	0x08001597
 800153c:	080015d9 	.word	0x080015d9
 8001540:	080015df 	.word	0x080015df
 8001544:	080015df 	.word	0x080015df
 8001548:	080015df 	.word	0x080015df
 800154c:	080015df 	.word	0x080015df
 8001550:	080015df 	.word	0x080015df
 8001554:	080015df 	.word	0x080015df
 8001558:	080015df 	.word	0x080015df
 800155c:	080015df 	.word	0x080015df
 8001560:	080015df 	.word	0x080015df
 8001564:	080015df 	.word	0x080015df
 8001568:	080015df 	.word	0x080015df
 800156c:	080015df 	.word	0x080015df
 8001570:	080015df 	.word	0x080015df
 8001574:	0800158d 	.word	0x0800158d
 8001578:	080015a1 	.word	0x080015a1
 800157c:	4a79      	ldr	r2, [pc, #484]	@ (8001764 <HAL_GPIO_Init+0x2b4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001582:	e02c      	b.n	80015de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e029      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	3304      	adds	r3, #4
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e024      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	3308      	adds	r3, #8
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e01f      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	330c      	adds	r3, #12
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e01a      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015b2:	2304      	movs	r3, #4
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e013      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c0:	2308      	movs	r3, #8
 80015c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	611a      	str	r2, [r3, #16]
          break;
 80015ca:	e009      	b.n	80015e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	615a      	str	r2, [r3, #20]
          break;
 80015d6:	e003      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
          break;
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x130>
          break;
 80015de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	2bff      	cmp	r3, #255	@ 0xff
 80015e4:	d801      	bhi.n	80015ea <HAL_GPIO_Init+0x13a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	e001      	b.n	80015ee <HAL_GPIO_Init+0x13e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3304      	adds	r3, #4
 80015ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2bff      	cmp	r3, #255	@ 0xff
 80015f4:	d802      	bhi.n	80015fc <HAL_GPIO_Init+0x14c>
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	e002      	b.n	8001602 <HAL_GPIO_Init+0x152>
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	3b08      	subs	r3, #8
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	210f      	movs	r1, #15
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	401a      	ands	r2, r3
 8001614:	6a39      	ldr	r1, [r7, #32]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	431a      	orrs	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80b1 	beq.w	8001792 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001630:	4b4d      	ldr	r3, [pc, #308]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <HAL_GPIO_Init+0x2b8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001648:	4a48      	ldr	r2, [pc, #288]	@ (800176c <HAL_GPIO_Init+0x2bc>)
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a40      	ldr	r2, [pc, #256]	@ (8001770 <HAL_GPIO_Init+0x2c0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d013      	beq.n	800169c <HAL_GPIO_Init+0x1ec>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a3f      	ldr	r2, [pc, #252]	@ (8001774 <HAL_GPIO_Init+0x2c4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d00d      	beq.n	8001698 <HAL_GPIO_Init+0x1e8>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <HAL_GPIO_Init+0x2c8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d007      	beq.n	8001694 <HAL_GPIO_Init+0x1e4>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3d      	ldr	r2, [pc, #244]	@ (800177c <HAL_GPIO_Init+0x2cc>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_GPIO_Init+0x1e0>
 800168c:	2303      	movs	r3, #3
 800168e:	e006      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 8001690:	2304      	movs	r3, #4
 8001692:	e004      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 8001694:	2302      	movs	r3, #2
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_GPIO_Init+0x1ee>
 800169c:	2300      	movs	r3, #0
 800169e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a0:	f002 0203 	and.w	r2, r2, #3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4093      	lsls	r3, r2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ae:	492f      	ldr	r1, [pc, #188]	@ (800176c <HAL_GPIO_Init+0x2bc>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	492c      	ldr	r1, [pc, #176]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4928      	ldr	r1, [pc, #160]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f0:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4922      	ldr	r1, [pc, #136]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	491e      	ldr	r1, [pc, #120]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001708:	4013      	ands	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4918      	ldr	r1, [pc, #96]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001726:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	4914      	ldr	r1, [pc, #80]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001730:	4013      	ands	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d021      	beq.n	8001784 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	490e      	ldr	r1, [pc, #56]	@ (8001780 <HAL_GPIO_Init+0x2d0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e021      	b.n	8001792 <HAL_GPIO_Init+0x2e2>
 800174e:	bf00      	nop
 8001750:	10320000 	.word	0x10320000
 8001754:	10310000 	.word	0x10310000
 8001758:	10220000 	.word	0x10220000
 800175c:	10210000 	.word	0x10210000
 8001760:	10120000 	.word	0x10120000
 8001764:	10110000 	.word	0x10110000
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000
 8001770:	40010800 	.word	0x40010800
 8001774:	40010c00 	.word	0x40010c00
 8001778:	40011000 	.word	0x40011000
 800177c:	40011400 	.word	0x40011400
 8001780:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	43db      	mvns	r3, r3
 800178c:	4909      	ldr	r1, [pc, #36]	@ (80017b4 <HAL_GPIO_Init+0x304>)
 800178e:	4013      	ands	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	3301      	adds	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f47f ae8e 	bne.w	80014c4 <HAL_GPIO_Init+0x14>
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	372c      	adds	r7, #44	@ 0x2c
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40010400 	.word	0x40010400

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43d9      	mvns	r1, r3
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	400b      	ands	r3, r1
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	611a      	str	r2, [r3, #16]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
	...

0800181c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e12b      	b.n	8001a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe ff32 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2224      	movs	r2, #36	@ 0x24
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800186e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800187e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001880:	f001 feb0 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a81      	ldr	r2, [pc, #516]	@ (8001a90 <HAL_I2C_Init+0x274>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d807      	bhi.n	80018a0 <HAL_I2C_Init+0x84>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a80      	ldr	r2, [pc, #512]	@ (8001a94 <HAL_I2C_Init+0x278>)
 8001894:	4293      	cmp	r3, r2
 8001896:	bf94      	ite	ls
 8001898:	2301      	movls	r3, #1
 800189a:	2300      	movhi	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e006      	b.n	80018ae <HAL_I2C_Init+0x92>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001a98 <HAL_I2C_Init+0x27c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bf94      	ite	ls
 80018a8:	2301      	movls	r3, #1
 80018aa:	2300      	movhi	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0e7      	b.n	8001a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a78      	ldr	r2, [pc, #480]	@ (8001a9c <HAL_I2C_Init+0x280>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a90 <HAL_I2C_Init+0x274>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d802      	bhi.n	80018f0 <HAL_I2C_Init+0xd4>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3301      	adds	r3, #1
 80018ee:	e009      	b.n	8001904 <HAL_I2C_Init+0xe8>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4a69      	ldr	r2, [pc, #420]	@ (8001aa0 <HAL_I2C_Init+0x284>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	3301      	adds	r3, #1
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	430b      	orrs	r3, r1
 800190a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001916:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	495c      	ldr	r1, [pc, #368]	@ (8001a90 <HAL_I2C_Init+0x274>)
 8001920:	428b      	cmp	r3, r1
 8001922:	d819      	bhi.n	8001958 <HAL_I2C_Init+0x13c>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e59      	subs	r1, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001938:	400b      	ands	r3, r1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00a      	beq.n	8001954 <HAL_I2C_Init+0x138>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e59      	subs	r1, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fbb1 f3f3 	udiv	r3, r1, r3
 800194c:	3301      	adds	r3, #1
 800194e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001952:	e051      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 8001954:	2304      	movs	r3, #4
 8001956:	e04f      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d111      	bne.n	8001984 <HAL_I2C_Init+0x168>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e58      	subs	r0, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	440b      	add	r3, r1
 800196e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	e012      	b.n	80019aa <HAL_I2C_Init+0x18e>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Init+0x196>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e022      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10e      	bne.n	80019d8 <HAL_I2C_Init+0x1bc>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e58      	subs	r0, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	440b      	add	r3, r1
 80019c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019d6:	e00f      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6809      	ldr	r1, [r1, #0]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6911      	ldr	r1, [r2, #16]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68d2      	ldr	r2, [r2, #12]
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	000186a0 	.word	0x000186a0
 8001a94:	001e847f 	.word	0x001e847f
 8001a98:	003d08ff 	.word	0x003d08ff
 8001a9c:	431bde83 	.word	0x431bde83
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	813b      	strh	r3, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001abe:	f7ff f983 	bl	8000dc8 <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	f040 80d9 	bne.w	8001c84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2319      	movs	r3, #25
 8001ad8:	2201      	movs	r2, #1
 8001ada:	496d      	ldr	r1, [pc, #436]	@ (8001c90 <HAL_I2C_Mem_Write+0x1ec>)
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 ff81 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e0cc      	b.n	8001c86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_I2C_Mem_Write+0x56>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e0c5      	b.n	8001c86 <HAL_I2C_Mem_Write+0x1e2>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d007      	beq.n	8001b20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2221      	movs	r2, #33	@ 0x21
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2240      	movs	r2, #64	@ 0x40
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a3a      	ldr	r2, [r7, #32]
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a4d      	ldr	r2, [pc, #308]	@ (8001c94 <HAL_I2C_Mem_Write+0x1f0>)
 8001b60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b62:	88f8      	ldrh	r0, [r7, #6]
 8001b64:	893a      	ldrh	r2, [r7, #8]
 8001b66:	8979      	ldrh	r1, [r7, #10]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	4603      	mov	r3, r0
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fcac 	bl	80024d0 <I2C_RequestMemoryWrite>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d052      	beq.n	8001c24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e081      	b.n	8001c86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f001 f846 	bl	8002c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00d      	beq.n	8001bae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d107      	bne.n	8001baa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d11b      	bne.n	8001c24 <HAL_I2C_Mem_Write+0x180>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d017      	beq.n	8001c24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1aa      	bne.n	8001b82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f001 f839 	bl	8002ca8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e016      	b.n	8001c86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e000      	b.n	8001c86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	00100002 	.word	0x00100002
 8001c94:	ffff0000 	.word	0xffff0000

08001c98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	@ 0x30
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	817b      	strh	r3, [r7, #10]
 8001caa:	460b      	mov	r3, r1
 8001cac:	813b      	strh	r3, [r7, #8]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cb6:	f7ff f887 	bl	8000dc8 <HAL_GetTick>
 8001cba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	f040 8244 	bne.w	8002152 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2319      	movs	r3, #25
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4982      	ldr	r1, [pc, #520]	@ (8001edc <HAL_I2C_Mem_Read+0x244>)
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fe85 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e237      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Mem_Read+0x5a>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e230      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d007      	beq.n	8001d18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2222      	movs	r2, #34	@ 0x22
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2240      	movs	r2, #64	@ 0x40
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a62      	ldr	r2, [pc, #392]	@ (8001ee0 <HAL_I2C_Mem_Read+0x248>)
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d5a:	88f8      	ldrh	r0, [r7, #6]
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	9301      	str	r3, [sp, #4]
 8001d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4603      	mov	r3, r0
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fc46 	bl	80025fc <I2C_RequestMemoryRead>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e1ec      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d113      	bne.n	8001daa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e1c0      	b.n	800212c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d11e      	bne.n	8001df0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc2:	b672      	cpsid	i
}
 8001dc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dec:	b662      	cpsie	i
}
 8001dee:	e035      	b.n	8001e5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d11e      	bne.n	8001e36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e08:	b672      	cpsid	i
}
 8001e0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e32:	b662      	cpsie	i
}
 8001e34:	e012      	b.n	8001e5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e5c:	e166      	b.n	800212c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	f200 811f 	bhi.w	80020a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d123      	bne.n	8001eb8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 ff5f 	bl	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e167      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001eb6:	e139      	b.n	800212c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d152      	bne.n	8001f66 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4906      	ldr	r1, [pc, #24]	@ (8001ee4 <HAL_I2C_Mem_Read+0x24c>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fd8a 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e13c      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
 8001eda:	bf00      	nop
 8001edc:	00100002 	.word	0x00100002
 8001ee0:	ffff0000 	.word	0xffff0000
 8001ee4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f2e:	b662      	cpsie	i
}
 8001f30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f64:	e0e2      	b.n	800212c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	497b      	ldr	r1, [pc, #492]	@ (800215c <HAL_I2C_Mem_Read+0x4c4>)
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fd37 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0e9      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001fc6:	4b66      	ldr	r3, [pc, #408]	@ (8002160 <HAL_I2C_Mem_Read+0x4c8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	08db      	lsrs	r3, r3, #3
 8001fcc:	4a65      	ldr	r2, [pc, #404]	@ (8002164 <HAL_I2C_Mem_Read+0x4cc>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a1a      	lsrs	r2, r3, #8
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00da      	lsls	r2, r3, #3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d118      	bne.n	800201e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800200e:	b662      	cpsie	i
}
 8002010:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e09a      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d1d9      	bne.n	8001fe0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800206e:	b662      	cpsie	i
}
 8002070:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020a4:	e042      	b.n	800212c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fe44 	bl	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e04c      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d118      	bne.n	800212c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002130:	2b00      	cmp	r3, #0
 8002132:	f47f ae94 	bne.w	8001e5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002152:	2302      	movs	r3, #2
  }
}
 8002154:	4618      	mov	r0, r3
 8002156:	3728      	adds	r7, #40	@ 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	00010004 	.word	0x00010004
 8002160:	20000000 	.word	0x20000000
 8002164:	14f8b589 	.word	0x14f8b589

08002168 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	@ 0x30
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002182:	f7fe fe21 	bl	8000dc8 <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	f040 8168 	bne.w	800246a <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800219a:	4b98      	ldr	r3, [pc, #608]	@ (80023fc <HAL_I2C_Mem_Read_DMA+0x294>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	08db      	lsrs	r3, r3, #3
 80021a0:	4a97      	ldr	r2, [pc, #604]	@ (8002400 <HAL_I2C_Mem_Read_DMA+0x298>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0a1a      	lsrs	r2, r3, #8
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d112      	bne.n	80021e6 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
 80021e4:	e142      	b.n	800246c <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d0df      	beq.n	80021b4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_I2C_Mem_Read_DMA+0x9a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e134      	b.n	800246c <HAL_I2C_Mem_Read_DMA+0x304>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d007      	beq.n	8002228 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2222      	movs	r2, #34	@ 0x22
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2240      	movs	r2, #64	@ 0x40
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002258:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a67      	ldr	r2, [pc, #412]	@ (8002404 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8002268:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800226a:	897a      	ldrh	r2, [r7, #10]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002270:	893a      	ldrh	r2, [r7, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80c2 	beq.w	8002410 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002290:	2b00      	cmp	r3, #0
 8002292:	d024      	beq.n	80022de <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002298:	4a5b      	ldr	r2, [pc, #364]	@ (8002408 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a0:	4a5a      	ldr	r2, [pc, #360]	@ (800240c <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a8:	2200      	movs	r2, #0
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b0:	2200      	movs	r2, #0
 80022b2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3310      	adds	r3, #16
 80022be:	4619      	mov	r1, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	461a      	mov	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ca:	f7fe fee5 	bl	8001098 <HAL_DMA_Start_IT>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80022d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d17b      	bne.n	80023d4 <HAL_I2C_Mem_Read_DMA+0x26c>
 80022dc:	e013      	b.n	8002306 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0b2      	b.n	800246c <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002306:	88f8      	ldrh	r0, [r7, #6]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	8979      	ldrh	r1, [r7, #10]
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2323      	movs	r3, #35	@ 0x23
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4603      	mov	r3, r0
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f970 	bl	80025fc <I2C_RequestMemoryRead>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d023      	beq.n	800236a <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe ff16 	bl	8001158 <HAL_DMA_Abort_IT>
 800232c:	4603      	mov	r3, r0
 800232e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002336:	2200      	movs	r2, #0
 8002338:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002348:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e080      	b.n	800246c <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236e:	2b01      	cmp	r3, #1
 8002370:	d108      	bne.n	8002384 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e007      	b.n	8002394 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002392:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023c0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	e048      	b.n	8002466 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f043 0210 	orr.w	r2, r3, #16
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e037      	b.n	800246c <HAL_I2C_Mem_Read_DMA+0x304>
 80023fc:	20000000 	.word	0x20000000
 8002400:	14f8b589 	.word	0x14f8b589
 8002404:	ffff0000 	.word	0xffff0000
 8002408:	080027cd 	.word	0x080027cd
 800240c:	08002977 	.word	0x08002977
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002410:	88f8      	ldrh	r0, [r7, #6]
 8002412:	893a      	ldrh	r2, [r7, #8]
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	2323      	movs	r3, #35	@ 0x23
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	4603      	mov	r3, r0
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f8eb 	bl	80025fc <I2C_RequestMemoryRead>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e01d      	b.n	800246c <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002454:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 800246a:	2302      	movs	r3, #2
  }
}
 800246c:	4618      	mov	r0, r3
 800246e:	3728      	adds	r7, #40	@ 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
	...

080024d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	2200      	movs	r2, #0
 8002502:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fa6c 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002520:	d103      	bne.n	800252a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002528:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e05f      	b.n	80025ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800252e:	897b      	ldrh	r3, [r7, #10]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800253c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	492d      	ldr	r1, [pc, #180]	@ (80025f8 <I2C_RequestMemoryWrite+0x128>)
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fac7 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e04c      	b.n	80025ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fb52 	bl	8002c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	2b04      	cmp	r3, #4
 8002580:	d107      	bne.n	8002592 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002590:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e02b      	b.n	80025ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800259c:	893b      	ldrh	r3, [r7, #8]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	e021      	b.n	80025ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025a8:	893b      	ldrh	r3, [r7, #8]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b8:	6a39      	ldr	r1, [r7, #32]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fb2c 	bl	8002c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d107      	bne.n	80025de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e005      	b.n	80025ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025e2:	893b      	ldrh	r3, [r7, #8]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	00010002 	.word	0x00010002

080025fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4603      	mov	r3, r0
 800260c:	817b      	strh	r3, [r7, #10]
 800260e:	460b      	mov	r3, r1
 8002610:	813b      	strh	r3, [r7, #8]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002624:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002634:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	2200      	movs	r2, #0
 800263e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f9ce 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800265c:	d103      	bne.n	8002666 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0aa      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800266a:	897b      	ldrh	r3, [r7, #10]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002678:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	4952      	ldr	r1, [pc, #328]	@ (80027c8 <I2C_RequestMemoryRead+0x1cc>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fa29 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e097      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fab4 	bl	8002c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00d      	beq.n	80026d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d107      	bne.n	80026ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e076      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d8:	893b      	ldrh	r3, [r7, #8]
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]
 80026e2:	e021      	b.n	8002728 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f4:	6a39      	ldr	r1, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fa8e 	bl	8002c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	2b04      	cmp	r3, #4
 8002708:	d107      	bne.n	800271a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002718:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e050      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800271e:	893b      	ldrh	r3, [r7, #8]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272a:	6a39      	ldr	r1, [r7, #32]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fa73 	bl	8002c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	2b04      	cmp	r3, #4
 800273e:	d107      	bne.n	8002750 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e035      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002762:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	2200      	movs	r2, #0
 800276c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f937 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800278a:	d103      	bne.n	8002794 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e013      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002798:	897b      	ldrh	r3, [r7, #10]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	4906      	ldr	r1, [pc, #24]	@ (80027c8 <I2C_RequestMemoryRead+0x1cc>)
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f992 	bl	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	00010002 	.word	0x00010002

080027cc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027e8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80027fe:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281c:	2200      	movs	r2, #0
 800281e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002826:	2b21      	cmp	r3, #33	@ 0x21
 8002828:	d007      	beq.n	800283a <I2C_DMAXferCplt+0x6e>
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8002830:	2b22      	cmp	r3, #34	@ 0x22
 8002832:	d131      	bne.n	8002898 <I2C_DMAXferCplt+0xcc>
 8002834:	7cbb      	ldrb	r3, [r7, #18]
 8002836:	2b20      	cmp	r3, #32
 8002838:	d12e      	bne.n	8002898 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002848:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	2b29      	cmp	r3, #41	@ 0x29
 8002854:	d10a      	bne.n	800286c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2221      	movs	r2, #33	@ 0x21
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2228      	movs	r2, #40	@ 0x28
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f7ff fe0e 	bl	8002486 <HAL_I2C_SlaveTxCpltCallback>
 800286a:	e00c      	b.n	8002886 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002870:	d109      	bne.n	8002886 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2222      	movs	r2, #34	@ 0x22
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2228      	movs	r2, #40	@ 0x28
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002880:	6978      	ldr	r0, [r7, #20]
 8002882:	f7ff fe09 	bl	8002498 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002894:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002896:	e06a      	b.n	800296e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d064      	beq.n	800296e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028bc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028d4:	d009      	beq.n	80028ea <I2C_DMAXferCplt+0x11e>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d006      	beq.n	80028ea <I2C_DMAXferCplt+0x11e>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80028e2:	d002      	beq.n	80028ea <I2C_DMAXferCplt+0x11e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d107      	bne.n	80028fa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002908:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002918:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8002928:	6978      	ldr	r0, [r7, #20]
 800292a:	f7ff fdc7 	bl	80024bc <HAL_I2C_ErrorCallback>
}
 800292e:	e01e      	b.n	800296e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b40      	cmp	r3, #64	@ 0x40
 8002942:	d10a      	bne.n	800295a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2200      	movs	r2, #0
 8002950:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7ff fda9 	bl	80024aa <HAL_I2C_MemRxCpltCallback>
}
 8002958:	e009      	b.n	800296e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2212      	movs	r2, #18
 8002966:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8002968:	6978      	ldr	r0, [r7, #20]
 800296a:	f7ff fd83 	bl	8002474 <HAL_I2C_MasterRxCpltCallback>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002990:	2200      	movs	r2, #0
 8002992:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	2200      	movs	r2, #0
 80029a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f043 0210 	orr.w	r2, r3, #16
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff fd70 	bl	80024bc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f4:	e048      	b.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d044      	beq.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe f9e3 	bl	8000dc8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d139      	bne.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10d      	bne.n	8002a3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	e00c      	b.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d116      	bne.n	8002a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e023      	b.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10d      	bne.n	8002aae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	e00c      	b.n	8002ac8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf0c      	ite	eq
 8002ac0:	2301      	moveq	r3, #1
 8002ac2:	2300      	movne	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d093      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae6:	e071      	b.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af6:	d123      	bne.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f043 0204 	orr.w	r2, r3, #4
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e067      	b.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d041      	beq.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe f93e 	bl	8000dc8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d136      	bne.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d10c      	bne.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4013      	ands	r3, r2
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	bf14      	ite	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	2300      	moveq	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	e00b      	b.n	8002b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	f043 0220 	orr.w	r2, r3, #32
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e021      	b.n	8002c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10c      	bne.n	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e00b      	b.n	8002c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f af6d 	bne.w	8002ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c24:	e034      	b.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f8e3 	bl	8002df2 <I2C_IsAcknowledgeFailed>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e034      	b.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d028      	beq.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe f8c3 	bl	8000dc8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d11d      	bne.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5e:	2b80      	cmp	r3, #128	@ 0x80
 8002c60:	d016      	beq.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e007      	b.n	8002ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b80      	cmp	r3, #128	@ 0x80
 8002c9c:	d1c3      	bne.n	8002c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb4:	e034      	b.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f89b 	bl	8002df2 <I2C_IsAcknowledgeFailed>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e034      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d028      	beq.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7fe f87b 	bl	8000dc8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11d      	bne.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d016      	beq.n	8002d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e007      	b.n	8002d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d1c3      	bne.n	8002cb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d44:	e049      	b.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d119      	bne.n	8002d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0210 	mvn.w	r2, #16
 8002d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e030      	b.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d88:	f7fe f81e 	bl	8000dc8 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d302      	bcc.n	8002d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11d      	bne.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da8:	2b40      	cmp	r3, #64	@ 0x40
 8002daa:	d016      	beq.n	8002dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e007      	b.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d1ae      	bne.n	8002d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e08:	d11b      	bne.n	8002e42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e272      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8087 	beq.w	8002f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e70:	4b92      	ldr	r3, [pc, #584]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d00c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d112      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
 8002e88:	4b8c      	ldr	r3, [pc, #560]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d10b      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e96:	4b89      	ldr	r3, [pc, #548]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d06c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x12c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d168      	bne.n	8002f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e24c      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x76>
 8002eb8:	4b80      	ldr	r3, [pc, #512]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a7f      	ldr	r2, [pc, #508]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e02e      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b7b      	ldr	r3, [pc, #492]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a7a      	ldr	r2, [pc, #488]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b78      	ldr	r3, [pc, #480]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a77      	ldr	r2, [pc, #476]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0xbc>
 8002ef2:	4b72      	ldr	r3, [pc, #456]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a71      	ldr	r2, [pc, #452]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b6f      	ldr	r3, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6e      	ldr	r2, [pc, #440]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b68      	ldr	r3, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a67      	ldr	r2, [pc, #412]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd ff4c 	bl	8000dc8 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fd ff48 	bl	8000dc8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	@ 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e200      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b5d      	ldr	r3, [pc, #372]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe4>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fd ff38 	bl	8000dc8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fd ff34 	bl	8000dc8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	@ 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1ec      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	4b53      	ldr	r3, [pc, #332]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x10c>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d063      	beq.n	8003052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f96:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d11c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x18c>
 8002fa2:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d116      	bne.n	8002fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	4b43      	ldr	r3, [pc, #268]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x176>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1c0      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4939      	ldr	r1, [pc, #228]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	e03a      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe4:	4b36      	ldr	r3, [pc, #216]	@ (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd feed 	bl	8000dc8 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fd fee9 	bl	8000dc8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1a1      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	4b2d      	ldr	r3, [pc, #180]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b2a      	ldr	r3, [pc, #168]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4927      	ldr	r1, [pc, #156]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e015      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b26      	ldr	r3, [pc, #152]	@ (80030c0 <HAL_RCC_OscConfig+0x270>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fd fecc 	bl	8000dc8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003034:	f7fd fec8 	bl	8000dc8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e180      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03a      	beq.n	80030d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d019      	beq.n	800309a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003066:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fd feac 	bl	8000dc8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fd fea8 	bl	8000dc8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e160      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003092:	2001      	movs	r0, #1
 8003094:	f000 fafe 	bl	8003694 <RCC_Delay>
 8003098:	e01c      	b.n	80030d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_RCC_OscConfig+0x274>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7fd fe92 	bl	8000dc8 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a6:	e00f      	b.n	80030c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fd fe8e 	bl	8000dc8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d908      	bls.n	80030c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e146      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	42420000 	.word	0x42420000
 80030c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b92      	ldr	r3, [pc, #584]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e9      	bne.n	80030a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a6 	beq.w	800322e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b88      	ldr	r3, [pc, #544]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a87      	ldr	r2, [pc, #540]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]
 80030fe:	4b85      	ldr	r3, [pc, #532]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b82      	ldr	r3, [pc, #520]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b7f      	ldr	r3, [pc, #508]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7e      	ldr	r2, [pc, #504]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fd fe4f 	bl	8000dc8 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fd fe4b 	bl	8000dc8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	@ 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e103      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b75      	ldr	r3, [pc, #468]	@ (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x312>
 8003154:	4b6f      	ldr	r3, [pc, #444]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4a6e      	ldr	r2, [pc, #440]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6213      	str	r3, [r2, #32]
 8003160:	e02d      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x334>
 800316a:	4b6a      	ldr	r3, [pc, #424]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a69      	ldr	r2, [pc, #420]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6213      	str	r3, [r2, #32]
 8003176:	4b67      	ldr	r3, [pc, #412]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4a66      	ldr	r2, [pc, #408]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	6213      	str	r3, [r2, #32]
 8003182:	e01c      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d10c      	bne.n	80031a6 <HAL_RCC_OscConfig+0x356>
 800318c:	4b61      	ldr	r3, [pc, #388]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a60      	ldr	r2, [pc, #384]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	4b5e      	ldr	r3, [pc, #376]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4a5d      	ldr	r2, [pc, #372]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6213      	str	r3, [r2, #32]
 80031a4:	e00b      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 80031a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	4b58      	ldr	r3, [pc, #352]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a57      	ldr	r2, [pc, #348]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d015      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd fdff 	bl	8000dc8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fd fdfb 	bl	8000dc8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0b1      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <HAL_RCC_OscConfig+0x37e>
 80031f0:	e014      	b.n	800321c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fd fde9 	bl	8000dc8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd fde5 	bl	8000dc8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e09b      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	4b40      	ldr	r3, [pc, #256]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ee      	bne.n	80031fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d105      	bne.n	800322e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4b3c      	ldr	r3, [pc, #240]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4a3b      	ldr	r2, [pc, #236]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800322c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8087 	beq.w	8003346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003238:	4b36      	ldr	r3, [pc, #216]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d061      	beq.n	8003308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d146      	bne.n	80032da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324c:	4b33      	ldr	r3, [pc, #204]	@ (800331c <HAL_RCC_OscConfig+0x4cc>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fdb9 	bl	8000dc8 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325a:	f7fd fdb5 	bl	8000dc8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e06d      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326c:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003280:	d108      	bne.n	8003294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003282:	4b24      	ldr	r3, [pc, #144]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4921      	ldr	r1, [pc, #132]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003294:	4b1f      	ldr	r3, [pc, #124]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a19      	ldr	r1, [r3, #32]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	430b      	orrs	r3, r1
 80032a6:	491b      	ldr	r1, [pc, #108]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ac:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fd fd89 	bl	8000dc8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fd fd85 	bl	8000dc8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e03d      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032cc:	4b11      	ldr	r3, [pc, #68]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x46a>
 80032d8:	e035      	b.n	8003346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd fd72 	bl	8000dc8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fd6e 	bl	8000dc8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e026      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fa:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x498>
 8003306:	e01e      	b.n	8003346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e019      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
 800331c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_OscConfig+0x500>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0d0      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b6a      	ldr	r3, [pc, #424]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b67      	ldr	r3, [pc, #412]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4965      	ldr	r1, [pc, #404]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a58      	ldr	r2, [pc, #352]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a52      	ldr	r2, [pc, #328]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d040      	beq.n	8003474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d115      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b41      	ldr	r3, [pc, #260]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e073      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	4b3d      	ldr	r3, [pc, #244]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06b      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b39      	ldr	r3, [pc, #228]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4936      	ldr	r1, [pc, #216]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003444:	f7fd fcc0 	bl	8000dc8 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fd fcbc 	bl	8000dc8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e053      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d210      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b24      	ldr	r3, [pc, #144]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 0207 	bic.w	r2, r3, #7
 800348a:	4922      	ldr	r1, [pc, #136]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	@ (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ce:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	@ (800351c <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	@ (8003520 <HAL_RCC_ClockConfig+0x1cc>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <HAL_RCC_ClockConfig+0x1d0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fa42 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40022000 	.word	0x40022000
 8003518:	40021000 	.word	0x40021000
 800351c:	08007b7c 	.word	0x08007b7c
 8003520:	20000000 	.word	0x20000000
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003542:	4b1e      	ldr	r3, [pc, #120]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b04      	cmp	r3, #4
 8003550:	d002      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x30>
 8003552:	2b08      	cmp	r3, #8
 8003554:	d003      	beq.n	800355e <HAL_RCC_GetSysClockFreq+0x36>
 8003556:	e027      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003558:	4b19      	ldr	r3, [pc, #100]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800355a:	613b      	str	r3, [r7, #16]
      break;
 800355c:	e027      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	0c9b      	lsrs	r3, r3, #18
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003568:	5cd3      	ldrb	r3, [r2, r3]
 800356a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d010      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003576:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0c5b      	lsrs	r3, r3, #17
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003582:	5cd3      	ldrb	r3, [r2, r3]
 8003584:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800358a:	fb03 f202 	mul.w	r2, r3, r2
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e004      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a0c      	ldr	r2, [pc, #48]	@ (80035cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800359c:	fb02 f303 	mul.w	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	613b      	str	r3, [r7, #16]
      break;
 80035a6:	e002      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035aa:	613b      	str	r3, [r7, #16]
      break;
 80035ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ae:	693b      	ldr	r3, [r7, #16]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	007a1200 	.word	0x007a1200
 80035c4:	08007b94 	.word	0x08007b94
 80035c8:	08007ba4 	.word	0x08007ba4
 80035cc:	003d0900 	.word	0x003d0900

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b02      	ldr	r3, [pc, #8]	@ (80035e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	20000000 	.word	0x20000000

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff2 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	@ (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08007b8c 	.word	0x08007b8c

0800360c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003610:	f7ff ffde 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0adb      	lsrs	r3, r3, #11
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	@ (8003630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	08007b8c 	.word	0x08007b8c

08003634 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	220f      	movs	r2, #15
 8003642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003644:	4b11      	ldr	r3, [pc, #68]	@ (800368c <HAL_RCC_GetClockConfig+0x58>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 0203 	and.w	r2, r3, #3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <HAL_RCC_GetClockConfig+0x58>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_RCC_GetClockConfig+0x58>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003668:	4b08      	ldr	r3, [pc, #32]	@ (800368c <HAL_RCC_GetClockConfig+0x58>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	08db      	lsrs	r3, r3, #3
 800366e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <HAL_RCC_GetClockConfig+0x5c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0207 	and.w	r2, r3, #7
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	40021000 	.word	0x40021000
 8003690:	40022000 	.word	0x40022000

08003694 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800369c:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <RCC_Delay+0x34>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <RCC_Delay+0x38>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0a5b      	lsrs	r3, r3, #9
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036b0:	bf00      	nop
  }
  while (Delay --);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	60fa      	str	r2, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f9      	bne.n	80036b0 <RCC_Delay+0x1c>
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	20000000 	.word	0x20000000
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e041      	b.n	8003766 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f839 	bl	800376e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 f9b4 	bl	8003a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d001      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e03a      	b.n	800380e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	@ (8003818 <HAL_TIM_Base_Start_IT+0x98>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x58>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c2:	d009      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x58>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a14      	ldr	r2, [pc, #80]	@ (800381c <HAL_TIM_Base_Start_IT+0x9c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_TIM_Base_Start_IT+0x58>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a13      	ldr	r2, [pc, #76]	@ (8003820 <HAL_TIM_Base_Start_IT+0xa0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d111      	bne.n	80037fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d010      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fa:	e007      	b.n	800380c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800

08003824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0202 	mvn.w	r2, #2
 8003850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8ed 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8e0 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f8ef 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b04      	cmp	r3, #4
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0204 	mvn.w	r2, #4
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8c3 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8b6 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8c5 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0208 	mvn.w	r2, #8
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2204      	movs	r2, #4
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f899 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f88c 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f89b 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b10      	cmp	r3, #16
 8003934:	d122      	bne.n	800397c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b10      	cmp	r3, #16
 8003942:	d11b      	bne.n	800397c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0210 	mvn.w	r2, #16
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2208      	movs	r2, #8
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f86f 	bl	8003a46 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f862 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f871 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0201 	mvn.w	r2, #1
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fc ffa2 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b2:	2b80      	cmp	r3, #128	@ 0x80
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	2b80      	cmp	r3, #128	@ 0x80
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8bf 	bl	8003b52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	2b40      	cmp	r3, #64	@ 0x40
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f835 	bl	8003a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0220 	mvn.w	r2, #32
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f88a 	bl	8003b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a29      	ldr	r2, [pc, #164]	@ (8003b34 <TIM_Base_SetConfig+0xb8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00b      	beq.n	8003aac <TIM_Base_SetConfig+0x30>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9a:	d007      	beq.n	8003aac <TIM_Base_SetConfig+0x30>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a26      	ldr	r2, [pc, #152]	@ (8003b38 <TIM_Base_SetConfig+0xbc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <TIM_Base_SetConfig+0x30>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a25      	ldr	r2, [pc, #148]	@ (8003b3c <TIM_Base_SetConfig+0xc0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d108      	bne.n	8003abe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <TIM_Base_SetConfig+0xb8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0x62>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0x62>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a19      	ldr	r2, [pc, #100]	@ (8003b38 <TIM_Base_SetConfig+0xbc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0x62>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <TIM_Base_SetConfig+0xc0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a07      	ldr	r2, [pc, #28]	@ (8003b34 <TIM_Base_SetConfig+0xb8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d103      	bne.n	8003b24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	615a      	str	r2, [r3, #20]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800

08003b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e042      	b.n	8003bfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd f884 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	@ 0x24
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f82b 	bl	8003c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003c3e:	f023 030c 	bic.w	r3, r3, #12
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2c      	ldr	r2, [pc, #176]	@ (8003d18 <UART_SetConfig+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7ff fcce 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	e002      	b.n	8003c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7ff fcb6 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 8003c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009a      	lsls	r2, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	4a22      	ldr	r2, [pc, #136]	@ (8003d1c <UART_SetConfig+0x118>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	0119      	lsls	r1, r3, #4
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009a      	lsls	r2, r3, #2
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <UART_SetConfig+0x118>)
 8003cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2064      	movs	r0, #100	@ 0x64
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	@ 0x32
 8003cc4:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <UART_SetConfig+0x118>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cd0:	4419      	add	r1, r3
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009a      	lsls	r2, r3, #2
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <UART_SetConfig+0x118>)
 8003cea:	fba3 0302 	umull	r0, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2064      	movs	r0, #100	@ 0x64
 8003cf2:	fb00 f303 	mul.w	r3, r0, r3
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	3332      	adds	r3, #50	@ 0x32
 8003cfc:	4a07      	ldr	r2, [pc, #28]	@ (8003d1c <UART_SetConfig+0x118>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f003 020f 	and.w	r2, r3, #15
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40013800 	.word	0x40013800
 8003d1c:	51eb851f 	.word	0x51eb851f

08003d20 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d26:	f3ef 8305 	mrs	r3, IPSR
 8003d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	607b      	str	r3, [r7, #4]
  return(result);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <osKernelInitialize+0x32>
 8003d3e:	4b10      	ldr	r3, [pc, #64]	@ (8003d80 <osKernelInitialize+0x60>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d109      	bne.n	8003d5a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d46:	f3ef 8311 	mrs	r3, BASEPRI
 8003d4a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d52:	f06f 0305 	mvn.w	r3, #5
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e00c      	b.n	8003d74 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d5a:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <osKernelInitialize+0x60>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003d62:	4b07      	ldr	r3, [pc, #28]	@ (8003d80 <osKernelInitialize+0x60>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	e002      	b.n	8003d74 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d74:	68fb      	ldr	r3, [r7, #12]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	20000220 	.word	0x20000220

08003d84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d8a:	f3ef 8305 	mrs	r3, IPSR
 8003d8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d96:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <osKernelStart+0x32>
 8003da2:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <osKernelStart+0x64>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d109      	bne.n	8003dbe <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003daa:	f3ef 8311 	mrs	r3, BASEPRI
 8003dae:	603b      	str	r3, [r7, #0]
  return(result);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <osKernelStart+0x3a>
    stat = osErrorISR;
 8003db6:	f06f 0305 	mvn.w	r3, #5
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e00e      	b.n	8003ddc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003de8 <osKernelStart+0x64>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003dc6:	4b08      	ldr	r3, [pc, #32]	@ (8003de8 <osKernelStart+0x64>)
 8003dc8:	2202      	movs	r2, #2
 8003dca:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003dcc:	f001 fc10 	bl	80055f0 <vTaskStartScheduler>
      stat = osOK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e002      	b.n	8003ddc <osKernelStart+0x58>
    } else {
      stat = osError;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000220 	.word	0x20000220

08003dec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b092      	sub	sp, #72	@ 0x48
 8003df0:	af04      	add	r7, sp, #16
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dfc:	f3ef 8305 	mrs	r3, IPSR
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f040 8094 	bne.w	8003f32 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0e:	623b      	str	r3, [r7, #32]
  return(result);
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 808d 	bne.w	8003f32 <osThreadNew+0x146>
 8003e18:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <osThreadNew+0x150>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d106      	bne.n	8003e2e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e20:	f3ef 8311 	mrs	r3, BASEPRI
 8003e24:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f040 8082 	bne.w	8003f32 <osThreadNew+0x146>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d07e      	beq.n	8003f32 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003e34:	2380      	movs	r3, #128	@ 0x80
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003e38:	2318      	movs	r3, #24
 8003e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003e40:	f107 031b 	add.w	r3, r7, #27
 8003e44:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003e46:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d045      	beq.n	8003ede <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <osThreadNew+0x74>
        name = attr->name;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <osThreadNew+0x9a>
 8003e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e76:	2b38      	cmp	r3, #56	@ 0x38
 8003e78:	d805      	bhi.n	8003e86 <osThreadNew+0x9a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <osThreadNew+0x9e>
        return (NULL);
 8003e86:	2300      	movs	r3, #0
 8003e88:	e054      	b.n	8003f34 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <osThreadNew+0xd4>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2ba7      	cmp	r3, #167	@ 0xa7
 8003ea8:	d90a      	bls.n	8003ec0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <osThreadNew+0xd4>
        mem = 1;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ebe:	e010      	b.n	8003ee2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10c      	bne.n	8003ee2 <osThreadNew+0xf6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d108      	bne.n	8003ee2 <osThreadNew+0xf6>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <osThreadNew+0xf6>
          mem = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003edc:	e001      	b.n	8003ee2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d110      	bne.n	8003f0a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ef0:	9202      	str	r2, [sp, #8]
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003efc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f001 f98c 	bl	800521c <xTaskCreateStatic>
 8003f04:	4603      	mov	r3, r0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e013      	b.n	8003f32 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d110      	bne.n	8003f32 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f001 f9d9 	bl	80052da <xTaskCreate>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d001      	beq.n	8003f32 <osThreadNew+0x146>
          hTask = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f32:	697b      	ldr	r3, [r7, #20]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3738      	adds	r7, #56	@ 0x38
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000220 	.word	0x20000220

08003f40 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f48:	f3ef 8305 	mrs	r3, IPSR
 8003f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8003f4e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10f      	bne.n	8003f74 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f54:	f3ef 8310 	mrs	r3, PRIMASK
 8003f58:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <osDelay+0x34>
 8003f60:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <osDelay+0x58>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d109      	bne.n	8003f7c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f68:	f3ef 8311 	mrs	r3, BASEPRI
 8003f6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <osDelay+0x3c>
    stat = osErrorISR;
 8003f74:	f06f 0305 	mvn.w	r3, #5
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	e007      	b.n	8003f8c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f001 fafc 	bl	8005584 <vTaskDelay>
    }
  }

  return (stat);
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000220 	.word	0x20000220

08003f9c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa8:	f3ef 8305 	mrs	r3, IPSR
 8003fac:	613b      	str	r3, [r7, #16]
  return(result);
 8003fae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8085 	bne.w	80040c0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d17e      	bne.n	80040c0 <osMutexNew+0x124>
 8003fc2:	4b42      	ldr	r3, [pc, #264]	@ (80040cc <osMutexNew+0x130>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d105      	bne.n	8003fd6 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fca:	f3ef 8311 	mrs	r3, BASEPRI
 8003fce:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d174      	bne.n	80040c0 <osMutexNew+0x124>
    if (attr != NULL) {
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	e001      	b.n	8003fe8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <osMutexNew+0x5c>
      rmtx = 1U;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e001      	b.n	8003ffc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d15c      	bne.n	80040c0 <osMutexNew+0x124>
      mem = -1;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d015      	beq.n	800403e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <osMutexNew+0x8c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004020:	d902      	bls.n	8004028 <osMutexNew+0x8c>
          mem = 1;
 8004022:	2301      	movs	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	e00c      	b.n	8004042 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d108      	bne.n	8004042 <osMutexNew+0xa6>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <osMutexNew+0xa6>
            mem = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e001      	b.n	8004042 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d112      	bne.n	800406e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4619      	mov	r1, r3
 8004054:	2004      	movs	r0, #4
 8004056:	f000 fb45 	bl	80046e4 <xQueueCreateMutexStatic>
 800405a:	6278      	str	r0, [r7, #36]	@ 0x24
 800405c:	e016      	b.n	800408c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4619      	mov	r1, r3
 8004064:	2001      	movs	r0, #1
 8004066:	f000 fb3d 	bl	80046e4 <xQueueCreateMutexStatic>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24
 800406c:	e00e      	b.n	800408c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800407a:	2004      	movs	r0, #4
 800407c:	f000 fb1a 	bl	80046b4 <xQueueCreateMutex>
 8004080:	6278      	str	r0, [r7, #36]	@ 0x24
 8004082:	e003      	b.n	800408c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004084:	2001      	movs	r0, #1
 8004086:	f000 fb15 	bl	80046b4 <xQueueCreateMutex>
 800408a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <osMutexNew+0x110>
        if (attr != NULL) {
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <osMutexNew+0x104>
          name = attr->name;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e001      	b.n	80040a4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040a8:	f001 f85c 	bl	8005164 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d006      	beq.n	80040c0 <osMutexNew+0x124>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3728      	adds	r7, #40	@ 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000220 	.word	0x20000220

080040d0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ee:	f3ef 8305 	mrs	r3, IPSR
 80040f2:	613b      	str	r3, [r7, #16]
  return(result);
 80040f4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fa:	f3ef 8310 	mrs	r3, PRIMASK
 80040fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <osMutexAcquire+0x4a>
 8004106:	4b20      	ldr	r3, [pc, #128]	@ (8004188 <osMutexAcquire+0xb8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d109      	bne.n	8004122 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800410e:	f3ef 8311 	mrs	r3, BASEPRI
 8004112:	60bb      	str	r3, [r7, #8]
  return(result);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800411a:	f06f 0305 	mvn.w	r3, #5
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e02c      	b.n	800417c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004128:	f06f 0303 	mvn.w	r3, #3
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	e025      	b.n	800417c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d011      	beq.n	800415a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004136:	6839      	ldr	r1, [r7, #0]
 8004138:	69b8      	ldr	r0, [r7, #24]
 800413a:	f000 fb23 	bl	8004784 <xQueueTakeMutexRecursive>
 800413e:	4603      	mov	r3, r0
 8004140:	2b01      	cmp	r3, #1
 8004142:	d01b      	beq.n	800417c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800414a:	f06f 0301 	mvn.w	r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e014      	b.n	800417c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004152:	f06f 0302 	mvn.w	r3, #2
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	e010      	b.n	800417c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	69b8      	ldr	r0, [r7, #24]
 800415e:	f000 fdc9 	bl	8004cf4 <xQueueSemaphoreTake>
 8004162:	4603      	mov	r3, r0
 8004164:	2b01      	cmp	r3, #1
 8004166:	d009      	beq.n	800417c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800416e:	f06f 0301 	mvn.w	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	e002      	b.n	800417c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004176:	f06f 0302 	mvn.w	r3, #2
 800417a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800417c:	69fb      	ldr	r3, [r7, #28]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000220 	.word	0x20000220

0800418c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a8:	f3ef 8305 	mrs	r3, IPSR
 80041ac:	613b      	str	r3, [r7, #16]
  return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b4:	f3ef 8310 	mrs	r3, PRIMASK
 80041b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <osMutexRelease+0x48>
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <osMutexRelease+0x9c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d109      	bne.n	80041dc <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041c8:	f3ef 8311 	mrs	r3, BASEPRI
 80041cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <osMutexRelease+0x50>
    stat = osErrorISR;
 80041d4:	f06f 0305 	mvn.w	r3, #5
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e01f      	b.n	800421c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80041e2:	f06f 0303 	mvn.w	r3, #3
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	e018      	b.n	800421c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80041f0:	69b8      	ldr	r0, [r7, #24]
 80041f2:	f000 fa92 	bl	800471a <xQueueGiveMutexRecursive>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d00f      	beq.n	800421c <osMutexRelease+0x90>
        stat = osErrorResource;
 80041fc:	f06f 0302 	mvn.w	r3, #2
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e00b      	b.n	800421c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004204:	2300      	movs	r3, #0
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	69b8      	ldr	r0, [r7, #24]
 800420c:	f000 faf2 	bl	80047f4 <xQueueGenericSend>
 8004210:	4603      	mov	r3, r0
 8004212:	2b01      	cmp	r3, #1
 8004214:	d002      	beq.n	800421c <osMutexRelease+0x90>
        stat = osErrorResource;
 8004216:	f06f 0302 	mvn.w	r3, #2
 800421a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800421c:	69fb      	ldr	r3, [r7, #28]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000220 	.word	0x20000220

0800422c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a06      	ldr	r2, [pc, #24]	@ (8004254 <vApplicationGetIdleTaskMemory+0x28>)
 800423c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4a05      	ldr	r2, [pc, #20]	@ (8004258 <vApplicationGetIdleTaskMemory+0x2c>)
 8004242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2280      	movs	r2, #128	@ 0x80
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	20000224 	.word	0x20000224
 8004258:	200002cc 	.word	0x200002cc

0800425c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a07      	ldr	r2, [pc, #28]	@ (8004288 <vApplicationGetTimerTaskMemory+0x2c>)
 800426c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4a06      	ldr	r2, [pc, #24]	@ (800428c <vApplicationGetTimerTaskMemory+0x30>)
 8004272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800427a:	601a      	str	r2, [r3, #0]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	200004cc 	.word	0x200004cc
 800428c:	20000574 	.word	0x20000574

08004290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f103 0208 	add.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f103 0208 	add.w	r2, r3, #8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f103 0208 	add.w	r2, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d103      	bne.n	800434c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e00c      	b.n	8004366 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3308      	adds	r3, #8
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	e002      	b.n	800435a <vListInsert+0x2e>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d2f6      	bcs.n	8004354 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6892      	ldr	r2, [r2, #8]
 80043b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6852      	ldr	r2, [r2, #4]
 80043bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d103      	bne.n	80043d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr
	...

080043f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	e7fd      	b.n	8004418 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800441c:	f002 fb5e 	bl	8006adc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	441a      	add	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	3b01      	subs	r3, #1
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	441a      	add	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	22ff      	movs	r2, #255	@ 0xff
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	22ff      	movs	r2, #255	@ 0xff
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d114      	bne.n	800449c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01a      	beq.n	80044b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3310      	adds	r3, #16
 800447e:	4618      	mov	r0, r3
 8004480:	f001 fb56 	bl	8005b30 <xTaskRemoveFromEventList>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d012      	beq.n	80044b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <xQueueGenericReset+0xd0>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	e009      	b.n	80044b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3310      	adds	r3, #16
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fef5 	bl	8004290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3324      	adds	r3, #36	@ 0x24
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fef0 	bl	8004290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044b0:	f002 fb44 	bl	8006b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044b4:	2301      	movs	r3, #1
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08e      	sub	sp, #56	@ 0x38
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10b      	bne.n	80044f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	e7fd      	b.n	800450a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <xQueueGenericCreateStatic+0x56>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <xQueueGenericCreateStatic+0x5a>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <xQueueGenericCreateStatic+0x5c>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10b      	bne.n	800453c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	623b      	str	r3, [r7, #32]
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <xQueueGenericCreateStatic+0x84>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <xQueueGenericCreateStatic+0x88>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <xQueueGenericCreateStatic+0x8a>
 800454c:	2300      	movs	r3, #0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	61fb      	str	r3, [r7, #28]
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800456a:	2350      	movs	r3, #80	@ 0x50
 800456c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b50      	cmp	r3, #80	@ 0x50
 8004572:	d00b      	beq.n	800458c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	61bb      	str	r3, [r7, #24]
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800459e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4613      	mov	r3, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 f844 	bl	800463a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3730      	adds	r7, #48	@ 0x30
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	@ 0x28
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	613b      	str	r3, [r7, #16]
}
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	e004      	b.n	80045fe <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3350      	adds	r3, #80	@ 0x50
 8004602:	4618      	mov	r0, r3
 8004604:	f002 fb6c 	bl	8006ce0 <pvPortMalloc>
 8004608:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00f      	beq.n	8004630 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	3350      	adds	r3, #80	@ 0x50
 8004614:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800461e:	79fa      	ldrb	r2, [r7, #7]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f805 	bl	800463a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004630:	69bb      	ldr	r3, [r7, #24]
	}
 8004632:	4618      	mov	r0, r3
 8004634:	3720      	adds	r7, #32
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e002      	b.n	800465c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004668:	2101      	movs	r1, #1
 800466a:	69b8      	ldr	r0, [r7, #24]
 800466c:	f7ff fec0 	bl	80043f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00e      	beq.n	80046ac <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80046a0:	2300      	movs	r3, #0
 80046a2:	2200      	movs	r2, #0
 80046a4:	2100      	movs	r1, #0
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8a4 	bl	80047f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046be:	2301      	movs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6939      	ldr	r1, [r7, #16]
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f7ff ff75 	bl	80045bc <xQueueGenericCreate>
 80046d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff ffd3 	bl	8004680 <prvInitialiseMutex>

		return pxNewQueue;
 80046da:	68fb      	ldr	r3, [r7, #12]
	}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	4603      	mov	r3, r0
 80046ec:	6039      	str	r1, [r7, #0]
 80046ee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046f0:	2301      	movs	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	6939      	ldr	r1, [r7, #16]
 8004702:	6978      	ldr	r0, [r7, #20]
 8004704:	f7ff fede 	bl	80044c4 <xQueueGenericCreateStatic>
 8004708:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff ffb8 	bl	8004680 <prvInitialiseMutex>

		return pxNewQueue;
 8004710:	68fb      	ldr	r3, [r7, #12]
	}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800471a:	b590      	push	{r4, r7, lr}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10b      	bne.n	8004744 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
}
 800473e:	bf00      	nop
 8004740:	bf00      	nop
 8004742:	e7fd      	b.n	8004740 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685c      	ldr	r4, [r3, #4]
 8004748:	f001 fbbe 	bl	8005ec8 <xTaskGetCurrentTaskHandle>
 800474c:	4603      	mov	r3, r0
 800474e:	429c      	cmp	r4, r3
 8004750:	d111      	bne.n	8004776 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	1e5a      	subs	r2, r3, #1
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004764:	2300      	movs	r3, #0
 8004766:	2200      	movs	r2, #0
 8004768:	2100      	movs	r1, #0
 800476a:	6938      	ldr	r0, [r7, #16]
 800476c:	f000 f842 	bl	80047f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004770:	2301      	movs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e001      	b.n	800477a <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800477a:	697b      	ldr	r3, [r7, #20]
	}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60fb      	str	r3, [r7, #12]
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	685c      	ldr	r4, [r3, #4]
 80047b4:	f001 fb88 	bl	8005ec8 <xTaskGetCurrentTaskHandle>
 80047b8:	4603      	mov	r3, r0
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d107      	bne.n	80047ce <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e00c      	b.n	80047e8 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	6938      	ldr	r0, [r7, #16]
 80047d2:	f000 fa8f 	bl	8004cf4 <xQueueSemaphoreTake>
 80047d6:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80047e8:	697b      	ldr	r3, [r7, #20]
	}
 80047ea:	4618      	mov	r0, r3
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd90      	pop	{r4, r7, pc}
	...

080047f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	@ 0x38
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004802:	2300      	movs	r3, #0
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xQueueGenericSend+0x34>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0x42>
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <xQueueGenericSend+0x46>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericSend+0x48>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <xQueueGenericSend+0x64>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d103      	bne.n	8004866 <xQueueGenericSend+0x72>
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <xQueueGenericSend+0x76>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericSend+0x78>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <xQueueGenericSend+0x94>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	623b      	str	r3, [r7, #32]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004888:	f001 fb2c 	bl	8005ee4 <xTaskGetSchedulerState>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <xQueueGenericSend+0xa4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <xQueueGenericSend+0xa8>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <xQueueGenericSend+0xaa>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <xQueueGenericSend+0xc6>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fb      	str	r3, [r7, #28]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ba:	f002 f90f 	bl	8006adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <xQueueGenericSend+0xdc>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d129      	bne.n	8004924 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048d6:	f000 fb34 	bl	8004f42 <prvCopyDataToQueue>
 80048da:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	3324      	adds	r3, #36	@ 0x24
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 f921 	bl	8005b30 <xTaskRemoveFromEventList>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048f4:	4b3f      	ldr	r3, [pc, #252]	@ (80049f4 <xQueueGenericSend+0x200>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	e00a      	b.n	800491c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800490c:	4b39      	ldr	r3, [pc, #228]	@ (80049f4 <xQueueGenericSend+0x200>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800491c:	f002 f90e 	bl	8006b3c <vPortExitCritical>
				return pdPASS;
 8004920:	2301      	movs	r3, #1
 8004922:	e063      	b.n	80049ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800492a:	f002 f907 	bl	8006b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800492e:	2300      	movs	r3, #0
 8004930:	e05c      	b.n	80049ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4618      	mov	r0, r3
 800493e:	f001 f95b 	bl	8005bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004942:	2301      	movs	r3, #1
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004946:	f002 f8f9 	bl	8006b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800494a:	f000 fec1 	bl	80056d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800494e:	f002 f8c5 	bl	8006adc <vPortEnterCritical>
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004958:	b25b      	sxtb	r3, r3
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d103      	bne.n	8004968 <xQueueGenericSend+0x174>
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800496e:	b25b      	sxtb	r3, r3
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d103      	bne.n	800497e <xQueueGenericSend+0x18a>
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800497e:	f002 f8dd 	bl	8006b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004982:	1d3a      	adds	r2, r7, #4
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f94a 	bl	8005c24 <xTaskCheckForTimeOut>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d124      	bne.n	80049e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004998:	f000 fbcb 	bl	8005132 <prvIsQueueFull>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	3310      	adds	r3, #16
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f86e 	bl	8005a8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049b2:	f000 fb56 	bl	8005062 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049b6:	f000 fe99 	bl	80056ec <xTaskResumeAll>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f47f af7c 	bne.w	80048ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80049c2:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <xQueueGenericSend+0x200>)
 80049c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	e772      	b.n	80048ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049d6:	f000 fb44 	bl	8005062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049da:	f000 fe87 	bl	80056ec <xTaskResumeAll>
 80049de:	e76c      	b.n	80048ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049e2:	f000 fb3e 	bl	8005062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049e6:	f000 fe81 	bl	80056ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ea:	2300      	movs	r3, #0
		}
	}
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3738      	adds	r7, #56	@ 0x38
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	@ 0x38
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <xQueueGenericSendFromISR+0x3e>
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <xQueueGenericSendFromISR+0x42>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <xQueueGenericSendFromISR+0x44>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10b      	bne.n	8004a58 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	623b      	str	r3, [r7, #32]
}
 8004a52:	bf00      	nop
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSendFromISR+0x6e>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <xQueueGenericSendFromISR+0x72>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericSendFromISR+0x74>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	61fb      	str	r3, [r7, #28]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a88:	f002 f8ea 	bl	8006c60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a8c:	f3ef 8211 	mrs	r2, BASEPRI
 8004a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	61ba      	str	r2, [r7, #24]
 8004aa2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <xQueueGenericSendFromISR+0xc2>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d12c      	bne.n	8004b14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aca:	f000 fa3a 	bl	8004f42 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ace:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d112      	bne.n	8004afe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d016      	beq.n	8004b0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	3324      	adds	r3, #36	@ 0x24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 f823 	bl	8005b30 <xTaskRemoveFromEventList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e007      	b.n	8004b0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004afe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b02:	3301      	adds	r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	b25a      	sxtb	r2, r3
 8004b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004b12:	e001      	b.n	8004b18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3738      	adds	r7, #56	@ 0x38
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08c      	sub	sp, #48	@ 0x30
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <xQueueReceive+0x32>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	623b      	str	r3, [r7, #32]
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <xQueueReceive+0x40>
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <xQueueReceive+0x44>
 8004b70:	2301      	movs	r3, #1
 8004b72:	e000      	b.n	8004b76 <xQueueReceive+0x46>
 8004b74:	2300      	movs	r3, #0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10b      	bne.n	8004b92 <xQueueReceive+0x62>
	__asm volatile
 8004b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7e:	f383 8811 	msr	BASEPRI, r3
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	f3bf 8f4f 	dsb	sy
 8004b8a:	61fb      	str	r3, [r7, #28]
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	e7fd      	b.n	8004b8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b92:	f001 f9a7 	bl	8005ee4 <xTaskGetSchedulerState>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <xQueueReceive+0x72>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueReceive+0x76>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueReceive+0x78>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xQueueReceive+0x94>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	61bb      	str	r3, [r7, #24]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bc4:	f001 ff8a 	bl	8006adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01f      	beq.n	8004c14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd8:	f000 fa1d 	bl	8005016 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	1e5a      	subs	r2, r3, #1
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00f      	beq.n	8004c0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	3310      	adds	r3, #16
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 ff9d 	bl	8005b30 <xTaskRemoveFromEventList>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf0 <xQueueReceive+0x1c0>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c0c:	f001 ff96 	bl	8006b3c <vPortExitCritical>
				return pdPASS;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e069      	b.n	8004ce8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c1a:	f001 ff8f 	bl	8006b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e062      	b.n	8004ce8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c28:	f107 0310 	add.w	r3, r7, #16
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ffe3 	bl	8005bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c36:	f001 ff81 	bl	8006b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c3a:	f000 fd49 	bl	80056d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c3e:	f001 ff4d 	bl	8006adc <vPortEnterCritical>
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c48:	b25b      	sxtb	r3, r3
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d103      	bne.n	8004c58 <xQueueReceive+0x128>
 8004c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c5e:	b25b      	sxtb	r3, r3
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d103      	bne.n	8004c6e <xQueueReceive+0x13e>
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c6e:	f001 ff65 	bl	8006b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c72:	1d3a      	adds	r2, r7, #4
 8004c74:	f107 0310 	add.w	r3, r7, #16
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 ffd2 	bl	8005c24 <xTaskCheckForTimeOut>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d123      	bne.n	8004cce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c88:	f000 fa3d 	bl	8005106 <prvIsQueueEmpty>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d017      	beq.n	8004cc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c94:	3324      	adds	r3, #36	@ 0x24
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fef6 	bl	8005a8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca2:	f000 f9de 	bl	8005062 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ca6:	f000 fd21 	bl	80056ec <xTaskResumeAll>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d189      	bne.n	8004bc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <xQueueReceive+0x1c0>)
 8004cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	e780      	b.n	8004bc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cc4:	f000 f9cd 	bl	8005062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cc8:	f000 fd10 	bl	80056ec <xTaskResumeAll>
 8004ccc:	e77a      	b.n	8004bc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd0:	f000 f9c7 	bl	8005062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cd4:	f000 fd0a 	bl	80056ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cda:	f000 fa14 	bl	8005106 <prvIsQueueEmpty>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f43f af6f 	beq.w	8004bc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ce6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3730      	adds	r7, #48	@ 0x30
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08e      	sub	sp, #56	@ 0x38
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	623b      	str	r3, [r7, #32]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00b      	beq.n	8004d48 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	61fb      	str	r3, [r7, #28]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d48:	f001 f8cc 	bl	8005ee4 <xTaskGetSchedulerState>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <xQueueSemaphoreTake+0x64>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <xQueueSemaphoreTake+0x68>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <xQueueSemaphoreTake+0x6a>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	61bb      	str	r3, [r7, #24]
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	e7fd      	b.n	8004d76 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d7a:	f001 feaf 	bl	8006adc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d82:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d024      	beq.n	8004dd4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d90:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004d9a:	f001 fa27 	bl	80061ec <pvTaskIncrementMutexHeldCount>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00f      	beq.n	8004dcc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	3310      	adds	r3, #16
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 febd 	bl	8005b30 <xTaskRemoveFromEventList>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dbc:	4b54      	ldr	r3, [pc, #336]	@ (8004f10 <xQueueSemaphoreTake+0x21c>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dcc:	f001 feb6 	bl	8006b3c <vPortExitCritical>
				return pdPASS;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e098      	b.n	8004f06 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d112      	bne.n	8004e00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	617b      	str	r3, [r7, #20]
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004df8:	f001 fea0 	bl	8006b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e082      	b.n	8004f06 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e06:	f107 030c 	add.w	r3, r7, #12
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fef4 	bl	8005bf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e14:	f001 fe92 	bl	8006b3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e18:	f000 fc5a 	bl	80056d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e1c:	f001 fe5e 	bl	8006adc <vPortEnterCritical>
 8004e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d103      	bne.n	8004e36 <xQueueSemaphoreTake+0x142>
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e3c:	b25b      	sxtb	r3, r3
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d103      	bne.n	8004e4c <xQueueSemaphoreTake+0x158>
 8004e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e4c:	f001 fe76 	bl	8006b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e50:	463a      	mov	r2, r7
 8004e52:	f107 030c 	add.w	r3, r7, #12
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fee3 	bl	8005c24 <xTaskCheckForTimeOut>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d132      	bne.n	8004eca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e66:	f000 f94e 	bl	8005106 <prvIsQueueEmpty>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d026      	beq.n	8004ebe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004e78:	f001 fe30 	bl	8006adc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 f84d 	bl	8005f20 <xTaskPriorityInherit>
 8004e86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004e88:	f001 fe58 	bl	8006b3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	3324      	adds	r3, #36	@ 0x24
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fdf9 	bl	8005a8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e9c:	f000 f8e1 	bl	8005062 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ea0:	f000 fc24 	bl	80056ec <xTaskResumeAll>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f47f af67 	bne.w	8004d7a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004eac:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <xQueueSemaphoreTake+0x21c>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	e75d      	b.n	8004d7a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ec0:	f000 f8cf 	bl	8005062 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec4:	f000 fc12 	bl	80056ec <xTaskResumeAll>
 8004ec8:	e757      	b.n	8004d7a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004eca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ecc:	f000 f8c9 	bl	8005062 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed0:	f000 fc0c 	bl	80056ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ed6:	f000 f916 	bl	8005106 <prvIsQueueEmpty>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f43f af4c 	beq.w	8004d7a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004ee8:	f001 fdf8 	bl	8006adc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004eec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004eee:	f000 f811 	bl	8004f14 <prvGetDisinheritPriorityAfterTimeout>
 8004ef2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 f8ee 	bl	80060dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f00:	f001 fe1c 	bl	8006b3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3738      	adds	r7, #56	@ 0x38
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	e000ed04 	.word	0xe000ed04

08004f14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e001      	b.n	8004f36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f36:	68fb      	ldr	r3, [r7, #12]
	}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10d      	bne.n	8004f7c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d14d      	bne.n	8005004 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f001 f845 	bl	8005ffc <xTaskPriorityDisinherit>
 8004f72:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	e043      	b.n	8005004 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d119      	bne.n	8004fb6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6898      	ldr	r0, [r3, #8]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	f002 fb4e 	bl	800762e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	441a      	add	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d32b      	bcc.n	8005004 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	e026      	b.n	8005004 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68d8      	ldr	r0, [r3, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	f002 fb34 	bl	800762e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	425b      	negs	r3, r3
 8004fd0:	441a      	add	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d207      	bcs.n	8004ff2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	425b      	negs	r3, r3
 8004fec:	441a      	add	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d105      	bne.n	8005004 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	3b01      	subs	r3, #1
 8005002:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800500c:	697b      	ldr	r3, [r7, #20]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d018      	beq.n	800505a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	441a      	add	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d303      	bcc.n	800504a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68d9      	ldr	r1, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	461a      	mov	r2, r3
 8005054:	6838      	ldr	r0, [r7, #0]
 8005056:	f002 faea 	bl	800762e <memcpy>
	}
}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800506a:	f001 fd37 	bl	8006adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005074:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005076:	e011      	b.n	800509c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	2b00      	cmp	r3, #0
 800507e:	d012      	beq.n	80050a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3324      	adds	r3, #36	@ 0x24
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fd53 	bl	8005b30 <xTaskRemoveFromEventList>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005090:	f000 fe2c 	bl	8005cec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	3b01      	subs	r3, #1
 8005098:	b2db      	uxtb	r3, r3
 800509a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800509c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dce9      	bgt.n	8005078 <prvUnlockQueue+0x16>
 80050a4:	e000      	b.n	80050a8 <prvUnlockQueue+0x46>
					break;
 80050a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	22ff      	movs	r2, #255	@ 0xff
 80050ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050b0:	f001 fd44 	bl	8006b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050b4:	f001 fd12 	bl	8006adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050c0:	e011      	b.n	80050e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d012      	beq.n	80050f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3310      	adds	r3, #16
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fd2e 	bl	8005b30 <xTaskRemoveFromEventList>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050da:	f000 fe07 	bl	8005cec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050de:	7bbb      	ldrb	r3, [r7, #14]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	dce9      	bgt.n	80050c2 <prvUnlockQueue+0x60>
 80050ee:	e000      	b.n	80050f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	22ff      	movs	r2, #255	@ 0xff
 80050f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80050fa:	f001 fd1f 	bl	8006b3c <vPortExitCritical>
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b084      	sub	sp, #16
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800510e:	f001 fce5 	bl	8006adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800511a:	2301      	movs	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e001      	b.n	8005124 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005124:	f001 fd0a 	bl	8006b3c <vPortExitCritical>

	return xReturn;
 8005128:	68fb      	ldr	r3, [r7, #12]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800513a:	f001 fccf 	bl	8006adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005146:	429a      	cmp	r2, r3
 8005148:	d102      	bne.n	8005150 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800514a:	2301      	movs	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	e001      	b.n	8005154 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005154:	f001 fcf2 	bl	8006b3c <vPortExitCritical>

	return xReturn;
 8005158:	68fb      	ldr	r3, [r7, #12]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e014      	b.n	800519e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005174:	4a0e      	ldr	r2, [pc, #56]	@ (80051b0 <vQueueAddToRegistry+0x4c>)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005180:	490b      	ldr	r1, [pc, #44]	@ (80051b0 <vQueueAddToRegistry+0x4c>)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800518a:	4a09      	ldr	r2, [pc, #36]	@ (80051b0 <vQueueAddToRegistry+0x4c>)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005196:	e006      	b.n	80051a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2b07      	cmp	r3, #7
 80051a2:	d9e7      	bls.n	8005174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr
 80051b0:	20000974 	.word	0x20000974

080051b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051c4:	f001 fc8a 	bl	8006adc <vPortEnterCritical>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051ce:	b25b      	sxtb	r3, r3
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d103      	bne.n	80051de <vQueueWaitForMessageRestricted+0x2a>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051e4:	b25b      	sxtb	r3, r3
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	d103      	bne.n	80051f4 <vQueueWaitForMessageRestricted+0x40>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051f4:	f001 fca2 	bl	8006b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	3324      	adds	r3, #36	@ 0x24
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fc65 	bl	8005ad8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800520e:	6978      	ldr	r0, [r7, #20]
 8005210:	f7ff ff27 	bl	8005062 <prvUnlockQueue>
	}
 8005214:	bf00      	nop
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08e      	sub	sp, #56	@ 0x38
 8005220:	af04      	add	r7, sp, #16
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800522a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	623b      	str	r3, [r7, #32]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <xTaskCreateStatic+0x4a>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	61fb      	str	r3, [r7, #28]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005266:	23a8      	movs	r3, #168	@ 0xa8
 8005268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2ba8      	cmp	r3, #168	@ 0xa8
 800526e:	d00b      	beq.n	8005288 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01e      	beq.n	80052cc <xTaskCreateStatic+0xb0>
 800528e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	2202      	movs	r2, #2
 80052a2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052a6:	2300      	movs	r3, #0
 80052a8:	9303      	str	r3, [sp, #12]
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	9302      	str	r3, [sp, #8]
 80052ae:	f107 0314 	add.w	r3, r7, #20
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f850 	bl	8005364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052c6:	f000 f8ed 	bl	80054a4 <prvAddNewTaskToReadyList>
 80052ca:	e001      	b.n	80052d0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052d0:	697b      	ldr	r3, [r7, #20]
	}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3728      	adds	r7, #40	@ 0x28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b08c      	sub	sp, #48	@ 0x30
 80052de:	af04      	add	r7, sp, #16
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 fcf6 	bl	8006ce0 <pvPortMalloc>
 80052f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00e      	beq.n	800531a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052fc:	20a8      	movs	r0, #168	@ 0xa8
 80052fe:	f001 fcef 	bl	8006ce0 <pvPortMalloc>
 8005302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005310:	e005      	b.n	800531e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f001 fdac 	bl	8006e70 <vPortFree>
 8005318:	e001      	b.n	800531e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d017      	beq.n	8005354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800532c:	88fa      	ldrh	r2, [r7, #6]
 800532e:	2300      	movs	r3, #0
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f80e 	bl	8005364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005348:	69f8      	ldr	r0, [r7, #28]
 800534a:	f000 f8ab 	bl	80054a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800534e:	2301      	movs	r3, #1
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e002      	b.n	800535a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800535a:	69bb      	ldr	r3, [r7, #24]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	461a      	mov	r2, r3
 800537c:	21a5      	movs	r1, #165	@ 0xa5
 800537e:	f002 f885 	bl	800748c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800538c:	3b01      	subs	r3, #1
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f023 0307 	bic.w	r3, r3, #7
 800539a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	617b      	str	r3, [r7, #20]
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	e7fd      	b.n	80053ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	e012      	b.n	80053ea <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	7819      	ldrb	r1, [r3, #0]
 80053cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	3334      	adds	r3, #52	@ 0x34
 80053d4:	460a      	mov	r2, r1
 80053d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d006      	beq.n	80053f2 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	2b0f      	cmp	r3, #15
 80053ee:	d9e9      	bls.n	80053c4 <prvInitialiseNewTask+0x60>
 80053f0:	e000      	b.n	80053f4 <prvInitialiseNewTask+0x90>
		{
			break;
 80053f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	2b37      	cmp	r3, #55	@ 0x37
 8005400:	d901      	bls.n	8005406 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005402:	2337      	movs	r3, #55	@ 0x37
 8005404:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800540a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800540c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005410:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	2200      	movs	r2, #0
 8005416:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541a:	3304      	adds	r3, #4
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe ff56 	bl	80042ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	3318      	adds	r3, #24
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe ff51 	bl	80042ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005430:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800543c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	2200      	movs	r2, #0
 8005446:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	2200      	movs	r2, #0
 800544e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	3354      	adds	r3, #84	@ 0x54
 8005456:	224c      	movs	r2, #76	@ 0x4c
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f002 f816 	bl	800748c <memset>
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	4a0d      	ldr	r2, [pc, #52]	@ (8005498 <prvInitialiseNewTask+0x134>)
 8005464:	659a      	str	r2, [r3, #88]	@ 0x58
 8005466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005468:	4a0c      	ldr	r2, [pc, #48]	@ (800549c <prvInitialiseNewTask+0x138>)
 800546a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	4a0c      	ldr	r2, [pc, #48]	@ (80054a0 <prvInitialiseNewTask+0x13c>)
 8005470:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	68f9      	ldr	r1, [r7, #12]
 8005476:	69b8      	ldr	r0, [r7, #24]
 8005478:	f001 fa40 	bl	80068fc <pxPortInitialiseStack>
 800547c:	4602      	mov	r2, r0
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800548e:	bf00      	nop
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20001c00 	.word	0x20001c00
 800549c:	20001c68 	.word	0x20001c68
 80054a0:	20001cd0 	.word	0x20001cd0

080054a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054ac:	f001 fb16 	bl	8006adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005568 <prvAddNewTaskToReadyList+0xc4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005568 <prvAddNewTaskToReadyList+0xc4>)
 80054b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80054ba:	4b2c      	ldr	r3, [pc, #176]	@ (800556c <prvAddNewTaskToReadyList+0xc8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054c2:	4a2a      	ldr	r2, [pc, #168]	@ (800556c <prvAddNewTaskToReadyList+0xc8>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054c8:	4b27      	ldr	r3, [pc, #156]	@ (8005568 <prvAddNewTaskToReadyList+0xc4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d110      	bne.n	80054f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054d0:	f000 fc32 	bl	8005d38 <prvInitialiseTaskLists>
 80054d4:	e00d      	b.n	80054f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054d6:	4b26      	ldr	r3, [pc, #152]	@ (8005570 <prvAddNewTaskToReadyList+0xcc>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054de:	4b23      	ldr	r3, [pc, #140]	@ (800556c <prvAddNewTaskToReadyList+0xc8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d802      	bhi.n	80054f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054ec:	4a1f      	ldr	r2, [pc, #124]	@ (800556c <prvAddNewTaskToReadyList+0xc8>)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054f2:	4b20      	ldr	r3, [pc, #128]	@ (8005574 <prvAddNewTaskToReadyList+0xd0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3301      	adds	r3, #1
 80054f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005574 <prvAddNewTaskToReadyList+0xd0>)
 80054fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005574 <prvAddNewTaskToReadyList+0xd0>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	4b1b      	ldr	r3, [pc, #108]	@ (8005578 <prvAddNewTaskToReadyList+0xd4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d903      	bls.n	8005518 <prvAddNewTaskToReadyList+0x74>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	4a18      	ldr	r2, [pc, #96]	@ (8005578 <prvAddNewTaskToReadyList+0xd4>)
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4a15      	ldr	r2, [pc, #84]	@ (800557c <prvAddNewTaskToReadyList+0xd8>)
 8005526:	441a      	add	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f7fe fed9 	bl	80042e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005534:	f001 fb02 	bl	8006b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005538:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <prvAddNewTaskToReadyList+0xcc>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005540:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <prvAddNewTaskToReadyList+0xc8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	429a      	cmp	r2, r3
 800554c:	d207      	bcs.n	800555e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800554e:	4b0c      	ldr	r3, [pc, #48]	@ (8005580 <prvAddNewTaskToReadyList+0xdc>)
 8005550:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000e88 	.word	0x20000e88
 800556c:	200009b4 	.word	0x200009b4
 8005570:	20000e94 	.word	0x20000e94
 8005574:	20000ea4 	.word	0x20000ea4
 8005578:	20000e90 	.word	0x20000e90
 800557c:	200009b8 	.word	0x200009b8
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d018      	beq.n	80055c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005596:	4b14      	ldr	r3, [pc, #80]	@ (80055e8 <vTaskDelay+0x64>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <vTaskDelay+0x32>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60bb      	str	r3, [r7, #8]
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055b6:	f000 f88b 	bl	80056d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055ba:	2100      	movs	r1, #0
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fe29 	bl	8006214 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055c2:	f000 f893 	bl	80056ec <xTaskResumeAll>
 80055c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80055ce:	4b07      	ldr	r3, [pc, #28]	@ (80055ec <vTaskDelay+0x68>)
 80055d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000eb0 	.word	0x20000eb0
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	@ 0x28
 80055f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055fe:	463a      	mov	r2, r7
 8005600:	1d39      	adds	r1, r7, #4
 8005602:	f107 0308 	add.w	r3, r7, #8
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fe10 	bl	800422c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	9202      	str	r2, [sp, #8]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	2300      	movs	r3, #0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	460a      	mov	r2, r1
 800561e:	4924      	ldr	r1, [pc, #144]	@ (80056b0 <vTaskStartScheduler+0xc0>)
 8005620:	4824      	ldr	r0, [pc, #144]	@ (80056b4 <vTaskStartScheduler+0xc4>)
 8005622:	f7ff fdfb 	bl	800521c <xTaskCreateStatic>
 8005626:	4603      	mov	r3, r0
 8005628:	4a23      	ldr	r2, [pc, #140]	@ (80056b8 <vTaskStartScheduler+0xc8>)
 800562a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800562c:	4b22      	ldr	r3, [pc, #136]	@ (80056b8 <vTaskStartScheduler+0xc8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005634:	2301      	movs	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e001      	b.n	800563e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d102      	bne.n	800564a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005644:	f000 fe3a 	bl	80062bc <xTimerCreateTimerTask>
 8005648:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d11b      	bne.n	8005688 <vTaskStartScheduler+0x98>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	613b      	str	r3, [r7, #16]
}
 8005662:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005664:	4b15      	ldr	r3, [pc, #84]	@ (80056bc <vTaskStartScheduler+0xcc>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3354      	adds	r3, #84	@ 0x54
 800566a:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <vTaskStartScheduler+0xd0>)
 800566c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800566e:	4b15      	ldr	r3, [pc, #84]	@ (80056c4 <vTaskStartScheduler+0xd4>)
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005676:	4b14      	ldr	r3, [pc, #80]	@ (80056c8 <vTaskStartScheduler+0xd8>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800567c:	4b13      	ldr	r3, [pc, #76]	@ (80056cc <vTaskStartScheduler+0xdc>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005682:	f001 f9b9 	bl	80069f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005686:	e00f      	b.n	80056a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568e:	d10b      	bne.n	80056a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	e7fd      	b.n	80056a4 <vTaskStartScheduler+0xb4>
}
 80056a8:	bf00      	nop
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	08007b0c 	.word	0x08007b0c
 80056b4:	08005d05 	.word	0x08005d05
 80056b8:	20000eac 	.word	0x20000eac
 80056bc:	200009b4 	.word	0x200009b4
 80056c0:	2000001c 	.word	0x2000001c
 80056c4:	20000ea8 	.word	0x20000ea8
 80056c8:	20000e94 	.word	0x20000e94
 80056cc:	20000e8c 	.word	0x20000e8c

080056d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80056d4:	4b04      	ldr	r3, [pc, #16]	@ (80056e8 <vTaskSuspendAll+0x18>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3301      	adds	r3, #1
 80056da:	4a03      	ldr	r2, [pc, #12]	@ (80056e8 <vTaskSuspendAll+0x18>)
 80056dc:	6013      	str	r3, [r2, #0]
}
 80056de:	bf00      	nop
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000eb0 	.word	0x20000eb0

080056ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056fa:	4b42      	ldr	r3, [pc, #264]	@ (8005804 <xTaskResumeAll+0x118>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10b      	bne.n	800571a <xTaskResumeAll+0x2e>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	603b      	str	r3, [r7, #0]
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	e7fd      	b.n	8005716 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800571a:	f001 f9df 	bl	8006adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800571e:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <xTaskResumeAll+0x118>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3b01      	subs	r3, #1
 8005724:	4a37      	ldr	r2, [pc, #220]	@ (8005804 <xTaskResumeAll+0x118>)
 8005726:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005728:	4b36      	ldr	r3, [pc, #216]	@ (8005804 <xTaskResumeAll+0x118>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d162      	bne.n	80057f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005730:	4b35      	ldr	r3, [pc, #212]	@ (8005808 <xTaskResumeAll+0x11c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d05e      	beq.n	80057f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005738:	e02f      	b.n	800579a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800573a:	4b34      	ldr	r3, [pc, #208]	@ (800580c <xTaskResumeAll+0x120>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3318      	adds	r3, #24
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fe28 	bl	800439c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3304      	adds	r3, #4
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fe23 	bl	800439c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575a:	4b2d      	ldr	r3, [pc, #180]	@ (8005810 <xTaskResumeAll+0x124>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d903      	bls.n	800576a <xTaskResumeAll+0x7e>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	4a2a      	ldr	r2, [pc, #168]	@ (8005810 <xTaskResumeAll+0x124>)
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4a27      	ldr	r2, [pc, #156]	@ (8005814 <xTaskResumeAll+0x128>)
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fe fdb0 	bl	80042e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800578a:	4b23      	ldr	r3, [pc, #140]	@ (8005818 <xTaskResumeAll+0x12c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005790:	429a      	cmp	r2, r3
 8005792:	d302      	bcc.n	800579a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005794:	4b21      	ldr	r3, [pc, #132]	@ (800581c <xTaskResumeAll+0x130>)
 8005796:	2201      	movs	r2, #1
 8005798:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800579a:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <xTaskResumeAll+0x120>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1cb      	bne.n	800573a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057a8:	f000 fb6a 	bl	8005e80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <xTaskResumeAll+0x134>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057b8:	f000 f844 	bl	8005844 <xTaskIncrementTick>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80057c2:	4b16      	ldr	r3, [pc, #88]	@ (800581c <xTaskResumeAll+0x130>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f1      	bne.n	80057b8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80057d4:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <xTaskResumeAll+0x134>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80057da:	4b10      	ldr	r3, [pc, #64]	@ (800581c <xTaskResumeAll+0x130>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057e2:	2301      	movs	r3, #1
 80057e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <xTaskResumeAll+0x138>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057f6:	f001 f9a1 	bl	8006b3c <vPortExitCritical>

	return xAlreadyYielded;
 80057fa:	68bb      	ldr	r3, [r7, #8]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000eb0 	.word	0x20000eb0
 8005808:	20000e88 	.word	0x20000e88
 800580c:	20000e48 	.word	0x20000e48
 8005810:	20000e90 	.word	0x20000e90
 8005814:	200009b8 	.word	0x200009b8
 8005818:	200009b4 	.word	0x200009b4
 800581c:	20000e9c 	.word	0x20000e9c
 8005820:	20000e98 	.word	0x20000e98
 8005824:	e000ed04 	.word	0xe000ed04

08005828 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800582e:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <xTaskGetTickCount+0x18>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005834:	687b      	ldr	r3, [r7, #4]
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr
 8005840:	20000e8c 	.word	0x20000e8c

08005844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584e:	4b52      	ldr	r3, [pc, #328]	@ (8005998 <xTaskIncrementTick+0x154>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	f040 808f 	bne.w	8005976 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005858:	4b50      	ldr	r3, [pc, #320]	@ (800599c <xTaskIncrementTick+0x158>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005860:	4a4e      	ldr	r2, [pc, #312]	@ (800599c <xTaskIncrementTick+0x158>)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d121      	bne.n	80058b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800586c:	4b4c      	ldr	r3, [pc, #304]	@ (80059a0 <xTaskIncrementTick+0x15c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	603b      	str	r3, [r7, #0]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <xTaskIncrementTick+0x46>
 800588e:	4b44      	ldr	r3, [pc, #272]	@ (80059a0 <xTaskIncrementTick+0x15c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	4b43      	ldr	r3, [pc, #268]	@ (80059a4 <xTaskIncrementTick+0x160>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a41      	ldr	r2, [pc, #260]	@ (80059a0 <xTaskIncrementTick+0x15c>)
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4a41      	ldr	r2, [pc, #260]	@ (80059a4 <xTaskIncrementTick+0x160>)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <xTaskIncrementTick+0x164>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	4a3f      	ldr	r2, [pc, #252]	@ (80059a8 <xTaskIncrementTick+0x164>)
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	f000 fae8 	bl	8005e80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058b0:	4b3e      	ldr	r3, [pc, #248]	@ (80059ac <xTaskIncrementTick+0x168>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d34e      	bcc.n	8005958 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ba:	4b39      	ldr	r3, [pc, #228]	@ (80059a0 <xTaskIncrementTick+0x15c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <xTaskIncrementTick+0x84>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <xTaskIncrementTick+0x86>
 80058c8:	2300      	movs	r3, #0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ce:	4b37      	ldr	r3, [pc, #220]	@ (80059ac <xTaskIncrementTick+0x168>)
 80058d0:	f04f 32ff 	mov.w	r2, #4294967295
 80058d4:	601a      	str	r2, [r3, #0]
					break;
 80058d6:	e03f      	b.n	8005958 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058d8:	4b31      	ldr	r3, [pc, #196]	@ (80059a0 <xTaskIncrementTick+0x15c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d203      	bcs.n	80058f8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058f0:	4a2e      	ldr	r2, [pc, #184]	@ (80059ac <xTaskIncrementTick+0x168>)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6013      	str	r3, [r2, #0]
						break;
 80058f6:	e02f      	b.n	8005958 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fd4d 	bl	800439c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3318      	adds	r3, #24
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fd44 	bl	800439c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005918:	4b25      	ldr	r3, [pc, #148]	@ (80059b0 <xTaskIncrementTick+0x16c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d903      	bls.n	8005928 <xTaskIncrementTick+0xe4>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	4a22      	ldr	r2, [pc, #136]	@ (80059b0 <xTaskIncrementTick+0x16c>)
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <xTaskIncrementTick+0x170>)
 8005936:	441a      	add	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f7fe fcd1 	bl	80042e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005948:	4b1b      	ldr	r3, [pc, #108]	@ (80059b8 <xTaskIncrementTick+0x174>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	429a      	cmp	r2, r3
 8005950:	d3b3      	bcc.n	80058ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005952:	2301      	movs	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005956:	e7b0      	b.n	80058ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005958:	4b17      	ldr	r3, [pc, #92]	@ (80059b8 <xTaskIncrementTick+0x174>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4915      	ldr	r1, [pc, #84]	@ (80059b4 <xTaskIncrementTick+0x170>)
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d907      	bls.n	8005980 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005970:	2301      	movs	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	e004      	b.n	8005980 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005976:	4b11      	ldr	r3, [pc, #68]	@ (80059bc <xTaskIncrementTick+0x178>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	4a0f      	ldr	r2, [pc, #60]	@ (80059bc <xTaskIncrementTick+0x178>)
 800597e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005980:	4b0f      	ldr	r3, [pc, #60]	@ (80059c0 <xTaskIncrementTick+0x17c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800598c:	697b      	ldr	r3, [r7, #20]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000eb0 	.word	0x20000eb0
 800599c:	20000e8c 	.word	0x20000e8c
 80059a0:	20000e40 	.word	0x20000e40
 80059a4:	20000e44 	.word	0x20000e44
 80059a8:	20000ea0 	.word	0x20000ea0
 80059ac:	20000ea8 	.word	0x20000ea8
 80059b0:	20000e90 	.word	0x20000e90
 80059b4:	200009b8 	.word	0x200009b8
 80059b8:	200009b4 	.word	0x200009b4
 80059bc:	20000e98 	.word	0x20000e98
 80059c0:	20000e9c 	.word	0x20000e9c

080059c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005a74 <vTaskSwitchContext+0xb0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059d2:	4b29      	ldr	r3, [pc, #164]	@ (8005a78 <vTaskSwitchContext+0xb4>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059d8:	e047      	b.n	8005a6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80059da:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <vTaskSwitchContext+0xb4>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80059e0:	4b26      	ldr	r3, [pc, #152]	@ (8005a7c <vTaskSwitchContext+0xb8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e011      	b.n	8005a0c <vTaskSwitchContext+0x48>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <vTaskSwitchContext+0x42>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <vTaskSwitchContext+0x3e>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	491c      	ldr	r1, [pc, #112]	@ (8005a80 <vTaskSwitchContext+0xbc>)
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0e3      	beq.n	80059e8 <vTaskSwitchContext+0x24>
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <vTaskSwitchContext+0xbc>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	3308      	adds	r3, #8
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d104      	bne.n	8005a50 <vTaskSwitchContext+0x8c>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	605a      	str	r2, [r3, #4]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4a0b      	ldr	r2, [pc, #44]	@ (8005a84 <vTaskSwitchContext+0xc0>)
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4a08      	ldr	r2, [pc, #32]	@ (8005a7c <vTaskSwitchContext+0xb8>)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a60:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <vTaskSwitchContext+0xc0>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3354      	adds	r3, #84	@ 0x54
 8005a66:	4a08      	ldr	r2, [pc, #32]	@ (8005a88 <vTaskSwitchContext+0xc4>)
 8005a68:	6013      	str	r3, [r2, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr
 8005a74:	20000eb0 	.word	0x20000eb0
 8005a78:	20000e9c 	.word	0x20000e9c
 8005a7c:	20000e90 	.word	0x20000e90
 8005a80:	200009b8 	.word	0x200009b8
 8005a84:	200009b4 	.word	0x200009b4
 8005a88:	2000001c 	.word	0x2000001c

08005a8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	60fb      	str	r3, [r7, #12]
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ab4:	4b07      	ldr	r3, [pc, #28]	@ (8005ad4 <vTaskPlaceOnEventList+0x48>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fe fc35 	bl	800432c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	6838      	ldr	r0, [r7, #0]
 8005ac6:	f000 fba5 	bl	8006214 <prvAddCurrentTaskToDelayedList>
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200009b4 	.word	0x200009b4

08005ad8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10b      	bne.n	8005b02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aee:	f383 8811 	msr	BASEPRI, r3
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	617b      	str	r3, [r7, #20]
}
 8005afc:	bf00      	nop
 8005afe:	bf00      	nop
 8005b00:	e7fd      	b.n	8005afe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b02:	4b0a      	ldr	r3, [pc, #40]	@ (8005b2c <vTaskPlaceOnEventListRestricted+0x54>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4619      	mov	r1, r3
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f7fe fbeb 	bl	80042e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	68b8      	ldr	r0, [r7, #8]
 8005b20:	f000 fb78 	bl	8006214 <prvAddCurrentTaskToDelayedList>
	}
 8005b24:	bf00      	nop
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	200009b4 	.word	0x200009b4

08005b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60fb      	str	r3, [r7, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3318      	adds	r3, #24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fc1a 	bl	800439c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b68:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <xTaskRemoveFromEventList+0xb0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11d      	bne.n	8005bac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe fc11 	bl	800439c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7e:	4b19      	ldr	r3, [pc, #100]	@ (8005be4 <xTaskRemoveFromEventList+0xb4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d903      	bls.n	8005b8e <xTaskRemoveFromEventList+0x5e>
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	4a16      	ldr	r2, [pc, #88]	@ (8005be4 <xTaskRemoveFromEventList+0xb4>)
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b92:	4613      	mov	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4a13      	ldr	r2, [pc, #76]	@ (8005be8 <xTaskRemoveFromEventList+0xb8>)
 8005b9c:	441a      	add	r2, r3
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	f7fe fb9e 	bl	80042e6 <vListInsertEnd>
 8005baa:	e005      	b.n	8005bb8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3318      	adds	r3, #24
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	480e      	ldr	r0, [pc, #56]	@ (8005bec <xTaskRemoveFromEventList+0xbc>)
 8005bb4:	f7fe fb97 	bl	80042e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <xTaskRemoveFromEventList+0xc0>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d905      	bls.n	8005bd2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bca:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf4 <xTaskRemoveFromEventList+0xc4>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e001      	b.n	8005bd6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005bd6:	697b      	ldr	r3, [r7, #20]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000eb0 	.word	0x20000eb0
 8005be4:	20000e90 	.word	0x20000e90
 8005be8:	200009b8 	.word	0x200009b8
 8005bec:	20000e48 	.word	0x20000e48
 8005bf0:	200009b4 	.word	0x200009b4
 8005bf4:	20000e9c 	.word	0x20000e9c

08005bf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <vTaskInternalSetTimeOutState+0x24>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c08:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <vTaskInternalSetTimeOutState+0x28>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000ea0 	.word	0x20000ea0
 8005c20:	20000e8c 	.word	0x20000e8c

08005c24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10b      	bne.n	8005c4c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	613b      	str	r3, [r7, #16]
}
 8005c46:	bf00      	nop
 8005c48:	bf00      	nop
 8005c4a:	e7fd      	b.n	8005c48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10b      	bne.n	8005c6a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60fb      	str	r3, [r7, #12]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005c6a:	f000 ff37 	bl	8006adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce4 <xTaskCheckForTimeOut+0xc0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d102      	bne.n	8005c8e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	e023      	b.n	8005cd6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4b15      	ldr	r3, [pc, #84]	@ (8005ce8 <xTaskCheckForTimeOut+0xc4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d007      	beq.n	8005caa <xTaskCheckForTimeOut+0x86>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	e015      	b.n	8005cd6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d20b      	bcs.n	8005ccc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	1ad2      	subs	r2, r2, r3
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ff99 	bl	8005bf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	e004      	b.n	8005cd6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cd6:	f000 ff31 	bl	8006b3c <vPortExitCritical>

	return xReturn;
 8005cda:	69fb      	ldr	r3, [r7, #28]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000e8c 	.word	0x20000e8c
 8005ce8:	20000ea0 	.word	0x20000ea0

08005cec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	@ (8005d00 <vTaskMissedYield+0x14>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000e9c 	.word	0x20000e9c

08005d04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d0c:	f000 f854 	bl	8005db8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d10:	4b07      	ldr	r3, [pc, #28]	@ (8005d30 <prvIdleTask+0x2c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d907      	bls.n	8005d28 <prvIdleTask+0x24>
			{
				taskYIELD();
 8005d18:	4b06      	ldr	r3, [pc, #24]	@ (8005d34 <prvIdleTask+0x30>)
 8005d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8005d28:	f7fa fba2 	bl	8000470 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005d2c:	e7ee      	b.n	8005d0c <prvIdleTask+0x8>
 8005d2e:	bf00      	nop
 8005d30:	200009b8 	.word	0x200009b8
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d3e:	2300      	movs	r3, #0
 8005d40:	607b      	str	r3, [r7, #4]
 8005d42:	e00c      	b.n	8005d5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4a12      	ldr	r2, [pc, #72]	@ (8005d98 <prvInitialiseTaskLists+0x60>)
 8005d50:	4413      	add	r3, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fa9c 	bl	8004290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b37      	cmp	r3, #55	@ 0x37
 8005d62:	d9ef      	bls.n	8005d44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d64:	480d      	ldr	r0, [pc, #52]	@ (8005d9c <prvInitialiseTaskLists+0x64>)
 8005d66:	f7fe fa93 	bl	8004290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d6a:	480d      	ldr	r0, [pc, #52]	@ (8005da0 <prvInitialiseTaskLists+0x68>)
 8005d6c:	f7fe fa90 	bl	8004290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d70:	480c      	ldr	r0, [pc, #48]	@ (8005da4 <prvInitialiseTaskLists+0x6c>)
 8005d72:	f7fe fa8d 	bl	8004290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d76:	480c      	ldr	r0, [pc, #48]	@ (8005da8 <prvInitialiseTaskLists+0x70>)
 8005d78:	f7fe fa8a 	bl	8004290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d7c:	480b      	ldr	r0, [pc, #44]	@ (8005dac <prvInitialiseTaskLists+0x74>)
 8005d7e:	f7fe fa87 	bl	8004290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d82:	4b0b      	ldr	r3, [pc, #44]	@ (8005db0 <prvInitialiseTaskLists+0x78>)
 8005d84:	4a05      	ldr	r2, [pc, #20]	@ (8005d9c <prvInitialiseTaskLists+0x64>)
 8005d86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d88:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <prvInitialiseTaskLists+0x7c>)
 8005d8a:	4a05      	ldr	r2, [pc, #20]	@ (8005da0 <prvInitialiseTaskLists+0x68>)
 8005d8c:	601a      	str	r2, [r3, #0]
}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200009b8 	.word	0x200009b8
 8005d9c:	20000e18 	.word	0x20000e18
 8005da0:	20000e2c 	.word	0x20000e2c
 8005da4:	20000e48 	.word	0x20000e48
 8005da8:	20000e5c 	.word	0x20000e5c
 8005dac:	20000e74 	.word	0x20000e74
 8005db0:	20000e40 	.word	0x20000e40
 8005db4:	20000e44 	.word	0x20000e44

08005db8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dbe:	e019      	b.n	8005df4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dc0:	f000 fe8c 	bl	8006adc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005dc4:	4b10      	ldr	r3, [pc, #64]	@ (8005e08 <prvCheckTasksWaitingTermination+0x50>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe fae3 	bl	800439c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <prvCheckTasksWaitingTermination+0x54>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8005e0c <prvCheckTasksWaitingTermination+0x54>)
 8005dde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005de0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <prvCheckTasksWaitingTermination+0x58>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e10 <prvCheckTasksWaitingTermination+0x58>)
 8005de8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dea:	f000 fea7 	bl	8006b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f810 	bl	8005e14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005df4:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <prvCheckTasksWaitingTermination+0x58>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e1      	bne.n	8005dc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000e5c 	.word	0x20000e5c
 8005e0c:	20000e88 	.word	0x20000e88
 8005e10:	20000e70 	.word	0x20000e70

08005e14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3354      	adds	r3, #84	@ 0x54
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 fb4b 	bl	80074bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d108      	bne.n	8005e42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 f81b 	bl	8006e70 <vPortFree>
				vPortFree( pxTCB );
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 f818 	bl	8006e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e40:	e019      	b.n	8005e76 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d103      	bne.n	8005e54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 f80f 	bl	8006e70 <vPortFree>
	}
 8005e52:	e010      	b.n	8005e76 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d00b      	beq.n	8005e76 <prvDeleteTCB+0x62>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	60fb      	str	r3, [r7, #12]
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	e7fd      	b.n	8005e72 <prvDeleteTCB+0x5e>
	}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e86:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec0 <prvResetNextTaskUnblockTime+0x40>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <prvResetNextTaskUnblockTime+0x14>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <prvResetNextTaskUnblockTime+0x16>
 8005e94:	2300      	movs	r3, #0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d004      	beq.n	8005ea4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <prvResetNextTaskUnblockTime+0x44>)
 8005e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ea2:	e008      	b.n	8005eb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ea4:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <prvResetNextTaskUnblockTime+0x40>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4a04      	ldr	r2, [pc, #16]	@ (8005ec4 <prvResetNextTaskUnblockTime+0x44>)
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	20000e40 	.word	0x20000e40
 8005ec4:	20000ea8 	.word	0x20000ea8

08005ec8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005ece:	4b04      	ldr	r3, [pc, #16]	@ (8005ee0 <xTaskGetCurrentTaskHandle+0x18>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005ed4:	687b      	ldr	r3, [r7, #4]
	}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bc80      	pop	{r7}
 8005ede:	4770      	bx	lr
 8005ee0:	200009b4 	.word	0x200009b4

08005ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005eea:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <xTaskGetSchedulerState+0x34>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	607b      	str	r3, [r7, #4]
 8005ef6:	e008      	b.n	8005f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef8:	4b08      	ldr	r3, [pc, #32]	@ (8005f1c <xTaskGetSchedulerState+0x38>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f00:	2302      	movs	r3, #2
 8005f02:	607b      	str	r3, [r7, #4]
 8005f04:	e001      	b.n	8005f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f06:	2300      	movs	r3, #0
 8005f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f0a:	687b      	ldr	r3, [r7, #4]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000e94 	.word	0x20000e94
 8005f1c:	20000eb0 	.word	0x20000eb0

08005f20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d056      	beq.n	8005fe4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff0 <xTaskPriorityInherit+0xd0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d246      	bcs.n	8005fd2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	db06      	blt.n	8005f5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ff0 <xTaskPriorityInherit+0xd0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	6959      	ldr	r1, [r3, #20]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4a22      	ldr	r2, [pc, #136]	@ (8005ff4 <xTaskPriorityInherit+0xd4>)
 8005f6c:	4413      	add	r3, r2
 8005f6e:	4299      	cmp	r1, r3
 8005f70:	d101      	bne.n	8005f76 <xTaskPriorityInherit+0x56>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <xTaskPriorityInherit+0x58>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d022      	beq.n	8005fc2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe fa0b 	bl	800439c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f86:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <xTaskPriorityInherit+0xd0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f94:	4b18      	ldr	r3, [pc, #96]	@ (8005ff8 <xTaskPriorityInherit+0xd8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d903      	bls.n	8005fa4 <xTaskPriorityInherit+0x84>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <xTaskPriorityInherit+0xd8>)
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4a10      	ldr	r2, [pc, #64]	@ (8005ff4 <xTaskPriorityInherit+0xd4>)
 8005fb2:	441a      	add	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f7fe f993 	bl	80042e6 <vListInsertEnd>
 8005fc0:	e004      	b.n	8005fcc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <xTaskPriorityInherit+0xd0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e008      	b.n	8005fe4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fd6:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <xTaskPriorityInherit+0xd0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d201      	bcs.n	8005fe4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
	}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	200009b4 	.word	0x200009b4
 8005ff4:	200009b8 	.word	0x200009b8
 8005ff8:	20000e90 	.word	0x20000e90

08005ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d058      	beq.n	80060c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006012:	4b2f      	ldr	r3, [pc, #188]	@ (80060d0 <xTaskPriorityDisinherit+0xd4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	429a      	cmp	r2, r3
 800601a:	d00b      	beq.n	8006034 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	60fb      	str	r3, [r7, #12]
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	e7fd      	b.n	8006030 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60bb      	str	r3, [r7, #8]
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006058:	1e5a      	subs	r2, r3, #1
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006066:	429a      	cmp	r2, r3
 8006068:	d02c      	beq.n	80060c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606e:	2b00      	cmp	r3, #0
 8006070:	d128      	bne.n	80060c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3304      	adds	r3, #4
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe f990 	bl	800439c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006094:	4b0f      	ldr	r3, [pc, #60]	@ (80060d4 <xTaskPriorityDisinherit+0xd8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d903      	bls.n	80060a4 <xTaskPriorityDisinherit+0xa8>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a0:	4a0c      	ldr	r2, [pc, #48]	@ (80060d4 <xTaskPriorityDisinherit+0xd8>)
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4a09      	ldr	r2, [pc, #36]	@ (80060d8 <xTaskPriorityDisinherit+0xdc>)
 80060b2:	441a      	add	r2, r3
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	3304      	adds	r3, #4
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7fe f913 	bl	80042e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060c0:	2301      	movs	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060c4:	697b      	ldr	r3, [r7, #20]
	}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200009b4 	.word	0x200009b4
 80060d4:	20000e90 	.word	0x20000e90
 80060d8:	200009b8 	.word	0x200009b8

080060dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060ea:	2301      	movs	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d071      	beq.n	80061d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10b      	bne.n	8006114 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d902      	bls.n	8006124 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	e002      	b.n	800612a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006128:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	429a      	cmp	r2, r3
 8006132:	d051      	beq.n	80061d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	429a      	cmp	r2, r3
 800613c:	d14c      	bne.n	80061d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800613e:	4b28      	ldr	r3, [pc, #160]	@ (80061e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	429a      	cmp	r2, r3
 8006146:	d10b      	bne.n	8006160 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	60bb      	str	r3, [r7, #8]
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006164:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	db04      	blt.n	800617e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	6959      	ldr	r1, [r3, #20]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4a15      	ldr	r2, [pc, #84]	@ (80061e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800618e:	4413      	add	r3, r2
 8006190:	4299      	cmp	r1, r3
 8006192:	d101      	bne.n	8006198 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8006198:	2300      	movs	r3, #0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01c      	beq.n	80061d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe f8fa 	bl	800439c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ac:	4b0e      	ldr	r3, [pc, #56]	@ (80061e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d903      	bls.n	80061bc <vTaskPriorityDisinheritAfterTimeout+0xe0>
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	4a0b      	ldr	r2, [pc, #44]	@ (80061e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4a06      	ldr	r2, [pc, #24]	@ (80061e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80061ca:	441a      	add	r2, r3
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4619      	mov	r1, r3
 80061d2:	4610      	mov	r0, r2
 80061d4:	f7fe f887 	bl	80042e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061d8:	bf00      	nop
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	200009b4 	.word	0x200009b4
 80061e4:	200009b8 	.word	0x200009b8
 80061e8:	20000e90 	.word	0x20000e90

080061ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80061f0:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <pvTaskIncrementMutexHeldCount+0x24>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80061f8:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <pvTaskIncrementMutexHeldCount+0x24>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061fe:	3201      	adds	r2, #1
 8006200:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006202:	4b03      	ldr	r3, [pc, #12]	@ (8006210 <pvTaskIncrementMutexHeldCount+0x24>)
 8006204:	681b      	ldr	r3, [r3, #0]
	}
 8006206:	4618      	mov	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	200009b4 	.word	0x200009b4

08006214 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800621e:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006224:	4b20      	ldr	r3, [pc, #128]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe f8b6 	bl	800439c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d10a      	bne.n	800624e <prvAddCurrentTaskToDelayedList+0x3a>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800623e:	4b1a      	ldr	r3, [pc, #104]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	4619      	mov	r1, r3
 8006246:	4819      	ldr	r0, [pc, #100]	@ (80062ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006248:	f7fe f84d 	bl	80042e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800624c:	e026      	b.n	800629c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006256:	4b14      	ldr	r3, [pc, #80]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	429a      	cmp	r2, r3
 8006264:	d209      	bcs.n	800627a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006266:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b0f      	ldr	r3, [pc, #60]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fe f85a 	bl	800432c <vListInsert>
}
 8006278:	e010      	b.n	800629c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627a:	4b0e      	ldr	r3, [pc, #56]	@ (80062b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f7fe f850 	bl	800432c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800628c:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	d202      	bcs.n	800629c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006296:	4a08      	ldr	r2, [pc, #32]	@ (80062b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	6013      	str	r3, [r2, #0]
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000e8c 	.word	0x20000e8c
 80062a8:	200009b4 	.word	0x200009b4
 80062ac:	20000e74 	.word	0x20000e74
 80062b0:	20000e44 	.word	0x20000e44
 80062b4:	20000e40 	.word	0x20000e40
 80062b8:	20000ea8 	.word	0x20000ea8

080062bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	@ 0x28
 80062c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80062c6:	f000 fad9 	bl	800687c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80062ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006340 <xTimerCreateTimerTask+0x84>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d021      	beq.n	8006316 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80062da:	1d3a      	adds	r2, r7, #4
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	f107 030c 	add.w	r3, r7, #12
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fd ffb9 	bl	800425c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	9202      	str	r2, [sp, #8]
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	2302      	movs	r3, #2
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	2300      	movs	r3, #0
 80062fa:	460a      	mov	r2, r1
 80062fc:	4911      	ldr	r1, [pc, #68]	@ (8006344 <xTimerCreateTimerTask+0x88>)
 80062fe:	4812      	ldr	r0, [pc, #72]	@ (8006348 <xTimerCreateTimerTask+0x8c>)
 8006300:	f7fe ff8c 	bl	800521c <xTaskCreateStatic>
 8006304:	4603      	mov	r3, r0
 8006306:	4a11      	ldr	r2, [pc, #68]	@ (800634c <xTimerCreateTimerTask+0x90>)
 8006308:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800630a:	4b10      	ldr	r3, [pc, #64]	@ (800634c <xTimerCreateTimerTask+0x90>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006312:	2301      	movs	r3, #1
 8006314:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	613b      	str	r3, [r7, #16]
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006334:	697b      	ldr	r3, [r7, #20]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000ee4 	.word	0x20000ee4
 8006344:	08007b14 	.word	0x08007b14
 8006348:	08006471 	.word	0x08006471
 800634c:	20000ee8 	.word	0x20000ee8

08006350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08a      	sub	sp, #40	@ 0x28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800635e:	2300      	movs	r3, #0
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <xTimerGenericCommand+0x30>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006380:	4b19      	ldr	r3, [pc, #100]	@ (80063e8 <xTimerGenericCommand+0x98>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d02a      	beq.n	80063de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b05      	cmp	r3, #5
 8006398:	dc18      	bgt.n	80063cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800639a:	f7ff fda3 	bl	8005ee4 <xTaskGetSchedulerState>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d109      	bne.n	80063b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063a4:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <xTimerGenericCommand+0x98>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	f107 0110 	add.w	r1, r7, #16
 80063ac:	2300      	movs	r3, #0
 80063ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063b0:	f7fe fa20 	bl	80047f4 <xQueueGenericSend>
 80063b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80063b6:	e012      	b.n	80063de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063b8:	4b0b      	ldr	r3, [pc, #44]	@ (80063e8 <xTimerGenericCommand+0x98>)
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	f107 0110 	add.w	r1, r7, #16
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	f7fe fa16 	bl	80047f4 <xQueueGenericSend>
 80063c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80063ca:	e008      	b.n	80063de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <xTimerGenericCommand+0x98>)
 80063ce:	6818      	ldr	r0, [r3, #0]
 80063d0:	f107 0110 	add.w	r1, r7, #16
 80063d4:	2300      	movs	r3, #0
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	f7fe fb0e 	bl	80049f8 <xQueueGenericSendFromISR>
 80063dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3728      	adds	r7, #40	@ 0x28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000ee4 	.word	0x20000ee4

080063ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f6:	4b1d      	ldr	r3, [pc, #116]	@ (800646c <prvProcessExpiredTimer+0x80>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3304      	adds	r3, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f7fd ffc9 	bl	800439c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d123      	bne.n	800645a <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	18d1      	adds	r1, r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	6978      	ldr	r0, [r7, #20]
 8006420:	f000 f8cc 	bl	80065bc <prvInsertTimerInActiveList>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d017      	beq.n	800645a <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800642a:	2300      	movs	r3, #0
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	2300      	movs	r3, #0
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	2100      	movs	r1, #0
 8006434:	6978      	ldr	r0, [r7, #20]
 8006436:	f7ff ff8b 	bl	8006350 <xTimerGenericCommand>
 800643a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60fb      	str	r3, [r7, #12]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	6978      	ldr	r0, [r7, #20]
 8006460:	4798      	blx	r3
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000edc 	.word	0x20000edc

08006470 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006478:	f107 0308 	add.w	r3, r7, #8
 800647c:	4618      	mov	r0, r3
 800647e:	f000 f859 	bl	8006534 <prvGetNextExpireTime>
 8006482:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	4619      	mov	r1, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f805 	bl	8006498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800648e:	f000 f8d7 	bl	8006640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006492:	bf00      	nop
 8006494:	e7f0      	b.n	8006478 <prvTimerTask+0x8>
	...

08006498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80064a2:	f7ff f915 	bl	80056d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064a6:	f107 0308 	add.w	r3, r7, #8
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f866 	bl	800657c <prvSampleTimeNow>
 80064b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d130      	bne.n	800651a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10a      	bne.n	80064d4 <prvProcessTimerOrBlockTask+0x3c>
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d806      	bhi.n	80064d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80064c6:	f7ff f911 	bl	80056ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064ca:	68f9      	ldr	r1, [r7, #12]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff8d 	bl	80063ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80064d2:	e024      	b.n	800651e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064da:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <prvProcessTimerOrBlockTask+0x90>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	bf0c      	ite	eq
 80064e4:	2301      	moveq	r3, #1
 80064e6:	2300      	movne	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064ec:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <prvProcessTimerOrBlockTask+0x94>)
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	4619      	mov	r1, r3
 80064fa:	f7fe fe5b 	bl	80051b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064fe:	f7ff f8f5 	bl	80056ec <xTaskResumeAll>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006508:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <prvProcessTimerOrBlockTask+0x98>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
}
 8006518:	e001      	b.n	800651e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800651a:	f7ff f8e7 	bl	80056ec <xTaskResumeAll>
}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000ee0 	.word	0x20000ee0
 800652c:	20000ee4 	.word	0x20000ee4
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800653c:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <prvGetNextExpireTime+0x44>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800655a:	4b07      	ldr	r3, [pc, #28]	@ (8006578 <prvGetNextExpireTime+0x44>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e001      	b.n	800656a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800656a:	68fb      	ldr	r3, [r7, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	20000edc 	.word	0x20000edc

0800657c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006584:	f7ff f950 	bl	8005828 <xTaskGetTickCount>
 8006588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800658a:	4b0b      	ldr	r3, [pc, #44]	@ (80065b8 <prvSampleTimeNow+0x3c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	429a      	cmp	r2, r3
 8006592:	d205      	bcs.n	80065a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006594:	f000 f910 	bl	80067b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e002      	b.n	80065a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80065a6:	4a04      	ldr	r2, [pc, #16]	@ (80065b8 <prvSampleTimeNow+0x3c>)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80065ac:	68fb      	ldr	r3, [r7, #12]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000eec 	.word	0x20000eec

080065bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d812      	bhi.n	8006608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	1ad2      	subs	r2, r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e01b      	b.n	800662e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065f6:	4b10      	ldr	r3, [pc, #64]	@ (8006638 <prvInsertTimerInActiveList+0x7c>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f7fd fe93 	bl	800432c <vListInsert>
 8006606:	e012      	b.n	800662e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d206      	bcs.n	800661e <prvInsertTimerInActiveList+0x62>
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e007      	b.n	800662e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800661e:	4b07      	ldr	r3, [pc, #28]	@ (800663c <prvInsertTimerInActiveList+0x80>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7fd fe7f 	bl	800432c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800662e:	697b      	ldr	r3, [r7, #20]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000ee0 	.word	0x20000ee0
 800663c:	20000edc 	.word	0x20000edc

08006640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08e      	sub	sp, #56	@ 0x38
 8006644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006646:	e0a5      	b.n	8006794 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	da19      	bge.n	8006682 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800664e:	1d3b      	adds	r3, r7, #4
 8006650:	3304      	adds	r3, #4
 8006652:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	61fb      	str	r3, [r7, #28]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006678:	6850      	ldr	r0, [r2, #4]
 800667a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800667c:	6892      	ldr	r2, [r2, #8]
 800667e:	4611      	mov	r1, r2
 8006680:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f2c0 8085 	blt.w	8006794 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006698:	3304      	adds	r3, #4
 800669a:	4618      	mov	r0, r3
 800669c:	f7fd fe7e 	bl	800439c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066a0:	463b      	mov	r3, r7
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff ff6a 	bl	800657c <prvSampleTimeNow>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b09      	cmp	r3, #9
 80066ae:	d86c      	bhi.n	800678a <prvProcessReceivedCommands+0x14a>
 80066b0:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <prvProcessReceivedCommands+0x78>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e1 	.word	0x080066e1
 80066c4:	0800678b 	.word	0x0800678b
 80066c8:	0800673f 	.word	0x0800673f
 80066cc:	08006779 	.word	0x08006779
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066e1 	.word	0x080066e1
 80066d8:	0800678b 	.word	0x0800678b
 80066dc:	0800673f 	.word	0x0800673f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	18d1      	adds	r1, r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066ee:	f7ff ff65 	bl	80065bc <prvInsertTimerInActiveList>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d04a      	beq.n	800678e <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d142      	bne.n	800678e <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	441a      	add	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	2100      	movs	r1, #0
 8006718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800671a:	f7ff fe19 	bl	8006350 <xTimerGenericCommand>
 800671e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d133      	bne.n	800678e <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	61bb      	str	r3, [r7, #24]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	617b      	str	r3, [r7, #20]
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	e7fd      	b.n	8006760 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	699a      	ldr	r2, [r3, #24]
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	18d1      	adds	r1, r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006772:	f7ff ff23 	bl	80065bc <prvInsertTimerInActiveList>
					break;
 8006776:	e00d      	b.n	8006794 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d107      	bne.n	8006792 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8006782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006784:	f000 fb74 	bl	8006e70 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006788:	e003      	b.n	8006792 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <prvProcessReceivedCommands+0x154>
					break;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <prvProcessReceivedCommands+0x154>
					break;
 8006792:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006794:	4b07      	ldr	r3, [pc, #28]	@ (80067b4 <prvProcessReceivedCommands+0x174>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	1d39      	adds	r1, r7, #4
 800679a:	2200      	movs	r2, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe f9c7 	bl	8004b30 <xQueueReceive>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f47f af4f 	bne.w	8006648 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	3730      	adds	r7, #48	@ 0x30
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000ee4 	.word	0x20000ee4

080067b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067be:	e046      	b.n	800684e <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006874 <prvSwitchTimerLists+0xbc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006874 <prvSwitchTimerLists+0xbc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fd fddf 	bl	800439c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d12f      	bne.n	800684e <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d90e      	bls.n	800681e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800680c:	4b19      	ldr	r3, [pc, #100]	@ (8006874 <prvSwitchTimerLists+0xbc>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f7fd fd88 	bl	800432c <vListInsert>
 800681c:	e017      	b.n	800684e <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800681e:	2300      	movs	r3, #0
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2300      	movs	r3, #0
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	2100      	movs	r1, #0
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fd91 	bl	8006350 <xTimerGenericCommand>
 800682e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <prvSwitchTimerLists+0x96>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	603b      	str	r3, [r7, #0]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800684e:	4b09      	ldr	r3, [pc, #36]	@ (8006874 <prvSwitchTimerLists+0xbc>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1b3      	bne.n	80067c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006858:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <prvSwitchTimerLists+0xbc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800685e:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <prvSwitchTimerLists+0xc0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a04      	ldr	r2, [pc, #16]	@ (8006874 <prvSwitchTimerLists+0xbc>)
 8006864:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006866:	4a04      	ldr	r2, [pc, #16]	@ (8006878 <prvSwitchTimerLists+0xc0>)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000edc 	.word	0x20000edc
 8006878:	20000ee0 	.word	0x20000ee0

0800687c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006882:	f000 f92b 	bl	8006adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006886:	4b15      	ldr	r3, [pc, #84]	@ (80068dc <prvCheckForValidListAndQueue+0x60>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d120      	bne.n	80068d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800688e:	4814      	ldr	r0, [pc, #80]	@ (80068e0 <prvCheckForValidListAndQueue+0x64>)
 8006890:	f7fd fcfe 	bl	8004290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006894:	4813      	ldr	r0, [pc, #76]	@ (80068e4 <prvCheckForValidListAndQueue+0x68>)
 8006896:	f7fd fcfb 	bl	8004290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800689a:	4b13      	ldr	r3, [pc, #76]	@ (80068e8 <prvCheckForValidListAndQueue+0x6c>)
 800689c:	4a10      	ldr	r2, [pc, #64]	@ (80068e0 <prvCheckForValidListAndQueue+0x64>)
 800689e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068a0:	4b12      	ldr	r3, [pc, #72]	@ (80068ec <prvCheckForValidListAndQueue+0x70>)
 80068a2:	4a10      	ldr	r2, [pc, #64]	@ (80068e4 <prvCheckForValidListAndQueue+0x68>)
 80068a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068a6:	2300      	movs	r3, #0
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	4b11      	ldr	r3, [pc, #68]	@ (80068f0 <prvCheckForValidListAndQueue+0x74>)
 80068ac:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <prvCheckForValidListAndQueue+0x78>)
 80068ae:	2110      	movs	r1, #16
 80068b0:	200a      	movs	r0, #10
 80068b2:	f7fd fe07 	bl	80044c4 <xQueueGenericCreateStatic>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4a08      	ldr	r2, [pc, #32]	@ (80068dc <prvCheckForValidListAndQueue+0x60>)
 80068ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068bc:	4b07      	ldr	r3, [pc, #28]	@ (80068dc <prvCheckForValidListAndQueue+0x60>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <prvCheckForValidListAndQueue+0x60>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	490b      	ldr	r1, [pc, #44]	@ (80068f8 <prvCheckForValidListAndQueue+0x7c>)
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fc4a 	bl	8005164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068d0:	f000 f934 	bl	8006b3c <vPortExitCritical>
}
 80068d4:	bf00      	nop
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000ee4 	.word	0x20000ee4
 80068e0:	20000eb4 	.word	0x20000eb4
 80068e4:	20000ec8 	.word	0x20000ec8
 80068e8:	20000edc 	.word	0x20000edc
 80068ec:	20000ee0 	.word	0x20000ee0
 80068f0:	20000f90 	.word	0x20000f90
 80068f4:	20000ef0 	.word	0x20000ef0
 80068f8:	08007b1c 	.word	0x08007b1c

080068fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3b04      	subs	r3, #4
 800690c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3b04      	subs	r3, #4
 800691a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f023 0201 	bic.w	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b04      	subs	r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800692c:	4a08      	ldr	r2, [pc, #32]	@ (8006950 <pxPortInitialiseStack+0x54>)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3b14      	subs	r3, #20
 8006936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3b20      	subs	r3, #32
 8006942:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006944:	68fb      	ldr	r3, [r7, #12]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	bc80      	pop	{r7}
 800694e:	4770      	bx	lr
 8006950:	08006955 	.word	0x08006955

08006954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800695a:	2300      	movs	r3, #0
 800695c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800695e:	4b12      	ldr	r3, [pc, #72]	@ (80069a8 <prvTaskExitError+0x54>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d00b      	beq.n	8006980 <prvTaskExitError+0x2c>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60fb      	str	r3, [r7, #12]
}
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <prvTaskExitError+0x28>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	60bb      	str	r3, [r7, #8]
}
 8006992:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006994:	bf00      	nop
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0fc      	beq.n	8006996 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	2000000c 	.word	0x2000000c
 80069ac:	00000000 	.word	0x00000000

080069b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069b0:	4b07      	ldr	r3, [pc, #28]	@ (80069d0 <pxCurrentTCBConst2>)
 80069b2:	6819      	ldr	r1, [r3, #0]
 80069b4:	6808      	ldr	r0, [r1, #0]
 80069b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80069ba:	f380 8809 	msr	PSP, r0
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f04f 0000 	mov.w	r0, #0
 80069c6:	f380 8811 	msr	BASEPRI, r0
 80069ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80069ce:	4770      	bx	lr

080069d0 <pxCurrentTCBConst2>:
 80069d0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80069d8:	4806      	ldr	r0, [pc, #24]	@ (80069f4 <prvPortStartFirstTask+0x1c>)
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f380 8808 	msr	MSP, r0
 80069e2:	b662      	cpsie	i
 80069e4:	b661      	cpsie	f
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	df00      	svc	0
 80069f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069f2:	bf00      	nop
 80069f4:	e000ed08 	.word	0xe000ed08

080069f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069fe:	4b32      	ldr	r3, [pc, #200]	@ (8006ac8 <xPortStartScheduler+0xd0>)
 8006a00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	22ff      	movs	r2, #255	@ 0xff
 8006a0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	4b2a      	ldr	r3, [pc, #168]	@ (8006acc <xPortStartScheduler+0xd4>)
 8006a24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a26:	4b2a      	ldr	r3, [pc, #168]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a28:	2207      	movs	r2, #7
 8006a2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a2c:	e009      	b.n	8006a42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a2e:	4b28      	ldr	r3, [pc, #160]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	4a26      	ldr	r2, [pc, #152]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a4a:	2b80      	cmp	r3, #128	@ 0x80
 8006a4c:	d0ef      	beq.n	8006a2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a4e:	4b20      	ldr	r3, [pc, #128]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f1c3 0307 	rsb	r3, r3, #7
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d00b      	beq.n	8006a72 <xPortStartScheduler+0x7a>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	60bb      	str	r3, [r7, #8]
}
 8006a6c:	bf00      	nop
 8006a6e:	bf00      	nop
 8006a70:	e7fd      	b.n	8006a6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a72:	4b17      	ldr	r3, [pc, #92]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	021b      	lsls	r3, r3, #8
 8006a78:	4a15      	ldr	r2, [pc, #84]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a7c:	4b14      	ldr	r3, [pc, #80]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a84:	4a12      	ldr	r2, [pc, #72]	@ (8006ad0 <xPortStartScheduler+0xd8>)
 8006a86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a90:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <xPortStartScheduler+0xdc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad4 <xPortStartScheduler+0xdc>)
 8006a96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <xPortStartScheduler+0xdc>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad4 <xPortStartScheduler+0xdc>)
 8006aa2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006aa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aa8:	f000 f8b8 	bl	8006c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <xPortStartScheduler+0xe0>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ab2:	f7ff ff91 	bl	80069d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ab6:	f7fe ff85 	bl	80059c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006aba:	f7ff ff4b 	bl	8006954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	e000e400 	.word	0xe000e400
 8006acc:	20000fe0 	.word	0x20000fe0
 8006ad0:	20000fe4 	.word	0x20000fe4
 8006ad4:	e000ed20 	.word	0xe000ed20
 8006ad8:	2000000c 	.word	0x2000000c

08006adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006af6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b34 <vPortEnterCritical+0x58>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	4a0d      	ldr	r2, [pc, #52]	@ (8006b34 <vPortEnterCritical+0x58>)
 8006afe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b00:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <vPortEnterCritical+0x58>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d110      	bne.n	8006b2a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <vPortEnterCritical+0x5c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <vPortEnterCritical+0x4e>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	603b      	str	r3, [r7, #0]
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	e7fd      	b.n	8006b26 <vPortEnterCritical+0x4a>
	}
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr
 8006b34:	2000000c 	.word	0x2000000c
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b42:	4b12      	ldr	r3, [pc, #72]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10b      	bne.n	8006b62 <vPortExitCritical+0x26>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	607b      	str	r3, [r7, #4]
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	e7fd      	b.n	8006b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	4a08      	ldr	r2, [pc, #32]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b6c:	4b07      	ldr	r3, [pc, #28]	@ (8006b8c <vPortExitCritical+0x50>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <vPortExitCritical+0x44>
 8006b74:	2300      	movs	r3, #0
 8006b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f383 8811 	msr	BASEPRI, r3
}
 8006b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	2000000c 	.word	0x2000000c

08006b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b90:	f3ef 8009 	mrs	r0, PSP
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd0 <pxCurrentTCBConst>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ba0:	6010      	str	r0, [r2, #0]
 8006ba2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006ba6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006baa:	f380 8811 	msr	BASEPRI, r0
 8006bae:	f7fe ff09 	bl	80059c4 <vTaskSwitchContext>
 8006bb2:	f04f 0000 	mov.w	r0, #0
 8006bb6:	f380 8811 	msr	BASEPRI, r0
 8006bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006bbe:	6819      	ldr	r1, [r3, #0]
 8006bc0:	6808      	ldr	r0, [r1, #0]
 8006bc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006bc6:	f380 8809 	msr	PSP, r0
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	4770      	bx	lr

08006bd0 <pxCurrentTCBConst>:
 8006bd0:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop

08006bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	607b      	str	r3, [r7, #4]
}
 8006bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bf2:	f7fe fe27 	bl	8005844 <xTaskIncrementTick>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bfc:	4b06      	ldr	r3, [pc, #24]	@ (8006c18 <SysTick_Handler+0x40>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f383 8811 	msr	BASEPRI, r3
}
 8006c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c20:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <vPortSetupTimerInterrupt+0x30>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c26:	4b0a      	ldr	r3, [pc, #40]	@ (8006c50 <vPortSetupTimerInterrupt+0x34>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c2c:	4b09      	ldr	r3, [pc, #36]	@ (8006c54 <vPortSetupTimerInterrupt+0x38>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a09      	ldr	r2, [pc, #36]	@ (8006c58 <vPortSetupTimerInterrupt+0x3c>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	099b      	lsrs	r3, r3, #6
 8006c38:	4a08      	ldr	r2, [pc, #32]	@ (8006c5c <vPortSetupTimerInterrupt+0x40>)
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c3e:	4b03      	ldr	r3, [pc, #12]	@ (8006c4c <vPortSetupTimerInterrupt+0x30>)
 8006c40:	2207      	movs	r2, #7
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bc80      	pop	{r7}
 8006c4a:	4770      	bx	lr
 8006c4c:	e000e010 	.word	0xe000e010
 8006c50:	e000e018 	.word	0xe000e018
 8006c54:	20000000 	.word	0x20000000
 8006c58:	10624dd3 	.word	0x10624dd3
 8006c5c:	e000e014 	.word	0xe000e014

08006c60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c66:	f3ef 8305 	mrs	r3, IPSR
 8006c6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	d915      	bls.n	8006c9e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c72:	4a17      	ldr	r2, [pc, #92]	@ (8006cd0 <vPortValidateInterruptPriority+0x70>)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c7c:	4b15      	ldr	r3, [pc, #84]	@ (8006cd4 <vPortValidateInterruptPriority+0x74>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	7afa      	ldrb	r2, [r7, #11]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d20b      	bcs.n	8006c9e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	607b      	str	r3, [r7, #4]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd8 <vPortValidateInterruptPriority+0x78>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <vPortValidateInterruptPriority+0x7c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d90b      	bls.n	8006cc6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	603b      	str	r3, [r7, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <vPortValidateInterruptPriority+0x62>
	}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr
 8006cd0:	e000e3f0 	.word	0xe000e3f0
 8006cd4:	20000fe0 	.word	0x20000fe0
 8006cd8:	e000ed0c 	.word	0xe000ed0c
 8006cdc:	20000fe4 	.word	0x20000fe4

08006ce0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08a      	sub	sp, #40	@ 0x28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cec:	f7fe fcf0 	bl	80056d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8006e5c <pvPortMalloc+0x17c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cf8:	f000 f916 	bl	8006f28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cfc:	4b58      	ldr	r3, [pc, #352]	@ (8006e60 <pvPortMalloc+0x180>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 8090 	bne.w	8006e2a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01e      	beq.n	8006d4e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d10:	2208      	movs	r2, #8
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d015      	beq.n	8006d4e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f023 0307 	bic.w	r3, r3, #7
 8006d28:	3308      	adds	r3, #8
 8006d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <pvPortMalloc+0x6e>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	617b      	str	r3, [r7, #20]
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d06a      	beq.n	8006e2a <pvPortMalloc+0x14a>
 8006d54:	4b43      	ldr	r3, [pc, #268]	@ (8006e64 <pvPortMalloc+0x184>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d865      	bhi.n	8006e2a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d5e:	4b42      	ldr	r3, [pc, #264]	@ (8006e68 <pvPortMalloc+0x188>)
 8006d60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d62:	4b41      	ldr	r3, [pc, #260]	@ (8006e68 <pvPortMalloc+0x188>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d68:	e004      	b.n	8006d74 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d903      	bls.n	8006d86 <pvPortMalloc+0xa6>
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f1      	bne.n	8006d6a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d86:	4b35      	ldr	r3, [pc, #212]	@ (8006e5c <pvPortMalloc+0x17c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d04c      	beq.n	8006e2a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2208      	movs	r2, #8
 8006d96:	4413      	add	r3, r2
 8006d98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	2308      	movs	r3, #8
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d920      	bls.n	8006df4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4413      	add	r3, r2
 8006db8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <pvPortMalloc+0xfc>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	613b      	str	r3, [r7, #16]
}
 8006dd6:	bf00      	nop
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1ad2      	subs	r2, r2, r3
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dee:	69b8      	ldr	r0, [r7, #24]
 8006df0:	f000 f8fc 	bl	8006fec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006df4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e64 <pvPortMalloc+0x184>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	4a19      	ldr	r2, [pc, #100]	@ (8006e64 <pvPortMalloc+0x184>)
 8006e00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e02:	4b18      	ldr	r3, [pc, #96]	@ (8006e64 <pvPortMalloc+0x184>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b19      	ldr	r3, [pc, #100]	@ (8006e6c <pvPortMalloc+0x18c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d203      	bcs.n	8006e16 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e0e:	4b15      	ldr	r3, [pc, #84]	@ (8006e64 <pvPortMalloc+0x184>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <pvPortMalloc+0x18c>)
 8006e14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <pvPortMalloc+0x180>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e2a:	f7fe fc5f 	bl	80056ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <pvPortMalloc+0x170>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	60fb      	str	r3, [r7, #12]
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <pvPortMalloc+0x16c>
	return pvReturn;
 8006e50:	69fb      	ldr	r3, [r7, #28]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3728      	adds	r7, #40	@ 0x28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20001bf0 	.word	0x20001bf0
 8006e60:	20001bfc 	.word	0x20001bfc
 8006e64:	20001bf4 	.word	0x20001bf4
 8006e68:	20001be8 	.word	0x20001be8
 8006e6c:	20001bf8 	.word	0x20001bf8

08006e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d04a      	beq.n	8006f18 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e82:	2308      	movs	r3, #8
 8006e84:	425b      	negs	r3, r3
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4413      	add	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	4b22      	ldr	r3, [pc, #136]	@ (8006f20 <vPortFree+0xb0>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10b      	bne.n	8006eb6 <vPortFree+0x46>
	__asm volatile
 8006e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	60fb      	str	r3, [r7, #12]
}
 8006eb0:	bf00      	nop
 8006eb2:	bf00      	nop
 8006eb4:	e7fd      	b.n	8006eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00b      	beq.n	8006ed6 <vPortFree+0x66>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60bb      	str	r3, [r7, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	4b11      	ldr	r3, [pc, #68]	@ (8006f20 <vPortFree+0xb0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d019      	beq.n	8006f18 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d115      	bne.n	8006f18 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <vPortFree+0xb0>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	401a      	ands	r2, r3
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006efc:	f7fe fbe8 	bl	80056d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	4b07      	ldr	r3, [pc, #28]	@ (8006f24 <vPortFree+0xb4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4413      	add	r3, r2
 8006f0a:	4a06      	ldr	r2, [pc, #24]	@ (8006f24 <vPortFree+0xb4>)
 8006f0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f0e:	6938      	ldr	r0, [r7, #16]
 8006f10:	f000 f86c 	bl	8006fec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f14:	f7fe fbea 	bl	80056ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f18:	bf00      	nop
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20001bfc 	.word	0x20001bfc
 8006f24:	20001bf4 	.word	0x20001bf4

08006f28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006f32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f34:	4b27      	ldr	r3, [pc, #156]	@ (8006fd4 <prvHeapInit+0xac>)
 8006f36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00c      	beq.n	8006f5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3307      	adds	r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0307 	bic.w	r3, r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd4 <prvHeapInit+0xac>)
 8006f58:	4413      	add	r3, r2
 8006f5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f60:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <prvHeapInit+0xb0>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f66:	4b1c      	ldr	r3, [pc, #112]	@ (8006fd8 <prvHeapInit+0xb0>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	4413      	add	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f74:	2208      	movs	r2, #8
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0307 	bic.w	r3, r3, #7
 8006f82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <prvHeapInit+0xb4>)
 8006f88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f8a:	4b14      	ldr	r3, [pc, #80]	@ (8006fdc <prvHeapInit+0xb4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f92:	4b12      	ldr	r3, [pc, #72]	@ (8006fdc <prvHeapInit+0xb4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006fdc <prvHeapInit+0xb4>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <prvHeapInit+0xb8>)
 8006fb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <prvHeapInit+0xbc>)
 8006fbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fc0:	4b09      	ldr	r3, [pc, #36]	@ (8006fe8 <prvHeapInit+0xc0>)
 8006fc2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006fc6:	601a      	str	r2, [r3, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bc80      	pop	{r7}
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20000fe8 	.word	0x20000fe8
 8006fd8:	20001be8 	.word	0x20001be8
 8006fdc:	20001bf0 	.word	0x20001bf0
 8006fe0:	20001bf8 	.word	0x20001bf8
 8006fe4:	20001bf4 	.word	0x20001bf4
 8006fe8:	20001bfc 	.word	0x20001bfc

08006fec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ff4:	4b27      	ldr	r3, [pc, #156]	@ (8007094 <prvInsertBlockIntoFreeList+0xa8>)
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e002      	b.n	8007000 <prvInsertBlockIntoFreeList+0x14>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d8f7      	bhi.n	8006ffa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	4413      	add	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d108      	bne.n	800702e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	441a      	add	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	441a      	add	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d118      	bne.n	8007074 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	4b14      	ldr	r3, [pc, #80]	@ (8007098 <prvInsertBlockIntoFreeList+0xac>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d00d      	beq.n	800706a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	441a      	add	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e008      	b.n	800707c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800706a:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <prvInsertBlockIntoFreeList+0xac>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	e003      	b.n	800707c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d002      	beq.n	800708a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	20001be8 	.word	0x20001be8
 8007098:	20001bf0 	.word	0x20001bf0

0800709c <std>:
 800709c:	2300      	movs	r3, #0
 800709e:	b510      	push	{r4, lr}
 80070a0:	4604      	mov	r4, r0
 80070a2:	e9c0 3300 	strd	r3, r3, [r0]
 80070a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070aa:	6083      	str	r3, [r0, #8]
 80070ac:	8181      	strh	r1, [r0, #12]
 80070ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80070b0:	81c2      	strh	r2, [r0, #14]
 80070b2:	6183      	str	r3, [r0, #24]
 80070b4:	4619      	mov	r1, r3
 80070b6:	2208      	movs	r2, #8
 80070b8:	305c      	adds	r0, #92	@ 0x5c
 80070ba:	f000 f9e7 	bl	800748c <memset>
 80070be:	4b0d      	ldr	r3, [pc, #52]	@ (80070f4 <std+0x58>)
 80070c0:	6224      	str	r4, [r4, #32]
 80070c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80070c4:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <std+0x5c>)
 80070c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <std+0x60>)
 80070ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007100 <std+0x64>)
 80070ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80070d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <std+0x68>)
 80070d2:	429c      	cmp	r4, r3
 80070d4:	d006      	beq.n	80070e4 <std+0x48>
 80070d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070da:	4294      	cmp	r4, r2
 80070dc:	d002      	beq.n	80070e4 <std+0x48>
 80070de:	33d0      	adds	r3, #208	@ 0xd0
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d105      	bne.n	80070f0 <std+0x54>
 80070e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ec:	f000 ba9c 	b.w	8007628 <__retarget_lock_init_recursive>
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	bf00      	nop
 80070f4:	080072dd 	.word	0x080072dd
 80070f8:	080072ff 	.word	0x080072ff
 80070fc:	08007337 	.word	0x08007337
 8007100:	0800735b 	.word	0x0800735b
 8007104:	20001c00 	.word	0x20001c00

08007108 <stdio_exit_handler>:
 8007108:	4a02      	ldr	r2, [pc, #8]	@ (8007114 <stdio_exit_handler+0xc>)
 800710a:	4903      	ldr	r1, [pc, #12]	@ (8007118 <stdio_exit_handler+0x10>)
 800710c:	4803      	ldr	r0, [pc, #12]	@ (800711c <stdio_exit_handler+0x14>)
 800710e:	f000 b869 	b.w	80071e4 <_fwalk_sglue>
 8007112:	bf00      	nop
 8007114:	20000010 	.word	0x20000010
 8007118:	08007939 	.word	0x08007939
 800711c:	20000020 	.word	0x20000020

08007120 <cleanup_stdio>:
 8007120:	6841      	ldr	r1, [r0, #4]
 8007122:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <cleanup_stdio+0x34>)
 8007124:	b510      	push	{r4, lr}
 8007126:	4299      	cmp	r1, r3
 8007128:	4604      	mov	r4, r0
 800712a:	d001      	beq.n	8007130 <cleanup_stdio+0x10>
 800712c:	f000 fc04 	bl	8007938 <_fflush_r>
 8007130:	68a1      	ldr	r1, [r4, #8]
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <cleanup_stdio+0x38>)
 8007134:	4299      	cmp	r1, r3
 8007136:	d002      	beq.n	800713e <cleanup_stdio+0x1e>
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fbfd 	bl	8007938 <_fflush_r>
 800713e:	68e1      	ldr	r1, [r4, #12]
 8007140:	4b06      	ldr	r3, [pc, #24]	@ (800715c <cleanup_stdio+0x3c>)
 8007142:	4299      	cmp	r1, r3
 8007144:	d004      	beq.n	8007150 <cleanup_stdio+0x30>
 8007146:	4620      	mov	r0, r4
 8007148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800714c:	f000 bbf4 	b.w	8007938 <_fflush_r>
 8007150:	bd10      	pop	{r4, pc}
 8007152:	bf00      	nop
 8007154:	20001c00 	.word	0x20001c00
 8007158:	20001c68 	.word	0x20001c68
 800715c:	20001cd0 	.word	0x20001cd0

08007160 <global_stdio_init.part.0>:
 8007160:	b510      	push	{r4, lr}
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <global_stdio_init.part.0+0x30>)
 8007164:	4c0b      	ldr	r4, [pc, #44]	@ (8007194 <global_stdio_init.part.0+0x34>)
 8007166:	4a0c      	ldr	r2, [pc, #48]	@ (8007198 <global_stdio_init.part.0+0x38>)
 8007168:	4620      	mov	r0, r4
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	2104      	movs	r1, #4
 800716e:	2200      	movs	r2, #0
 8007170:	f7ff ff94 	bl	800709c <std>
 8007174:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007178:	2201      	movs	r2, #1
 800717a:	2109      	movs	r1, #9
 800717c:	f7ff ff8e 	bl	800709c <std>
 8007180:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007184:	2202      	movs	r2, #2
 8007186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718a:	2112      	movs	r1, #18
 800718c:	f7ff bf86 	b.w	800709c <std>
 8007190:	20001d38 	.word	0x20001d38
 8007194:	20001c00 	.word	0x20001c00
 8007198:	08007109 	.word	0x08007109

0800719c <__sfp_lock_acquire>:
 800719c:	4801      	ldr	r0, [pc, #4]	@ (80071a4 <__sfp_lock_acquire+0x8>)
 800719e:	f000 ba44 	b.w	800762a <__retarget_lock_acquire_recursive>
 80071a2:	bf00      	nop
 80071a4:	20001d41 	.word	0x20001d41

080071a8 <__sfp_lock_release>:
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <__sfp_lock_release+0x8>)
 80071aa:	f000 ba3f 	b.w	800762c <__retarget_lock_release_recursive>
 80071ae:	bf00      	nop
 80071b0:	20001d41 	.word	0x20001d41

080071b4 <__sinit>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	4604      	mov	r4, r0
 80071b8:	f7ff fff0 	bl	800719c <__sfp_lock_acquire>
 80071bc:	6a23      	ldr	r3, [r4, #32]
 80071be:	b11b      	cbz	r3, 80071c8 <__sinit+0x14>
 80071c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c4:	f7ff bff0 	b.w	80071a8 <__sfp_lock_release>
 80071c8:	4b04      	ldr	r3, [pc, #16]	@ (80071dc <__sinit+0x28>)
 80071ca:	6223      	str	r3, [r4, #32]
 80071cc:	4b04      	ldr	r3, [pc, #16]	@ (80071e0 <__sinit+0x2c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1f5      	bne.n	80071c0 <__sinit+0xc>
 80071d4:	f7ff ffc4 	bl	8007160 <global_stdio_init.part.0>
 80071d8:	e7f2      	b.n	80071c0 <__sinit+0xc>
 80071da:	bf00      	nop
 80071dc:	08007121 	.word	0x08007121
 80071e0:	20001d38 	.word	0x20001d38

080071e4 <_fwalk_sglue>:
 80071e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e8:	4607      	mov	r7, r0
 80071ea:	4688      	mov	r8, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	2600      	movs	r6, #0
 80071f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071f4:	f1b9 0901 	subs.w	r9, r9, #1
 80071f8:	d505      	bpl.n	8007206 <_fwalk_sglue+0x22>
 80071fa:	6824      	ldr	r4, [r4, #0]
 80071fc:	2c00      	cmp	r4, #0
 80071fe:	d1f7      	bne.n	80071f0 <_fwalk_sglue+0xc>
 8007200:	4630      	mov	r0, r6
 8007202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007206:	89ab      	ldrh	r3, [r5, #12]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d907      	bls.n	800721c <_fwalk_sglue+0x38>
 800720c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007210:	3301      	adds	r3, #1
 8007212:	d003      	beq.n	800721c <_fwalk_sglue+0x38>
 8007214:	4629      	mov	r1, r5
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	4306      	orrs	r6, r0
 800721c:	3568      	adds	r5, #104	@ 0x68
 800721e:	e7e9      	b.n	80071f4 <_fwalk_sglue+0x10>

08007220 <_puts_r>:
 8007220:	6a03      	ldr	r3, [r0, #32]
 8007222:	b570      	push	{r4, r5, r6, lr}
 8007224:	4605      	mov	r5, r0
 8007226:	460e      	mov	r6, r1
 8007228:	6884      	ldr	r4, [r0, #8]
 800722a:	b90b      	cbnz	r3, 8007230 <_puts_r+0x10>
 800722c:	f7ff ffc2 	bl	80071b4 <__sinit>
 8007230:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007232:	07db      	lsls	r3, r3, #31
 8007234:	d405      	bmi.n	8007242 <_puts_r+0x22>
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	0598      	lsls	r0, r3, #22
 800723a:	d402      	bmi.n	8007242 <_puts_r+0x22>
 800723c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800723e:	f000 f9f4 	bl	800762a <__retarget_lock_acquire_recursive>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	0719      	lsls	r1, r3, #28
 8007246:	d502      	bpl.n	800724e <_puts_r+0x2e>
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d135      	bne.n	80072ba <_puts_r+0x9a>
 800724e:	4621      	mov	r1, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f000 f8c5 	bl	80073e0 <__swsetup_r>
 8007256:	b380      	cbz	r0, 80072ba <_puts_r+0x9a>
 8007258:	f04f 35ff 	mov.w	r5, #4294967295
 800725c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800725e:	07da      	lsls	r2, r3, #31
 8007260:	d405      	bmi.n	800726e <_puts_r+0x4e>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	059b      	lsls	r3, r3, #22
 8007266:	d402      	bmi.n	800726e <_puts_r+0x4e>
 8007268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800726a:	f000 f9df 	bl	800762c <__retarget_lock_release_recursive>
 800726e:	4628      	mov	r0, r5
 8007270:	bd70      	pop	{r4, r5, r6, pc}
 8007272:	2b00      	cmp	r3, #0
 8007274:	da04      	bge.n	8007280 <_puts_r+0x60>
 8007276:	69a2      	ldr	r2, [r4, #24]
 8007278:	429a      	cmp	r2, r3
 800727a:	dc17      	bgt.n	80072ac <_puts_r+0x8c>
 800727c:	290a      	cmp	r1, #10
 800727e:	d015      	beq.n	80072ac <_puts_r+0x8c>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	6022      	str	r2, [r4, #0]
 8007286:	7019      	strb	r1, [r3, #0]
 8007288:	68a3      	ldr	r3, [r4, #8]
 800728a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800728e:	3b01      	subs	r3, #1
 8007290:	60a3      	str	r3, [r4, #8]
 8007292:	2900      	cmp	r1, #0
 8007294:	d1ed      	bne.n	8007272 <_puts_r+0x52>
 8007296:	2b00      	cmp	r3, #0
 8007298:	da11      	bge.n	80072be <_puts_r+0x9e>
 800729a:	4622      	mov	r2, r4
 800729c:	210a      	movs	r1, #10
 800729e:	4628      	mov	r0, r5
 80072a0:	f000 f85f 	bl	8007362 <__swbuf_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d0d7      	beq.n	8007258 <_puts_r+0x38>
 80072a8:	250a      	movs	r5, #10
 80072aa:	e7d7      	b.n	800725c <_puts_r+0x3c>
 80072ac:	4622      	mov	r2, r4
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 f857 	bl	8007362 <__swbuf_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d1e7      	bne.n	8007288 <_puts_r+0x68>
 80072b8:	e7ce      	b.n	8007258 <_puts_r+0x38>
 80072ba:	3e01      	subs	r6, #1
 80072bc:	e7e4      	b.n	8007288 <_puts_r+0x68>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	6022      	str	r2, [r4, #0]
 80072c4:	220a      	movs	r2, #10
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	e7ee      	b.n	80072a8 <_puts_r+0x88>
	...

080072cc <puts>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	@ (80072d8 <puts+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f7ff bfa5 	b.w	8007220 <_puts_r>
 80072d6:	bf00      	nop
 80072d8:	2000001c 	.word	0x2000001c

080072dc <__sread>:
 80072dc:	b510      	push	{r4, lr}
 80072de:	460c      	mov	r4, r1
 80072e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e4:	f000 f952 	bl	800758c <_read_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	bfab      	itete	ge
 80072ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072ee:	89a3      	ldrhlt	r3, [r4, #12]
 80072f0:	181b      	addge	r3, r3, r0
 80072f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072f6:	bfac      	ite	ge
 80072f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072fa:	81a3      	strhlt	r3, [r4, #12]
 80072fc:	bd10      	pop	{r4, pc}

080072fe <__swrite>:
 80072fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007302:	461f      	mov	r7, r3
 8007304:	898b      	ldrh	r3, [r1, #12]
 8007306:	4605      	mov	r5, r0
 8007308:	05db      	lsls	r3, r3, #23
 800730a:	460c      	mov	r4, r1
 800730c:	4616      	mov	r6, r2
 800730e:	d505      	bpl.n	800731c <__swrite+0x1e>
 8007310:	2302      	movs	r3, #2
 8007312:	2200      	movs	r2, #0
 8007314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007318:	f000 f926 	bl	8007568 <_lseek_r>
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	4632      	mov	r2, r6
 8007320:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	4628      	mov	r0, r5
 8007328:	463b      	mov	r3, r7
 800732a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007332:	f000 b93d 	b.w	80075b0 <_write_r>

08007336 <__sseek>:
 8007336:	b510      	push	{r4, lr}
 8007338:	460c      	mov	r4, r1
 800733a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800733e:	f000 f913 	bl	8007568 <_lseek_r>
 8007342:	1c43      	adds	r3, r0, #1
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	bf15      	itete	ne
 8007348:	6560      	strne	r0, [r4, #84]	@ 0x54
 800734a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800734e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007352:	81a3      	strheq	r3, [r4, #12]
 8007354:	bf18      	it	ne
 8007356:	81a3      	strhne	r3, [r4, #12]
 8007358:	bd10      	pop	{r4, pc}

0800735a <__sclose>:
 800735a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735e:	f000 b89d 	b.w	800749c <_close_r>

08007362 <__swbuf_r>:
 8007362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007364:	460e      	mov	r6, r1
 8007366:	4614      	mov	r4, r2
 8007368:	4605      	mov	r5, r0
 800736a:	b118      	cbz	r0, 8007374 <__swbuf_r+0x12>
 800736c:	6a03      	ldr	r3, [r0, #32]
 800736e:	b90b      	cbnz	r3, 8007374 <__swbuf_r+0x12>
 8007370:	f7ff ff20 	bl	80071b4 <__sinit>
 8007374:	69a3      	ldr	r3, [r4, #24]
 8007376:	60a3      	str	r3, [r4, #8]
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	071a      	lsls	r2, r3, #28
 800737c:	d501      	bpl.n	8007382 <__swbuf_r+0x20>
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	b943      	cbnz	r3, 8007394 <__swbuf_r+0x32>
 8007382:	4621      	mov	r1, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f000 f82b 	bl	80073e0 <__swsetup_r>
 800738a:	b118      	cbz	r0, 8007394 <__swbuf_r+0x32>
 800738c:	f04f 37ff 	mov.w	r7, #4294967295
 8007390:	4638      	mov	r0, r7
 8007392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	6922      	ldr	r2, [r4, #16]
 8007398:	b2f6      	uxtb	r6, r6
 800739a:	1a98      	subs	r0, r3, r2
 800739c:	6963      	ldr	r3, [r4, #20]
 800739e:	4637      	mov	r7, r6
 80073a0:	4283      	cmp	r3, r0
 80073a2:	dc05      	bgt.n	80073b0 <__swbuf_r+0x4e>
 80073a4:	4621      	mov	r1, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 fac6 	bl	8007938 <_fflush_r>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d1ed      	bne.n	800738c <__swbuf_r+0x2a>
 80073b0:	68a3      	ldr	r3, [r4, #8]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	60a3      	str	r3, [r4, #8]
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	6022      	str	r2, [r4, #0]
 80073bc:	701e      	strb	r6, [r3, #0]
 80073be:	6962      	ldr	r2, [r4, #20]
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d004      	beq.n	80073d0 <__swbuf_r+0x6e>
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	07db      	lsls	r3, r3, #31
 80073ca:	d5e1      	bpl.n	8007390 <__swbuf_r+0x2e>
 80073cc:	2e0a      	cmp	r6, #10
 80073ce:	d1df      	bne.n	8007390 <__swbuf_r+0x2e>
 80073d0:	4621      	mov	r1, r4
 80073d2:	4628      	mov	r0, r5
 80073d4:	f000 fab0 	bl	8007938 <_fflush_r>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d0d9      	beq.n	8007390 <__swbuf_r+0x2e>
 80073dc:	e7d6      	b.n	800738c <__swbuf_r+0x2a>
	...

080073e0 <__swsetup_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4b29      	ldr	r3, [pc, #164]	@ (8007488 <__swsetup_r+0xa8>)
 80073e4:	4605      	mov	r5, r0
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	460c      	mov	r4, r1
 80073ea:	b118      	cbz	r0, 80073f4 <__swsetup_r+0x14>
 80073ec:	6a03      	ldr	r3, [r0, #32]
 80073ee:	b90b      	cbnz	r3, 80073f4 <__swsetup_r+0x14>
 80073f0:	f7ff fee0 	bl	80071b4 <__sinit>
 80073f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f8:	0719      	lsls	r1, r3, #28
 80073fa:	d422      	bmi.n	8007442 <__swsetup_r+0x62>
 80073fc:	06da      	lsls	r2, r3, #27
 80073fe:	d407      	bmi.n	8007410 <__swsetup_r+0x30>
 8007400:	2209      	movs	r2, #9
 8007402:	602a      	str	r2, [r5, #0]
 8007404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007408:	f04f 30ff 	mov.w	r0, #4294967295
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	e033      	b.n	8007478 <__swsetup_r+0x98>
 8007410:	0758      	lsls	r0, r3, #29
 8007412:	d512      	bpl.n	800743a <__swsetup_r+0x5a>
 8007414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007416:	b141      	cbz	r1, 800742a <__swsetup_r+0x4a>
 8007418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800741c:	4299      	cmp	r1, r3
 800741e:	d002      	beq.n	8007426 <__swsetup_r+0x46>
 8007420:	4628      	mov	r0, r5
 8007422:	f000 f913 	bl	800764c <_free_r>
 8007426:	2300      	movs	r3, #0
 8007428:	6363      	str	r3, [r4, #52]	@ 0x34
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007430:	81a3      	strh	r3, [r4, #12]
 8007432:	2300      	movs	r3, #0
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f043 0308 	orr.w	r3, r3, #8
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	b94b      	cbnz	r3, 800745a <__swsetup_r+0x7a>
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800744c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007450:	d003      	beq.n	800745a <__swsetup_r+0x7a>
 8007452:	4621      	mov	r1, r4
 8007454:	4628      	mov	r0, r5
 8007456:	f000 fabc 	bl	80079d2 <__smakebuf_r>
 800745a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745e:	f013 0201 	ands.w	r2, r3, #1
 8007462:	d00a      	beq.n	800747a <__swsetup_r+0x9a>
 8007464:	2200      	movs	r2, #0
 8007466:	60a2      	str	r2, [r4, #8]
 8007468:	6962      	ldr	r2, [r4, #20]
 800746a:	4252      	negs	r2, r2
 800746c:	61a2      	str	r2, [r4, #24]
 800746e:	6922      	ldr	r2, [r4, #16]
 8007470:	b942      	cbnz	r2, 8007484 <__swsetup_r+0xa4>
 8007472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007476:	d1c5      	bne.n	8007404 <__swsetup_r+0x24>
 8007478:	bd38      	pop	{r3, r4, r5, pc}
 800747a:	0799      	lsls	r1, r3, #30
 800747c:	bf58      	it	pl
 800747e:	6962      	ldrpl	r2, [r4, #20]
 8007480:	60a2      	str	r2, [r4, #8]
 8007482:	e7f4      	b.n	800746e <__swsetup_r+0x8e>
 8007484:	2000      	movs	r0, #0
 8007486:	e7f7      	b.n	8007478 <__swsetup_r+0x98>
 8007488:	2000001c 	.word	0x2000001c

0800748c <memset>:
 800748c:	4603      	mov	r3, r0
 800748e:	4402      	add	r2, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>

0800749c <_close_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	2300      	movs	r3, #0
 80074a0:	4d05      	ldr	r5, [pc, #20]	@ (80074b8 <_close_r+0x1c>)
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7f9 fb5f 	bl	8000b6a <_close>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_close_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_close_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20001d3c 	.word	0x20001d3c

080074bc <_reclaim_reent>:
 80074bc:	4b29      	ldr	r3, [pc, #164]	@ (8007564 <_reclaim_reent+0xa8>)
 80074be:	b570      	push	{r4, r5, r6, lr}
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4604      	mov	r4, r0
 80074c4:	4283      	cmp	r3, r0
 80074c6:	d04b      	beq.n	8007560 <_reclaim_reent+0xa4>
 80074c8:	69c3      	ldr	r3, [r0, #28]
 80074ca:	b1ab      	cbz	r3, 80074f8 <_reclaim_reent+0x3c>
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	b16b      	cbz	r3, 80074ec <_reclaim_reent+0x30>
 80074d0:	2500      	movs	r5, #0
 80074d2:	69e3      	ldr	r3, [r4, #28]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	5959      	ldr	r1, [r3, r5]
 80074d8:	2900      	cmp	r1, #0
 80074da:	d13b      	bne.n	8007554 <_reclaim_reent+0x98>
 80074dc:	3504      	adds	r5, #4
 80074de:	2d80      	cmp	r5, #128	@ 0x80
 80074e0:	d1f7      	bne.n	80074d2 <_reclaim_reent+0x16>
 80074e2:	69e3      	ldr	r3, [r4, #28]
 80074e4:	4620      	mov	r0, r4
 80074e6:	68d9      	ldr	r1, [r3, #12]
 80074e8:	f000 f8b0 	bl	800764c <_free_r>
 80074ec:	69e3      	ldr	r3, [r4, #28]
 80074ee:	6819      	ldr	r1, [r3, #0]
 80074f0:	b111      	cbz	r1, 80074f8 <_reclaim_reent+0x3c>
 80074f2:	4620      	mov	r0, r4
 80074f4:	f000 f8aa 	bl	800764c <_free_r>
 80074f8:	6961      	ldr	r1, [r4, #20]
 80074fa:	b111      	cbz	r1, 8007502 <_reclaim_reent+0x46>
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 f8a5 	bl	800764c <_free_r>
 8007502:	69e1      	ldr	r1, [r4, #28]
 8007504:	b111      	cbz	r1, 800750c <_reclaim_reent+0x50>
 8007506:	4620      	mov	r0, r4
 8007508:	f000 f8a0 	bl	800764c <_free_r>
 800750c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800750e:	b111      	cbz	r1, 8007516 <_reclaim_reent+0x5a>
 8007510:	4620      	mov	r0, r4
 8007512:	f000 f89b 	bl	800764c <_free_r>
 8007516:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007518:	b111      	cbz	r1, 8007520 <_reclaim_reent+0x64>
 800751a:	4620      	mov	r0, r4
 800751c:	f000 f896 	bl	800764c <_free_r>
 8007520:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007522:	b111      	cbz	r1, 800752a <_reclaim_reent+0x6e>
 8007524:	4620      	mov	r0, r4
 8007526:	f000 f891 	bl	800764c <_free_r>
 800752a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800752c:	b111      	cbz	r1, 8007534 <_reclaim_reent+0x78>
 800752e:	4620      	mov	r0, r4
 8007530:	f000 f88c 	bl	800764c <_free_r>
 8007534:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007536:	b111      	cbz	r1, 800753e <_reclaim_reent+0x82>
 8007538:	4620      	mov	r0, r4
 800753a:	f000 f887 	bl	800764c <_free_r>
 800753e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007540:	b111      	cbz	r1, 8007548 <_reclaim_reent+0x8c>
 8007542:	4620      	mov	r0, r4
 8007544:	f000 f882 	bl	800764c <_free_r>
 8007548:	6a23      	ldr	r3, [r4, #32]
 800754a:	b14b      	cbz	r3, 8007560 <_reclaim_reent+0xa4>
 800754c:	4620      	mov	r0, r4
 800754e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007552:	4718      	bx	r3
 8007554:	680e      	ldr	r6, [r1, #0]
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f878 	bl	800764c <_free_r>
 800755c:	4631      	mov	r1, r6
 800755e:	e7bb      	b.n	80074d8 <_reclaim_reent+0x1c>
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	bf00      	nop
 8007564:	2000001c 	.word	0x2000001c

08007568 <_lseek_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	4611      	mov	r1, r2
 8007570:	2200      	movs	r2, #0
 8007572:	4d05      	ldr	r5, [pc, #20]	@ (8007588 <_lseek_r+0x20>)
 8007574:	602a      	str	r2, [r5, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	f7f9 fb1b 	bl	8000bb2 <_lseek>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_lseek_r+0x1e>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_lseek_r+0x1e>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20001d3c 	.word	0x20001d3c

0800758c <_read_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	2200      	movs	r2, #0
 8007596:	4d05      	ldr	r5, [pc, #20]	@ (80075ac <_read_r+0x20>)
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7f9 faac 	bl	8000af8 <_read>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_read_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_read_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20001d3c 	.word	0x20001d3c

080075b0 <_write_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4604      	mov	r4, r0
 80075b4:	4608      	mov	r0, r1
 80075b6:	4611      	mov	r1, r2
 80075b8:	2200      	movs	r2, #0
 80075ba:	4d05      	ldr	r5, [pc, #20]	@ (80075d0 <_write_r+0x20>)
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f7f9 fab7 	bl	8000b32 <_write>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_write_r+0x1e>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_write_r+0x1e>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20001d3c 	.word	0x20001d3c

080075d4 <__errno>:
 80075d4:	4b01      	ldr	r3, [pc, #4]	@ (80075dc <__errno+0x8>)
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	2000001c 	.word	0x2000001c

080075e0 <__libc_init_array>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	2600      	movs	r6, #0
 80075e4:	4d0c      	ldr	r5, [pc, #48]	@ (8007618 <__libc_init_array+0x38>)
 80075e6:	4c0d      	ldr	r4, [pc, #52]	@ (800761c <__libc_init_array+0x3c>)
 80075e8:	1b64      	subs	r4, r4, r5
 80075ea:	10a4      	asrs	r4, r4, #2
 80075ec:	42a6      	cmp	r6, r4
 80075ee:	d109      	bne.n	8007604 <__libc_init_array+0x24>
 80075f0:	f000 fa5e 	bl	8007ab0 <_init>
 80075f4:	2600      	movs	r6, #0
 80075f6:	4d0a      	ldr	r5, [pc, #40]	@ (8007620 <__libc_init_array+0x40>)
 80075f8:	4c0a      	ldr	r4, [pc, #40]	@ (8007624 <__libc_init_array+0x44>)
 80075fa:	1b64      	subs	r4, r4, r5
 80075fc:	10a4      	asrs	r4, r4, #2
 80075fe:	42a6      	cmp	r6, r4
 8007600:	d105      	bne.n	800760e <__libc_init_array+0x2e>
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	f855 3b04 	ldr.w	r3, [r5], #4
 8007608:	4798      	blx	r3
 800760a:	3601      	adds	r6, #1
 800760c:	e7ee      	b.n	80075ec <__libc_init_array+0xc>
 800760e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007612:	4798      	blx	r3
 8007614:	3601      	adds	r6, #1
 8007616:	e7f2      	b.n	80075fe <__libc_init_array+0x1e>
 8007618:	08007ba8 	.word	0x08007ba8
 800761c:	08007ba8 	.word	0x08007ba8
 8007620:	08007ba8 	.word	0x08007ba8
 8007624:	08007bac 	.word	0x08007bac

08007628 <__retarget_lock_init_recursive>:
 8007628:	4770      	bx	lr

0800762a <__retarget_lock_acquire_recursive>:
 800762a:	4770      	bx	lr

0800762c <__retarget_lock_release_recursive>:
 800762c:	4770      	bx	lr

0800762e <memcpy>:
 800762e:	440a      	add	r2, r1
 8007630:	4291      	cmp	r1, r2
 8007632:	f100 33ff 	add.w	r3, r0, #4294967295
 8007636:	d100      	bne.n	800763a <memcpy+0xc>
 8007638:	4770      	bx	lr
 800763a:	b510      	push	{r4, lr}
 800763c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007640:	4291      	cmp	r1, r2
 8007642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007646:	d1f9      	bne.n	800763c <memcpy+0xe>
 8007648:	bd10      	pop	{r4, pc}
	...

0800764c <_free_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4605      	mov	r5, r0
 8007650:	2900      	cmp	r1, #0
 8007652:	d040      	beq.n	80076d6 <_free_r+0x8a>
 8007654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007658:	1f0c      	subs	r4, r1, #4
 800765a:	2b00      	cmp	r3, #0
 800765c:	bfb8      	it	lt
 800765e:	18e4      	addlt	r4, r4, r3
 8007660:	f000 f8de 	bl	8007820 <__malloc_lock>
 8007664:	4a1c      	ldr	r2, [pc, #112]	@ (80076d8 <_free_r+0x8c>)
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	b933      	cbnz	r3, 8007678 <_free_r+0x2c>
 800766a:	6063      	str	r3, [r4, #4]
 800766c:	6014      	str	r4, [r2, #0]
 800766e:	4628      	mov	r0, r5
 8007670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007674:	f000 b8da 	b.w	800782c <__malloc_unlock>
 8007678:	42a3      	cmp	r3, r4
 800767a:	d908      	bls.n	800768e <_free_r+0x42>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	1821      	adds	r1, r4, r0
 8007680:	428b      	cmp	r3, r1
 8007682:	bf01      	itttt	eq
 8007684:	6819      	ldreq	r1, [r3, #0]
 8007686:	685b      	ldreq	r3, [r3, #4]
 8007688:	1809      	addeq	r1, r1, r0
 800768a:	6021      	streq	r1, [r4, #0]
 800768c:	e7ed      	b.n	800766a <_free_r+0x1e>
 800768e:	461a      	mov	r2, r3
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	b10b      	cbz	r3, 8007698 <_free_r+0x4c>
 8007694:	42a3      	cmp	r3, r4
 8007696:	d9fa      	bls.n	800768e <_free_r+0x42>
 8007698:	6811      	ldr	r1, [r2, #0]
 800769a:	1850      	adds	r0, r2, r1
 800769c:	42a0      	cmp	r0, r4
 800769e:	d10b      	bne.n	80076b8 <_free_r+0x6c>
 80076a0:	6820      	ldr	r0, [r4, #0]
 80076a2:	4401      	add	r1, r0
 80076a4:	1850      	adds	r0, r2, r1
 80076a6:	4283      	cmp	r3, r0
 80076a8:	6011      	str	r1, [r2, #0]
 80076aa:	d1e0      	bne.n	800766e <_free_r+0x22>
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	4408      	add	r0, r1
 80076b2:	6010      	str	r0, [r2, #0]
 80076b4:	6053      	str	r3, [r2, #4]
 80076b6:	e7da      	b.n	800766e <_free_r+0x22>
 80076b8:	d902      	bls.n	80076c0 <_free_r+0x74>
 80076ba:	230c      	movs	r3, #12
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	e7d6      	b.n	800766e <_free_r+0x22>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	1821      	adds	r1, r4, r0
 80076c4:	428b      	cmp	r3, r1
 80076c6:	bf01      	itttt	eq
 80076c8:	6819      	ldreq	r1, [r3, #0]
 80076ca:	685b      	ldreq	r3, [r3, #4]
 80076cc:	1809      	addeq	r1, r1, r0
 80076ce:	6021      	streq	r1, [r4, #0]
 80076d0:	6063      	str	r3, [r4, #4]
 80076d2:	6054      	str	r4, [r2, #4]
 80076d4:	e7cb      	b.n	800766e <_free_r+0x22>
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	20001d48 	.word	0x20001d48

080076dc <sbrk_aligned>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4e0f      	ldr	r6, [pc, #60]	@ (800771c <sbrk_aligned+0x40>)
 80076e0:	460c      	mov	r4, r1
 80076e2:	6831      	ldr	r1, [r6, #0]
 80076e4:	4605      	mov	r5, r0
 80076e6:	b911      	cbnz	r1, 80076ee <sbrk_aligned+0x12>
 80076e8:	f000 f9d2 	bl	8007a90 <_sbrk_r>
 80076ec:	6030      	str	r0, [r6, #0]
 80076ee:	4621      	mov	r1, r4
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 f9cd 	bl	8007a90 <_sbrk_r>
 80076f6:	1c43      	adds	r3, r0, #1
 80076f8:	d103      	bne.n	8007702 <sbrk_aligned+0x26>
 80076fa:	f04f 34ff 	mov.w	r4, #4294967295
 80076fe:	4620      	mov	r0, r4
 8007700:	bd70      	pop	{r4, r5, r6, pc}
 8007702:	1cc4      	adds	r4, r0, #3
 8007704:	f024 0403 	bic.w	r4, r4, #3
 8007708:	42a0      	cmp	r0, r4
 800770a:	d0f8      	beq.n	80076fe <sbrk_aligned+0x22>
 800770c:	1a21      	subs	r1, r4, r0
 800770e:	4628      	mov	r0, r5
 8007710:	f000 f9be 	bl	8007a90 <_sbrk_r>
 8007714:	3001      	adds	r0, #1
 8007716:	d1f2      	bne.n	80076fe <sbrk_aligned+0x22>
 8007718:	e7ef      	b.n	80076fa <sbrk_aligned+0x1e>
 800771a:	bf00      	nop
 800771c:	20001d44 	.word	0x20001d44

08007720 <_malloc_r>:
 8007720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007724:	1ccd      	adds	r5, r1, #3
 8007726:	f025 0503 	bic.w	r5, r5, #3
 800772a:	3508      	adds	r5, #8
 800772c:	2d0c      	cmp	r5, #12
 800772e:	bf38      	it	cc
 8007730:	250c      	movcc	r5, #12
 8007732:	2d00      	cmp	r5, #0
 8007734:	4606      	mov	r6, r0
 8007736:	db01      	blt.n	800773c <_malloc_r+0x1c>
 8007738:	42a9      	cmp	r1, r5
 800773a:	d904      	bls.n	8007746 <_malloc_r+0x26>
 800773c:	230c      	movs	r3, #12
 800773e:	6033      	str	r3, [r6, #0]
 8007740:	2000      	movs	r0, #0
 8007742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800781c <_malloc_r+0xfc>
 800774a:	f000 f869 	bl	8007820 <__malloc_lock>
 800774e:	f8d8 3000 	ldr.w	r3, [r8]
 8007752:	461c      	mov	r4, r3
 8007754:	bb44      	cbnz	r4, 80077a8 <_malloc_r+0x88>
 8007756:	4629      	mov	r1, r5
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff ffbf 	bl	80076dc <sbrk_aligned>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	4604      	mov	r4, r0
 8007762:	d158      	bne.n	8007816 <_malloc_r+0xf6>
 8007764:	f8d8 4000 	ldr.w	r4, [r8]
 8007768:	4627      	mov	r7, r4
 800776a:	2f00      	cmp	r7, #0
 800776c:	d143      	bne.n	80077f6 <_malloc_r+0xd6>
 800776e:	2c00      	cmp	r4, #0
 8007770:	d04b      	beq.n	800780a <_malloc_r+0xea>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	4639      	mov	r1, r7
 8007776:	4630      	mov	r0, r6
 8007778:	eb04 0903 	add.w	r9, r4, r3
 800777c:	f000 f988 	bl	8007a90 <_sbrk_r>
 8007780:	4581      	cmp	r9, r0
 8007782:	d142      	bne.n	800780a <_malloc_r+0xea>
 8007784:	6821      	ldr	r1, [r4, #0]
 8007786:	4630      	mov	r0, r6
 8007788:	1a6d      	subs	r5, r5, r1
 800778a:	4629      	mov	r1, r5
 800778c:	f7ff ffa6 	bl	80076dc <sbrk_aligned>
 8007790:	3001      	adds	r0, #1
 8007792:	d03a      	beq.n	800780a <_malloc_r+0xea>
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	442b      	add	r3, r5
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	f8d8 3000 	ldr.w	r3, [r8]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	bb62      	cbnz	r2, 80077fc <_malloc_r+0xdc>
 80077a2:	f8c8 7000 	str.w	r7, [r8]
 80077a6:	e00f      	b.n	80077c8 <_malloc_r+0xa8>
 80077a8:	6822      	ldr	r2, [r4, #0]
 80077aa:	1b52      	subs	r2, r2, r5
 80077ac:	d420      	bmi.n	80077f0 <_malloc_r+0xd0>
 80077ae:	2a0b      	cmp	r2, #11
 80077b0:	d917      	bls.n	80077e2 <_malloc_r+0xc2>
 80077b2:	1961      	adds	r1, r4, r5
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	6025      	str	r5, [r4, #0]
 80077b8:	bf18      	it	ne
 80077ba:	6059      	strne	r1, [r3, #4]
 80077bc:	6863      	ldr	r3, [r4, #4]
 80077be:	bf08      	it	eq
 80077c0:	f8c8 1000 	streq.w	r1, [r8]
 80077c4:	5162      	str	r2, [r4, r5]
 80077c6:	604b      	str	r3, [r1, #4]
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 f82f 	bl	800782c <__malloc_unlock>
 80077ce:	f104 000b 	add.w	r0, r4, #11
 80077d2:	1d23      	adds	r3, r4, #4
 80077d4:	f020 0007 	bic.w	r0, r0, #7
 80077d8:	1ac2      	subs	r2, r0, r3
 80077da:	bf1c      	itt	ne
 80077dc:	1a1b      	subne	r3, r3, r0
 80077de:	50a3      	strne	r3, [r4, r2]
 80077e0:	e7af      	b.n	8007742 <_malloc_r+0x22>
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	bf0c      	ite	eq
 80077e8:	f8c8 2000 	streq.w	r2, [r8]
 80077ec:	605a      	strne	r2, [r3, #4]
 80077ee:	e7eb      	b.n	80077c8 <_malloc_r+0xa8>
 80077f0:	4623      	mov	r3, r4
 80077f2:	6864      	ldr	r4, [r4, #4]
 80077f4:	e7ae      	b.n	8007754 <_malloc_r+0x34>
 80077f6:	463c      	mov	r4, r7
 80077f8:	687f      	ldr	r7, [r7, #4]
 80077fa:	e7b6      	b.n	800776a <_malloc_r+0x4a>
 80077fc:	461a      	mov	r2, r3
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	42a3      	cmp	r3, r4
 8007802:	d1fb      	bne.n	80077fc <_malloc_r+0xdc>
 8007804:	2300      	movs	r3, #0
 8007806:	6053      	str	r3, [r2, #4]
 8007808:	e7de      	b.n	80077c8 <_malloc_r+0xa8>
 800780a:	230c      	movs	r3, #12
 800780c:	4630      	mov	r0, r6
 800780e:	6033      	str	r3, [r6, #0]
 8007810:	f000 f80c 	bl	800782c <__malloc_unlock>
 8007814:	e794      	b.n	8007740 <_malloc_r+0x20>
 8007816:	6005      	str	r5, [r0, #0]
 8007818:	e7d6      	b.n	80077c8 <_malloc_r+0xa8>
 800781a:	bf00      	nop
 800781c:	20001d48 	.word	0x20001d48

08007820 <__malloc_lock>:
 8007820:	4801      	ldr	r0, [pc, #4]	@ (8007828 <__malloc_lock+0x8>)
 8007822:	f7ff bf02 	b.w	800762a <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	20001d40 	.word	0x20001d40

0800782c <__malloc_unlock>:
 800782c:	4801      	ldr	r0, [pc, #4]	@ (8007834 <__malloc_unlock+0x8>)
 800782e:	f7ff befd 	b.w	800762c <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	20001d40 	.word	0x20001d40

08007838 <__sflush_r>:
 8007838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	0716      	lsls	r6, r2, #28
 8007840:	4605      	mov	r5, r0
 8007842:	460c      	mov	r4, r1
 8007844:	d454      	bmi.n	80078f0 <__sflush_r+0xb8>
 8007846:	684b      	ldr	r3, [r1, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	dc02      	bgt.n	8007852 <__sflush_r+0x1a>
 800784c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	dd48      	ble.n	80078e4 <__sflush_r+0xac>
 8007852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007854:	2e00      	cmp	r6, #0
 8007856:	d045      	beq.n	80078e4 <__sflush_r+0xac>
 8007858:	2300      	movs	r3, #0
 800785a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800785e:	682f      	ldr	r7, [r5, #0]
 8007860:	6a21      	ldr	r1, [r4, #32]
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	d030      	beq.n	80078c8 <__sflush_r+0x90>
 8007866:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	0759      	lsls	r1, r3, #29
 800786c:	d505      	bpl.n	800787a <__sflush_r+0x42>
 800786e:	6863      	ldr	r3, [r4, #4]
 8007870:	1ad2      	subs	r2, r2, r3
 8007872:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007874:	b10b      	cbz	r3, 800787a <__sflush_r+0x42>
 8007876:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007878:	1ad2      	subs	r2, r2, r3
 800787a:	2300      	movs	r3, #0
 800787c:	4628      	mov	r0, r5
 800787e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007880:	6a21      	ldr	r1, [r4, #32]
 8007882:	47b0      	blx	r6
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	d106      	bne.n	8007898 <__sflush_r+0x60>
 800788a:	6829      	ldr	r1, [r5, #0]
 800788c:	291d      	cmp	r1, #29
 800788e:	d82b      	bhi.n	80078e8 <__sflush_r+0xb0>
 8007890:	4a28      	ldr	r2, [pc, #160]	@ (8007934 <__sflush_r+0xfc>)
 8007892:	410a      	asrs	r2, r1
 8007894:	07d6      	lsls	r6, r2, #31
 8007896:	d427      	bmi.n	80078e8 <__sflush_r+0xb0>
 8007898:	2200      	movs	r2, #0
 800789a:	6062      	str	r2, [r4, #4]
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	04d9      	lsls	r1, r3, #19
 80078a0:	6022      	str	r2, [r4, #0]
 80078a2:	d504      	bpl.n	80078ae <__sflush_r+0x76>
 80078a4:	1c42      	adds	r2, r0, #1
 80078a6:	d101      	bne.n	80078ac <__sflush_r+0x74>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b903      	cbnz	r3, 80078ae <__sflush_r+0x76>
 80078ac:	6560      	str	r0, [r4, #84]	@ 0x54
 80078ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078b0:	602f      	str	r7, [r5, #0]
 80078b2:	b1b9      	cbz	r1, 80078e4 <__sflush_r+0xac>
 80078b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d002      	beq.n	80078c2 <__sflush_r+0x8a>
 80078bc:	4628      	mov	r0, r5
 80078be:	f7ff fec5 	bl	800764c <_free_r>
 80078c2:	2300      	movs	r3, #0
 80078c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80078c6:	e00d      	b.n	80078e4 <__sflush_r+0xac>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b0      	blx	r6
 80078ce:	4602      	mov	r2, r0
 80078d0:	1c50      	adds	r0, r2, #1
 80078d2:	d1c9      	bne.n	8007868 <__sflush_r+0x30>
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0c6      	beq.n	8007868 <__sflush_r+0x30>
 80078da:	2b1d      	cmp	r3, #29
 80078dc:	d001      	beq.n	80078e2 <__sflush_r+0xaa>
 80078de:	2b16      	cmp	r3, #22
 80078e0:	d11d      	bne.n	800791e <__sflush_r+0xe6>
 80078e2:	602f      	str	r7, [r5, #0]
 80078e4:	2000      	movs	r0, #0
 80078e6:	e021      	b.n	800792c <__sflush_r+0xf4>
 80078e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ec:	b21b      	sxth	r3, r3
 80078ee:	e01a      	b.n	8007926 <__sflush_r+0xee>
 80078f0:	690f      	ldr	r7, [r1, #16]
 80078f2:	2f00      	cmp	r7, #0
 80078f4:	d0f6      	beq.n	80078e4 <__sflush_r+0xac>
 80078f6:	0793      	lsls	r3, r2, #30
 80078f8:	bf18      	it	ne
 80078fa:	2300      	movne	r3, #0
 80078fc:	680e      	ldr	r6, [r1, #0]
 80078fe:	bf08      	it	eq
 8007900:	694b      	ldreq	r3, [r1, #20]
 8007902:	1bf6      	subs	r6, r6, r7
 8007904:	600f      	str	r7, [r1, #0]
 8007906:	608b      	str	r3, [r1, #8]
 8007908:	2e00      	cmp	r6, #0
 800790a:	ddeb      	ble.n	80078e4 <__sflush_r+0xac>
 800790c:	4633      	mov	r3, r6
 800790e:	463a      	mov	r2, r7
 8007910:	4628      	mov	r0, r5
 8007912:	6a21      	ldr	r1, [r4, #32]
 8007914:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007918:	47e0      	blx	ip
 800791a:	2800      	cmp	r0, #0
 800791c:	dc07      	bgt.n	800792e <__sflush_r+0xf6>
 800791e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007926:	f04f 30ff 	mov.w	r0, #4294967295
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800792e:	4407      	add	r7, r0
 8007930:	1a36      	subs	r6, r6, r0
 8007932:	e7e9      	b.n	8007908 <__sflush_r+0xd0>
 8007934:	dfbffffe 	.word	0xdfbffffe

08007938 <_fflush_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	690b      	ldr	r3, [r1, #16]
 800793c:	4605      	mov	r5, r0
 800793e:	460c      	mov	r4, r1
 8007940:	b913      	cbnz	r3, 8007948 <_fflush_r+0x10>
 8007942:	2500      	movs	r5, #0
 8007944:	4628      	mov	r0, r5
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	b118      	cbz	r0, 8007952 <_fflush_r+0x1a>
 800794a:	6a03      	ldr	r3, [r0, #32]
 800794c:	b90b      	cbnz	r3, 8007952 <_fflush_r+0x1a>
 800794e:	f7ff fc31 	bl	80071b4 <__sinit>
 8007952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f3      	beq.n	8007942 <_fflush_r+0xa>
 800795a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800795c:	07d0      	lsls	r0, r2, #31
 800795e:	d404      	bmi.n	800796a <_fflush_r+0x32>
 8007960:	0599      	lsls	r1, r3, #22
 8007962:	d402      	bmi.n	800796a <_fflush_r+0x32>
 8007964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007966:	f7ff fe60 	bl	800762a <__retarget_lock_acquire_recursive>
 800796a:	4628      	mov	r0, r5
 800796c:	4621      	mov	r1, r4
 800796e:	f7ff ff63 	bl	8007838 <__sflush_r>
 8007972:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007974:	4605      	mov	r5, r0
 8007976:	07da      	lsls	r2, r3, #31
 8007978:	d4e4      	bmi.n	8007944 <_fflush_r+0xc>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	059b      	lsls	r3, r3, #22
 800797e:	d4e1      	bmi.n	8007944 <_fflush_r+0xc>
 8007980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007982:	f7ff fe53 	bl	800762c <__retarget_lock_release_recursive>
 8007986:	e7dd      	b.n	8007944 <_fflush_r+0xc>

08007988 <__swhatbuf_r>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007990:	4615      	mov	r5, r2
 8007992:	2900      	cmp	r1, #0
 8007994:	461e      	mov	r6, r3
 8007996:	b096      	sub	sp, #88	@ 0x58
 8007998:	da0c      	bge.n	80079b4 <__swhatbuf_r+0x2c>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	2100      	movs	r1, #0
 800799e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079a2:	bf14      	ite	ne
 80079a4:	2340      	movne	r3, #64	@ 0x40
 80079a6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079aa:	2000      	movs	r0, #0
 80079ac:	6031      	str	r1, [r6, #0]
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	b016      	add	sp, #88	@ 0x58
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	466a      	mov	r2, sp
 80079b6:	f000 f849 	bl	8007a4c <_fstat_r>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	dbed      	blt.n	800799a <__swhatbuf_r+0x12>
 80079be:	9901      	ldr	r1, [sp, #4]
 80079c0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079c4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079c8:	4259      	negs	r1, r3
 80079ca:	4159      	adcs	r1, r3
 80079cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079d0:	e7eb      	b.n	80079aa <__swhatbuf_r+0x22>

080079d2 <__smakebuf_r>:
 80079d2:	898b      	ldrh	r3, [r1, #12]
 80079d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d6:	079d      	lsls	r5, r3, #30
 80079d8:	4606      	mov	r6, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	d507      	bpl.n	80079ee <__smakebuf_r+0x1c>
 80079de:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	6123      	str	r3, [r4, #16]
 80079e6:	2301      	movs	r3, #1
 80079e8:	6163      	str	r3, [r4, #20]
 80079ea:	b003      	add	sp, #12
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ee:	466a      	mov	r2, sp
 80079f0:	ab01      	add	r3, sp, #4
 80079f2:	f7ff ffc9 	bl	8007988 <__swhatbuf_r>
 80079f6:	9f00      	ldr	r7, [sp, #0]
 80079f8:	4605      	mov	r5, r0
 80079fa:	4639      	mov	r1, r7
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7ff fe8f 	bl	8007720 <_malloc_r>
 8007a02:	b948      	cbnz	r0, 8007a18 <__smakebuf_r+0x46>
 8007a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a08:	059a      	lsls	r2, r3, #22
 8007a0a:	d4ee      	bmi.n	80079ea <__smakebuf_r+0x18>
 8007a0c:	f023 0303 	bic.w	r3, r3, #3
 8007a10:	f043 0302 	orr.w	r3, r3, #2
 8007a14:	81a3      	strh	r3, [r4, #12]
 8007a16:	e7e2      	b.n	80079de <__smakebuf_r+0xc>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	9b01      	ldr	r3, [sp, #4]
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	b15b      	cbz	r3, 8007a42 <__smakebuf_r+0x70>
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a30:	f000 f81e 	bl	8007a70 <_isatty_r>
 8007a34:	b128      	cbz	r0, 8007a42 <__smakebuf_r+0x70>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	f023 0303 	bic.w	r3, r3, #3
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	431d      	orrs	r5, r3
 8007a46:	81a5      	strh	r5, [r4, #12]
 8007a48:	e7cf      	b.n	80079ea <__smakebuf_r+0x18>
	...

08007a4c <_fstat_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4d06      	ldr	r5, [pc, #24]	@ (8007a6c <_fstat_r+0x20>)
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f7f9 f891 	bl	8000b80 <_fstat>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d102      	bne.n	8007a68 <_fstat_r+0x1c>
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	b103      	cbz	r3, 8007a68 <_fstat_r+0x1c>
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	bd38      	pop	{r3, r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20001d3c 	.word	0x20001d3c

08007a70 <_isatty_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	2300      	movs	r3, #0
 8007a74:	4d05      	ldr	r5, [pc, #20]	@ (8007a8c <_isatty_r+0x1c>)
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	f7f9 f88f 	bl	8000b9e <_isatty>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_isatty_r+0x1a>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_isatty_r+0x1a>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	20001d3c 	.word	0x20001d3c

08007a90 <_sbrk_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	2300      	movs	r3, #0
 8007a94:	4d05      	ldr	r5, [pc, #20]	@ (8007aac <_sbrk_r+0x1c>)
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7f9 f896 	bl	8000bcc <_sbrk>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_sbrk_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_sbrk_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20001d3c 	.word	0x20001d3c

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
