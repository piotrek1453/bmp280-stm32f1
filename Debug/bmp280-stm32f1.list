
bmp280-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c48  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e0c  08005e0c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e0c  08005e0c  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e0c  08005e0c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e0c  08005e0c  00006e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005e14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c3c  2000006c  08005e80  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ca8  08005e80  00007ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198a2  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9f  00000000  00000000  00020937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  000243d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c6  00000000  00000000  00025a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005c4d  00000000  00000000  00026c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c143  00000000  00000000  0002c8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098553  00000000  00000000  000489ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0f41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006580  00000000  00000000  000e0f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e7504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d40 	.word	0x08005d40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005d40 	.word	0x08005d40

08000150 <vApplicationIdleHook>:

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  memory allocated by the kernel to any task that has since been deleted. */
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
  // printf("idle task\r\n");
  //  vTaskDelay(pdMS_TO_TICKS(1000));
}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of USART2TxMutex */
  USART2TxMutexHandle = osMutexNew(&USART2TxMutex_attributes);
 8000160:	4807      	ldr	r0, [pc, #28]	@ (8000180 <MX_FREERTOS_Init+0x24>)
 8000162:	f002 f861 	bl	8002228 <osMutexNew>
 8000166:	4603      	mov	r3, r0
 8000168:	4a06      	ldr	r2, [pc, #24]	@ (8000184 <MX_FREERTOS_Init+0x28>)
 800016a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of statusTask */
  statusTaskHandle = osThreadNew(vStatusTask, NULL, &statusTask_attributes);
 800016c:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <MX_FREERTOS_Init+0x2c>)
 800016e:	2100      	movs	r1, #0
 8000170:	4806      	ldr	r0, [pc, #24]	@ (800018c <MX_FREERTOS_Init+0x30>)
 8000172:	f001 ffaf 	bl	80020d4 <osThreadNew>
 8000176:	4603      	mov	r3, r0
 8000178:	4a05      	ldr	r2, [pc, #20]	@ (8000190 <MX_FREERTOS_Init+0x34>)
 800017a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 800017c:	bf00      	nop
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08005dd0 	.word	0x08005dd0
 8000184:	2000008c 	.word	0x2000008c
 8000188:	08005dac 	.word	0x08005dac
 800018c:	08000195 	.word	0x08000195
 8000190:	20000088 	.word	0x20000088

08000194 <vStatusTask>:
 * @brief  Function implementing the statusTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_vStatusTask */
void vStatusTask(void *argument) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStatusTask */
  /* Infinite loop */
  while (true) {
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 800019c:	2104      	movs	r1, #4
 800019e:	480f      	ldr	r0, [pc, #60]	@ (80001dc <vStatusTask+0x48>)
 80001a0:	f000 fe6c 	bl	8000e7c <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
 80001a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a8:	480d      	ldr	r0, [pc, #52]	@ (80001e0 <vStatusTask+0x4c>)
 80001aa:	f000 fe67 	bl	8000e7c <HAL_GPIO_TogglePin>
    if (osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 80001ae:	4b0d      	ldr	r3, [pc, #52]	@ (80001e4 <vStatusTask+0x50>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f04f 31ff 	mov.w	r1, #4294967295
 80001b6:	4618      	mov	r0, r3
 80001b8:	f002 f8d0 	bl	800235c <osMutexAcquire>
 80001bc:	4603      	mov	r3, r0
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d107      	bne.n	80001d2 <vStatusTask+0x3e>
      printf("test\r\n");
 80001c2:	4809      	ldr	r0, [pc, #36]	@ (80001e8 <vStatusTask+0x54>)
 80001c4:	f005 f9ca 	bl	800555c <puts>
      osMutexRelease(USART2TxMutexHandle);
 80001c8:	4b06      	ldr	r3, [pc, #24]	@ (80001e4 <vStatusTask+0x50>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4618      	mov	r0, r3
 80001ce:	f002 f923 	bl	8002418 <osMutexRelease>
    }
    vTaskDelay(pdMS_TO_TICKS(1000));
 80001d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001d6:	f003 fb1b 	bl	8003810 <vTaskDelay>
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 80001da:	e7df      	b.n	800019c <vStatusTask+0x8>
 80001dc:	40010c00 	.word	0x40010c00
 80001e0:	40011000 	.word	0x40011000
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	08005d74 	.word	0x08005d74

080001ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000200:	4b38      	ldr	r3, [pc, #224]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a37      	ldr	r2, [pc, #220]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 8000206:	f043 0310 	orr.w	r3, r3, #16
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b35      	ldr	r3, [pc, #212]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0310 	and.w	r3, r3, #16
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000218:	4b32      	ldr	r3, [pc, #200]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a31      	ldr	r2, [pc, #196]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6193      	str	r3, [r2, #24]
 8000224:	4b2f      	ldr	r3, [pc, #188]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	f003 0320 	and.w	r3, r3, #32
 800022c:	60bb      	str	r3, [r7, #8]
 800022e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000230:	4b2c      	ldr	r3, [pc, #176]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a2b      	ldr	r2, [pc, #172]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 8000236:	f043 0304 	orr.w	r3, r3, #4
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b29      	ldr	r3, [pc, #164]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0304 	and.w	r3, r3, #4
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000248:	4b26      	ldr	r3, [pc, #152]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a25      	ldr	r2, [pc, #148]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 800024e:	f043 0308 	orr.w	r3, r3, #8
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b23      	ldr	r3, [pc, #140]	@ (80002e4 <MX_GPIO_Init+0xf8>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0308 	and.w	r3, r3, #8
 800025c:	603b      	str	r3, [r7, #0]
 800025e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000266:	4820      	ldr	r0, [pc, #128]	@ (80002e8 <MX_GPIO_Init+0xfc>)
 8000268:	f000 fdf0 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2104      	movs	r1, #4
 8000270:	481e      	ldr	r0, [pc, #120]	@ (80002ec <MX_GPIO_Init+0x100>)
 8000272:	f000 fdeb 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_2_Pin;
 8000276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800027c:	2301      	movs	r3, #1
 800027e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000284:	2302      	movs	r3, #2
 8000286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_2_GPIO_Port, &GPIO_InitStruct);
 8000288:	f107 0310 	add.w	r3, r7, #16
 800028c:	4619      	mov	r1, r3
 800028e:	4816      	ldr	r0, [pc, #88]	@ (80002e8 <MX_GPIO_Init+0xfc>)
 8000290:	f000 fc58 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000294:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8000298:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800029a:	2303      	movs	r3, #3
 800029c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	4812      	ldr	r0, [pc, #72]	@ (80002f0 <MX_GPIO_Init+0x104>)
 80002a6:	f000 fc4d 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80002aa:	f64f 733b 	movw	r3, #65339	@ 0xff3b
 80002ae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b0:	2303      	movs	r3, #3
 80002b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b4:	f107 0310 	add.w	r3, r7, #16
 80002b8:	4619      	mov	r1, r3
 80002ba:	480c      	ldr	r0, [pc, #48]	@ (80002ec <MX_GPIO_Init+0x100>)
 80002bc:	f000 fc42 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_1_Pin;
 80002c0:	2304      	movs	r3, #4
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c4:	2301      	movs	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002cc:	2302      	movs	r3, #2
 80002ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_1_GPIO_Port, &GPIO_InitStruct);
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	4619      	mov	r1, r3
 80002d6:	4805      	ldr	r0, [pc, #20]	@ (80002ec <MX_GPIO_Init+0x100>)
 80002d8:	f000 fc34 	bl	8000b44 <HAL_GPIO_Init>

}
 80002dc:	bf00      	nop
 80002de:	3720      	adds	r7, #32
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40011000 	.word	0x40011000
 80002ec:	40010c00 	.word	0x40010c00
 80002f0:	40010800 	.word	0x40010800

080002f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f8:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <MX_I2C1_Init+0x50>)
 80002fa:	4a13      	ldr	r2, [pc, #76]	@ (8000348 <MX_I2C1_Init+0x54>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_I2C1_Init+0x50>)
 8000300:	4a12      	ldr	r2, [pc, #72]	@ (800034c <MX_I2C1_Init+0x58>)
 8000302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <MX_I2C1_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <MX_I2C1_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <MX_I2C1_Init+0x50>)
 8000312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000318:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000324:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <MX_I2C1_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <MX_I2C1_Init+0x50>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	@ (8000344 <MX_I2C1_Init+0x50>)
 8000332:	f000 fdbd 	bl	8000eb0 <HAL_I2C_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800033c:	f000 f8d0 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000090 	.word	0x20000090
 8000348:	40005400 	.word	0x40005400
 800034c:	000186a0 	.word	0x000186a0

08000350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000358:	f107 0310 	add.w	r3, r7, #16
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a15      	ldr	r2, [pc, #84]	@ (80003c0 <HAL_I2C_MspInit+0x70>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d123      	bne.n	80003b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <HAL_I2C_MspInit+0x74>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a13      	ldr	r2, [pc, #76]	@ (80003c4 <HAL_I2C_MspInit+0x74>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <HAL_I2C_MspInit+0x74>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000388:	23c0      	movs	r3, #192	@ 0xc0
 800038a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800038c:	2312      	movs	r3, #18
 800038e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000390:	2303      	movs	r3, #3
 8000392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	480b      	ldr	r0, [pc, #44]	@ (80003c8 <HAL_I2C_MspInit+0x78>)
 800039c:	f000 fbd2 	bl	8000b44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a0:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <HAL_I2C_MspInit+0x74>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	4a07      	ldr	r2, [pc, #28]	@ (80003c4 <HAL_I2C_MspInit+0x74>)
 80003a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003aa:	61d3      	str	r3, [r2, #28]
 80003ac:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <HAL_I2C_MspInit+0x74>)
 80003ae:	69db      	ldr	r3, [r3, #28]
 80003b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40005400 	.word	0x40005400
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010c00 	.word	0x40010c00

080003cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d0:	f000 faa6 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d4:	f000 f814 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d8:	f7ff ff08 	bl	80001ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80003dc:	f7ff ff8a 	bl	80002f4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80003e0:	f000 fa04 	bl	80007ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("System initializing\r\n");
 80003e4:	4805      	ldr	r0, [pc, #20]	@ (80003fc <main+0x30>)
 80003e6:	f005 f8b9 	bl	800555c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003ea:	f001 fe0d 	bl	8002008 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80003ee:	f7ff feb5 	bl	800015c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003f2:	f001 fe3b 	bl	800206c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true) {
 80003f6:	bf00      	nop
 80003f8:	e7fd      	b.n	80003f6 <main+0x2a>
 80003fa:	bf00      	nop
 80003fc:	08005d7c 	.word	0x08005d7c

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b090      	sub	sp, #64	@ 0x40
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0318 	add.w	r3, r7, #24
 800040a:	2228      	movs	r2, #40	@ 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f005 f984 	bl	800571c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000422:	2301      	movs	r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000426:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800042a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000430:	2301      	movs	r3, #1
 8000432:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2302      	movs	r3, #2
 8000436:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000438:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800043c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	f107 0318 	add.w	r3, r7, #24
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fe75 	bl	8001138 <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000454:	f000 f844 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	230f      	movs	r3, #15
 800045a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	2302      	movs	r3, #2
 800045e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2102      	movs	r1, #2
 8000472:	4618      	mov	r0, r3
 8000474:	f001 f8e2 	bl	800163c <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800047e:	f000 f82f 	bl	80004e0 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3740      	adds	r7, #64	@ 0x40
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <__io_putchar>:
 */

/**
 * @brief putchar() override - redirect printf to USART2
 */
int __io_putchar(int ch) {
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 8000494:	e000      	b.n	8000498 <__io_putchar+0xc>
    asm("nop");
 8000496:	bf00      	nop
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 8000498:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <__io_putchar+0x2c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f8      	beq.n	8000496 <__io_putchar+0xa>
  }
  USART2->DR = (ch & 0xFF); // write data to TX register
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <__io_putchar+0x2c>)
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	6053      	str	r3, [r2, #4]
  return ch;
 80004ac:	687b      	ldr	r3, [r7, #4]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40004400 	.word	0x40004400

080004bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d101      	bne.n	80004d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ce:	f000 fa3d 	bl	800094c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40000800 	.word	0x40000800

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <Error_Handler+0x8>

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <HAL_MspInit+0x68>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a17      	ldr	r2, [pc, #92]	@ (8000554 <HAL_MspInit+0x68>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <HAL_MspInit+0x68>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <HAL_MspInit+0x68>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <HAL_MspInit+0x68>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <HAL_MspInit+0x68>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	210f      	movs	r1, #15
 8000526:	f06f 0001 	mvn.w	r0, #1
 800052a:	f000 fae0 	bl	8000aee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <HAL_MspInit+0x6c>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <HAL_MspInit+0x6c>)
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	bf00      	nop
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	40010000 	.word	0x40010000

0800055c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08e      	sub	sp, #56	@ 0x38
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000564:	2300      	movs	r3, #0
 8000566:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800056c:	2300      	movs	r3, #0
 800056e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <HAL_InitTick+0xe8>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a33      	ldr	r2, [pc, #204]	@ (8000644 <HAL_InitTick+0xe8>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <HAL_InitTick+0xe8>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800058a:	f107 0210 	add.w	r2, r7, #16
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f9c1 	bl	800191c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800059a:	6a3b      	ldr	r3, [r7, #32]
 800059c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800059e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d103      	bne.n	80005ac <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005a4:	f001 f992 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 80005a8:	6378      	str	r0, [r7, #52]	@ 0x34
 80005aa:	e004      	b.n	80005b6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005ac:	f001 f98e 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 80005b0:	4603      	mov	r3, r0
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005b8:	4a23      	ldr	r2, [pc, #140]	@ (8000648 <HAL_InitTick+0xec>)
 80005ba:	fba2 2303 	umull	r2, r3, r2, r3
 80005be:	0c9b      	lsrs	r3, r3, #18
 80005c0:	3b01      	subs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005c4:	4b21      	ldr	r3, [pc, #132]	@ (800064c <HAL_InitTick+0xf0>)
 80005c6:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <HAL_InitTick+0xf4>)
 80005c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <HAL_InitTick+0xf0>)
 80005cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005d2:	4a1e      	ldr	r2, [pc, #120]	@ (800064c <HAL_InitTick+0xf0>)
 80005d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <HAL_InitTick+0xf0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <HAL_InitTick+0xf0>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <HAL_InitTick+0xf0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005ea:	4818      	ldr	r0, [pc, #96]	@ (800064c <HAL_InitTick+0xf0>)
 80005ec:	f001 f9e4 	bl	80019b8 <HAL_TIM_Base_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d11b      	bne.n	8000636 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005fe:	4813      	ldr	r0, [pc, #76]	@ (800064c <HAL_InitTick+0xf0>)
 8000600:	f001 fa32 	bl	8001a68 <HAL_TIM_Base_Start_IT>
 8000604:	4603      	mov	r3, r0
 8000606:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800060a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800060e:	2b00      	cmp	r3, #0
 8000610:	d111      	bne.n	8000636 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000612:	201e      	movs	r0, #30
 8000614:	f000 fa87 	bl	8000b26 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b0f      	cmp	r3, #15
 800061c:	d808      	bhi.n	8000630 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800061e:	2200      	movs	r2, #0
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	201e      	movs	r0, #30
 8000624:	f000 fa63 	bl	8000aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000628:	4a0a      	ldr	r2, [pc, #40]	@ (8000654 <HAL_InitTick+0xf8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
 800062e:	e002      	b.n	8000636 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000630:	2301      	movs	r3, #1
 8000632:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000636:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800063a:	4618      	mov	r0, r3
 800063c:	3738      	adds	r7, #56	@ 0x38
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	431bde83 	.word	0x431bde83
 800064c:	200000e4 	.word	0x200000e4
 8000650:	40000800 	.word	0x40000800
 8000654:	20000004 	.word	0x20000004

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <NMI_Handler+0x4>

08000660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <MemManage_Handler+0x4>

08000670 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <UsageFault_Handler+0x4>

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <TIM4_IRQHandler+0x10>)
 8000692:	f001 fa3b 	bl	8001b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000e4 	.word	0x200000e4

080006a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	e00a      	b.n	80006c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006b2:	f3af 8000 	nop.w
 80006b6:	4601      	mov	r1, r0
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	b2ca      	uxtb	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf0      	blt.n	80006b2 <_read+0x12>
  }

  return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b086      	sub	sp, #24
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e009      	b.n	8000700 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fec9 	bl	800048c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf1      	blt.n	80006ec <_write+0x12>
  }
  return len;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <_close>:

int _close(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000738:	605a      	str	r2, [r3, #4]
  return 0;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <_isatty>:

int _isatty(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800075a:	b480      	push	{r7}
 800075c:	b085      	sub	sp, #20
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
	...

08000774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800077c:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <_sbrk+0x5c>)
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <_sbrk+0x60>)
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d102      	bne.n	8000796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <_sbrk+0x64>)
 8000792:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <_sbrk+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d207      	bcs.n	80007b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a4:	f005 f85e 	bl	8005864 <__errno>
 80007a8:	4603      	mov	r3, r0
 80007aa:	220c      	movs	r2, #12
 80007ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	e009      	b.n	80007c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <_sbrk+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <_sbrk+0x64>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <_sbrk+0x64>)
 80007c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20005000 	.word	0x20005000
 80007d4:	00000400 	.word	0x00000400
 80007d8:	2000012c 	.word	0x2000012c
 80007dc:	20001ca8 	.word	0x20001ca8

080007e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	@ (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f001 fb12 	bl	8001e4c <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f7ff fe57 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000130 	.word	0x20000130
 800083c:	40004400 	.word	0x40004400

08000840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1b      	ldr	r2, [pc, #108]	@ (80008c8 <HAL_UART_MspInit+0x88>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d12f      	bne.n	80008c0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	4a19      	ldr	r2, [pc, #100]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 8000866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086a:	61d3      	str	r3, [r2, #28]
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_UART_MspInit+0x8c>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000890:	2304      	movs	r3, #4
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <HAL_UART_MspInit+0x90>)
 80008a4:	f000 f94e 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008a8:	2308      	movs	r3, #8
 80008aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <HAL_UART_MspInit+0x90>)
 80008bc:	f000 f942 	bl	8000b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010800 	.word	0x40010800

080008d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d4:	f7ff ff84 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008da:	490c      	ldr	r1, [pc, #48]	@ (800090c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000910 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a09      	ldr	r2, [pc, #36]	@ (8000914 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008f0:	4c09      	ldr	r4, [pc, #36]	@ (8000918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f004 ffb7 	bl	8005870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fd63 	bl	80003cc <main>
  bx lr
 8000906:	4770      	bx	lr
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000910:	08005e14 	.word	0x08005e14
  ldr r2, =_sbss
 8000914:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000918:	20001ca8 	.word	0x20001ca8

0800091c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_2_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_Init+0x28>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	@ (8000948 <HAL_Init+0x28>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f8d1 	bl	8000ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	200f      	movs	r0, #15
 8000938:	f7ff fe10 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff fdd6 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <HAL_IncTick+0x1c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_IncTick+0x20>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4413      	add	r3, r2
 800095c:	4a03      	ldr	r2, [pc, #12]	@ (800096c <HAL_IncTick+0x20>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	20000008 	.word	0x20000008
 800096c:	20000178 	.word	0x20000178

08000970 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b02      	ldr	r3, [pc, #8]	@ (8000980 <HAL_GetTick+0x10>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000178 	.word	0x20000178

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db0b      	blt.n	8000a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 021f 	and.w	r2, r3, #31
 8000a00:	4906      	ldr	r1, [pc, #24]	@ (8000a1c <__NVIC_EnableIRQ+0x34>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	2001      	movs	r0, #1
 8000a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	@ (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	@ (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	@ 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	@ 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff4f 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b00:	f7ff ff64 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b06:	687a      	ldr	r2, [r7, #4]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff ffb2 	bl	8000a74 <NVIC_EncodePriority>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b16:	4611      	mov	r1, r2
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff81 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff57 	bl	80009e8 <__NVIC_EnableIRQ>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b08b      	sub	sp, #44	@ 0x2c
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	e169      	b.n	8000e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	f040 8158 	bne.w	8000e26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4a9a      	ldr	r2, [pc, #616]	@ (8000de4 <HAL_GPIO_Init+0x2a0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d05e      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b80:	4a98      	ldr	r2, [pc, #608]	@ (8000de4 <HAL_GPIO_Init+0x2a0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d875      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b86:	4a98      	ldr	r2, [pc, #608]	@ (8000de8 <HAL_GPIO_Init+0x2a4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d058      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b8c:	4a96      	ldr	r2, [pc, #600]	@ (8000de8 <HAL_GPIO_Init+0x2a4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d86f      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b92:	4a96      	ldr	r2, [pc, #600]	@ (8000dec <HAL_GPIO_Init+0x2a8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d052      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000b98:	4a94      	ldr	r2, [pc, #592]	@ (8000dec <HAL_GPIO_Init+0x2a8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d869      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000b9e:	4a94      	ldr	r2, [pc, #592]	@ (8000df0 <HAL_GPIO_Init+0x2ac>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d04c      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000ba4:	4a92      	ldr	r2, [pc, #584]	@ (8000df0 <HAL_GPIO_Init+0x2ac>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d863      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000baa:	4a92      	ldr	r2, [pc, #584]	@ (8000df4 <HAL_GPIO_Init+0x2b0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d046      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
 8000bb0:	4a90      	ldr	r2, [pc, #576]	@ (8000df4 <HAL_GPIO_Init+0x2b0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d85d      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d82a      	bhi.n	8000c10 <HAL_GPIO_Init+0xcc>
 8000bba:	2b12      	cmp	r3, #18
 8000bbc:	d859      	bhi.n	8000c72 <HAL_GPIO_Init+0x12e>
 8000bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000bc4 <HAL_GPIO_Init+0x80>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000c3f 	.word	0x08000c3f
 8000bc8:	08000c19 	.word	0x08000c19
 8000bcc:	08000c2b 	.word	0x08000c2b
 8000bd0:	08000c6d 	.word	0x08000c6d
 8000bd4:	08000c73 	.word	0x08000c73
 8000bd8:	08000c73 	.word	0x08000c73
 8000bdc:	08000c73 	.word	0x08000c73
 8000be0:	08000c73 	.word	0x08000c73
 8000be4:	08000c73 	.word	0x08000c73
 8000be8:	08000c73 	.word	0x08000c73
 8000bec:	08000c73 	.word	0x08000c73
 8000bf0:	08000c73 	.word	0x08000c73
 8000bf4:	08000c73 	.word	0x08000c73
 8000bf8:	08000c73 	.word	0x08000c73
 8000bfc:	08000c73 	.word	0x08000c73
 8000c00:	08000c73 	.word	0x08000c73
 8000c04:	08000c73 	.word	0x08000c73
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c35 	.word	0x08000c35
 8000c10:	4a79      	ldr	r2, [pc, #484]	@ (8000df8 <HAL_GPIO_Init+0x2b4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d013      	beq.n	8000c3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c16:	e02c      	b.n	8000c72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e029      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	3304      	adds	r3, #4
 8000c26:	623b      	str	r3, [r7, #32]
          break;
 8000c28:	e024      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	3308      	adds	r3, #8
 8000c30:	623b      	str	r3, [r7, #32]
          break;
 8000c32:	e01f      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	330c      	adds	r3, #12
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e01a      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c46:	2304      	movs	r3, #4
 8000c48:	623b      	str	r3, [r7, #32]
          break;
 8000c4a:	e013      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d105      	bne.n	8000c60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c54:	2308      	movs	r3, #8
 8000c56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	611a      	str	r2, [r3, #16]
          break;
 8000c5e:	e009      	b.n	8000c74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	615a      	str	r2, [r3, #20]
          break;
 8000c6a:	e003      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
          break;
 8000c70:	e000      	b.n	8000c74 <HAL_GPIO_Init+0x130>
          break;
 8000c72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2bff      	cmp	r3, #255	@ 0xff
 8000c78:	d801      	bhi.n	8000c7e <HAL_GPIO_Init+0x13a>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	e001      	b.n	8000c82 <HAL_GPIO_Init+0x13e>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3304      	adds	r3, #4
 8000c82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2bff      	cmp	r3, #255	@ 0xff
 8000c88:	d802      	bhi.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x152>
 8000c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c92:	3b08      	subs	r3, #8
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	6a39      	ldr	r1, [r7, #32]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 80b1 	beq.w	8000e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	@ (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dfc <HAL_GPIO_Init+0x2b8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cdc:	4a48      	ldr	r2, [pc, #288]	@ (8000e00 <HAL_GPIO_Init+0x2bc>)
 8000cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a40      	ldr	r2, [pc, #256]	@ (8000e04 <HAL_GPIO_Init+0x2c0>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d013      	beq.n	8000d30 <HAL_GPIO_Init+0x1ec>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8000e08 <HAL_GPIO_Init+0x2c4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d00d      	beq.n	8000d2c <HAL_GPIO_Init+0x1e8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a3e      	ldr	r2, [pc, #248]	@ (8000e0c <HAL_GPIO_Init+0x2c8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d007      	beq.n	8000d28 <HAL_GPIO_Init+0x1e4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e10 <HAL_GPIO_Init+0x2cc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d101      	bne.n	8000d24 <HAL_GPIO_Init+0x1e0>
 8000d20:	2303      	movs	r3, #3
 8000d22:	e006      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d24:	2304      	movs	r3, #4
 8000d26:	e004      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d28:	2302      	movs	r3, #2
 8000d2a:	e002      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <HAL_GPIO_Init+0x1ee>
 8000d30:	2300      	movs	r3, #0
 8000d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d34:	f002 0203 	and.w	r2, r2, #3
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	4093      	lsls	r3, r2
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d42:	492f      	ldr	r1, [pc, #188]	@ (8000e00 <HAL_GPIO_Init+0x2bc>)
 8000d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	492c      	ldr	r1, [pc, #176]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	608b      	str	r3, [r1, #8]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4928      	ldr	r1, [pc, #160]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d84:	4b23      	ldr	r3, [pc, #140]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	4922      	ldr	r1, [pc, #136]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60cb      	str	r3, [r1, #12]
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d92:	4b20      	ldr	r3, [pc, #128]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	491e      	ldr	r1, [pc, #120]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d006      	beq.n	8000dba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	4918      	ldr	r1, [pc, #96]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	604b      	str	r3, [r1, #4]
 8000db8:	e006      	b.n	8000dc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	4914      	ldr	r1, [pc, #80]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d021      	beq.n	8000e18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	490e      	ldr	r1, [pc, #56]	@ (8000e14 <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	600b      	str	r3, [r1, #0]
 8000de0:	e021      	b.n	8000e26 <HAL_GPIO_Init+0x2e2>
 8000de2:	bf00      	nop
 8000de4:	10320000 	.word	0x10320000
 8000de8:	10310000 	.word	0x10310000
 8000dec:	10220000 	.word	0x10220000
 8000df0:	10210000 	.word	0x10210000
 8000df4:	10120000 	.word	0x10120000
 8000df8:	10110000 	.word	0x10110000
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000
 8000e04:	40010800 	.word	0x40010800
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	40011000 	.word	0x40011000
 8000e10:	40011400 	.word	0x40011400
 8000e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_GPIO_Init+0x304>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	4909      	ldr	r1, [pc, #36]	@ (8000e48 <HAL_GPIO_Init+0x304>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e28:	3301      	adds	r3, #1
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e32:	fa22 f303 	lsr.w	r3, r2, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f47f ae8e 	bne.w	8000b58 <HAL_GPIO_Init+0x14>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	372c      	adds	r7, #44	@ 0x2c
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e68:	e003      	b.n	8000e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	041a      	lsls	r2, r3, #16
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4013      	ands	r3, r2
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43d9      	mvns	r1, r3
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	611a      	str	r2, [r3, #16]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e12b      	b.n	800111a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fa3a 	bl	8000350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2224      	movs	r2, #36	@ 0x24
 8000ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f14:	f000 fcda 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8000f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	4a81      	ldr	r2, [pc, #516]	@ (8001124 <HAL_I2C_Init+0x274>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d807      	bhi.n	8000f34 <HAL_I2C_Init+0x84>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4a80      	ldr	r2, [pc, #512]	@ (8001128 <HAL_I2C_Init+0x278>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	bf94      	ite	ls
 8000f2c:	2301      	movls	r3, #1
 8000f2e:	2300      	movhi	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	e006      	b.n	8000f42 <HAL_I2C_Init+0x92>
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a7d      	ldr	r2, [pc, #500]	@ (800112c <HAL_I2C_Init+0x27c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	bf94      	ite	ls
 8000f3c:	2301      	movls	r3, #1
 8000f3e:	2300      	movhi	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0e7      	b.n	800111a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4a78      	ldr	r2, [pc, #480]	@ (8001130 <HAL_I2C_Init+0x280>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	0c9b      	lsrs	r3, r3, #18
 8000f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a6a      	ldr	r2, [pc, #424]	@ (8001124 <HAL_I2C_Init+0x274>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d802      	bhi.n	8000f84 <HAL_I2C_Init+0xd4>
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3301      	adds	r3, #1
 8000f82:	e009      	b.n	8000f98 <HAL_I2C_Init+0xe8>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	4a69      	ldr	r2, [pc, #420]	@ (8001134 <HAL_I2C_Init+0x284>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	099b      	lsrs	r3, r3, #6
 8000f96:	3301      	adds	r3, #1
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000faa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	495c      	ldr	r1, [pc, #368]	@ (8001124 <HAL_I2C_Init+0x274>)
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d819      	bhi.n	8000fec <HAL_I2C_Init+0x13c>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1e59      	subs	r1, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc6:	1c59      	adds	r1, r3, #1
 8000fc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000fcc:	400b      	ands	r3, r1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00a      	beq.n	8000fe8 <HAL_I2C_Init+0x138>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1e59      	subs	r1, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe6:	e051      	b.n	800108c <HAL_I2C_Init+0x1dc>
 8000fe8:	2304      	movs	r3, #4
 8000fea:	e04f      	b.n	800108c <HAL_I2C_Init+0x1dc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d111      	bne.n	8001018 <HAL_I2C_Init+0x168>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1e58      	subs	r0, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6859      	ldr	r1, [r3, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	440b      	add	r3, r1
 8001002:	fbb0 f3f3 	udiv	r3, r0, r3
 8001006:	3301      	adds	r3, #1
 8001008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf0c      	ite	eq
 8001010:	2301      	moveq	r3, #1
 8001012:	2300      	movne	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	e012      	b.n	800103e <HAL_I2C_Init+0x18e>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1e58      	subs	r0, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6859      	ldr	r1, [r3, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	0099      	lsls	r1, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	fbb0 f3f3 	udiv	r3, r0, r3
 800102e:	3301      	adds	r3, #1
 8001030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_I2C_Init+0x196>
 8001042:	2301      	movs	r3, #1
 8001044:	e022      	b.n	800108c <HAL_I2C_Init+0x1dc>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10e      	bne.n	800106c <HAL_I2C_Init+0x1bc>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	1e58      	subs	r0, r3, #1
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6859      	ldr	r1, [r3, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	440b      	add	r3, r1
 800105c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001060:	3301      	adds	r3, #1
 8001062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800106a:	e00f      	b.n	800108c <HAL_I2C_Init+0x1dc>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	1e58      	subs	r0, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	0099      	lsls	r1, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001082:	3301      	adds	r3, #1
 8001084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	6809      	ldr	r1, [r1, #0]
 8001090:	4313      	orrs	r3, r2
 8001092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69da      	ldr	r2, [r3, #28]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80010ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6911      	ldr	r1, [r2, #16]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68d2      	ldr	r2, [r2, #12]
 80010c6:	4311      	orrs	r1, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2220      	movs	r2, #32
 8001106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	000186a0 	.word	0x000186a0
 8001128:	001e847f 	.word	0x001e847f
 800112c:	003d08ff 	.word	0x003d08ff
 8001130:	431bde83 	.word	0x431bde83
 8001134:	10624dd3 	.word	0x10624dd3

08001138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e272      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8087 	beq.w	8001266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001158:	4b92      	ldr	r3, [pc, #584]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b04      	cmp	r3, #4
 8001162:	d00c      	beq.n	800117e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001164:	4b8f      	ldr	r3, [pc, #572]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d112      	bne.n	8001196 <HAL_RCC_OscConfig+0x5e>
 8001170:	4b8c      	ldr	r3, [pc, #560]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800117c:	d10b      	bne.n	8001196 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	4b89      	ldr	r3, [pc, #548]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d06c      	beq.n	8001264 <HAL_RCC_OscConfig+0x12c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d168      	bne.n	8001264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e24c      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800119e:	d106      	bne.n	80011ae <HAL_RCC_OscConfig+0x76>
 80011a0:	4b80      	ldr	r3, [pc, #512]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a7f      	ldr	r2, [pc, #508]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e02e      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x98>
 80011b6:	4b7b      	ldr	r3, [pc, #492]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a7a      	ldr	r2, [pc, #488]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b78      	ldr	r3, [pc, #480]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a77      	ldr	r2, [pc, #476]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e01d      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0xbc>
 80011da:	4b72      	ldr	r3, [pc, #456]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a71      	ldr	r2, [pc, #452]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b6f      	ldr	r3, [pc, #444]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6e      	ldr	r2, [pc, #440]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0xd4>
 80011f4:	4b6b      	ldr	r3, [pc, #428]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a6a      	ldr	r2, [pc, #424]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b68      	ldr	r3, [pc, #416]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a67      	ldr	r2, [pc, #412]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800120a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d013      	beq.n	800123c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fbac 	bl	8000970 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fba8 	bl	8000970 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	@ 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e200      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122e:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0xe4>
 800123a:	e014      	b.n	8001266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fb98 	bl	8000970 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fb94 	bl	8000970 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	@ 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e1ec      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001256:	4b53      	ldr	r3, [pc, #332]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x10c>
 8001262:	e000      	b.n	8001266 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d063      	beq.n	800133a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001272:	4b4c      	ldr	r3, [pc, #304]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00b      	beq.n	8001296 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800127e:	4b49      	ldr	r3, [pc, #292]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b08      	cmp	r3, #8
 8001288:	d11c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x18c>
 800128a:	4b46      	ldr	r3, [pc, #280]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d116      	bne.n	80012c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	4b43      	ldr	r3, [pc, #268]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x176>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e1c0      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b3d      	ldr	r3, [pc, #244]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4939      	ldr	r1, [pc, #228]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	e03a      	b.n	800133a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012cc:	4b36      	ldr	r3, [pc, #216]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fb4d 	bl	8000970 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff fb49 	bl	8000970 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e1a1      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ec:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4927      	ldr	r1, [pc, #156]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e015      	b.n	800133a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130e:	4b26      	ldr	r3, [pc, #152]	@ (80013a8 <HAL_RCC_OscConfig+0x270>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fb2c 	bl	8000970 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131c:	f7ff fb28 	bl	8000970 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e180      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03a      	beq.n	80013bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d019      	beq.n	8001382 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_RCC_OscConfig+0x274>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001354:	f7ff fb0c 	bl	8000970 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fb08 	bl	8000970 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e160      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_RCC_OscConfig+0x26c>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 fafe 	bl	800197c <RCC_Delay>
 8001380:	e01c      	b.n	80013bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <HAL_RCC_OscConfig+0x274>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff faf2 	bl	8000970 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138e:	e00f      	b.n	80013b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff faee 	bl	8000970 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d908      	bls.n	80013b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e146      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	42420000 	.word	0x42420000
 80013ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	4b92      	ldr	r3, [pc, #584]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1e9      	bne.n	8001390 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a6 	beq.w	8001516 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ce:	4b8b      	ldr	r3, [pc, #556]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10d      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b88      	ldr	r3, [pc, #544]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	4a87      	ldr	r2, [pc, #540]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	61d3      	str	r3, [r2, #28]
 80013e6:	4b85      	ldr	r3, [pc, #532]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b82      	ldr	r3, [pc, #520]	@ (8001600 <HAL_RCC_OscConfig+0x4c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d118      	bne.n	8001434 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4b7f      	ldr	r3, [pc, #508]	@ (8001600 <HAL_RCC_OscConfig+0x4c8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a7e      	ldr	r2, [pc, #504]	@ (8001600 <HAL_RCC_OscConfig+0x4c8>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140e:	f7ff faaf 	bl	8000970 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001416:	f7ff faab 	bl	8000970 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b64      	cmp	r3, #100	@ 0x64
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e103      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b75      	ldr	r3, [pc, #468]	@ (8001600 <HAL_RCC_OscConfig+0x4c8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x312>
 800143c:	4b6f      	ldr	r3, [pc, #444]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a6e      	ldr	r2, [pc, #440]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	e02d      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x334>
 8001452:	4b6a      	ldr	r3, [pc, #424]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a69      	ldr	r2, [pc, #420]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	4b67      	ldr	r3, [pc, #412]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a66      	ldr	r2, [pc, #408]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	e01c      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x356>
 8001474:	4b61      	ldr	r3, [pc, #388]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a60      	ldr	r2, [pc, #384]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	4b5e      	ldr	r3, [pc, #376]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a5d      	ldr	r2, [pc, #372]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	e00b      	b.n	80014a6 <HAL_RCC_OscConfig+0x36e>
 800148e:	4b5b      	ldr	r3, [pc, #364]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a5a      	ldr	r2, [pc, #360]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6213      	str	r3, [r2, #32]
 800149a:	4b58      	ldr	r3, [pc, #352]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a57      	ldr	r2, [pc, #348]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f023 0304 	bic.w	r3, r3, #4
 80014a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d015      	beq.n	80014da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa5f 	bl	8000970 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fa5b 	bl	8000970 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0b1      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	4b4b      	ldr	r3, [pc, #300]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0ee      	beq.n	80014b6 <HAL_RCC_OscConfig+0x37e>
 80014d8:	e014      	b.n	8001504 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fa49 	bl	8000970 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fa45 	bl	8000970 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e09b      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	4b40      	ldr	r3, [pc, #256]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ee      	bne.n	80014e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001504:	7dfb      	ldrb	r3, [r7, #23]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d105      	bne.n	8001516 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150a:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a3b      	ldr	r2, [pc, #236]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8087 	beq.w	800162e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001520:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d061      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d146      	bne.n	80015c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001534:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <HAL_RCC_OscConfig+0x4cc>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fa19 	bl	8000970 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001542:	f7ff fa15 	bl	8000970 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e06d      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001554:	4b29      	ldr	r3, [pc, #164]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001568:	d108      	bne.n	800157c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	4921      	ldr	r1, [pc, #132]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157c:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a19      	ldr	r1, [r3, #32]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158c:	430b      	orrs	r3, r1
 800158e:	491b      	ldr	r1, [pc, #108]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x4cc>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff f9e9 	bl	8000970 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff f9e5 	bl	8000970 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e03d      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x46a>
 80015c0:	e035      	b.n	800162e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_RCC_OscConfig+0x4cc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff f9d2 	bl	8000970 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff f9ce 	bl	8000970 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e026      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x498>
 80015ee:	e01e      	b.n	800162e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e019      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
 80015fc:	40021000 	.word	0x40021000
 8001600:	40007000 	.word	0x40007000
 8001604:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_OscConfig+0x500>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	429a      	cmp	r2, r3
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0d0      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d910      	bls.n	8001680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b67      	ldr	r3, [pc, #412]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 0207 	bic.w	r2, r3, #7
 8001666:	4965      	ldr	r1, [pc, #404]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0b8      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001698:	4b59      	ldr	r3, [pc, #356]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a58      	ldr	r2, [pc, #352]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b0:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a52      	ldr	r2, [pc, #328]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016bc:	4b50      	ldr	r3, [pc, #320]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	494d      	ldr	r1, [pc, #308]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d040      	beq.n	800175c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d107      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b47      	ldr	r3, [pc, #284]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d115      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e07f      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e073      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06b      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171a:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f023 0203 	bic.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4936      	ldr	r1, [pc, #216]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800172c:	f7ff f920 	bl	8000970 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff f91c 	bl	8000970 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e053      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 020c 	and.w	r2, r3, #12
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1eb      	bne.n	8001734 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d210      	bcs.n	800178c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 0207 	bic.w	r2, r3, #7
 8001772:	4922      	ldr	r1, [pc, #136]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e032      	b.n	80017f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d008      	beq.n	80017aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4916      	ldr	r1, [pc, #88]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	490e      	ldr	r1, [pc, #56]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ca:	f000 f821 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	490a      	ldr	r1, [pc, #40]	@ (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017dc:	5ccb      	ldrb	r3, [r1, r3]
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <HAL_RCC_ClockConfig+0x1cc>)
 80017e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_RCC_ClockConfig+0x1d0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe feb6 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40022000 	.word	0x40022000
 8001800:	40021000 	.word	0x40021000
 8001804:	08005de0 	.word	0x08005de0
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x30>
 800183a:	2b08      	cmp	r3, #8
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x36>
 800183e:	e027      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001840:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001842:	613b      	str	r3, [r7, #16]
      break;
 8001844:	e027      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	4a17      	ldr	r2, [pc, #92]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d010      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0c5b      	lsrs	r3, r3, #17
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001872:	fb03 f202 	mul.w	r2, r3, r2
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e004      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	613b      	str	r3, [r7, #16]
      break;
 800188e:	e002      	b.n	8001896 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001892:	613b      	str	r3, [r7, #16]
      break;
 8001894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001896:	693b      	ldr	r3, [r7, #16]
}
 8001898:	4618      	mov	r0, r3
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000
 80018a8:	007a1200 	.word	0x007a1200
 80018ac:	08005df8 	.word	0x08005df8
 80018b0:	08005e08 	.word	0x08005e08
 80018b4:	003d0900 	.word	0x003d0900

080018b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018bc:	4b02      	ldr	r3, [pc, #8]	@ (80018c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff2 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	@ (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40021000 	.word	0x40021000
 80018f0:	08005df0 	.word	0x08005df0

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffde 	bl	80018b8 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0adb      	lsrs	r3, r3, #11
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	@ (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	08005df0 	.word	0x08005df0

0800191c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	220f      	movs	r2, #15
 800192a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_RCC_GetClockConfig+0x58>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001938:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_RCC_GetClockConfig+0x58>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_RCC_GetClockConfig+0x58>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <HAL_RCC_GetClockConfig+0x58>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0207 	and.w	r2, r3, #7
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40022000 	.word	0x40022000

0800197c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <RCC_Delay+0x34>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <RCC_Delay+0x38>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0a5b      	lsrs	r3, r3, #9
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001998:	bf00      	nop
  }
  while (Delay --);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e5a      	subs	r2, r3, #1
 800199e:	60fa      	str	r2, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <RCC_Delay+0x1c>
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr
 80019b0:	20000000 	.word	0x20000000
 80019b4:	10624dd3 	.word	0x10624dd3

080019b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e041      	b.n	8001a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f839 	bl	8001a56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3304      	adds	r3, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f000 f9b4 	bl	8001d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d001      	beq.n	8001a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e03a      	b.n	8001af6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <HAL_TIM_Base_Start_IT+0x98>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00e      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x58>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aaa:	d009      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x58>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_TIM_Base_Start_IT+0x58>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <HAL_TIM_Base_Start_IT+0xa0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d111      	bne.n	8001ae4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d010      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae2:	e007      	b.n	8001af4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40000800 	.word	0x40000800

08001b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0202 	mvn.w	r2, #2
 8001b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f8ed 	bl	8001d2e <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8e0 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8ef 	bl	8001d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d122      	bne.n	8001bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d11b      	bne.n	8001bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0204 	mvn.w	r2, #4
 8001b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8c3 	bl	8001d2e <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8b6 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8c5 	bl	8001d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d122      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d11b      	bne.n	8001c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0208 	mvn.w	r2, #8
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2204      	movs	r2, #4
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f899 	bl	8001d2e <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f88c 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f89b 	bl	8001d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d122      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d11b      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0210 	mvn.w	r2, #16
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2208      	movs	r2, #8
 8001c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f86f 	bl	8001d2e <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f862 	bl	8001d1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f871 	bl	8001d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0201 	mvn.w	r2, #1
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7fe fc16 	bl	80004bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9a:	2b80      	cmp	r3, #128	@ 0x80
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca8:	2b80      	cmp	r3, #128	@ 0x80
 8001caa:	d107      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8bf 	bl	8001e3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc6:	2b40      	cmp	r3, #64	@ 0x40
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd4:	2b40      	cmp	r3, #64	@ 0x40
 8001cd6:	d107      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f835 	bl	8001d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0220 	mvn.w	r2, #32
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f88a 	bl	8001e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a29      	ldr	r2, [pc, #164]	@ (8001e1c <TIM_Base_SetConfig+0xb8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00b      	beq.n	8001d94 <TIM_Base_SetConfig+0x30>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d82:	d007      	beq.n	8001d94 <TIM_Base_SetConfig+0x30>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <TIM_Base_SetConfig+0xbc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <TIM_Base_SetConfig+0x30>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a25      	ldr	r2, [pc, #148]	@ (8001e24 <TIM_Base_SetConfig+0xc0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d108      	bne.n	8001da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e1c <TIM_Base_SetConfig+0xb8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00b      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db4:	d007      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <TIM_Base_SetConfig+0xbc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d003      	beq.n	8001dc6 <TIM_Base_SetConfig+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a18      	ldr	r2, [pc, #96]	@ (8001e24 <TIM_Base_SetConfig+0xc0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d108      	bne.n	8001dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <TIM_Base_SetConfig+0xb8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d103      	bne.n	8001e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	615a      	str	r2, [r3, #20]
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000800 	.word	0x40000800

08001e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e042      	b.n	8001ee4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fce4 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	@ 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f82b 	bl	8001eec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695a      	ldr	r2, [r3, #20]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001f26:	f023 030c 	bic.w	r3, r3, #12
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002000 <UART_SetConfig+0x114>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d103      	bne.n	8001f5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f54:	f7ff fcce 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	e002      	b.n	8001f62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f5c:	f7ff fcb6 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001f60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	009a      	lsls	r2, r3, #2
 8001f6c:	441a      	add	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	4a22      	ldr	r2, [pc, #136]	@ (8002004 <UART_SetConfig+0x118>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	0119      	lsls	r1, r3, #4
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f98:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <UART_SetConfig+0x118>)
 8001f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2064      	movs	r0, #100	@ 0x64
 8001fa2:	fb00 f303 	mul.w	r3, r0, r3
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	3332      	adds	r3, #50	@ 0x32
 8001fac:	4a15      	ldr	r2, [pc, #84]	@ (8002004 <UART_SetConfig+0x118>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb8:	4419      	add	r1, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009a      	lsls	r2, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <UART_SetConfig+0x118>)
 8001fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2064      	movs	r0, #100	@ 0x64
 8001fda:	fb00 f303 	mul.w	r3, r0, r3
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	3332      	adds	r3, #50	@ 0x32
 8001fe4:	4a07      	ldr	r2, [pc, #28]	@ (8002004 <UART_SetConfig+0x118>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	f003 020f 	and.w	r2, r3, #15
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	440a      	add	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40013800 	.word	0x40013800
 8002004:	51eb851f 	.word	0x51eb851f

08002008 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800200e:	f3ef 8305 	mrs	r3, IPSR
 8002012:	60bb      	str	r3, [r7, #8]
  return(result);
 8002014:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800201a:	f3ef 8310 	mrs	r3, PRIMASK
 800201e:	607b      	str	r3, [r7, #4]
  return(result);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <osKernelInitialize+0x32>
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <osKernelInitialize+0x60>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d109      	bne.n	8002042 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800202e:	f3ef 8311 	mrs	r3, BASEPRI
 8002032:	603b      	str	r3, [r7, #0]
  return(result);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800203a:	f06f 0305 	mvn.w	r3, #5
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	e00c      	b.n	800205c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <osKernelInitialize+0x60>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <osKernelInitialize+0x60>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e002      	b.n	800205c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	2000017c 	.word	0x2000017c

0800206c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002072:	f3ef 8305 	mrs	r3, IPSR
 8002076:	60bb      	str	r3, [r7, #8]
  return(result);
 8002078:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800207e:	f3ef 8310 	mrs	r3, PRIMASK
 8002082:	607b      	str	r3, [r7, #4]
  return(result);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <osKernelStart+0x32>
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <osKernelStart+0x64>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d109      	bne.n	80020a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002092:	f3ef 8311 	mrs	r3, BASEPRI
 8002096:	603b      	str	r3, [r7, #0]
  return(result);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800209e:	f06f 0305 	mvn.w	r3, #5
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e00e      	b.n	80020c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <osKernelStart+0x64>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <osKernelStart+0x64>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80020b4:	f001 fbe2 	bl	800387c <vTaskStartScheduler>
      stat = osOK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e002      	b.n	80020c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000017c 	.word	0x2000017c

080020d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b092      	sub	sp, #72	@ 0x48
 80020d8:	af04      	add	r7, sp, #16
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e4:	f3ef 8305 	mrs	r3, IPSR
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 8094 	bne.w	800221a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f2:	f3ef 8310 	mrs	r3, PRIMASK
 80020f6:	623b      	str	r3, [r7, #32]
  return(result);
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 808d 	bne.w	800221a <osThreadNew+0x146>
 8002100:	4b48      	ldr	r3, [pc, #288]	@ (8002224 <osThreadNew+0x150>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d106      	bne.n	8002116 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002108:	f3ef 8311 	mrs	r3, BASEPRI
 800210c:	61fb      	str	r3, [r7, #28]
  return(result);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 8082 	bne.w	800221a <osThreadNew+0x146>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d07e      	beq.n	800221a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002120:	2318      	movs	r3, #24
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002124:	2300      	movs	r3, #0
 8002126:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002128:	f107 031b 	add.w	r3, r7, #27
 800212c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d045      	beq.n	80021c6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <osThreadNew+0x74>
        name = attr->name;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <osThreadNew+0x9a>
 800215c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215e:	2b38      	cmp	r3, #56	@ 0x38
 8002160:	d805      	bhi.n	800216e <osThreadNew+0x9a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <osThreadNew+0x9e>
        return (NULL);
 800216e:	2300      	movs	r3, #0
 8002170:	e054      	b.n	800221c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <osThreadNew+0xd4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2ba7      	cmp	r3, #167	@ 0xa7
 8002190:	d90a      	bls.n	80021a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <osThreadNew+0xd4>
        mem = 1;
 80021a2:	2301      	movs	r3, #1
 80021a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021a6:	e010      	b.n	80021ca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10c      	bne.n	80021ca <osThreadNew+0xf6>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d108      	bne.n	80021ca <osThreadNew+0xf6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <osThreadNew+0xf6>
          mem = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021c4:	e001      	b.n	80021ca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80021ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d110      	bne.n	80021f2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021d8:	9202      	str	r2, [sp, #8]
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f001 f95e 	bl	80034a8 <xTaskCreateStatic>
 80021ec:	4603      	mov	r3, r0
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	e013      	b.n	800221a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d110      	bne.n	800221a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f001 f9ab 	bl	8003566 <xTaskCreate>
 8002210:	4603      	mov	r3, r0
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <osThreadNew+0x146>
          hTask = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800221a:	697b      	ldr	r3, [r7, #20]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3738      	adds	r7, #56	@ 0x38
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000017c 	.word	0x2000017c

08002228 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002234:	f3ef 8305 	mrs	r3, IPSR
 8002238:	613b      	str	r3, [r7, #16]
  return(result);
 800223a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 8085 	bne.w	800234c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002242:	f3ef 8310 	mrs	r3, PRIMASK
 8002246:	60fb      	str	r3, [r7, #12]
  return(result);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d17e      	bne.n	800234c <osMutexNew+0x124>
 800224e:	4b42      	ldr	r3, [pc, #264]	@ (8002358 <osMutexNew+0x130>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d105      	bne.n	8002262 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002256:	f3ef 8311 	mrs	r3, BASEPRI
 800225a:	60bb      	str	r3, [r7, #8]
  return(result);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d174      	bne.n	800234c <osMutexNew+0x124>
    if (attr != NULL) {
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	623b      	str	r3, [r7, #32]
 800226e:	e001      	b.n	8002274 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <osMutexNew+0x5c>
      rmtx = 1U;
 800227e:	2301      	movs	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e001      	b.n	8002288 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d15c      	bne.n	800234c <osMutexNew+0x124>
      mem = -1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <osMutexNew+0x8c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b4f      	cmp	r3, #79	@ 0x4f
 80022ac:	d902      	bls.n	80022b4 <osMutexNew+0x8c>
          mem = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e00c      	b.n	80022ce <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <osMutexNew+0xa6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <osMutexNew+0xa6>
            mem = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	e001      	b.n	80022ce <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d112      	bne.n	80022fa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4619      	mov	r1, r3
 80022e0:	2004      	movs	r0, #4
 80022e2:	f000 fb45 	bl	8002970 <xQueueCreateMutexStatic>
 80022e6:	6278      	str	r0, [r7, #36]	@ 0x24
 80022e8:	e016      	b.n	8002318 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4619      	mov	r1, r3
 80022f0:	2001      	movs	r0, #1
 80022f2:	f000 fb3d 	bl	8002970 <xQueueCreateMutexStatic>
 80022f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80022f8:	e00e      	b.n	8002318 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8002306:	2004      	movs	r0, #4
 8002308:	f000 fb1a 	bl	8002940 <xQueueCreateMutex>
 800230c:	6278      	str	r0, [r7, #36]	@ 0x24
 800230e:	e003      	b.n	8002318 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8002310:	2001      	movs	r0, #1
 8002312:	f000 fb15 	bl	8002940 <xQueueCreateMutex>
 8002316:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <osMutexNew+0x110>
        if (attr != NULL) {
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <osMutexNew+0x104>
          name = attr->name;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e001      	b.n	8002330 <osMutexNew+0x108>
        } else {
          name = NULL;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8002330:	6979      	ldr	r1, [r7, #20]
 8002332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002334:	f001 f85c 	bl	80033f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <osMutexNew+0x124>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800234c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800234e:	4618      	mov	r0, r3
 8002350:	3728      	adds	r7, #40	@ 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000017c 	.word	0x2000017c

0800235c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800237a:	f3ef 8305 	mrs	r3, IPSR
 800237e:	613b      	str	r3, [r7, #16]
  return(result);
 8002380:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002386:	f3ef 8310 	mrs	r3, PRIMASK
 800238a:	60fb      	str	r3, [r7, #12]
  return(result);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <osMutexAcquire+0x4a>
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <osMutexAcquire+0xb8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d109      	bne.n	80023ae <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800239a:	f3ef 8311 	mrs	r3, BASEPRI
 800239e:	60bb      	str	r3, [r7, #8]
  return(result);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <osMutexAcquire+0x52>
    stat = osErrorISR;
 80023a6:	f06f 0305 	mvn.w	r3, #5
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e02c      	b.n	8002408 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d103      	bne.n	80023bc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80023b4:	f06f 0303 	mvn.w	r3, #3
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e025      	b.n	8002408 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d011      	beq.n	80023e6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	69b8      	ldr	r0, [r7, #24]
 80023c6:	f000 fb23 	bl	8002a10 <xQueueTakeMutexRecursive>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d01b      	beq.n	8002408 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80023d6:	f06f 0301 	mvn.w	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	e014      	b.n	8002408 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80023de:	f06f 0302 	mvn.w	r3, #2
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	e010      	b.n	8002408 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	69b8      	ldr	r0, [r7, #24]
 80023ea:	f000 fdc9 	bl	8002f80 <xQueueSemaphoreTake>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d009      	beq.n	8002408 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80023fa:	f06f 0301 	mvn.w	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	e002      	b.n	8002408 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8002402:	f06f 0302 	mvn.w	r3, #2
 8002406:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002408:	69fb      	ldr	r3, [r7, #28]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000017c 	.word	0x2000017c

08002418 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002434:	f3ef 8305 	mrs	r3, IPSR
 8002438:	613b      	str	r3, [r7, #16]
  return(result);
 800243a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10f      	bne.n	8002460 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002440:	f3ef 8310 	mrs	r3, PRIMASK
 8002444:	60fb      	str	r3, [r7, #12]
  return(result);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <osMutexRelease+0x48>
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <osMutexRelease+0x9c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d109      	bne.n	8002468 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002454:	f3ef 8311 	mrs	r3, BASEPRI
 8002458:	60bb      	str	r3, [r7, #8]
  return(result);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <osMutexRelease+0x50>
    stat = osErrorISR;
 8002460:	f06f 0305 	mvn.w	r3, #5
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e01f      	b.n	80024a8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800246e:	f06f 0303 	mvn.w	r3, #3
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	e018      	b.n	80024a8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800247c:	69b8      	ldr	r0, [r7, #24]
 800247e:	f000 fa92 	bl	80029a6 <xQueueGiveMutexRecursive>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d00f      	beq.n	80024a8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002488:	f06f 0302 	mvn.w	r3, #2
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e00b      	b.n	80024a8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002490:	2300      	movs	r3, #0
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	f000 faf2 	bl	8002a80 <xQueueGenericSend>
 800249c:	4603      	mov	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d002      	beq.n	80024a8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80024a2:	f06f 0302 	mvn.w	r3, #2
 80024a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80024a8:	69fb      	ldr	r3, [r7, #28]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3720      	adds	r7, #32
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000017c 	.word	0x2000017c

080024b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4a06      	ldr	r2, [pc, #24]	@ (80024e0 <vApplicationGetIdleTaskMemory+0x28>)
 80024c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80024ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	@ 0x80
 80024d4:	601a      	str	r2, [r3, #0]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	20000180 	.word	0x20000180
 80024e4:	20000228 	.word	0x20000228

080024e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4a07      	ldr	r2, [pc, #28]	@ (8002514 <vApplicationGetTimerTaskMemory+0x2c>)
 80024f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4a06      	ldr	r2, [pc, #24]	@ (8002518 <vApplicationGetTimerTaskMemory+0x30>)
 80024fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002506:	601a      	str	r2, [r3, #0]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000428 	.word	0x20000428
 8002518:	200004d0 	.word	0x200004d0

0800251c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0208 	add.w	r2, r3, #8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f103 0208 	add.w	r2, r3, #8
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0208 	add.w	r2, r3, #8
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr

0800255a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ce:	d103      	bne.n	80025d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e00c      	b.n	80025f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3308      	adds	r3, #8
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	e002      	b.n	80025e6 <vListInsert+0x2e>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d2f6      	bcs.n	80025e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	601a      	str	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6892      	ldr	r2, [r2, #8]
 800263e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6852      	ldr	r2, [r2, #4]
 8002648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d103      	bne.n	800265c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026a8:	f002 fb60 	bl	8004d6c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	441a      	add	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d8:	3b01      	subs	r3, #1
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	441a      	add	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	22ff      	movs	r2, #255	@ 0xff
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d114      	bne.n	8002728 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01a      	beq.n	800273c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3310      	adds	r3, #16
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fb56 	bl	8003dbc <xTaskRemoveFromEventList>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d012      	beq.n	800273c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <xQueueGenericReset+0xd0>)
 8002718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f3bf 8f4f 	dsb	sy
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	e009      	b.n	800273c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	3310      	adds	r3, #16
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fef5 	bl	800251c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3324      	adds	r3, #36	@ 0x24
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fef0 	bl	800251c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800273c:	f002 fb46 	bl	8004dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002740:	2301      	movs	r3, #1
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	e000ed04 	.word	0xe000ed04

08002750 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08e      	sub	sp, #56	@ 0x38
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	e7fd      	b.n	8002796 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <xQueueGenericCreateStatic+0x56>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <xQueueGenericCreateStatic+0x5a>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <xQueueGenericCreateStatic+0x5c>
 80027aa:	2300      	movs	r3, #0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80027b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	623b      	str	r3, [r7, #32]
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <xQueueGenericCreateStatic+0x84>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <xQueueGenericCreateStatic+0x88>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <xQueueGenericCreateStatic+0x8a>
 80027d8:	2300      	movs	r3, #0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10b      	bne.n	80027f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	61fb      	str	r3, [r7, #28]
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	e7fd      	b.n	80027f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027f6:	2350      	movs	r3, #80	@ 0x50
 80027f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b50      	cmp	r3, #80	@ 0x50
 80027fe:	d00b      	beq.n	8002818 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	61bb      	str	r3, [r7, #24]
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800281c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800282a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800282e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f844 	bl	80028c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002840:	4618      	mov	r0, r3
 8002842:	3730      	adds	r7, #48	@ 0x30
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	@ 0x28
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <xQueueGenericCreate+0x2c>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	613b      	str	r3, [r7, #16]
}
 800286e:	bf00      	nop
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e004      	b.n	800288a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3350      	adds	r3, #80	@ 0x50
 800288e:	4618      	mov	r0, r3
 8002890:	f002 fb6e 	bl	8004f70 <pvPortMalloc>
 8002894:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00f      	beq.n	80028bc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	3350      	adds	r3, #80	@ 0x50
 80028a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028aa:	79fa      	ldrb	r2, [r7, #7]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f805 	bl	80028c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028bc:	69bb      	ldr	r3, [r7, #24]
	}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e002      	b.n	80028e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028f4:	2101      	movs	r1, #1
 80028f6:	69b8      	ldr	r0, [r7, #24]
 80028f8:	f7ff fec0 	bl	800267c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800292c:	2300      	movs	r3, #0
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8a4 	bl	8002a80 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	461a      	mov	r2, r3
 8002956:	6939      	ldr	r1, [r7, #16]
 8002958:	6978      	ldr	r0, [r7, #20]
 800295a:	f7ff ff75 	bl	8002848 <xQueueGenericCreate>
 800295e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ffd3 	bl	800290c <prvInitialiseMutex>

		return pxNewQueue;
 8002966:	68fb      	ldr	r3, [r7, #12]
	}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800297c:	2301      	movs	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2200      	movs	r2, #0
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f7ff fede 	bl	8002750 <xQueueGenericCreateStatic>
 8002994:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f7ff ffb8 	bl	800290c <prvInitialiseMutex>

		return pxNewQueue;
 800299c:	68fb      	ldr	r3, [r7, #12]
	}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80029a6:	b590      	push	{r4, r7, lr}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80029b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	60fb      	str	r3, [r7, #12]
}
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	685c      	ldr	r4, [r3, #4]
 80029d4:	f001 fbbe 	bl	8004154 <xTaskGetCurrentTaskHandle>
 80029d8:	4603      	mov	r3, r0
 80029da:	429c      	cmp	r4, r3
 80029dc:	d111      	bne.n	8002a02 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80029f0:	2300      	movs	r3, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	6938      	ldr	r0, [r7, #16]
 80029f8:	f000 f842 	bl	8002a80 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80029fc:	2301      	movs	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e001      	b.n	8002a06 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002a06:	697b      	ldr	r3, [r7, #20]
	}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002a10:	b590      	push	{r4, r7, lr}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8002a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	60fb      	str	r3, [r7, #12]
}
 8002a36:	bf00      	nop
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	685c      	ldr	r4, [r3, #4]
 8002a40:	f001 fb88 	bl	8004154 <xTaskGetCurrentTaskHandle>
 8002a44:	4603      	mov	r3, r0
 8002a46:	429c      	cmp	r4, r3
 8002a48:	d107      	bne.n	8002a5a <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002a54:	2301      	movs	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e00c      	b.n	8002a74 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	6938      	ldr	r0, [r7, #16]
 8002a5e:	f000 fa8f 	bl	8002f80 <xQueueSemaphoreTake>
 8002a62:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002a74:	697b      	ldr	r3, [r7, #20]
	}
 8002a76:	4618      	mov	r0, r3
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
	...

08002a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <xQueueGenericSend+0x34>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002aae:	bf00      	nop
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <xQueueGenericSend+0x42>
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <xQueueGenericSend+0x46>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <xQueueGenericSend+0x48>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10b      	bne.n	8002ae4 <xQueueGenericSend+0x64>
	__asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSend+0x72>
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSend+0x76>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSend+0x78>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10b      	bne.n	8002b14 <xQueueGenericSend+0x94>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	623b      	str	r3, [r7, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b14:	f001 fb2c 	bl	8004170 <xTaskGetSchedulerState>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <xQueueGenericSend+0xa4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <xQueueGenericSend+0xa8>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <xQueueGenericSend+0xaa>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <xQueueGenericSend+0xc6>
	__asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	61fb      	str	r3, [r7, #28]
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	e7fd      	b.n	8002b42 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b46:	f002 f911 	bl	8004d6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <xQueueGenericSend+0xdc>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d129      	bne.n	8002bb0 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b62:	f000 fb34 	bl	80031ce <prvCopyDataToQueue>
 8002b66:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	3324      	adds	r3, #36	@ 0x24
 8002b74:	4618      	mov	r0, r3
 8002b76:	f001 f921 	bl	8003dbc <xTaskRemoveFromEventList>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b80:	4b3f      	ldr	r3, [pc, #252]	@ (8002c80 <xQueueGenericSend+0x200>)
 8002b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	e00a      	b.n	8002ba8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b98:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <xQueueGenericSend+0x200>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ba8:	f002 f910 	bl	8004dcc <vPortExitCritical>
				return pdPASS;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e063      	b.n	8002c78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bb6:	f002 f909 	bl	8004dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e05c      	b.n	8002c78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 f95b 	bl	8003e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bd2:	f002 f8fb 	bl	8004dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bd6:	f000 fec1 	bl	800395c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bda:	f002 f8c7 	bl	8004d6c <vPortEnterCritical>
 8002bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002be4:	b25b      	sxtb	r3, r3
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d103      	bne.n	8002bf4 <xQueueGenericSend+0x174>
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bfa:	b25b      	sxtb	r3, r3
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d103      	bne.n	8002c0a <xQueueGenericSend+0x18a>
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c0a:	f002 f8df 	bl	8004dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c0e:	1d3a      	adds	r2, r7, #4
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f94a 	bl	8003eb0 <xTaskCheckForTimeOut>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d124      	bne.n	8002c6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c24:	f000 fbcb 	bl	80033be <prvIsQueueFull>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d018      	beq.n	8002c60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	3310      	adds	r3, #16
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 f86e 	bl	8003d18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c3e:	f000 fb56 	bl	80032ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c42:	f000 fe99 	bl	8003978 <xTaskResumeAll>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f af7c 	bne.w	8002b46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <xQueueGenericSend+0x200>)
 8002c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	e772      	b.n	8002b46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c62:	f000 fb44 	bl	80032ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c66:	f000 fe87 	bl	8003978 <xTaskResumeAll>
 8002c6a:	e76c      	b.n	8002b46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c6e:	f000 fb3e 	bl	80032ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c72:	f000 fe81 	bl	8003978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c76:	2300      	movs	r3, #0
		}
	}
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3738      	adds	r7, #56	@ 0x38
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	e000ed04 	.word	0xe000ed04

08002c84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08e      	sub	sp, #56	@ 0x38
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <xQueueGenericSendFromISR+0x3e>
 8002cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <xQueueGenericSendFromISR+0x42>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <xQueueGenericSendFromISR+0x44>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	623b      	str	r3, [r7, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d103      	bne.n	8002cf2 <xQueueGenericSendFromISR+0x6e>
 8002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <xQueueGenericSendFromISR+0x72>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <xQueueGenericSendFromISR+0x74>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	61fb      	str	r3, [r7, #28]
}
 8002d0e:	bf00      	nop
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d14:	f002 f8ec 	bl	8004ef0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d18:	f3ef 8211 	mrs	r2, BASEPRI
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61ba      	str	r2, [r7, #24]
 8002d2e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d30:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d302      	bcc.n	8002d46 <xQueueGenericSendFromISR+0xc2>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d12c      	bne.n	8002da0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d56:	f000 fa3a 	bl	80031ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d5a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d112      	bne.n	8002d8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d016      	beq.n	8002d9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6e:	3324      	adds	r3, #36	@ 0x24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 f823 	bl	8003dbc <xTaskRemoveFromEventList>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e007      	b.n	8002d9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d8e:	3301      	adds	r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	b25a      	sxtb	r2, r3
 8002d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002d9e:	e001      	b.n	8002da4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3738      	adds	r7, #56	@ 0x38
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	@ 0x30
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <xQueueReceive+0x32>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	623b      	str	r3, [r7, #32]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <xQueueReceive+0x40>
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <xQueueReceive+0x44>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <xQueueReceive+0x46>
 8002e00:	2300      	movs	r3, #0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10b      	bne.n	8002e1e <xQueueReceive+0x62>
	__asm volatile
 8002e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	61fb      	str	r3, [r7, #28]
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e1e:	f001 f9a7 	bl	8004170 <xTaskGetSchedulerState>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <xQueueReceive+0x72>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <xQueueReceive+0x76>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueReceive+0x78>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <xQueueReceive+0x94>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61bb      	str	r3, [r7, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e50:	f001 ff8c 	bl	8004d6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01f      	beq.n	8002ea0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e64:	f000 fa1d 	bl	80032a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00f      	beq.n	8002e98 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	3310      	adds	r3, #16
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 ff9d 	bl	8003dbc <xTaskRemoveFromEventList>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e88:	4b3c      	ldr	r3, [pc, #240]	@ (8002f7c <xQueueReceive+0x1c0>)
 8002e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e98:	f001 ff98 	bl	8004dcc <vPortExitCritical>
				return pdPASS;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e069      	b.n	8002f74 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ea6:	f001 ff91 	bl	8004dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e062      	b.n	8002f74 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eb4:	f107 0310 	add.w	r3, r7, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 ffe3 	bl	8003e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ec2:	f001 ff83 	bl	8004dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ec6:	f000 fd49 	bl	800395c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002eca:	f001 ff4f 	bl	8004d6c <vPortEnterCritical>
 8002ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d103      	bne.n	8002ee4 <xQueueReceive+0x128>
 8002edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eea:	b25b      	sxtb	r3, r3
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d103      	bne.n	8002efa <xQueueReceive+0x13e>
 8002ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002efa:	f001 ff67 	bl	8004dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002efe:	1d3a      	adds	r2, r7, #4
 8002f00:	f107 0310 	add.w	r3, r7, #16
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 ffd2 	bl	8003eb0 <xTaskCheckForTimeOut>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d123      	bne.n	8002f5a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f14:	f000 fa3d 	bl	8003392 <prvIsQueueEmpty>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d017      	beq.n	8002f4e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f20:	3324      	adds	r3, #36	@ 0x24
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fef6 	bl	8003d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f2e:	f000 f9de 	bl	80032ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f32:	f000 fd21 	bl	8003978 <xTaskResumeAll>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d189      	bne.n	8002e50 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f7c <xQueueReceive+0x1c0>)
 8002f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	e780      	b.n	8002e50 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f50:	f000 f9cd 	bl	80032ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f54:	f000 fd10 	bl	8003978 <xTaskResumeAll>
 8002f58:	e77a      	b.n	8002e50 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f5c:	f000 f9c7 	bl	80032ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f60:	f000 fd0a 	bl	8003978 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f66:	f000 fa14 	bl	8003392 <prvIsQueueEmpty>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f43f af6f 	beq.w	8002e50 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3730      	adds	r7, #48	@ 0x30
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	@ 0x38
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	623b      	str	r3, [r7, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	61fb      	str	r3, [r7, #28]
}
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fd4:	f001 f8cc 	bl	8004170 <xTaskGetSchedulerState>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <xQueueSemaphoreTake+0x64>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <xQueueSemaphoreTake+0x68>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <xQueueSemaphoreTake+0x6a>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	61bb      	str	r3, [r7, #24]
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	e7fd      	b.n	8003002 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003006:	f001 feb1 	bl	8004d6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	d024      	beq.n	8003060 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003018:	1e5a      	subs	r2, r3, #1
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800301e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003026:	f001 fa27 	bl	8004478 <pvTaskIncrementMutexHeldCount>
 800302a:	4602      	mov	r2, r0
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00f      	beq.n	8003058 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303a:	3310      	adds	r3, #16
 800303c:	4618      	mov	r0, r3
 800303e:	f000 febd 	bl	8003dbc <xTaskRemoveFromEventList>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003048:	4b54      	ldr	r3, [pc, #336]	@ (800319c <xQueueSemaphoreTake+0x21c>)
 800304a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003058:	f001 feb8 	bl	8004dcc <vPortExitCritical>
				return pdPASS;
 800305c:	2301      	movs	r3, #1
 800305e:	e098      	b.n	8003192 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d112      	bne.n	800308c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	617b      	str	r3, [r7, #20]
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003084:	f001 fea2 	bl	8004dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003088:	2300      	movs	r3, #0
 800308a:	e082      	b.n	8003192 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800308c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fef4 	bl	8003e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800309c:	2301      	movs	r3, #1
 800309e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030a0:	f001 fe94 	bl	8004dcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030a4:	f000 fc5a 	bl	800395c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030a8:	f001 fe60 	bl	8004d6c <vPortEnterCritical>
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d103      	bne.n	80030c2 <xQueueSemaphoreTake+0x142>
 80030ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030c8:	b25b      	sxtb	r3, r3
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ce:	d103      	bne.n	80030d8 <xQueueSemaphoreTake+0x158>
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030d8:	f001 fe78 	bl	8004dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030dc:	463a      	mov	r2, r7
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fee3 	bl	8003eb0 <xTaskCheckForTimeOut>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d132      	bne.n	8003156 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80030f2:	f000 f94e 	bl	8003392 <prvIsQueueEmpty>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d026      	beq.n	800314a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003104:	f001 fe32 	bl	8004d6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f001 f84d 	bl	80041ac <xTaskPriorityInherit>
 8003112:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003114:	f001 fe5a 	bl	8004dcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311a:	3324      	adds	r3, #36	@ 0x24
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	4611      	mov	r1, r2
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fdf9 	bl	8003d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003126:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003128:	f000 f8e1 	bl	80032ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800312c:	f000 fc24 	bl	8003978 <xTaskResumeAll>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	f47f af67 	bne.w	8003006 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003138:	4b18      	ldr	r3, [pc, #96]	@ (800319c <xQueueSemaphoreTake+0x21c>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	e75d      	b.n	8003006 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800314a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800314c:	f000 f8cf 	bl	80032ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003150:	f000 fc12 	bl	8003978 <xTaskResumeAll>
 8003154:	e757      	b.n	8003006 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003156:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003158:	f000 f8c9 	bl	80032ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800315c:	f000 fc0c 	bl	8003978 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003160:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003162:	f000 f916 	bl	8003392 <prvIsQueueEmpty>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	f43f af4c 	beq.w	8003006 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00d      	beq.n	8003190 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003174:	f001 fdfa 	bl	8004d6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003178:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800317a:	f000 f811 	bl	80031a0 <prvGetDisinheritPriorityAfterTimeout>
 800317e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f8ee 	bl	8004368 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800318c:	f001 fe1e 	bl	8004dcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003190:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003192:	4618      	mov	r0, r3
 8003194:	3738      	adds	r7, #56	@ 0x38
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e001      	b.n	80031c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80031c2:	68fb      	ldr	r3, [r7, #12]
	}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b086      	sub	sp, #24
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d14d      	bne.n	8003290 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 f845 	bl	8004288 <xTaskPriorityDisinherit>
 80031fe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	e043      	b.n	8003290 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d119      	bne.n	8003242 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6898      	ldr	r0, [r3, #8]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	461a      	mov	r2, r3
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	f002 fb50 	bl	80058be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	441a      	add	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	429a      	cmp	r2, r3
 8003236:	d32b      	bcc.n	8003290 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e026      	b.n	8003290 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68d8      	ldr	r0, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	461a      	mov	r2, r3
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	f002 fb36 	bl	80058be <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	425b      	negs	r3, r3
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d207      	bcs.n	800327e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	425b      	negs	r3, r3
 8003278:	441a      	add	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d105      	bne.n	8003290 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	3b01      	subs	r3, #1
 800328e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003298:	697b      	ldr	r3, [r7, #20]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d018      	beq.n	80032e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d303      	bcc.n	80032d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68d9      	ldr	r1, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	461a      	mov	r2, r3
 80032e0:	6838      	ldr	r0, [r7, #0]
 80032e2:	f002 faec 	bl	80058be <memcpy>
	}
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032f6:	f001 fd39 	bl	8004d6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003300:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003302:	e011      	b.n	8003328 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d012      	beq.n	8003332 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3324      	adds	r3, #36	@ 0x24
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fd53 	bl	8003dbc <xTaskRemoveFromEventList>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800331c:	f000 fe2c 	bl	8003f78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	3b01      	subs	r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	dce9      	bgt.n	8003304 <prvUnlockQueue+0x16>
 8003330:	e000      	b.n	8003334 <prvUnlockQueue+0x46>
					break;
 8003332:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	22ff      	movs	r2, #255	@ 0xff
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800333c:	f001 fd46 	bl	8004dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003340:	f001 fd14 	bl	8004d6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800334a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800334c:	e011      	b.n	8003372 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3310      	adds	r3, #16
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fd2e 	bl	8003dbc <xTaskRemoveFromEventList>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003366:	f000 fe07 	bl	8003f78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800336a:	7bbb      	ldrb	r3, [r7, #14]
 800336c:	3b01      	subs	r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003376:	2b00      	cmp	r3, #0
 8003378:	dce9      	bgt.n	800334e <prvUnlockQueue+0x60>
 800337a:	e000      	b.n	800337e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800337c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	22ff      	movs	r2, #255	@ 0xff
 8003382:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003386:	f001 fd21 	bl	8004dcc <vPortExitCritical>
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800339a:	f001 fce7 	bl	8004d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e001      	b.n	80033b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033b0:	f001 fd0c 	bl	8004dcc <vPortExitCritical>

	return xReturn;
 80033b4:	68fb      	ldr	r3, [r7, #12]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c6:	f001 fcd1 	bl	8004d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d102      	bne.n	80033dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e001      	b.n	80033e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033e0:	f001 fcf4 	bl	8004dcc <vPortExitCritical>

	return xReturn;
 80033e4:	68fb      	ldr	r3, [r7, #12]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e014      	b.n	800342a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003400:	4a0e      	ldr	r2, [pc, #56]	@ (800343c <vQueueAddToRegistry+0x4c>)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10b      	bne.n	8003424 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800340c:	490b      	ldr	r1, [pc, #44]	@ (800343c <vQueueAddToRegistry+0x4c>)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003416:	4a09      	ldr	r2, [pc, #36]	@ (800343c <vQueueAddToRegistry+0x4c>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003422:	e006      	b.n	8003432 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3301      	adds	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b07      	cmp	r3, #7
 800342e:	d9e7      	bls.n	8003400 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	200008d0 	.word	0x200008d0

08003440 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003450:	f001 fc8c 	bl	8004d6c <vPortEnterCritical>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800345a:	b25b      	sxtb	r3, r3
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d103      	bne.n	800346a <vQueueWaitForMessageRestricted+0x2a>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003470:	b25b      	sxtb	r3, r3
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d103      	bne.n	8003480 <vQueueWaitForMessageRestricted+0x40>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003480:	f001 fca4 	bl	8004dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3324      	adds	r3, #36	@ 0x24
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fc65 	bl	8003d64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff ff27 	bl	80032ee <prvUnlockQueue>
	}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08e      	sub	sp, #56	@ 0x38
 80034ac:	af04      	add	r7, sp, #16
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
}
 80034ce:	bf00      	nop
 80034d0:	bf00      	nop
 80034d2:	e7fd      	b.n	80034d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	61fb      	str	r3, [r7, #28]
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80034f2:	23a8      	movs	r3, #168	@ 0xa8
 80034f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80034fa:	d00b      	beq.n	8003514 <xTaskCreateStatic+0x6c>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	61bb      	str	r3, [r7, #24]
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01e      	beq.n	8003558 <xTaskCreateStatic+0xb0>
 800351a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01b      	beq.n	8003558 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003528:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	2202      	movs	r2, #2
 800352e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003532:	2300      	movs	r3, #0
 8003534:	9303      	str	r3, [sp, #12]
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	9302      	str	r3, [sp, #8]
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f850 	bl	80035f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003552:	f000 f8ed 	bl	8003730 <prvAddNewTaskToReadyList>
 8003556:	e001      	b.n	800355c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800355c:	697b      	ldr	r3, [r7, #20]
	}
 800355e:	4618      	mov	r0, r3
 8003560:	3728      	adds	r7, #40	@ 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08c      	sub	sp, #48	@ 0x30
 800356a:	af04      	add	r7, sp, #16
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fcf8 	bl	8004f70 <pvPortMalloc>
 8003580:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003588:	20a8      	movs	r0, #168	@ 0xa8
 800358a:	f001 fcf1 	bl	8004f70 <pvPortMalloc>
 800358e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
 800359c:	e005      	b.n	80035aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800359e:	6978      	ldr	r0, [r7, #20]
 80035a0:	f001 fdae 	bl	8005100 <vPortFree>
 80035a4:	e001      	b.n	80035aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d017      	beq.n	80035e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035b8:	88fa      	ldrh	r2, [r7, #6]
 80035ba:	2300      	movs	r3, #0
 80035bc:	9303      	str	r3, [sp, #12]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	9302      	str	r3, [sp, #8]
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f80e 	bl	80035f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035d4:	69f8      	ldr	r0, [r7, #28]
 80035d6:	f000 f8ab 	bl	8003730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	e002      	b.n	80035e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80035e6:	69bb      	ldr	r3, [r7, #24]
	}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003600:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	461a      	mov	r2, r3
 8003608:	21a5      	movs	r1, #165	@ 0xa5
 800360a:	f002 f887 	bl	800571c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003618:	3b01      	subs	r3, #1
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	f023 0307 	bic.w	r3, r3, #7
 8003626:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	617b      	str	r3, [r7, #20]
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	e012      	b.n	8003676 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	7819      	ldrb	r1, [r3, #0]
 8003658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	3334      	adds	r3, #52	@ 0x34
 8003660:	460a      	mov	r2, r1
 8003662:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3301      	adds	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b0f      	cmp	r3, #15
 800367a:	d9e9      	bls.n	8003650 <prvInitialiseNewTask+0x60>
 800367c:	e000      	b.n	8003680 <prvInitialiseNewTask+0x90>
		{
			break;
 800367e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	2b37      	cmp	r3, #55	@ 0x37
 800368c:	d901      	bls.n	8003692 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800368e:	2337      	movs	r3, #55	@ 0x37
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003696:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800369c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	2200      	movs	r2, #0
 80036a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe ff56 	bl	800255a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	3318      	adds	r3, #24
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fe ff51 	bl	800255a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	3354      	adds	r3, #84	@ 0x54
 80036e2:	224c      	movs	r2, #76	@ 0x4c
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 f818 	bl	800571c <memset>
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <prvInitialiseNewTask+0x134>)
 80036f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003728 <prvInitialiseNewTask+0x138>)
 80036f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	4a0c      	ldr	r2, [pc, #48]	@ (800372c <prvInitialiseNewTask+0x13c>)
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	68f9      	ldr	r1, [r7, #12]
 8003702:	69b8      	ldr	r0, [r7, #24]
 8003704:	f001 fa40 	bl	8004b88 <pxPortInitialiseStack>
 8003708:	4602      	mov	r2, r0
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800371a:	bf00      	nop
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20001b5c 	.word	0x20001b5c
 8003728:	20001bc4 	.word	0x20001bc4
 800372c:	20001c2c 	.word	0x20001c2c

08003730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003738:	f001 fb18 	bl	8004d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800373c:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <prvAddNewTaskToReadyList+0xc4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a2c      	ldr	r2, [pc, #176]	@ (80037f4 <prvAddNewTaskToReadyList+0xc4>)
 8003744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003746:	4b2c      	ldr	r3, [pc, #176]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800374e:	4a2a      	ldr	r2, [pc, #168]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003754:	4b27      	ldr	r3, [pc, #156]	@ (80037f4 <prvAddNewTaskToReadyList+0xc4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d110      	bne.n	800377e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800375c:	f000 fc32 	bl	8003fc4 <prvInitialiseTaskLists>
 8003760:	e00d      	b.n	800377e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003762:	4b26      	ldr	r3, [pc, #152]	@ (80037fc <prvAddNewTaskToReadyList+0xcc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	429a      	cmp	r2, r3
 8003776:	d802      	bhi.n	800377e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003778:	4a1f      	ldr	r2, [pc, #124]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <prvAddNewTaskToReadyList+0xd0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <prvAddNewTaskToReadyList+0xd0>)
 8003786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003788:	4b1d      	ldr	r3, [pc, #116]	@ (8003800 <prvAddNewTaskToReadyList+0xd0>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <prvAddNewTaskToReadyList+0xd4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d903      	bls.n	80037a4 <prvAddNewTaskToReadyList+0x74>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	4a18      	ldr	r2, [pc, #96]	@ (8003804 <prvAddNewTaskToReadyList+0xd4>)
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <prvAddNewTaskToReadyList+0xd8>)
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7fe fed9 	bl	8002572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037c0:	f001 fb04 	bl	8004dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037c4:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <prvAddNewTaskToReadyList+0xcc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00e      	beq.n	80037ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d207      	bcs.n	80037ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037da:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <prvAddNewTaskToReadyList+0xdc>)
 80037dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000de4 	.word	0x20000de4
 80037f8:	20000910 	.word	0x20000910
 80037fc:	20000df0 	.word	0x20000df0
 8003800:	20000e00 	.word	0x20000e00
 8003804:	20000dec 	.word	0x20000dec
 8003808:	20000914 	.word	0x20000914
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d018      	beq.n	8003854 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003822:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <vTaskDelay+0x64>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <vTaskDelay+0x32>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	60bb      	str	r3, [r7, #8]
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003842:	f000 f88b 	bl	800395c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003846:	2100      	movs	r1, #0
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fe29 	bl	80044a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800384e:	f000 f893 	bl	8003978 <xTaskResumeAll>
 8003852:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d107      	bne.n	800386a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <vTaskDelay+0x68>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000e0c 	.word	0x20000e0c
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	@ 0x28
 8003880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800388a:	463a      	mov	r2, r7
 800388c:	1d39      	adds	r1, r7, #4
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fe10 	bl	80024b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	9202      	str	r2, [sp, #8]
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	460a      	mov	r2, r1
 80038aa:	4924      	ldr	r1, [pc, #144]	@ (800393c <vTaskStartScheduler+0xc0>)
 80038ac:	4824      	ldr	r0, [pc, #144]	@ (8003940 <vTaskStartScheduler+0xc4>)
 80038ae:	f7ff fdfb 	bl	80034a8 <xTaskCreateStatic>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a23      	ldr	r2, [pc, #140]	@ (8003944 <vTaskStartScheduler+0xc8>)
 80038b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038b8:	4b22      	ldr	r3, [pc, #136]	@ (8003944 <vTaskStartScheduler+0xc8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038c0:	2301      	movs	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e001      	b.n	80038ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038d0:	f000 fe3a 	bl	8004548 <xTimerCreateTimerTask>
 80038d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d11b      	bne.n	8003914 <vTaskStartScheduler+0x98>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	613b      	str	r3, [r7, #16]
}
 80038ee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038f0:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <vTaskStartScheduler+0xcc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3354      	adds	r3, #84	@ 0x54
 80038f6:	4a15      	ldr	r2, [pc, #84]	@ (800394c <vTaskStartScheduler+0xd0>)
 80038f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038fa:	4b15      	ldr	r3, [pc, #84]	@ (8003950 <vTaskStartScheduler+0xd4>)
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003902:	4b14      	ldr	r3, [pc, #80]	@ (8003954 <vTaskStartScheduler+0xd8>)
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003908:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <vTaskStartScheduler+0xdc>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800390e:	f001 f9bb 	bl	8004c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003912:	e00f      	b.n	8003934 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d10b      	bne.n	8003934 <vTaskStartScheduler+0xb8>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <vTaskStartScheduler+0xb4>
}
 8003934:	bf00      	nop
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08005d94 	.word	0x08005d94
 8003940:	08003f91 	.word	0x08003f91
 8003944:	20000e08 	.word	0x20000e08
 8003948:	20000910 	.word	0x20000910
 800394c:	2000001c 	.word	0x2000001c
 8003950:	20000e04 	.word	0x20000e04
 8003954:	20000df0 	.word	0x20000df0
 8003958:	20000de8 	.word	0x20000de8

0800395c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003960:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <vTaskSuspendAll+0x18>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	4a03      	ldr	r2, [pc, #12]	@ (8003974 <vTaskSuspendAll+0x18>)
 8003968:	6013      	str	r3, [r2, #0]
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000e0c 	.word	0x20000e0c

08003978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003986:	4b42      	ldr	r3, [pc, #264]	@ (8003a90 <xTaskResumeAll+0x118>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	603b      	str	r3, [r7, #0]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039a6:	f001 f9e1 	bl	8004d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039aa:	4b39      	ldr	r3, [pc, #228]	@ (8003a90 <xTaskResumeAll+0x118>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4a37      	ldr	r2, [pc, #220]	@ (8003a90 <xTaskResumeAll+0x118>)
 80039b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b4:	4b36      	ldr	r3, [pc, #216]	@ (8003a90 <xTaskResumeAll+0x118>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d162      	bne.n	8003a82 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039bc:	4b35      	ldr	r3, [pc, #212]	@ (8003a94 <xTaskResumeAll+0x11c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d05e      	beq.n	8003a82 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c4:	e02f      	b.n	8003a26 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039c6:	4b34      	ldr	r3, [pc, #208]	@ (8003a98 <xTaskResumeAll+0x120>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3318      	adds	r3, #24
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fe28 	bl	8002628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3304      	adds	r3, #4
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fe23 	bl	8002628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <xTaskResumeAll+0x124>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d903      	bls.n	80039f6 <xTaskResumeAll+0x7e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a9c <xTaskResumeAll+0x124>)
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <xTaskResumeAll+0x128>)
 8003a04:	441a      	add	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7fe fdb0 	bl	8002572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a16:	4b23      	ldr	r3, [pc, #140]	@ (8003aa4 <xTaskResumeAll+0x12c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a20:	4b21      	ldr	r3, [pc, #132]	@ (8003aa8 <xTaskResumeAll+0x130>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a26:	4b1c      	ldr	r3, [pc, #112]	@ (8003a98 <xTaskResumeAll+0x120>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1cb      	bne.n	80039c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a34:	f000 fb6a 	bl	800410c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a38:	4b1c      	ldr	r3, [pc, #112]	@ (8003aac <xTaskResumeAll+0x134>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a44:	f000 f844 	bl	8003ad0 <xTaskIncrementTick>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a4e:	4b16      	ldr	r3, [pc, #88]	@ (8003aa8 <xTaskResumeAll+0x130>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f1      	bne.n	8003a44 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003a60:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <xTaskResumeAll+0x134>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <xTaskResumeAll+0x130>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a72:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab0 <xTaskResumeAll+0x138>)
 8003a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a82:	f001 f9a3 	bl	8004dcc <vPortExitCritical>

	return xAlreadyYielded;
 8003a86:	68bb      	ldr	r3, [r7, #8]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000e0c 	.word	0x20000e0c
 8003a94:	20000de4 	.word	0x20000de4
 8003a98:	20000da4 	.word	0x20000da4
 8003a9c:	20000dec 	.word	0x20000dec
 8003aa0:	20000914 	.word	0x20000914
 8003aa4:	20000910 	.word	0x20000910
 8003aa8:	20000df8 	.word	0x20000df8
 8003aac:	20000df4 	.word	0x20000df4
 8003ab0:	e000ed04 	.word	0xe000ed04

08003ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <xTaskGetTickCount+0x18>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ac0:	687b      	ldr	r3, [r7, #4]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	20000de8 	.word	0x20000de8

08003ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ada:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <xTaskIncrementTick+0x154>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 808f 	bne.w	8003c02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ae4:	4b50      	ldr	r3, [pc, #320]	@ (8003c28 <xTaskIncrementTick+0x158>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003aec:	4a4e      	ldr	r2, [pc, #312]	@ (8003c28 <xTaskIncrementTick+0x158>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d121      	bne.n	8003b3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003af8:	4b4c      	ldr	r3, [pc, #304]	@ (8003c2c <xTaskIncrementTick+0x15c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	603b      	str	r3, [r7, #0]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <xTaskIncrementTick+0x46>
 8003b1a:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <xTaskIncrementTick+0x15c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	4b43      	ldr	r3, [pc, #268]	@ (8003c30 <xTaskIncrementTick+0x160>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a41      	ldr	r2, [pc, #260]	@ (8003c2c <xTaskIncrementTick+0x15c>)
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4a41      	ldr	r2, [pc, #260]	@ (8003c30 <xTaskIncrementTick+0x160>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b41      	ldr	r3, [pc, #260]	@ (8003c34 <xTaskIncrementTick+0x164>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3301      	adds	r3, #1
 8003b34:	4a3f      	ldr	r2, [pc, #252]	@ (8003c34 <xTaskIncrementTick+0x164>)
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	f000 fae8 	bl	800410c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <xTaskIncrementTick+0x168>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d34e      	bcc.n	8003be4 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b46:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <xTaskIncrementTick+0x15c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <xTaskIncrementTick+0x84>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <xTaskIncrementTick+0x86>
 8003b54:	2300      	movs	r3, #0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5a:	4b37      	ldr	r3, [pc, #220]	@ (8003c38 <xTaskIncrementTick+0x168>)
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b60:	601a      	str	r2, [r3, #0]
					break;
 8003b62:	e03f      	b.n	8003be4 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b64:	4b31      	ldr	r3, [pc, #196]	@ (8003c2c <xTaskIncrementTick+0x15c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d203      	bcs.n	8003b84 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c38 <xTaskIncrementTick+0x168>)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6013      	str	r3, [r2, #0]
						break;
 8003b82:	e02f      	b.n	8003be4 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fd4d 	bl	8002628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fd44 	bl	8002628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba4:	4b25      	ldr	r3, [pc, #148]	@ (8003c3c <xTaskIncrementTick+0x16c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d903      	bls.n	8003bb4 <xTaskIncrementTick+0xe4>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4a22      	ldr	r2, [pc, #136]	@ (8003c3c <xTaskIncrementTick+0x16c>)
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <xTaskIncrementTick+0x170>)
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f7fe fcd1 	bl	8002572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <xTaskIncrementTick+0x174>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d3b3      	bcc.n	8003b46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003bde:	2301      	movs	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be2:	e7b0      	b.n	8003b46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003be4:	4b17      	ldr	r3, [pc, #92]	@ (8003c44 <xTaskIncrementTick+0x174>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bea:	4915      	ldr	r1, [pc, #84]	@ (8003c40 <xTaskIncrementTick+0x170>)
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d907      	bls.n	8003c0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e004      	b.n	8003c0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c02:	4b11      	ldr	r3, [pc, #68]	@ (8003c48 <xTaskIncrementTick+0x178>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	4a0f      	ldr	r2, [pc, #60]	@ (8003c48 <xTaskIncrementTick+0x178>)
 8003c0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c4c <xTaskIncrementTick+0x17c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c18:	697b      	ldr	r3, [r7, #20]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000e0c 	.word	0x20000e0c
 8003c28:	20000de8 	.word	0x20000de8
 8003c2c:	20000d9c 	.word	0x20000d9c
 8003c30:	20000da0 	.word	0x20000da0
 8003c34:	20000dfc 	.word	0x20000dfc
 8003c38:	20000e04 	.word	0x20000e04
 8003c3c:	20000dec 	.word	0x20000dec
 8003c40:	20000914 	.word	0x20000914
 8003c44:	20000910 	.word	0x20000910
 8003c48:	20000df4 	.word	0x20000df4
 8003c4c:	20000df8 	.word	0x20000df8

08003c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c56:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <vTaskSwitchContext+0xb0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c5e:	4b29      	ldr	r3, [pc, #164]	@ (8003d04 <vTaskSwitchContext+0xb4>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c64:	e047      	b.n	8003cf6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003c66:	4b27      	ldr	r3, [pc, #156]	@ (8003d04 <vTaskSwitchContext+0xb4>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003c6c:	4b26      	ldr	r3, [pc, #152]	@ (8003d08 <vTaskSwitchContext+0xb8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e011      	b.n	8003c98 <vTaskSwitchContext+0x48>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <vTaskSwitchContext+0x42>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	607b      	str	r3, [r7, #4]
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	e7fd      	b.n	8003c8e <vTaskSwitchContext+0x3e>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3b01      	subs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	491c      	ldr	r1, [pc, #112]	@ (8003d0c <vTaskSwitchContext+0xbc>)
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0e3      	beq.n	8003c74 <vTaskSwitchContext+0x24>
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4a15      	ldr	r2, [pc, #84]	@ (8003d0c <vTaskSwitchContext+0xbc>)
 8003cb8:	4413      	add	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3308      	adds	r3, #8
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d104      	bne.n	8003cdc <vTaskSwitchContext+0x8c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8003d10 <vTaskSwitchContext+0xc0>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4a08      	ldr	r2, [pc, #32]	@ (8003d08 <vTaskSwitchContext+0xb8>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cec:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <vTaskSwitchContext+0xc0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3354      	adds	r3, #84	@ 0x54
 8003cf2:	4a08      	ldr	r2, [pc, #32]	@ (8003d14 <vTaskSwitchContext+0xc4>)
 8003cf4:	6013      	str	r3, [r2, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	20000e0c 	.word	0x20000e0c
 8003d04:	20000df8 	.word	0x20000df8
 8003d08:	20000dec 	.word	0x20000dec
 8003d0c:	20000914 	.word	0x20000914
 8003d10:	20000910 	.word	0x20000910
 8003d14:	2000001c 	.word	0x2000001c

08003d18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	60fb      	str	r3, [r7, #12]
}
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <vTaskPlaceOnEventList+0x48>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3318      	adds	r3, #24
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fe fc35 	bl	80025b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d4e:	2101      	movs	r1, #1
 8003d50:	6838      	ldr	r0, [r7, #0]
 8003d52:	f000 fba5 	bl	80044a0 <prvAddCurrentTaskToDelayedList>
}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000910 	.word	0x20000910

08003d64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10b      	bne.n	8003d8e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	617b      	str	r3, [r7, #20]
}
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	e7fd      	b.n	8003d8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003db8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3318      	adds	r3, #24
 8003d94:	4619      	mov	r1, r3
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7fe fbeb 	bl	8002572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	68b8      	ldr	r0, [r7, #8]
 8003dac:	f000 fb78 	bl	80044a0 <prvAddCurrentTaskToDelayedList>
	}
 8003db0:	bf00      	nop
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000910 	.word	0x20000910

08003dbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60fb      	str	r3, [r7, #12]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	3318      	adds	r3, #24
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fc1a 	bl	8002628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003df4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e6c <xTaskRemoveFromEventList+0xb0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d11d      	bne.n	8003e38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fc11 	bl	8002628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0a:	4b19      	ldr	r3, [pc, #100]	@ (8003e70 <xTaskRemoveFromEventList+0xb4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d903      	bls.n	8003e1a <xTaskRemoveFromEventList+0x5e>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	4a16      	ldr	r2, [pc, #88]	@ (8003e70 <xTaskRemoveFromEventList+0xb4>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4a13      	ldr	r2, [pc, #76]	@ (8003e74 <xTaskRemoveFromEventList+0xb8>)
 8003e28:	441a      	add	r2, r3
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f7fe fb9e 	bl	8002572 <vListInsertEnd>
 8003e36:	e005      	b.n	8003e44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	3318      	adds	r3, #24
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	480e      	ldr	r0, [pc, #56]	@ (8003e78 <xTaskRemoveFromEventList+0xbc>)
 8003e40:	f7fe fb97 	bl	8002572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e48:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <xTaskRemoveFromEventList+0xc0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d905      	bls.n	8003e5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e56:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <xTaskRemoveFromEventList+0xc4>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e001      	b.n	8003e62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e62:	697b      	ldr	r3, [r7, #20]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000e0c 	.word	0x20000e0c
 8003e70:	20000dec 	.word	0x20000dec
 8003e74:	20000914 	.word	0x20000914
 8003e78:	20000da4 	.word	0x20000da4
 8003e7c:	20000910 	.word	0x20000910
 8003e80:	20000df8 	.word	0x20000df8

08003e84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <vTaskInternalSetTimeOutState+0x24>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <vTaskInternalSetTimeOutState+0x28>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	605a      	str	r2, [r3, #4]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000dfc 	.word	0x20000dfc
 8003eac:	20000de8 	.word	0x20000de8

08003eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	613b      	str	r3, [r7, #16]
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	60fb      	str	r3, [r7, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ef6:	f000 ff39 	bl	8004d6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003efa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <xTaskCheckForTimeOut+0xc0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d102      	bne.n	8003f1a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	e023      	b.n	8003f62 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <xTaskCheckForTimeOut+0xc4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d007      	beq.n	8003f36 <xTaskCheckForTimeOut+0x86>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e015      	b.n	8003f62 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d20b      	bcs.n	8003f58 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	1ad2      	subs	r2, r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff99 	bl	8003e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	e004      	b.n	8003f62 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f62:	f000 ff33 	bl	8004dcc <vPortExitCritical>

	return xReturn;
 8003f66:	69fb      	ldr	r3, [r7, #28]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000de8 	.word	0x20000de8
 8003f74:	20000dfc 	.word	0x20000dfc

08003f78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f7c:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <vTaskMissedYield+0x14>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bc80      	pop	{r7}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000df8 	.word	0x20000df8

08003f90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f98:	f000 f854 	bl	8004044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f9c:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <prvIdleTask+0x2c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d907      	bls.n	8003fb4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8003fa4:	4b06      	ldr	r3, [pc, #24]	@ (8003fc0 <prvIdleTask+0x30>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8003fb4:	f7fc f8cc 	bl	8000150 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8003fb8:	e7ee      	b.n	8003f98 <prvIdleTask+0x8>
 8003fba:	bf00      	nop
 8003fbc:	20000914 	.word	0x20000914
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fca:	2300      	movs	r3, #0
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	e00c      	b.n	8003fea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <prvInitialiseTaskLists+0x60>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fa9c 	bl	800251c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b37      	cmp	r3, #55	@ 0x37
 8003fee:	d9ef      	bls.n	8003fd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ff0:	480d      	ldr	r0, [pc, #52]	@ (8004028 <prvInitialiseTaskLists+0x64>)
 8003ff2:	f7fe fa93 	bl	800251c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ff6:	480d      	ldr	r0, [pc, #52]	@ (800402c <prvInitialiseTaskLists+0x68>)
 8003ff8:	f7fe fa90 	bl	800251c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ffc:	480c      	ldr	r0, [pc, #48]	@ (8004030 <prvInitialiseTaskLists+0x6c>)
 8003ffe:	f7fe fa8d 	bl	800251c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004002:	480c      	ldr	r0, [pc, #48]	@ (8004034 <prvInitialiseTaskLists+0x70>)
 8004004:	f7fe fa8a 	bl	800251c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004008:	480b      	ldr	r0, [pc, #44]	@ (8004038 <prvInitialiseTaskLists+0x74>)
 800400a:	f7fe fa87 	bl	800251c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800400e:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <prvInitialiseTaskLists+0x78>)
 8004010:	4a05      	ldr	r2, [pc, #20]	@ (8004028 <prvInitialiseTaskLists+0x64>)
 8004012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <prvInitialiseTaskLists+0x7c>)
 8004016:	4a05      	ldr	r2, [pc, #20]	@ (800402c <prvInitialiseTaskLists+0x68>)
 8004018:	601a      	str	r2, [r3, #0]
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000914 	.word	0x20000914
 8004028:	20000d74 	.word	0x20000d74
 800402c:	20000d88 	.word	0x20000d88
 8004030:	20000da4 	.word	0x20000da4
 8004034:	20000db8 	.word	0x20000db8
 8004038:	20000dd0 	.word	0x20000dd0
 800403c:	20000d9c 	.word	0x20000d9c
 8004040:	20000da0 	.word	0x20000da0

08004044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800404a:	e019      	b.n	8004080 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800404c:	f000 fe8e 	bl	8004d6c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004050:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <prvCheckTasksWaitingTermination+0x50>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe fae3 	bl	8002628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <prvCheckTasksWaitingTermination+0x54>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3b01      	subs	r3, #1
 8004068:	4a0b      	ldr	r2, [pc, #44]	@ (8004098 <prvCheckTasksWaitingTermination+0x54>)
 800406a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800406c:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <prvCheckTasksWaitingTermination+0x58>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3b01      	subs	r3, #1
 8004072:	4a0a      	ldr	r2, [pc, #40]	@ (800409c <prvCheckTasksWaitingTermination+0x58>)
 8004074:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004076:	f000 fea9 	bl	8004dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f810 	bl	80040a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004080:	4b06      	ldr	r3, [pc, #24]	@ (800409c <prvCheckTasksWaitingTermination+0x58>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e1      	bne.n	800404c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000db8 	.word	0x20000db8
 8004098:	20000de4 	.word	0x20000de4
 800409c:	20000dcc 	.word	0x20000dcc

080040a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3354      	adds	r3, #84	@ 0x54
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 fb4d 	bl	800574c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 f81d 	bl	8005100 <vPortFree>
				vPortFree( pxTCB );
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f001 f81a 	bl	8005100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040cc:	e019      	b.n	8004102 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d103      	bne.n	80040e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f001 f811 	bl	8005100 <vPortFree>
	}
 80040de:	e010      	b.n	8004102 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d00b      	beq.n	8004102 <prvDeleteTCB+0x62>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	e7fd      	b.n	80040fe <prvDeleteTCB+0x5e>
	}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004112:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <prvResetNextTaskUnblockTime+0x40>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <prvResetNextTaskUnblockTime+0x14>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <prvResetNextTaskUnblockTime+0x16>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <prvResetNextTaskUnblockTime+0x44>)
 8004128:	f04f 32ff 	mov.w	r2, #4294967295
 800412c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800412e:	e008      	b.n	8004142 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <prvResetNextTaskUnblockTime+0x40>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4a04      	ldr	r2, [pc, #16]	@ (8004150 <prvResetNextTaskUnblockTime+0x44>)
 8004140:	6013      	str	r3, [r2, #0]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	20000d9c 	.word	0x20000d9c
 8004150:	20000e04 	.word	0x20000e04

08004154 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800415a:	4b04      	ldr	r3, [pc, #16]	@ (800416c <xTaskGetCurrentTaskHandle+0x18>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004160:	687b      	ldr	r3, [r7, #4]
	}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	20000910 	.word	0x20000910

08004170 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004176:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <xTaskGetSchedulerState+0x34>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800417e:	2301      	movs	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	e008      	b.n	8004196 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004184:	4b08      	ldr	r3, [pc, #32]	@ (80041a8 <xTaskGetSchedulerState+0x38>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800418c:	2302      	movs	r3, #2
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	e001      	b.n	8004196 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004196:	687b      	ldr	r3, [r7, #4]
	}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000df0 	.word	0x20000df0
 80041a8:	20000e0c 	.word	0x20000e0c

080041ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d056      	beq.n	8004270 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c6:	4b2d      	ldr	r3, [pc, #180]	@ (800427c <xTaskPriorityInherit+0xd0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d246      	bcs.n	800425e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db06      	blt.n	80041e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d8:	4b28      	ldr	r3, [pc, #160]	@ (800427c <xTaskPriorityInherit+0xd0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6959      	ldr	r1, [r3, #20]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4a22      	ldr	r2, [pc, #136]	@ (8004280 <xTaskPriorityInherit+0xd4>)
 80041f8:	4413      	add	r3, r2
 80041fa:	4299      	cmp	r1, r3
 80041fc:	d101      	bne.n	8004202 <xTaskPriorityInherit+0x56>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <xTaskPriorityInherit+0x58>
 8004202:	2300      	movs	r3, #0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d022      	beq.n	800424e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fa0b 	bl	8002628 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004212:	4b1a      	ldr	r3, [pc, #104]	@ (800427c <xTaskPriorityInherit+0xd0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004220:	4b18      	ldr	r3, [pc, #96]	@ (8004284 <xTaskPriorityInherit+0xd8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d903      	bls.n	8004230 <xTaskPriorityInherit+0x84>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <xTaskPriorityInherit+0xd8>)
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4a10      	ldr	r2, [pc, #64]	@ (8004280 <xTaskPriorityInherit+0xd4>)
 800423e:	441a      	add	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f7fe f993 	bl	8002572 <vListInsertEnd>
 800424c:	e004      	b.n	8004258 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <xTaskPriorityInherit+0xd0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004258:	2301      	movs	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e008      	b.n	8004270 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004262:	4b06      	ldr	r3, [pc, #24]	@ (800427c <xTaskPriorityInherit+0xd0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	429a      	cmp	r2, r3
 800426a:	d201      	bcs.n	8004270 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004270:	68fb      	ldr	r3, [r7, #12]
	}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000910 	.word	0x20000910
 8004280:	20000914 	.word	0x20000914
 8004284:	20000dec 	.word	0x20000dec

08004288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d058      	beq.n	8004350 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800429e:	4b2f      	ldr	r3, [pc, #188]	@ (800435c <xTaskPriorityDisinherit+0xd4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d00b      	beq.n	80042c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60bb      	str	r3, [r7, #8]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042e4:	1e5a      	subs	r2, r3, #1
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d02c      	beq.n	8004350 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d128      	bne.n	8004350 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	3304      	adds	r3, #4
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe f990 	bl	8002628 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004314:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004320:	4b0f      	ldr	r3, [pc, #60]	@ (8004360 <xTaskPriorityDisinherit+0xd8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d903      	bls.n	8004330 <xTaskPriorityDisinherit+0xa8>
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432c:	4a0c      	ldr	r2, [pc, #48]	@ (8004360 <xTaskPriorityDisinherit+0xd8>)
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a09      	ldr	r2, [pc, #36]	@ (8004364 <xTaskPriorityDisinherit+0xdc>)
 800433e:	441a      	add	r2, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7fe f913 	bl	8002572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800434c:	2301      	movs	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004350:	697b      	ldr	r3, [r7, #20]
	}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000910 	.word	0x20000910
 8004360:	20000dec 	.word	0x20000dec
 8004364:	20000914 	.word	0x20000914

08004368 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004376:	2301      	movs	r3, #1
 8004378:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d071      	beq.n	8004464 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	60fb      	str	r3, [r7, #12]
}
 800439a:	bf00      	nop
 800439c:	bf00      	nop
 800439e:	e7fd      	b.n	800439c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d902      	bls.n	80043b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e002      	b.n	80043b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d051      	beq.n	8004464 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d14c      	bne.n	8004464 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80043ca:	4b28      	ldr	r3, [pc, #160]	@ (800446c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d10b      	bne.n	80043ec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60bb      	str	r3, [r7, #8]
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db04      	blt.n	800440a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	6959      	ldr	r1, [r3, #20]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800441a:	4413      	add	r3, r2
 800441c:	4299      	cmp	r1, r3
 800441e:	d101      	bne.n	8004424 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01c      	beq.n	8004464 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe f8fa 	bl	8002628 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004438:	4b0e      	ldr	r3, [pc, #56]	@ (8004474 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d903      	bls.n	8004448 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004444:	4a0b      	ldr	r2, [pc, #44]	@ (8004474 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4a06      	ldr	r2, [pc, #24]	@ (8004470 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004456:	441a      	add	r2, r3
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fe f887 	bl	8002572 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004464:	bf00      	nop
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000910 	.word	0x20000910
 8004470:	20000914 	.word	0x20000914
 8004474:	20000dec 	.word	0x20000dec

08004478 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800447c:	4b07      	ldr	r3, [pc, #28]	@ (800449c <pvTaskIncrementMutexHeldCount+0x24>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <pvTaskIncrementMutexHeldCount+0x24>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800448a:	3201      	adds	r2, #1
 800448c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800448e:	4b03      	ldr	r3, [pc, #12]	@ (800449c <pvTaskIncrementMutexHeldCount+0x24>)
 8004490:	681b      	ldr	r3, [r3, #0]
	}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000910 	.word	0x20000910

080044a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044aa:	4b21      	ldr	r3, [pc, #132]	@ (8004530 <prvAddCurrentTaskToDelayedList+0x90>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044b0:	4b20      	ldr	r3, [pc, #128]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe f8b6 	bl	8002628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d10a      	bne.n	80044da <prvAddCurrentTaskToDelayedList+0x3a>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4819      	ldr	r0, [pc, #100]	@ (8004538 <prvAddCurrentTaskToDelayedList+0x98>)
 80044d4:	f7fe f84d 	bl	8002572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044d8:	e026      	b.n	8004528 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4413      	add	r3, r2
 80044e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044e2:	4b14      	ldr	r3, [pc, #80]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d209      	bcs.n	8004506 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044f2:	4b12      	ldr	r3, [pc, #72]	@ (800453c <prvAddCurrentTaskToDelayedList+0x9c>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f7fe f85a 	bl	80025b8 <vListInsert>
}
 8004504:	e010      	b.n	8004528 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004506:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <prvAddCurrentTaskToDelayedList+0x94>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f7fe f850 	bl	80025b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <prvAddCurrentTaskToDelayedList+0xa4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	d202      	bcs.n	8004528 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004522:	4a08      	ldr	r2, [pc, #32]	@ (8004544 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6013      	str	r3, [r2, #0]
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000de8 	.word	0x20000de8
 8004534:	20000910 	.word	0x20000910
 8004538:	20000dd0 	.word	0x20000dd0
 800453c:	20000da0 	.word	0x20000da0
 8004540:	20000d9c 	.word	0x20000d9c
 8004544:	20000e04 	.word	0x20000e04

08004548 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	@ 0x28
 800454c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004552:	f000 fad9 	bl	8004b08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004556:	4b1d      	ldr	r3, [pc, #116]	@ (80045cc <xTimerCreateTimerTask+0x84>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d021      	beq.n	80045a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004566:	1d3a      	adds	r2, r7, #4
 8004568:	f107 0108 	add.w	r1, r7, #8
 800456c:	f107 030c 	add.w	r3, r7, #12
 8004570:	4618      	mov	r0, r3
 8004572:	f7fd ffb9 	bl	80024e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	9202      	str	r2, [sp, #8]
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	2302      	movs	r3, #2
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	2300      	movs	r3, #0
 8004586:	460a      	mov	r2, r1
 8004588:	4911      	ldr	r1, [pc, #68]	@ (80045d0 <xTimerCreateTimerTask+0x88>)
 800458a:	4812      	ldr	r0, [pc, #72]	@ (80045d4 <xTimerCreateTimerTask+0x8c>)
 800458c:	f7fe ff8c 	bl	80034a8 <xTaskCreateStatic>
 8004590:	4603      	mov	r3, r0
 8004592:	4a11      	ldr	r2, [pc, #68]	@ (80045d8 <xTimerCreateTimerTask+0x90>)
 8004594:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004596:	4b10      	ldr	r3, [pc, #64]	@ (80045d8 <xTimerCreateTimerTask+0x90>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800459e:	2301      	movs	r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10b      	bne.n	80045c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	613b      	str	r3, [r7, #16]
}
 80045ba:	bf00      	nop
 80045bc:	bf00      	nop
 80045be:	e7fd      	b.n	80045bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045c0:	697b      	ldr	r3, [r7, #20]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000e40 	.word	0x20000e40
 80045d0:	08005d9c 	.word	0x08005d9c
 80045d4:	080046fd 	.word	0x080046fd
 80045d8:	20000e44 	.word	0x20000e44

080045dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	@ 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <xTimerGenericCommand+0x30>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	623b      	str	r3, [r7, #32]
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800460c:	4b19      	ldr	r3, [pc, #100]	@ (8004674 <xTimerGenericCommand+0x98>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02a      	beq.n	800466a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b05      	cmp	r3, #5
 8004624:	dc18      	bgt.n	8004658 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004626:	f7ff fda3 	bl	8004170 <xTaskGetSchedulerState>
 800462a:	4603      	mov	r3, r0
 800462c:	2b02      	cmp	r3, #2
 800462e:	d109      	bne.n	8004644 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004630:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <xTimerGenericCommand+0x98>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	f107 0110 	add.w	r1, r7, #16
 8004638:	2300      	movs	r3, #0
 800463a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800463c:	f7fe fa20 	bl	8002a80 <xQueueGenericSend>
 8004640:	6278      	str	r0, [r7, #36]	@ 0x24
 8004642:	e012      	b.n	800466a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004644:	4b0b      	ldr	r3, [pc, #44]	@ (8004674 <xTimerGenericCommand+0x98>)
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	f107 0110 	add.w	r1, r7, #16
 800464c:	2300      	movs	r3, #0
 800464e:	2200      	movs	r2, #0
 8004650:	f7fe fa16 	bl	8002a80 <xQueueGenericSend>
 8004654:	6278      	str	r0, [r7, #36]	@ 0x24
 8004656:	e008      	b.n	800466a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004658:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <xTimerGenericCommand+0x98>)
 800465a:	6818      	ldr	r0, [r3, #0]
 800465c:	f107 0110 	add.w	r1, r7, #16
 8004660:	2300      	movs	r3, #0
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	f7fe fb0e 	bl	8002c84 <xQueueGenericSendFromISR>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800466c:	4618      	mov	r0, r3
 800466e:	3728      	adds	r7, #40	@ 0x28
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000e40 	.word	0x20000e40

08004678 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004682:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <prvProcessExpiredTimer+0x80>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3304      	adds	r3, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd ffc9 	bl	8002628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d123      	bne.n	80046e6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	18d1      	adds	r1, r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f000 f8cc 	bl	8004848 <prvInsertTimerInActiveList>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d017      	beq.n	80046e6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046b6:	2300      	movs	r3, #0
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2300      	movs	r3, #0
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	2100      	movs	r1, #0
 80046c0:	6978      	ldr	r0, [r7, #20]
 80046c2:	f7ff ff8b 	bl	80045dc <xTimerGenericCommand>
 80046c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60fb      	str	r3, [r7, #12]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	4798      	blx	r3
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000e38 	.word	0x20000e38

080046fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004704:	f107 0308 	add.w	r3, r7, #8
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f859 	bl	80047c0 <prvGetNextExpireTime>
 800470e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4619      	mov	r1, r3
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f805 	bl	8004724 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800471a:	f000 f8d7 	bl	80048cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800471e:	bf00      	nop
 8004720:	e7f0      	b.n	8004704 <prvTimerTask+0x8>
	...

08004724 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800472e:	f7ff f915 	bl	800395c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004732:	f107 0308 	add.w	r3, r7, #8
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f866 	bl	8004808 <prvSampleTimeNow>
 800473c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d130      	bne.n	80047a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <prvProcessTimerOrBlockTask+0x3c>
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	429a      	cmp	r2, r3
 8004750:	d806      	bhi.n	8004760 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004752:	f7ff f911 	bl	8003978 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004756:	68f9      	ldr	r1, [r7, #12]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff8d 	bl	8004678 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800475e:	e024      	b.n	80047aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004766:	4b13      	ldr	r3, [pc, #76]	@ (80047b4 <prvProcessTimerOrBlockTask+0x90>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004778:	4b0f      	ldr	r3, [pc, #60]	@ (80047b8 <prvProcessTimerOrBlockTask+0x94>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	4619      	mov	r1, r3
 8004786:	f7fe fe5b 	bl	8003440 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800478a:	f7ff f8f5 	bl	8003978 <xTaskResumeAll>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004794:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <prvProcessTimerOrBlockTask+0x98>)
 8004796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	f3bf 8f6f 	isb	sy
}
 80047a4:	e001      	b.n	80047aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047a6:	f7ff f8e7 	bl	8003978 <xTaskResumeAll>
}
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000e3c 	.word	0x20000e3c
 80047b8:	20000e40 	.word	0x20000e40
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <prvGetNextExpireTime+0x44>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d105      	bne.n	80047f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e6:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <prvGetNextExpireTime+0x44>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e001      	b.n	80047f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000e38 	.word	0x20000e38

08004808 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004810:	f7ff f950 	bl	8003ab4 <xTaskGetTickCount>
 8004814:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004816:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <prvSampleTimeNow+0x3c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	429a      	cmp	r2, r3
 800481e:	d205      	bcs.n	800482c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004820:	f000 f910 	bl	8004a44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e002      	b.n	8004832 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004832:	4a04      	ldr	r2, [pc, #16]	@ (8004844 <prvSampleTimeNow+0x3c>)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004838:	68fb      	ldr	r3, [r7, #12]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000e48 	.word	0x20000e48

08004848 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	429a      	cmp	r2, r3
 800486c:	d812      	bhi.n	8004894 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	1ad2      	subs	r2, r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800487c:	2301      	movs	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e01b      	b.n	80048ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004882:	4b10      	ldr	r3, [pc, #64]	@ (80048c4 <prvInsertTimerInActiveList+0x7c>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fd fe93 	bl	80025b8 <vListInsert>
 8004892:	e012      	b.n	80048ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d206      	bcs.n	80048aa <prvInsertTimerInActiveList+0x62>
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048a4:	2301      	movs	r3, #1
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e007      	b.n	80048ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048aa:	4b07      	ldr	r3, [pc, #28]	@ (80048c8 <prvInsertTimerInActiveList+0x80>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fd fe7f 	bl	80025b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048ba:	697b      	ldr	r3, [r7, #20]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000e3c 	.word	0x20000e3c
 80048c8:	20000e38 	.word	0x20000e38

080048cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	@ 0x38
 80048d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048d2:	e0a5      	b.n	8004a20 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	da19      	bge.n	800490e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	3304      	adds	r3, #4
 80048de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	61fb      	str	r3, [r7, #28]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004904:	6850      	ldr	r0, [r2, #4]
 8004906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	4611      	mov	r1, r2
 800490c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	f2c0 8085 	blt.w	8004a20 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004924:	3304      	adds	r3, #4
 8004926:	4618      	mov	r0, r3
 8004928:	f7fd fe7e 	bl	8002628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800492c:	463b      	mov	r3, r7
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff6a 	bl	8004808 <prvSampleTimeNow>
 8004934:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b09      	cmp	r3, #9
 800493a:	d86c      	bhi.n	8004a16 <prvProcessReceivedCommands+0x14a>
 800493c:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <prvProcessReceivedCommands+0x78>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	0800496d 	.word	0x0800496d
 8004948:	0800496d 	.word	0x0800496d
 800494c:	0800496d 	.word	0x0800496d
 8004950:	08004a17 	.word	0x08004a17
 8004954:	080049cb 	.word	0x080049cb
 8004958:	08004a05 	.word	0x08004a05
 800495c:	0800496d 	.word	0x0800496d
 8004960:	0800496d 	.word	0x0800496d
 8004964:	08004a17 	.word	0x08004a17
 8004968:	080049cb 	.word	0x080049cb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	18d1      	adds	r1, r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800497a:	f7ff ff65 	bl	8004848 <prvInsertTimerInActiveList>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d04a      	beq.n	8004a1a <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800498a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d142      	bne.n	8004a1a <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	441a      	add	r2, r3
 800499c:	2300      	movs	r3, #0
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2300      	movs	r3, #0
 80049a2:	2100      	movs	r1, #0
 80049a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a6:	f7ff fe19 	bl	80045dc <xTimerGenericCommand>
 80049aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d133      	bne.n	8004a1a <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	61bb      	str	r3, [r7, #24]
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	e7fd      	b.n	80049c6 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80049d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	617b      	str	r3, [r7, #20]
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	699a      	ldr	r2, [r3, #24]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	18d1      	adds	r1, r2, r3
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049fe:	f7ff ff23 	bl	8004848 <prvInsertTimerInActiveList>
					break;
 8004a02:	e00d      	b.n	8004a20 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d107      	bne.n	8004a1e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004a0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a10:	f000 fb76 	bl	8005100 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a14:	e003      	b.n	8004a1e <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <prvProcessReceivedCommands+0x154>
					break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <prvProcessReceivedCommands+0x154>
					break;
 8004a1e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a20:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <prvProcessReceivedCommands+0x174>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	1d39      	adds	r1, r7, #4
 8004a26:	2200      	movs	r2, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe f9c7 	bl	8002dbc <xQueueReceive>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f47f af4f 	bne.w	80048d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a36:	bf00      	nop
 8004a38:	bf00      	nop
 8004a3a:	3730      	adds	r7, #48	@ 0x30
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20000e40 	.word	0x20000e40

08004a44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a4a:	e046      	b.n	8004ada <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b00 <prvSwitchTimerLists+0xbc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a56:	4b2a      	ldr	r3, [pc, #168]	@ (8004b00 <prvSwitchTimerLists+0xbc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd fddf 	bl	8002628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d12f      	bne.n	8004ada <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4413      	add	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d90e      	bls.n	8004aaa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a98:	4b19      	ldr	r3, [pc, #100]	@ (8004b00 <prvSwitchTimerLists+0xbc>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	f7fd fd88 	bl	80025b8 <vListInsert>
 8004aa8:	e017      	b.n	8004ada <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff fd91 	bl	80045dc <xTimerGenericCommand>
 8004aba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <prvSwitchTimerLists+0x96>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	603b      	str	r3, [r7, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ada:	4b09      	ldr	r3, [pc, #36]	@ (8004b00 <prvSwitchTimerLists+0xbc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1b3      	bne.n	8004a4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <prvSwitchTimerLists+0xbc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004aea:	4b06      	ldr	r3, [pc, #24]	@ (8004b04 <prvSwitchTimerLists+0xc0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a04      	ldr	r2, [pc, #16]	@ (8004b00 <prvSwitchTimerLists+0xbc>)
 8004af0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004af2:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <prvSwitchTimerLists+0xc0>)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	6013      	str	r3, [r2, #0]
}
 8004af8:	bf00      	nop
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000e38 	.word	0x20000e38
 8004b04:	20000e3c 	.word	0x20000e3c

08004b08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b0e:	f000 f92d 	bl	8004d6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <prvCheckForValidListAndQueue+0x60>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d120      	bne.n	8004b5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b1a:	4814      	ldr	r0, [pc, #80]	@ (8004b6c <prvCheckForValidListAndQueue+0x64>)
 8004b1c:	f7fd fcfe 	bl	800251c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b20:	4813      	ldr	r0, [pc, #76]	@ (8004b70 <prvCheckForValidListAndQueue+0x68>)
 8004b22:	f7fd fcfb 	bl	800251c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b26:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <prvCheckForValidListAndQueue+0x6c>)
 8004b28:	4a10      	ldr	r2, [pc, #64]	@ (8004b6c <prvCheckForValidListAndQueue+0x64>)
 8004b2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b2c:	4b12      	ldr	r3, [pc, #72]	@ (8004b78 <prvCheckForValidListAndQueue+0x70>)
 8004b2e:	4a10      	ldr	r2, [pc, #64]	@ (8004b70 <prvCheckForValidListAndQueue+0x68>)
 8004b30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b32:	2300      	movs	r3, #0
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <prvCheckForValidListAndQueue+0x74>)
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <prvCheckForValidListAndQueue+0x78>)
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	f7fd fe07 	bl	8002750 <xQueueGenericCreateStatic>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a08      	ldr	r2, [pc, #32]	@ (8004b68 <prvCheckForValidListAndQueue+0x60>)
 8004b46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b48:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <prvCheckForValidListAndQueue+0x60>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b50:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <prvCheckForValidListAndQueue+0x60>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	490b      	ldr	r1, [pc, #44]	@ (8004b84 <prvCheckForValidListAndQueue+0x7c>)
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fc4a 	bl	80033f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b5c:	f000 f936 	bl	8004dcc <vPortExitCritical>
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000e40 	.word	0x20000e40
 8004b6c:	20000e10 	.word	0x20000e10
 8004b70:	20000e24 	.word	0x20000e24
 8004b74:	20000e38 	.word	0x20000e38
 8004b78:	20000e3c 	.word	0x20000e3c
 8004b7c:	20000eec 	.word	0x20000eec
 8004b80:	20000e4c 	.word	0x20000e4c
 8004b84:	08005da4 	.word	0x08005da4

08004b88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3b04      	subs	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3b04      	subs	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0201 	bic.w	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bb8:	4a08      	ldr	r2, [pc, #32]	@ (8004bdc <pxPortInitialiseStack+0x54>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b14      	subs	r3, #20
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b20      	subs	r3, #32
 8004bce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	08004be1 	.word	0x08004be1

08004be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bea:	4b12      	ldr	r3, [pc, #72]	@ (8004c34 <prvTaskExitError+0x54>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d00b      	beq.n	8004c0c <prvTaskExitError+0x2c>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	60fb      	str	r3, [r7, #12]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <prvTaskExitError+0x28>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60bb      	str	r3, [r7, #8]
}
 8004c1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c20:	bf00      	nop
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0fc      	beq.n	8004c22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	2000000c 	.word	0x2000000c
	...

08004c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <pxCurrentTCBConst2>)
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c4a:	f380 8809 	msr	PSP, r0
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8811 	msr	BASEPRI, r0
 8004c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004c5e:	4770      	bx	lr

08004c60 <pxCurrentTCBConst2>:
 8004c60:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c68:	4806      	ldr	r0, [pc, #24]	@ (8004c84 <prvPortStartFirstTask+0x1c>)
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f380 8808 	msr	MSP, r0
 8004c72:	b662      	cpsie	i
 8004c74:	b661      	cpsie	f
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	df00      	svc	0
 8004c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c82:	bf00      	nop
 8004c84:	e000ed08 	.word	0xe000ed08

08004c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c8e:	4b32      	ldr	r3, [pc, #200]	@ (8004d58 <xPortStartScheduler+0xd0>)
 8004c90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	22ff      	movs	r2, #255	@ 0xff
 8004c9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d5c <xPortStartScheduler+0xd4>)
 8004cb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004cb8:	2207      	movs	r2, #7
 8004cba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cbc:	e009      	b.n	8004cd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004cbe:	4b28      	ldr	r3, [pc, #160]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	4a26      	ldr	r2, [pc, #152]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004cc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b80      	cmp	r3, #128	@ 0x80
 8004cdc:	d0ef      	beq.n	8004cbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1c3 0307 	rsb	r3, r3, #7
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d00b      	beq.n	8004d02 <xPortStartScheduler+0x7a>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	60bb      	str	r3, [r7, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d02:	4b17      	ldr	r3, [pc, #92]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004d0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d0c:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d14:	4a12      	ldr	r2, [pc, #72]	@ (8004d60 <xPortStartScheduler+0xd8>)
 8004d16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d20:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <xPortStartScheduler+0xdc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0f      	ldr	r2, [pc, #60]	@ (8004d64 <xPortStartScheduler+0xdc>)
 8004d26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <xPortStartScheduler+0xdc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0c      	ldr	r2, [pc, #48]	@ (8004d64 <xPortStartScheduler+0xdc>)
 8004d32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d38:	f000 f8b8 	bl	8004eac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <xPortStartScheduler+0xe0>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d42:	f7ff ff91 	bl	8004c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d46:	f7fe ff83 	bl	8003c50 <vTaskSwitchContext>
	prvTaskExitError();
 8004d4a:	f7ff ff49 	bl	8004be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	e000e400 	.word	0xe000e400
 8004d5c:	20000f3c 	.word	0x20000f3c
 8004d60:	20000f40 	.word	0x20000f40
 8004d64:	e000ed20 	.word	0xe000ed20
 8004d68:	2000000c 	.word	0x2000000c

08004d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
}
 8004d84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d86:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <vPortEnterCritical+0x58>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <vPortEnterCritical+0x58>)
 8004d8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <vPortEnterCritical+0x58>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d110      	bne.n	8004dba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <vPortEnterCritical+0x5c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <vPortEnterCritical+0x4e>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	603b      	str	r3, [r7, #0]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <vPortEnterCritical+0x4a>
	}
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	2000000c 	.word	0x2000000c
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dd2:	4b12      	ldr	r3, [pc, #72]	@ (8004e1c <vPortExitCritical+0x50>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <vPortExitCritical+0x26>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	607b      	str	r3, [r7, #4]
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	e7fd      	b.n	8004dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004df2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <vPortExitCritical+0x50>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <vPortExitCritical+0x50>)
 8004dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dfc:	4b07      	ldr	r3, [pc, #28]	@ (8004e1c <vPortExitCritical+0x50>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <vPortExitCritical+0x44>
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
}
 8004e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	2000000c 	.word	0x2000000c

08004e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e20:	f3ef 8009 	mrs	r0, PSP
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <pxCurrentTCBConst>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e30:	6010      	str	r0, [r2, #0]
 8004e32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e3a:	f380 8811 	msr	BASEPRI, r0
 8004e3e:	f7fe ff07 	bl	8003c50 <vTaskSwitchContext>
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8811 	msr	BASEPRI, r0
 8004e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6808      	ldr	r0, [r1, #0]
 8004e52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e56:	f380 8809 	msr	PSP, r0
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	4770      	bx	lr

08004e60 <pxCurrentTCBConst>:
 8004e60:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop

08004e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	607b      	str	r3, [r7, #4]
}
 8004e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e82:	f7fe fe25 	bl	8003ad0 <xTaskIncrementTick>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <SysTick_Handler+0x40>)
 8004e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	2300      	movs	r3, #0
 8004e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f383 8811 	msr	BASEPRI, r3
}
 8004e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <vPortSetupTimerInterrupt+0x30>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <vPortSetupTimerInterrupt+0x34>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ebc:	4b09      	ldr	r3, [pc, #36]	@ (8004ee4 <vPortSetupTimerInterrupt+0x38>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a09      	ldr	r2, [pc, #36]	@ (8004ee8 <vPortSetupTimerInterrupt+0x3c>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	4a08      	ldr	r2, [pc, #32]	@ (8004eec <vPortSetupTimerInterrupt+0x40>)
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ece:	4b03      	ldr	r3, [pc, #12]	@ (8004edc <vPortSetupTimerInterrupt+0x30>)
 8004ed0:	2207      	movs	r2, #7
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	e000e010 	.word	0xe000e010
 8004ee0:	e000e018 	.word	0xe000e018
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	10624dd3 	.word	0x10624dd3
 8004eec:	e000e014 	.word	0xe000e014

08004ef0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ef6:	f3ef 8305 	mrs	r3, IPSR
 8004efa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d915      	bls.n	8004f2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f02:	4a17      	ldr	r2, [pc, #92]	@ (8004f60 <vPortValidateInterruptPriority+0x70>)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f0c:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <vPortValidateInterruptPriority+0x74>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	7afa      	ldrb	r2, [r7, #11]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d20b      	bcs.n	8004f2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	607b      	str	r3, [r7, #4]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <vPortValidateInterruptPriority+0x78>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <vPortValidateInterruptPriority+0x7c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d90b      	bls.n	8004f56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	603b      	str	r3, [r7, #0]
}
 8004f50:	bf00      	nop
 8004f52:	bf00      	nop
 8004f54:	e7fd      	b.n	8004f52 <vPortValidateInterruptPriority+0x62>
	}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	e000e3f0 	.word	0xe000e3f0
 8004f64:	20000f3c 	.word	0x20000f3c
 8004f68:	e000ed0c 	.word	0xe000ed0c
 8004f6c:	20000f40 	.word	0x20000f40

08004f70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f7c:	f7fe fcee 	bl	800395c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f80:	4b5a      	ldr	r3, [pc, #360]	@ (80050ec <pvPortMalloc+0x17c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f88:	f000 f916 	bl	80051b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f8c:	4b58      	ldr	r3, [pc, #352]	@ (80050f0 <pvPortMalloc+0x180>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 8090 	bne.w	80050ba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01e      	beq.n	8004fde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d015      	beq.n	8004fde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f023 0307 	bic.w	r3, r3, #7
 8004fb8:	3308      	adds	r3, #8
 8004fba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <pvPortMalloc+0x6e>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	617b      	str	r3, [r7, #20]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d06a      	beq.n	80050ba <pvPortMalloc+0x14a>
 8004fe4:	4b43      	ldr	r3, [pc, #268]	@ (80050f4 <pvPortMalloc+0x184>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d865      	bhi.n	80050ba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fee:	4b42      	ldr	r3, [pc, #264]	@ (80050f8 <pvPortMalloc+0x188>)
 8004ff0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ff2:	4b41      	ldr	r3, [pc, #260]	@ (80050f8 <pvPortMalloc+0x188>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff8:	e004      	b.n	8005004 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d903      	bls.n	8005016 <pvPortMalloc+0xa6>
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f1      	bne.n	8004ffa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005016:	4b35      	ldr	r3, [pc, #212]	@ (80050ec <pvPortMalloc+0x17c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	429a      	cmp	r2, r3
 800501e:	d04c      	beq.n	80050ba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	4413      	add	r3, r2
 8005028:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	2308      	movs	r3, #8
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	429a      	cmp	r2, r3
 8005040:	d920      	bls.n	8005084 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4413      	add	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00b      	beq.n	800506c <pvPortMalloc+0xfc>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	613b      	str	r3, [r7, #16]
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	e7fd      	b.n	8005068 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800507e:	69b8      	ldr	r0, [r7, #24]
 8005080:	f000 f8fc 	bl	800527c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005084:	4b1b      	ldr	r3, [pc, #108]	@ (80050f4 <pvPortMalloc+0x184>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <pvPortMalloc+0x184>)
 8005090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005092:	4b18      	ldr	r3, [pc, #96]	@ (80050f4 <pvPortMalloc+0x184>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4b19      	ldr	r3, [pc, #100]	@ (80050fc <pvPortMalloc+0x18c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d203      	bcs.n	80050a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800509e:	4b15      	ldr	r3, [pc, #84]	@ (80050f4 <pvPortMalloc+0x184>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a16      	ldr	r2, [pc, #88]	@ (80050fc <pvPortMalloc+0x18c>)
 80050a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	4b11      	ldr	r3, [pc, #68]	@ (80050f0 <pvPortMalloc+0x180>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050ba:	f7fe fc5d 	bl	8003978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <pvPortMalloc+0x170>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	60fb      	str	r3, [r7, #12]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <pvPortMalloc+0x16c>
	return pvReturn;
 80050e0:	69fb      	ldr	r3, [r7, #28]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3728      	adds	r7, #40	@ 0x28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20001b4c 	.word	0x20001b4c
 80050f0:	20001b58 	.word	0x20001b58
 80050f4:	20001b50 	.word	0x20001b50
 80050f8:	20001b44 	.word	0x20001b44
 80050fc:	20001b54 	.word	0x20001b54

08005100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04a      	beq.n	80051a8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005112:	2308      	movs	r3, #8
 8005114:	425b      	negs	r3, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4413      	add	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4b22      	ldr	r3, [pc, #136]	@ (80051b0 <vPortFree+0xb0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <vPortFree+0x46>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	60fb      	str	r3, [r7, #12]
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <vPortFree+0x66>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	60bb      	str	r3, [r7, #8]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4b11      	ldr	r3, [pc, #68]	@ (80051b0 <vPortFree+0xb0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d019      	beq.n	80051a8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d115      	bne.n	80051a8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	4b0b      	ldr	r3, [pc, #44]	@ (80051b0 <vPortFree+0xb0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	43db      	mvns	r3, r3
 8005186:	401a      	ands	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800518c:	f7fe fbe6 	bl	800395c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	4b07      	ldr	r3, [pc, #28]	@ (80051b4 <vPortFree+0xb4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4413      	add	r3, r2
 800519a:	4a06      	ldr	r2, [pc, #24]	@ (80051b4 <vPortFree+0xb4>)
 800519c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800519e:	6938      	ldr	r0, [r7, #16]
 80051a0:	f000 f86c 	bl	800527c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051a4:	f7fe fbe8 	bl	8003978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051a8:	bf00      	nop
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20001b58 	.word	0x20001b58
 80051b4:	20001b50 	.word	0x20001b50

080051b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80051c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051c4:	4b27      	ldr	r3, [pc, #156]	@ (8005264 <prvHeapInit+0xac>)
 80051c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00c      	beq.n	80051ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3307      	adds	r3, #7
 80051d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005264 <prvHeapInit+0xac>)
 80051e8:	4413      	add	r3, r2
 80051ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005268 <prvHeapInit+0xb0>)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005268 <prvHeapInit+0xb0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	4413      	add	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005204:	2208      	movs	r2, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0307 	bic.w	r3, r3, #7
 8005212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a15      	ldr	r2, [pc, #84]	@ (800526c <prvHeapInit+0xb4>)
 8005218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800521a:	4b14      	ldr	r3, [pc, #80]	@ (800526c <prvHeapInit+0xb4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005222:	4b12      	ldr	r3, [pc, #72]	@ (800526c <prvHeapInit+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005238:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <prvHeapInit+0xb4>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a0a      	ldr	r2, [pc, #40]	@ (8005270 <prvHeapInit+0xb8>)
 8005246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a09      	ldr	r2, [pc, #36]	@ (8005274 <prvHeapInit+0xbc>)
 800524e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005250:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <prvHeapInit+0xc0>)
 8005252:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005256:	601a      	str	r2, [r3, #0]
}
 8005258:	bf00      	nop
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000f44 	.word	0x20000f44
 8005268:	20001b44 	.word	0x20001b44
 800526c:	20001b4c 	.word	0x20001b4c
 8005270:	20001b54 	.word	0x20001b54
 8005274:	20001b50 	.word	0x20001b50
 8005278:	20001b58 	.word	0x20001b58

0800527c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005284:	4b27      	ldr	r3, [pc, #156]	@ (8005324 <prvInsertBlockIntoFreeList+0xa8>)
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e002      	b.n	8005290 <prvInsertBlockIntoFreeList+0x14>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	429a      	cmp	r2, r3
 8005298:	d8f7      	bhi.n	800528a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	4413      	add	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d108      	bne.n	80052be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	441a      	add	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d118      	bne.n	8005304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b14      	ldr	r3, [pc, #80]	@ (8005328 <prvInsertBlockIntoFreeList+0xac>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d00d      	beq.n	80052fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e008      	b.n	800530c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <prvInsertBlockIntoFreeList+0xac>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e003      	b.n	800530c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d002      	beq.n	800531a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr
 8005324:	20001b44 	.word	0x20001b44
 8005328:	20001b4c 	.word	0x20001b4c

0800532c <std>:
 800532c:	2300      	movs	r3, #0
 800532e:	b510      	push	{r4, lr}
 8005330:	4604      	mov	r4, r0
 8005332:	e9c0 3300 	strd	r3, r3, [r0]
 8005336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800533a:	6083      	str	r3, [r0, #8]
 800533c:	8181      	strh	r1, [r0, #12]
 800533e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005340:	81c2      	strh	r2, [r0, #14]
 8005342:	6183      	str	r3, [r0, #24]
 8005344:	4619      	mov	r1, r3
 8005346:	2208      	movs	r2, #8
 8005348:	305c      	adds	r0, #92	@ 0x5c
 800534a:	f000 f9e7 	bl	800571c <memset>
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <std+0x58>)
 8005350:	6224      	str	r4, [r4, #32]
 8005352:	6263      	str	r3, [r4, #36]	@ 0x24
 8005354:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <std+0x5c>)
 8005356:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005358:	4b0c      	ldr	r3, [pc, #48]	@ (800538c <std+0x60>)
 800535a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <std+0x64>)
 800535e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005360:	4b0c      	ldr	r3, [pc, #48]	@ (8005394 <std+0x68>)
 8005362:	429c      	cmp	r4, r3
 8005364:	d006      	beq.n	8005374 <std+0x48>
 8005366:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800536a:	4294      	cmp	r4, r2
 800536c:	d002      	beq.n	8005374 <std+0x48>
 800536e:	33d0      	adds	r3, #208	@ 0xd0
 8005370:	429c      	cmp	r4, r3
 8005372:	d105      	bne.n	8005380 <std+0x54>
 8005374:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537c:	f000 ba9c 	b.w	80058b8 <__retarget_lock_init_recursive>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	bf00      	nop
 8005384:	0800556d 	.word	0x0800556d
 8005388:	0800558f 	.word	0x0800558f
 800538c:	080055c7 	.word	0x080055c7
 8005390:	080055eb 	.word	0x080055eb
 8005394:	20001b5c 	.word	0x20001b5c

08005398 <stdio_exit_handler>:
 8005398:	4a02      	ldr	r2, [pc, #8]	@ (80053a4 <stdio_exit_handler+0xc>)
 800539a:	4903      	ldr	r1, [pc, #12]	@ (80053a8 <stdio_exit_handler+0x10>)
 800539c:	4803      	ldr	r0, [pc, #12]	@ (80053ac <stdio_exit_handler+0x14>)
 800539e:	f000 b869 	b.w	8005474 <_fwalk_sglue>
 80053a2:	bf00      	nop
 80053a4:	20000010 	.word	0x20000010
 80053a8:	08005bc9 	.word	0x08005bc9
 80053ac:	20000020 	.word	0x20000020

080053b0 <cleanup_stdio>:
 80053b0:	6841      	ldr	r1, [r0, #4]
 80053b2:	4b0c      	ldr	r3, [pc, #48]	@ (80053e4 <cleanup_stdio+0x34>)
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4299      	cmp	r1, r3
 80053b8:	4604      	mov	r4, r0
 80053ba:	d001      	beq.n	80053c0 <cleanup_stdio+0x10>
 80053bc:	f000 fc04 	bl	8005bc8 <_fflush_r>
 80053c0:	68a1      	ldr	r1, [r4, #8]
 80053c2:	4b09      	ldr	r3, [pc, #36]	@ (80053e8 <cleanup_stdio+0x38>)
 80053c4:	4299      	cmp	r1, r3
 80053c6:	d002      	beq.n	80053ce <cleanup_stdio+0x1e>
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 fbfd 	bl	8005bc8 <_fflush_r>
 80053ce:	68e1      	ldr	r1, [r4, #12]
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <cleanup_stdio+0x3c>)
 80053d2:	4299      	cmp	r1, r3
 80053d4:	d004      	beq.n	80053e0 <cleanup_stdio+0x30>
 80053d6:	4620      	mov	r0, r4
 80053d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053dc:	f000 bbf4 	b.w	8005bc8 <_fflush_r>
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	bf00      	nop
 80053e4:	20001b5c 	.word	0x20001b5c
 80053e8:	20001bc4 	.word	0x20001bc4
 80053ec:	20001c2c 	.word	0x20001c2c

080053f0 <global_stdio_init.part.0>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <global_stdio_init.part.0+0x30>)
 80053f4:	4c0b      	ldr	r4, [pc, #44]	@ (8005424 <global_stdio_init.part.0+0x34>)
 80053f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005428 <global_stdio_init.part.0+0x38>)
 80053f8:	4620      	mov	r0, r4
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	2104      	movs	r1, #4
 80053fe:	2200      	movs	r2, #0
 8005400:	f7ff ff94 	bl	800532c <std>
 8005404:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005408:	2201      	movs	r2, #1
 800540a:	2109      	movs	r1, #9
 800540c:	f7ff ff8e 	bl	800532c <std>
 8005410:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005414:	2202      	movs	r2, #2
 8005416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541a:	2112      	movs	r1, #18
 800541c:	f7ff bf86 	b.w	800532c <std>
 8005420:	20001c94 	.word	0x20001c94
 8005424:	20001b5c 	.word	0x20001b5c
 8005428:	08005399 	.word	0x08005399

0800542c <__sfp_lock_acquire>:
 800542c:	4801      	ldr	r0, [pc, #4]	@ (8005434 <__sfp_lock_acquire+0x8>)
 800542e:	f000 ba44 	b.w	80058ba <__retarget_lock_acquire_recursive>
 8005432:	bf00      	nop
 8005434:	20001c9d 	.word	0x20001c9d

08005438 <__sfp_lock_release>:
 8005438:	4801      	ldr	r0, [pc, #4]	@ (8005440 <__sfp_lock_release+0x8>)
 800543a:	f000 ba3f 	b.w	80058bc <__retarget_lock_release_recursive>
 800543e:	bf00      	nop
 8005440:	20001c9d 	.word	0x20001c9d

08005444 <__sinit>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	f7ff fff0 	bl	800542c <__sfp_lock_acquire>
 800544c:	6a23      	ldr	r3, [r4, #32]
 800544e:	b11b      	cbz	r3, 8005458 <__sinit+0x14>
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005454:	f7ff bff0 	b.w	8005438 <__sfp_lock_release>
 8005458:	4b04      	ldr	r3, [pc, #16]	@ (800546c <__sinit+0x28>)
 800545a:	6223      	str	r3, [r4, #32]
 800545c:	4b04      	ldr	r3, [pc, #16]	@ (8005470 <__sinit+0x2c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f5      	bne.n	8005450 <__sinit+0xc>
 8005464:	f7ff ffc4 	bl	80053f0 <global_stdio_init.part.0>
 8005468:	e7f2      	b.n	8005450 <__sinit+0xc>
 800546a:	bf00      	nop
 800546c:	080053b1 	.word	0x080053b1
 8005470:	20001c94 	.word	0x20001c94

08005474 <_fwalk_sglue>:
 8005474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005478:	4607      	mov	r7, r0
 800547a:	4688      	mov	r8, r1
 800547c:	4614      	mov	r4, r2
 800547e:	2600      	movs	r6, #0
 8005480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005484:	f1b9 0901 	subs.w	r9, r9, #1
 8005488:	d505      	bpl.n	8005496 <_fwalk_sglue+0x22>
 800548a:	6824      	ldr	r4, [r4, #0]
 800548c:	2c00      	cmp	r4, #0
 800548e:	d1f7      	bne.n	8005480 <_fwalk_sglue+0xc>
 8005490:	4630      	mov	r0, r6
 8005492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005496:	89ab      	ldrh	r3, [r5, #12]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d907      	bls.n	80054ac <_fwalk_sglue+0x38>
 800549c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054a0:	3301      	adds	r3, #1
 80054a2:	d003      	beq.n	80054ac <_fwalk_sglue+0x38>
 80054a4:	4629      	mov	r1, r5
 80054a6:	4638      	mov	r0, r7
 80054a8:	47c0      	blx	r8
 80054aa:	4306      	orrs	r6, r0
 80054ac:	3568      	adds	r5, #104	@ 0x68
 80054ae:	e7e9      	b.n	8005484 <_fwalk_sglue+0x10>

080054b0 <_puts_r>:
 80054b0:	6a03      	ldr	r3, [r0, #32]
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	4605      	mov	r5, r0
 80054b6:	460e      	mov	r6, r1
 80054b8:	6884      	ldr	r4, [r0, #8]
 80054ba:	b90b      	cbnz	r3, 80054c0 <_puts_r+0x10>
 80054bc:	f7ff ffc2 	bl	8005444 <__sinit>
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054c2:	07db      	lsls	r3, r3, #31
 80054c4:	d405      	bmi.n	80054d2 <_puts_r+0x22>
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	0598      	lsls	r0, r3, #22
 80054ca:	d402      	bmi.n	80054d2 <_puts_r+0x22>
 80054cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ce:	f000 f9f4 	bl	80058ba <__retarget_lock_acquire_recursive>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	0719      	lsls	r1, r3, #28
 80054d6:	d502      	bpl.n	80054de <_puts_r+0x2e>
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d135      	bne.n	800554a <_puts_r+0x9a>
 80054de:	4621      	mov	r1, r4
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 f8c5 	bl	8005670 <__swsetup_r>
 80054e6:	b380      	cbz	r0, 800554a <_puts_r+0x9a>
 80054e8:	f04f 35ff 	mov.w	r5, #4294967295
 80054ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054ee:	07da      	lsls	r2, r3, #31
 80054f0:	d405      	bmi.n	80054fe <_puts_r+0x4e>
 80054f2:	89a3      	ldrh	r3, [r4, #12]
 80054f4:	059b      	lsls	r3, r3, #22
 80054f6:	d402      	bmi.n	80054fe <_puts_r+0x4e>
 80054f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054fa:	f000 f9df 	bl	80058bc <__retarget_lock_release_recursive>
 80054fe:	4628      	mov	r0, r5
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	2b00      	cmp	r3, #0
 8005504:	da04      	bge.n	8005510 <_puts_r+0x60>
 8005506:	69a2      	ldr	r2, [r4, #24]
 8005508:	429a      	cmp	r2, r3
 800550a:	dc17      	bgt.n	800553c <_puts_r+0x8c>
 800550c:	290a      	cmp	r1, #10
 800550e:	d015      	beq.n	800553c <_puts_r+0x8c>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	6022      	str	r2, [r4, #0]
 8005516:	7019      	strb	r1, [r3, #0]
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800551e:	3b01      	subs	r3, #1
 8005520:	60a3      	str	r3, [r4, #8]
 8005522:	2900      	cmp	r1, #0
 8005524:	d1ed      	bne.n	8005502 <_puts_r+0x52>
 8005526:	2b00      	cmp	r3, #0
 8005528:	da11      	bge.n	800554e <_puts_r+0x9e>
 800552a:	4622      	mov	r2, r4
 800552c:	210a      	movs	r1, #10
 800552e:	4628      	mov	r0, r5
 8005530:	f000 f85f 	bl	80055f2 <__swbuf_r>
 8005534:	3001      	adds	r0, #1
 8005536:	d0d7      	beq.n	80054e8 <_puts_r+0x38>
 8005538:	250a      	movs	r5, #10
 800553a:	e7d7      	b.n	80054ec <_puts_r+0x3c>
 800553c:	4622      	mov	r2, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f857 	bl	80055f2 <__swbuf_r>
 8005544:	3001      	adds	r0, #1
 8005546:	d1e7      	bne.n	8005518 <_puts_r+0x68>
 8005548:	e7ce      	b.n	80054e8 <_puts_r+0x38>
 800554a:	3e01      	subs	r6, #1
 800554c:	e7e4      	b.n	8005518 <_puts_r+0x68>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	6022      	str	r2, [r4, #0]
 8005554:	220a      	movs	r2, #10
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e7ee      	b.n	8005538 <_puts_r+0x88>
	...

0800555c <puts>:
 800555c:	4b02      	ldr	r3, [pc, #8]	@ (8005568 <puts+0xc>)
 800555e:	4601      	mov	r1, r0
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	f7ff bfa5 	b.w	80054b0 <_puts_r>
 8005566:	bf00      	nop
 8005568:	2000001c 	.word	0x2000001c

0800556c <__sread>:
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	f000 f952 	bl	800581c <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	bfab      	itete	ge
 800557c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800557e:	89a3      	ldrhlt	r3, [r4, #12]
 8005580:	181b      	addge	r3, r3, r0
 8005582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005586:	bfac      	ite	ge
 8005588:	6563      	strge	r3, [r4, #84]	@ 0x54
 800558a:	81a3      	strhlt	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__swrite>:
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	461f      	mov	r7, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	4605      	mov	r5, r0
 8005598:	05db      	lsls	r3, r3, #23
 800559a:	460c      	mov	r4, r1
 800559c:	4616      	mov	r6, r2
 800559e:	d505      	bpl.n	80055ac <__swrite+0x1e>
 80055a0:	2302      	movs	r3, #2
 80055a2:	2200      	movs	r2, #0
 80055a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a8:	f000 f926 	bl	80057f8 <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	4632      	mov	r2, r6
 80055b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	4628      	mov	r0, r5
 80055b8:	463b      	mov	r3, r7
 80055ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c2:	f000 b93d 	b.w	8005840 <_write_r>

080055c6 <__sseek>:
 80055c6:	b510      	push	{r4, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 f913 	bl	80057f8 <_lseek_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	bf15      	itete	ne
 80055d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055e2:	81a3      	strheq	r3, [r4, #12]
 80055e4:	bf18      	it	ne
 80055e6:	81a3      	strhne	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__sclose>:
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 b89d 	b.w	800572c <_close_r>

080055f2 <__swbuf_r>:
 80055f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f4:	460e      	mov	r6, r1
 80055f6:	4614      	mov	r4, r2
 80055f8:	4605      	mov	r5, r0
 80055fa:	b118      	cbz	r0, 8005604 <__swbuf_r+0x12>
 80055fc:	6a03      	ldr	r3, [r0, #32]
 80055fe:	b90b      	cbnz	r3, 8005604 <__swbuf_r+0x12>
 8005600:	f7ff ff20 	bl	8005444 <__sinit>
 8005604:	69a3      	ldr	r3, [r4, #24]
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	071a      	lsls	r2, r3, #28
 800560c:	d501      	bpl.n	8005612 <__swbuf_r+0x20>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	b943      	cbnz	r3, 8005624 <__swbuf_r+0x32>
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f82b 	bl	8005670 <__swsetup_r>
 800561a:	b118      	cbz	r0, 8005624 <__swbuf_r+0x32>
 800561c:	f04f 37ff 	mov.w	r7, #4294967295
 8005620:	4638      	mov	r0, r7
 8005622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	6922      	ldr	r2, [r4, #16]
 8005628:	b2f6      	uxtb	r6, r6
 800562a:	1a98      	subs	r0, r3, r2
 800562c:	6963      	ldr	r3, [r4, #20]
 800562e:	4637      	mov	r7, r6
 8005630:	4283      	cmp	r3, r0
 8005632:	dc05      	bgt.n	8005640 <__swbuf_r+0x4e>
 8005634:	4621      	mov	r1, r4
 8005636:	4628      	mov	r0, r5
 8005638:	f000 fac6 	bl	8005bc8 <_fflush_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	d1ed      	bne.n	800561c <__swbuf_r+0x2a>
 8005640:	68a3      	ldr	r3, [r4, #8]
 8005642:	3b01      	subs	r3, #1
 8005644:	60a3      	str	r3, [r4, #8]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	6022      	str	r2, [r4, #0]
 800564c:	701e      	strb	r6, [r3, #0]
 800564e:	6962      	ldr	r2, [r4, #20]
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	429a      	cmp	r2, r3
 8005654:	d004      	beq.n	8005660 <__swbuf_r+0x6e>
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	07db      	lsls	r3, r3, #31
 800565a:	d5e1      	bpl.n	8005620 <__swbuf_r+0x2e>
 800565c:	2e0a      	cmp	r6, #10
 800565e:	d1df      	bne.n	8005620 <__swbuf_r+0x2e>
 8005660:	4621      	mov	r1, r4
 8005662:	4628      	mov	r0, r5
 8005664:	f000 fab0 	bl	8005bc8 <_fflush_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	d0d9      	beq.n	8005620 <__swbuf_r+0x2e>
 800566c:	e7d6      	b.n	800561c <__swbuf_r+0x2a>
	...

08005670 <__swsetup_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	4b29      	ldr	r3, [pc, #164]	@ (8005718 <__swsetup_r+0xa8>)
 8005674:	4605      	mov	r5, r0
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	460c      	mov	r4, r1
 800567a:	b118      	cbz	r0, 8005684 <__swsetup_r+0x14>
 800567c:	6a03      	ldr	r3, [r0, #32]
 800567e:	b90b      	cbnz	r3, 8005684 <__swsetup_r+0x14>
 8005680:	f7ff fee0 	bl	8005444 <__sinit>
 8005684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005688:	0719      	lsls	r1, r3, #28
 800568a:	d422      	bmi.n	80056d2 <__swsetup_r+0x62>
 800568c:	06da      	lsls	r2, r3, #27
 800568e:	d407      	bmi.n	80056a0 <__swsetup_r+0x30>
 8005690:	2209      	movs	r2, #9
 8005692:	602a      	str	r2, [r5, #0]
 8005694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	81a3      	strh	r3, [r4, #12]
 800569e:	e033      	b.n	8005708 <__swsetup_r+0x98>
 80056a0:	0758      	lsls	r0, r3, #29
 80056a2:	d512      	bpl.n	80056ca <__swsetup_r+0x5a>
 80056a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056a6:	b141      	cbz	r1, 80056ba <__swsetup_r+0x4a>
 80056a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056ac:	4299      	cmp	r1, r3
 80056ae:	d002      	beq.n	80056b6 <__swsetup_r+0x46>
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f913 	bl	80058dc <_free_r>
 80056b6:	2300      	movs	r3, #0
 80056b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	2300      	movs	r3, #0
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f043 0308 	orr.w	r3, r3, #8
 80056d0:	81a3      	strh	r3, [r4, #12]
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	b94b      	cbnz	r3, 80056ea <__swsetup_r+0x7a>
 80056d6:	89a3      	ldrh	r3, [r4, #12]
 80056d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e0:	d003      	beq.n	80056ea <__swsetup_r+0x7a>
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fabc 	bl	8005c62 <__smakebuf_r>
 80056ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ee:	f013 0201 	ands.w	r2, r3, #1
 80056f2:	d00a      	beq.n	800570a <__swsetup_r+0x9a>
 80056f4:	2200      	movs	r2, #0
 80056f6:	60a2      	str	r2, [r4, #8]
 80056f8:	6962      	ldr	r2, [r4, #20]
 80056fa:	4252      	negs	r2, r2
 80056fc:	61a2      	str	r2, [r4, #24]
 80056fe:	6922      	ldr	r2, [r4, #16]
 8005700:	b942      	cbnz	r2, 8005714 <__swsetup_r+0xa4>
 8005702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005706:	d1c5      	bne.n	8005694 <__swsetup_r+0x24>
 8005708:	bd38      	pop	{r3, r4, r5, pc}
 800570a:	0799      	lsls	r1, r3, #30
 800570c:	bf58      	it	pl
 800570e:	6962      	ldrpl	r2, [r4, #20]
 8005710:	60a2      	str	r2, [r4, #8]
 8005712:	e7f4      	b.n	80056fe <__swsetup_r+0x8e>
 8005714:	2000      	movs	r0, #0
 8005716:	e7f7      	b.n	8005708 <__swsetup_r+0x98>
 8005718:	2000001c 	.word	0x2000001c

0800571c <memset>:
 800571c:	4603      	mov	r3, r0
 800571e:	4402      	add	r2, r0
 8005720:	4293      	cmp	r3, r2
 8005722:	d100      	bne.n	8005726 <memset+0xa>
 8005724:	4770      	bx	lr
 8005726:	f803 1b01 	strb.w	r1, [r3], #1
 800572a:	e7f9      	b.n	8005720 <memset+0x4>

0800572c <_close_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	2300      	movs	r3, #0
 8005730:	4d05      	ldr	r5, [pc, #20]	@ (8005748 <_close_r+0x1c>)
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fa ffeb 	bl	8000712 <_close>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_close_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_close_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	20001c98 	.word	0x20001c98

0800574c <_reclaim_reent>:
 800574c:	4b29      	ldr	r3, [pc, #164]	@ (80057f4 <_reclaim_reent+0xa8>)
 800574e:	b570      	push	{r4, r5, r6, lr}
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4604      	mov	r4, r0
 8005754:	4283      	cmp	r3, r0
 8005756:	d04b      	beq.n	80057f0 <_reclaim_reent+0xa4>
 8005758:	69c3      	ldr	r3, [r0, #28]
 800575a:	b1ab      	cbz	r3, 8005788 <_reclaim_reent+0x3c>
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	b16b      	cbz	r3, 800577c <_reclaim_reent+0x30>
 8005760:	2500      	movs	r5, #0
 8005762:	69e3      	ldr	r3, [r4, #28]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	5959      	ldr	r1, [r3, r5]
 8005768:	2900      	cmp	r1, #0
 800576a:	d13b      	bne.n	80057e4 <_reclaim_reent+0x98>
 800576c:	3504      	adds	r5, #4
 800576e:	2d80      	cmp	r5, #128	@ 0x80
 8005770:	d1f7      	bne.n	8005762 <_reclaim_reent+0x16>
 8005772:	69e3      	ldr	r3, [r4, #28]
 8005774:	4620      	mov	r0, r4
 8005776:	68d9      	ldr	r1, [r3, #12]
 8005778:	f000 f8b0 	bl	80058dc <_free_r>
 800577c:	69e3      	ldr	r3, [r4, #28]
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	b111      	cbz	r1, 8005788 <_reclaim_reent+0x3c>
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f8aa 	bl	80058dc <_free_r>
 8005788:	6961      	ldr	r1, [r4, #20]
 800578a:	b111      	cbz	r1, 8005792 <_reclaim_reent+0x46>
 800578c:	4620      	mov	r0, r4
 800578e:	f000 f8a5 	bl	80058dc <_free_r>
 8005792:	69e1      	ldr	r1, [r4, #28]
 8005794:	b111      	cbz	r1, 800579c <_reclaim_reent+0x50>
 8005796:	4620      	mov	r0, r4
 8005798:	f000 f8a0 	bl	80058dc <_free_r>
 800579c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800579e:	b111      	cbz	r1, 80057a6 <_reclaim_reent+0x5a>
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 f89b 	bl	80058dc <_free_r>
 80057a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057a8:	b111      	cbz	r1, 80057b0 <_reclaim_reent+0x64>
 80057aa:	4620      	mov	r0, r4
 80057ac:	f000 f896 	bl	80058dc <_free_r>
 80057b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057b2:	b111      	cbz	r1, 80057ba <_reclaim_reent+0x6e>
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 f891 	bl	80058dc <_free_r>
 80057ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80057bc:	b111      	cbz	r1, 80057c4 <_reclaim_reent+0x78>
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 f88c 	bl	80058dc <_free_r>
 80057c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80057c6:	b111      	cbz	r1, 80057ce <_reclaim_reent+0x82>
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f887 	bl	80058dc <_free_r>
 80057ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80057d0:	b111      	cbz	r1, 80057d8 <_reclaim_reent+0x8c>
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 f882 	bl	80058dc <_free_r>
 80057d8:	6a23      	ldr	r3, [r4, #32]
 80057da:	b14b      	cbz	r3, 80057f0 <_reclaim_reent+0xa4>
 80057dc:	4620      	mov	r0, r4
 80057de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057e2:	4718      	bx	r3
 80057e4:	680e      	ldr	r6, [r1, #0]
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 f878 	bl	80058dc <_free_r>
 80057ec:	4631      	mov	r1, r6
 80057ee:	e7bb      	b.n	8005768 <_reclaim_reent+0x1c>
 80057f0:	bd70      	pop	{r4, r5, r6, pc}
 80057f2:	bf00      	nop
 80057f4:	2000001c 	.word	0x2000001c

080057f8 <_lseek_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	2200      	movs	r2, #0
 8005802:	4d05      	ldr	r5, [pc, #20]	@ (8005818 <_lseek_r+0x20>)
 8005804:	602a      	str	r2, [r5, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f7fa ffa7 	bl	800075a <_lseek>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d102      	bne.n	8005816 <_lseek_r+0x1e>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	b103      	cbz	r3, 8005816 <_lseek_r+0x1e>
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	20001c98 	.word	0x20001c98

0800581c <_read_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	4611      	mov	r1, r2
 8005824:	2200      	movs	r2, #0
 8005826:	4d05      	ldr	r5, [pc, #20]	@ (800583c <_read_r+0x20>)
 8005828:	602a      	str	r2, [r5, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	f7fa ff38 	bl	80006a0 <_read>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_read_r+0x1e>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_read_r+0x1e>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	20001c98 	.word	0x20001c98

08005840 <_write_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	4611      	mov	r1, r2
 8005848:	2200      	movs	r2, #0
 800584a:	4d05      	ldr	r5, [pc, #20]	@ (8005860 <_write_r+0x20>)
 800584c:	602a      	str	r2, [r5, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	f7fa ff43 	bl	80006da <_write>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_write_r+0x1e>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_write_r+0x1e>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	20001c98 	.word	0x20001c98

08005864 <__errno>:
 8005864:	4b01      	ldr	r3, [pc, #4]	@ (800586c <__errno+0x8>)
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	2000001c 	.word	0x2000001c

08005870 <__libc_init_array>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	2600      	movs	r6, #0
 8005874:	4d0c      	ldr	r5, [pc, #48]	@ (80058a8 <__libc_init_array+0x38>)
 8005876:	4c0d      	ldr	r4, [pc, #52]	@ (80058ac <__libc_init_array+0x3c>)
 8005878:	1b64      	subs	r4, r4, r5
 800587a:	10a4      	asrs	r4, r4, #2
 800587c:	42a6      	cmp	r6, r4
 800587e:	d109      	bne.n	8005894 <__libc_init_array+0x24>
 8005880:	f000 fa5e 	bl	8005d40 <_init>
 8005884:	2600      	movs	r6, #0
 8005886:	4d0a      	ldr	r5, [pc, #40]	@ (80058b0 <__libc_init_array+0x40>)
 8005888:	4c0a      	ldr	r4, [pc, #40]	@ (80058b4 <__libc_init_array+0x44>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	42a6      	cmp	r6, r4
 8005890:	d105      	bne.n	800589e <__libc_init_array+0x2e>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	f855 3b04 	ldr.w	r3, [r5], #4
 8005898:	4798      	blx	r3
 800589a:	3601      	adds	r6, #1
 800589c:	e7ee      	b.n	800587c <__libc_init_array+0xc>
 800589e:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a2:	4798      	blx	r3
 80058a4:	3601      	adds	r6, #1
 80058a6:	e7f2      	b.n	800588e <__libc_init_array+0x1e>
 80058a8:	08005e0c 	.word	0x08005e0c
 80058ac:	08005e0c 	.word	0x08005e0c
 80058b0:	08005e0c 	.word	0x08005e0c
 80058b4:	08005e10 	.word	0x08005e10

080058b8 <__retarget_lock_init_recursive>:
 80058b8:	4770      	bx	lr

080058ba <__retarget_lock_acquire_recursive>:
 80058ba:	4770      	bx	lr

080058bc <__retarget_lock_release_recursive>:
 80058bc:	4770      	bx	lr

080058be <memcpy>:
 80058be:	440a      	add	r2, r1
 80058c0:	4291      	cmp	r1, r2
 80058c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80058c6:	d100      	bne.n	80058ca <memcpy+0xc>
 80058c8:	4770      	bx	lr
 80058ca:	b510      	push	{r4, lr}
 80058cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058d0:	4291      	cmp	r1, r2
 80058d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058d6:	d1f9      	bne.n	80058cc <memcpy+0xe>
 80058d8:	bd10      	pop	{r4, pc}
	...

080058dc <_free_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4605      	mov	r5, r0
 80058e0:	2900      	cmp	r1, #0
 80058e2:	d040      	beq.n	8005966 <_free_r+0x8a>
 80058e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058e8:	1f0c      	subs	r4, r1, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bfb8      	it	lt
 80058ee:	18e4      	addlt	r4, r4, r3
 80058f0:	f000 f8de 	bl	8005ab0 <__malloc_lock>
 80058f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <_free_r+0x8c>)
 80058f6:	6813      	ldr	r3, [r2, #0]
 80058f8:	b933      	cbnz	r3, 8005908 <_free_r+0x2c>
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	6014      	str	r4, [r2, #0]
 80058fe:	4628      	mov	r0, r5
 8005900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005904:	f000 b8da 	b.w	8005abc <__malloc_unlock>
 8005908:	42a3      	cmp	r3, r4
 800590a:	d908      	bls.n	800591e <_free_r+0x42>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf01      	itttt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	1809      	addeq	r1, r1, r0
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	e7ed      	b.n	80058fa <_free_r+0x1e>
 800591e:	461a      	mov	r2, r3
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b10b      	cbz	r3, 8005928 <_free_r+0x4c>
 8005924:	42a3      	cmp	r3, r4
 8005926:	d9fa      	bls.n	800591e <_free_r+0x42>
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	1850      	adds	r0, r2, r1
 800592c:	42a0      	cmp	r0, r4
 800592e:	d10b      	bne.n	8005948 <_free_r+0x6c>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	4401      	add	r1, r0
 8005934:	1850      	adds	r0, r2, r1
 8005936:	4283      	cmp	r3, r0
 8005938:	6011      	str	r1, [r2, #0]
 800593a:	d1e0      	bne.n	80058fe <_free_r+0x22>
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4408      	add	r0, r1
 8005942:	6010      	str	r0, [r2, #0]
 8005944:	6053      	str	r3, [r2, #4]
 8005946:	e7da      	b.n	80058fe <_free_r+0x22>
 8005948:	d902      	bls.n	8005950 <_free_r+0x74>
 800594a:	230c      	movs	r3, #12
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	e7d6      	b.n	80058fe <_free_r+0x22>
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	1821      	adds	r1, r4, r0
 8005954:	428b      	cmp	r3, r1
 8005956:	bf01      	itttt	eq
 8005958:	6819      	ldreq	r1, [r3, #0]
 800595a:	685b      	ldreq	r3, [r3, #4]
 800595c:	1809      	addeq	r1, r1, r0
 800595e:	6021      	streq	r1, [r4, #0]
 8005960:	6063      	str	r3, [r4, #4]
 8005962:	6054      	str	r4, [r2, #4]
 8005964:	e7cb      	b.n	80058fe <_free_r+0x22>
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	20001ca4 	.word	0x20001ca4

0800596c <sbrk_aligned>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	4e0f      	ldr	r6, [pc, #60]	@ (80059ac <sbrk_aligned+0x40>)
 8005970:	460c      	mov	r4, r1
 8005972:	6831      	ldr	r1, [r6, #0]
 8005974:	4605      	mov	r5, r0
 8005976:	b911      	cbnz	r1, 800597e <sbrk_aligned+0x12>
 8005978:	f000 f9d2 	bl	8005d20 <_sbrk_r>
 800597c:	6030      	str	r0, [r6, #0]
 800597e:	4621      	mov	r1, r4
 8005980:	4628      	mov	r0, r5
 8005982:	f000 f9cd 	bl	8005d20 <_sbrk_r>
 8005986:	1c43      	adds	r3, r0, #1
 8005988:	d103      	bne.n	8005992 <sbrk_aligned+0x26>
 800598a:	f04f 34ff 	mov.w	r4, #4294967295
 800598e:	4620      	mov	r0, r4
 8005990:	bd70      	pop	{r4, r5, r6, pc}
 8005992:	1cc4      	adds	r4, r0, #3
 8005994:	f024 0403 	bic.w	r4, r4, #3
 8005998:	42a0      	cmp	r0, r4
 800599a:	d0f8      	beq.n	800598e <sbrk_aligned+0x22>
 800599c:	1a21      	subs	r1, r4, r0
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 f9be 	bl	8005d20 <_sbrk_r>
 80059a4:	3001      	adds	r0, #1
 80059a6:	d1f2      	bne.n	800598e <sbrk_aligned+0x22>
 80059a8:	e7ef      	b.n	800598a <sbrk_aligned+0x1e>
 80059aa:	bf00      	nop
 80059ac:	20001ca0 	.word	0x20001ca0

080059b0 <_malloc_r>:
 80059b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b4:	1ccd      	adds	r5, r1, #3
 80059b6:	f025 0503 	bic.w	r5, r5, #3
 80059ba:	3508      	adds	r5, #8
 80059bc:	2d0c      	cmp	r5, #12
 80059be:	bf38      	it	cc
 80059c0:	250c      	movcc	r5, #12
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	4606      	mov	r6, r0
 80059c6:	db01      	blt.n	80059cc <_malloc_r+0x1c>
 80059c8:	42a9      	cmp	r1, r5
 80059ca:	d904      	bls.n	80059d6 <_malloc_r+0x26>
 80059cc:	230c      	movs	r3, #12
 80059ce:	6033      	str	r3, [r6, #0]
 80059d0:	2000      	movs	r0, #0
 80059d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005aac <_malloc_r+0xfc>
 80059da:	f000 f869 	bl	8005ab0 <__malloc_lock>
 80059de:	f8d8 3000 	ldr.w	r3, [r8]
 80059e2:	461c      	mov	r4, r3
 80059e4:	bb44      	cbnz	r4, 8005a38 <_malloc_r+0x88>
 80059e6:	4629      	mov	r1, r5
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff ffbf 	bl	800596c <sbrk_aligned>
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	4604      	mov	r4, r0
 80059f2:	d158      	bne.n	8005aa6 <_malloc_r+0xf6>
 80059f4:	f8d8 4000 	ldr.w	r4, [r8]
 80059f8:	4627      	mov	r7, r4
 80059fa:	2f00      	cmp	r7, #0
 80059fc:	d143      	bne.n	8005a86 <_malloc_r+0xd6>
 80059fe:	2c00      	cmp	r4, #0
 8005a00:	d04b      	beq.n	8005a9a <_malloc_r+0xea>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	4639      	mov	r1, r7
 8005a06:	4630      	mov	r0, r6
 8005a08:	eb04 0903 	add.w	r9, r4, r3
 8005a0c:	f000 f988 	bl	8005d20 <_sbrk_r>
 8005a10:	4581      	cmp	r9, r0
 8005a12:	d142      	bne.n	8005a9a <_malloc_r+0xea>
 8005a14:	6821      	ldr	r1, [r4, #0]
 8005a16:	4630      	mov	r0, r6
 8005a18:	1a6d      	subs	r5, r5, r1
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f7ff ffa6 	bl	800596c <sbrk_aligned>
 8005a20:	3001      	adds	r0, #1
 8005a22:	d03a      	beq.n	8005a9a <_malloc_r+0xea>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	442b      	add	r3, r5
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	bb62      	cbnz	r2, 8005a8c <_malloc_r+0xdc>
 8005a32:	f8c8 7000 	str.w	r7, [r8]
 8005a36:	e00f      	b.n	8005a58 <_malloc_r+0xa8>
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	1b52      	subs	r2, r2, r5
 8005a3c:	d420      	bmi.n	8005a80 <_malloc_r+0xd0>
 8005a3e:	2a0b      	cmp	r2, #11
 8005a40:	d917      	bls.n	8005a72 <_malloc_r+0xc2>
 8005a42:	1961      	adds	r1, r4, r5
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	6025      	str	r5, [r4, #0]
 8005a48:	bf18      	it	ne
 8005a4a:	6059      	strne	r1, [r3, #4]
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	bf08      	it	eq
 8005a50:	f8c8 1000 	streq.w	r1, [r8]
 8005a54:	5162      	str	r2, [r4, r5]
 8005a56:	604b      	str	r3, [r1, #4]
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 f82f 	bl	8005abc <__malloc_unlock>
 8005a5e:	f104 000b 	add.w	r0, r4, #11
 8005a62:	1d23      	adds	r3, r4, #4
 8005a64:	f020 0007 	bic.w	r0, r0, #7
 8005a68:	1ac2      	subs	r2, r0, r3
 8005a6a:	bf1c      	itt	ne
 8005a6c:	1a1b      	subne	r3, r3, r0
 8005a6e:	50a3      	strne	r3, [r4, r2]
 8005a70:	e7af      	b.n	80059d2 <_malloc_r+0x22>
 8005a72:	6862      	ldr	r2, [r4, #4]
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	bf0c      	ite	eq
 8005a78:	f8c8 2000 	streq.w	r2, [r8]
 8005a7c:	605a      	strne	r2, [r3, #4]
 8005a7e:	e7eb      	b.n	8005a58 <_malloc_r+0xa8>
 8005a80:	4623      	mov	r3, r4
 8005a82:	6864      	ldr	r4, [r4, #4]
 8005a84:	e7ae      	b.n	80059e4 <_malloc_r+0x34>
 8005a86:	463c      	mov	r4, r7
 8005a88:	687f      	ldr	r7, [r7, #4]
 8005a8a:	e7b6      	b.n	80059fa <_malloc_r+0x4a>
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d1fb      	bne.n	8005a8c <_malloc_r+0xdc>
 8005a94:	2300      	movs	r3, #0
 8005a96:	6053      	str	r3, [r2, #4]
 8005a98:	e7de      	b.n	8005a58 <_malloc_r+0xa8>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	6033      	str	r3, [r6, #0]
 8005aa0:	f000 f80c 	bl	8005abc <__malloc_unlock>
 8005aa4:	e794      	b.n	80059d0 <_malloc_r+0x20>
 8005aa6:	6005      	str	r5, [r0, #0]
 8005aa8:	e7d6      	b.n	8005a58 <_malloc_r+0xa8>
 8005aaa:	bf00      	nop
 8005aac:	20001ca4 	.word	0x20001ca4

08005ab0 <__malloc_lock>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	@ (8005ab8 <__malloc_lock+0x8>)
 8005ab2:	f7ff bf02 	b.w	80058ba <__retarget_lock_acquire_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	20001c9c 	.word	0x20001c9c

08005abc <__malloc_unlock>:
 8005abc:	4801      	ldr	r0, [pc, #4]	@ (8005ac4 <__malloc_unlock+0x8>)
 8005abe:	f7ff befd 	b.w	80058bc <__retarget_lock_release_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	20001c9c 	.word	0x20001c9c

08005ac8 <__sflush_r>:
 8005ac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	0716      	lsls	r6, r2, #28
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	d454      	bmi.n	8005b80 <__sflush_r+0xb8>
 8005ad6:	684b      	ldr	r3, [r1, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dc02      	bgt.n	8005ae2 <__sflush_r+0x1a>
 8005adc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	dd48      	ble.n	8005b74 <__sflush_r+0xac>
 8005ae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	d045      	beq.n	8005b74 <__sflush_r+0xac>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aee:	682f      	ldr	r7, [r5, #0]
 8005af0:	6a21      	ldr	r1, [r4, #32]
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	d030      	beq.n	8005b58 <__sflush_r+0x90>
 8005af6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005af8:	89a3      	ldrh	r3, [r4, #12]
 8005afa:	0759      	lsls	r1, r3, #29
 8005afc:	d505      	bpl.n	8005b0a <__sflush_r+0x42>
 8005afe:	6863      	ldr	r3, [r4, #4]
 8005b00:	1ad2      	subs	r2, r2, r3
 8005b02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b04:	b10b      	cbz	r3, 8005b0a <__sflush_r+0x42>
 8005b06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b08:	1ad2      	subs	r2, r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b10:	6a21      	ldr	r1, [r4, #32]
 8005b12:	47b0      	blx	r6
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	d106      	bne.n	8005b28 <__sflush_r+0x60>
 8005b1a:	6829      	ldr	r1, [r5, #0]
 8005b1c:	291d      	cmp	r1, #29
 8005b1e:	d82b      	bhi.n	8005b78 <__sflush_r+0xb0>
 8005b20:	4a28      	ldr	r2, [pc, #160]	@ (8005bc4 <__sflush_r+0xfc>)
 8005b22:	410a      	asrs	r2, r1
 8005b24:	07d6      	lsls	r6, r2, #31
 8005b26:	d427      	bmi.n	8005b78 <__sflush_r+0xb0>
 8005b28:	2200      	movs	r2, #0
 8005b2a:	6062      	str	r2, [r4, #4]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	04d9      	lsls	r1, r3, #19
 8005b30:	6022      	str	r2, [r4, #0]
 8005b32:	d504      	bpl.n	8005b3e <__sflush_r+0x76>
 8005b34:	1c42      	adds	r2, r0, #1
 8005b36:	d101      	bne.n	8005b3c <__sflush_r+0x74>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	b903      	cbnz	r3, 8005b3e <__sflush_r+0x76>
 8005b3c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b40:	602f      	str	r7, [r5, #0]
 8005b42:	b1b9      	cbz	r1, 8005b74 <__sflush_r+0xac>
 8005b44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b48:	4299      	cmp	r1, r3
 8005b4a:	d002      	beq.n	8005b52 <__sflush_r+0x8a>
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f7ff fec5 	bl	80058dc <_free_r>
 8005b52:	2300      	movs	r3, #0
 8005b54:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b56:	e00d      	b.n	8005b74 <__sflush_r+0xac>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b0      	blx	r6
 8005b5e:	4602      	mov	r2, r0
 8005b60:	1c50      	adds	r0, r2, #1
 8005b62:	d1c9      	bne.n	8005af8 <__sflush_r+0x30>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0c6      	beq.n	8005af8 <__sflush_r+0x30>
 8005b6a:	2b1d      	cmp	r3, #29
 8005b6c:	d001      	beq.n	8005b72 <__sflush_r+0xaa>
 8005b6e:	2b16      	cmp	r3, #22
 8005b70:	d11d      	bne.n	8005bae <__sflush_r+0xe6>
 8005b72:	602f      	str	r7, [r5, #0]
 8005b74:	2000      	movs	r0, #0
 8005b76:	e021      	b.n	8005bbc <__sflush_r+0xf4>
 8005b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b7c:	b21b      	sxth	r3, r3
 8005b7e:	e01a      	b.n	8005bb6 <__sflush_r+0xee>
 8005b80:	690f      	ldr	r7, [r1, #16]
 8005b82:	2f00      	cmp	r7, #0
 8005b84:	d0f6      	beq.n	8005b74 <__sflush_r+0xac>
 8005b86:	0793      	lsls	r3, r2, #30
 8005b88:	bf18      	it	ne
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	680e      	ldr	r6, [r1, #0]
 8005b8e:	bf08      	it	eq
 8005b90:	694b      	ldreq	r3, [r1, #20]
 8005b92:	1bf6      	subs	r6, r6, r7
 8005b94:	600f      	str	r7, [r1, #0]
 8005b96:	608b      	str	r3, [r1, #8]
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	ddeb      	ble.n	8005b74 <__sflush_r+0xac>
 8005b9c:	4633      	mov	r3, r6
 8005b9e:	463a      	mov	r2, r7
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	6a21      	ldr	r1, [r4, #32]
 8005ba4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005ba8:	47e0      	blx	ip
 8005baa:	2800      	cmp	r0, #0
 8005bac:	dc07      	bgt.n	8005bbe <__sflush_r+0xf6>
 8005bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bbe:	4407      	add	r7, r0
 8005bc0:	1a36      	subs	r6, r6, r0
 8005bc2:	e7e9      	b.n	8005b98 <__sflush_r+0xd0>
 8005bc4:	dfbffffe 	.word	0xdfbffffe

08005bc8 <_fflush_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	690b      	ldr	r3, [r1, #16]
 8005bcc:	4605      	mov	r5, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	b913      	cbnz	r3, 8005bd8 <_fflush_r+0x10>
 8005bd2:	2500      	movs	r5, #0
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	b118      	cbz	r0, 8005be2 <_fflush_r+0x1a>
 8005bda:	6a03      	ldr	r3, [r0, #32]
 8005bdc:	b90b      	cbnz	r3, 8005be2 <_fflush_r+0x1a>
 8005bde:	f7ff fc31 	bl	8005444 <__sinit>
 8005be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f3      	beq.n	8005bd2 <_fflush_r+0xa>
 8005bea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bec:	07d0      	lsls	r0, r2, #31
 8005bee:	d404      	bmi.n	8005bfa <_fflush_r+0x32>
 8005bf0:	0599      	lsls	r1, r3, #22
 8005bf2:	d402      	bmi.n	8005bfa <_fflush_r+0x32>
 8005bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bf6:	f7ff fe60 	bl	80058ba <__retarget_lock_acquire_recursive>
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	f7ff ff63 	bl	8005ac8 <__sflush_r>
 8005c02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c04:	4605      	mov	r5, r0
 8005c06:	07da      	lsls	r2, r3, #31
 8005c08:	d4e4      	bmi.n	8005bd4 <_fflush_r+0xc>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	059b      	lsls	r3, r3, #22
 8005c0e:	d4e1      	bmi.n	8005bd4 <_fflush_r+0xc>
 8005c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c12:	f7ff fe53 	bl	80058bc <__retarget_lock_release_recursive>
 8005c16:	e7dd      	b.n	8005bd4 <_fflush_r+0xc>

08005c18 <__swhatbuf_r>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c20:	4615      	mov	r5, r2
 8005c22:	2900      	cmp	r1, #0
 8005c24:	461e      	mov	r6, r3
 8005c26:	b096      	sub	sp, #88	@ 0x58
 8005c28:	da0c      	bge.n	8005c44 <__swhatbuf_r+0x2c>
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c32:	bf14      	ite	ne
 8005c34:	2340      	movne	r3, #64	@ 0x40
 8005c36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	6031      	str	r1, [r6, #0]
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	b016      	add	sp, #88	@ 0x58
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	466a      	mov	r2, sp
 8005c46:	f000 f849 	bl	8005cdc <_fstat_r>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	dbed      	blt.n	8005c2a <__swhatbuf_r+0x12>
 8005c4e:	9901      	ldr	r1, [sp, #4]
 8005c50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c58:	4259      	negs	r1, r3
 8005c5a:	4159      	adcs	r1, r3
 8005c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c60:	e7eb      	b.n	8005c3a <__swhatbuf_r+0x22>

08005c62 <__smakebuf_r>:
 8005c62:	898b      	ldrh	r3, [r1, #12]
 8005c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c66:	079d      	lsls	r5, r3, #30
 8005c68:	4606      	mov	r6, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	d507      	bpl.n	8005c7e <__smakebuf_r+0x1c>
 8005c6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	2301      	movs	r3, #1
 8005c78:	6163      	str	r3, [r4, #20]
 8005c7a:	b003      	add	sp, #12
 8005c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7e:	466a      	mov	r2, sp
 8005c80:	ab01      	add	r3, sp, #4
 8005c82:	f7ff ffc9 	bl	8005c18 <__swhatbuf_r>
 8005c86:	9f00      	ldr	r7, [sp, #0]
 8005c88:	4605      	mov	r5, r0
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff fe8f 	bl	80059b0 <_malloc_r>
 8005c92:	b948      	cbnz	r0, 8005ca8 <__smakebuf_r+0x46>
 8005c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c98:	059a      	lsls	r2, r3, #22
 8005c9a:	d4ee      	bmi.n	8005c7a <__smakebuf_r+0x18>
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	81a3      	strh	r3, [r4, #12]
 8005ca6:	e7e2      	b.n	8005c6e <__smakebuf_r+0xc>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	6020      	str	r0, [r4, #0]
 8005cb8:	b15b      	cbz	r3, 8005cd2 <__smakebuf_r+0x70>
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cc0:	f000 f81e 	bl	8005d00 <_isatty_r>
 8005cc4:	b128      	cbz	r0, 8005cd2 <__smakebuf_r+0x70>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	f023 0303 	bic.w	r3, r3, #3
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	81a3      	strh	r3, [r4, #12]
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	431d      	orrs	r5, r3
 8005cd6:	81a5      	strh	r5, [r4, #12]
 8005cd8:	e7cf      	b.n	8005c7a <__smakebuf_r+0x18>
	...

08005cdc <_fstat_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4d06      	ldr	r5, [pc, #24]	@ (8005cfc <_fstat_r+0x20>)
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	4608      	mov	r0, r1
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	602b      	str	r3, [r5, #0]
 8005cea:	f7fa fd1d 	bl	8000728 <_fstat>
 8005cee:	1c43      	adds	r3, r0, #1
 8005cf0:	d102      	bne.n	8005cf8 <_fstat_r+0x1c>
 8005cf2:	682b      	ldr	r3, [r5, #0]
 8005cf4:	b103      	cbz	r3, 8005cf8 <_fstat_r+0x1c>
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20001c98 	.word	0x20001c98

08005d00 <_isatty_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	2300      	movs	r3, #0
 8005d04:	4d05      	ldr	r5, [pc, #20]	@ (8005d1c <_isatty_r+0x1c>)
 8005d06:	4604      	mov	r4, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	f7fa fd1b 	bl	8000746 <_isatty>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_isatty_r+0x1a>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_isatty_r+0x1a>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20001c98 	.word	0x20001c98

08005d20 <_sbrk_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	2300      	movs	r3, #0
 8005d24:	4d05      	ldr	r5, [pc, #20]	@ (8005d3c <_sbrk_r+0x1c>)
 8005d26:	4604      	mov	r4, r0
 8005d28:	4608      	mov	r0, r1
 8005d2a:	602b      	str	r3, [r5, #0]
 8005d2c:	f7fa fd22 	bl	8000774 <_sbrk>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d102      	bne.n	8005d3a <_sbrk_r+0x1a>
 8005d34:	682b      	ldr	r3, [r5, #0]
 8005d36:	b103      	cbz	r3, 8005d3a <_sbrk_r+0x1a>
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	bd38      	pop	{r3, r4, r5, pc}
 8005d3c:	20001c98 	.word	0x20001c98

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
