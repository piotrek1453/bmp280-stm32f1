
bmp280-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f08  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007018  08007018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f8  080070f8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  080070f8  080070f8  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070f8  080070f8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f8  080070f8  000080f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070fc  080070fc  000080fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007100  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c58  2000006c  0800716c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cc4  0800716c  00009cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4c7  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c82  00000000  00000000  0002355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  000271e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f4  00000000  00000000  000288e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba4b  00000000  00000000  00029ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca2d  00000000  00000000  0004551f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099000  00000000  00000000  00061f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faf4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006668  00000000  00000000  000faf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001015f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08007000 	.word	0x08007000

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08007000 	.word	0x08007000

08000150 <BMP280_CalibrationConstantsRead_I2C>:
 * Read constants used for temperature and pressure calculations from sensor's
 * memory
 */
//@{
void BMP280_CalibrationConstantsRead_I2C(I2C_HandleTypeDef i2c_handle,
                                         uint8_t device_address) {
 8000150:	b084      	sub	sp, #16
 8000152:	b580      	push	{r7, lr}
 8000154:	b08c      	sub	sp, #48	@ 0x30
 8000156:	af04      	add	r7, sp, #16
 8000158:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800015c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t calibrationConstantsRaw[26];

  HAL_I2C_Mem_Read(&i2c_handle,
 8000160:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000164:	b299      	uxth	r1, r3
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	9302      	str	r3, [sp, #8]
 800016c:	231a      	movs	r3, #26
 800016e:	9301      	str	r3, [sp, #4]
 8000170:	1d3b      	adds	r3, r7, #4
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2301      	movs	r3, #1
 8000176:	2288      	movs	r2, #136	@ 0x88
 8000178:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800017c:	f001 faf6 	bl	800176c <HAL_I2C_Mem_Read>
                   1,
                   calibrationConstantsRaw,
                   26,
                   HAL_MAX_DELAY);

  dig_T1 = calibrationConstantsRaw[0] | calibrationConstantsRaw[1] << 8;
 8000180:	793b      	ldrb	r3, [r7, #4]
 8000182:	b21a      	sxth	r2, r3
 8000184:	797b      	ldrb	r3, [r7, #5]
 8000186:	021b      	lsls	r3, r3, #8
 8000188:	b21b      	sxth	r3, r3
 800018a:	4313      	orrs	r3, r2
 800018c:	b21b      	sxth	r3, r3
 800018e:	b29a      	uxth	r2, r3
 8000190:	4b36      	ldr	r3, [pc, #216]	@ (800026c <BMP280_CalibrationConstantsRead_I2C+0x11c>)
 8000192:	801a      	strh	r2, [r3, #0]
  dig_T2 = calibrationConstantsRaw[2] | calibrationConstantsRaw[3] << 8;
 8000194:	79bb      	ldrb	r3, [r7, #6]
 8000196:	b21a      	sxth	r2, r3
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	021b      	lsls	r3, r3, #8
 800019c:	b21b      	sxth	r3, r3
 800019e:	4313      	orrs	r3, r2
 80001a0:	b21a      	sxth	r2, r3
 80001a2:	4b33      	ldr	r3, [pc, #204]	@ (8000270 <BMP280_CalibrationConstantsRead_I2C+0x120>)
 80001a4:	801a      	strh	r2, [r3, #0]
  dig_T3 = calibrationConstantsRaw[4] | calibrationConstantsRaw[5] << 8;
 80001a6:	7a3b      	ldrb	r3, [r7, #8]
 80001a8:	b21a      	sxth	r2, r3
 80001aa:	7a7b      	ldrb	r3, [r7, #9]
 80001ac:	021b      	lsls	r3, r3, #8
 80001ae:	b21b      	sxth	r3, r3
 80001b0:	4313      	orrs	r3, r2
 80001b2:	b21a      	sxth	r2, r3
 80001b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000274 <BMP280_CalibrationConstantsRead_I2C+0x124>)
 80001b6:	801a      	strh	r2, [r3, #0]

  dig_P1 = calibrationConstantsRaw[6] | calibrationConstantsRaw[7] << 8;
 80001b8:	7abb      	ldrb	r3, [r7, #10]
 80001ba:	b21a      	sxth	r2, r3
 80001bc:	7afb      	ldrb	r3, [r7, #11]
 80001be:	021b      	lsls	r3, r3, #8
 80001c0:	b21b      	sxth	r3, r3
 80001c2:	4313      	orrs	r3, r2
 80001c4:	b21b      	sxth	r3, r3
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000278 <BMP280_CalibrationConstantsRead_I2C+0x128>)
 80001ca:	801a      	strh	r2, [r3, #0]
  dig_P2 = calibrationConstantsRaw[8] | calibrationConstantsRaw[9] << 8;
 80001cc:	7b3b      	ldrb	r3, [r7, #12]
 80001ce:	b21a      	sxth	r2, r3
 80001d0:	7b7b      	ldrb	r3, [r7, #13]
 80001d2:	021b      	lsls	r3, r3, #8
 80001d4:	b21b      	sxth	r3, r3
 80001d6:	4313      	orrs	r3, r2
 80001d8:	b21a      	sxth	r2, r3
 80001da:	4b28      	ldr	r3, [pc, #160]	@ (800027c <BMP280_CalibrationConstantsRead_I2C+0x12c>)
 80001dc:	801a      	strh	r2, [r3, #0]
  dig_P3 = calibrationConstantsRaw[10] | calibrationConstantsRaw[11] << 8;
 80001de:	7bbb      	ldrb	r3, [r7, #14]
 80001e0:	b21a      	sxth	r2, r3
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	021b      	lsls	r3, r3, #8
 80001e6:	b21b      	sxth	r3, r3
 80001e8:	4313      	orrs	r3, r2
 80001ea:	b21a      	sxth	r2, r3
 80001ec:	4b24      	ldr	r3, [pc, #144]	@ (8000280 <BMP280_CalibrationConstantsRead_I2C+0x130>)
 80001ee:	801a      	strh	r2, [r3, #0]
  dig_P4 = calibrationConstantsRaw[12] | calibrationConstantsRaw[13] << 8;
 80001f0:	7c3b      	ldrb	r3, [r7, #16]
 80001f2:	b21a      	sxth	r2, r3
 80001f4:	7c7b      	ldrb	r3, [r7, #17]
 80001f6:	021b      	lsls	r3, r3, #8
 80001f8:	b21b      	sxth	r3, r3
 80001fa:	4313      	orrs	r3, r2
 80001fc:	b21a      	sxth	r2, r3
 80001fe:	4b21      	ldr	r3, [pc, #132]	@ (8000284 <BMP280_CalibrationConstantsRead_I2C+0x134>)
 8000200:	801a      	strh	r2, [r3, #0]
  dig_P5 = calibrationConstantsRaw[14] | calibrationConstantsRaw[15] << 8;
 8000202:	7cbb      	ldrb	r3, [r7, #18]
 8000204:	b21a      	sxth	r2, r3
 8000206:	7cfb      	ldrb	r3, [r7, #19]
 8000208:	021b      	lsls	r3, r3, #8
 800020a:	b21b      	sxth	r3, r3
 800020c:	4313      	orrs	r3, r2
 800020e:	b21a      	sxth	r2, r3
 8000210:	4b1d      	ldr	r3, [pc, #116]	@ (8000288 <BMP280_CalibrationConstantsRead_I2C+0x138>)
 8000212:	801a      	strh	r2, [r3, #0]
  dig_P6 = calibrationConstantsRaw[16] | calibrationConstantsRaw[17] << 8;
 8000214:	7d3b      	ldrb	r3, [r7, #20]
 8000216:	b21a      	sxth	r2, r3
 8000218:	7d7b      	ldrb	r3, [r7, #21]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	b21b      	sxth	r3, r3
 800021e:	4313      	orrs	r3, r2
 8000220:	b21a      	sxth	r2, r3
 8000222:	4b1a      	ldr	r3, [pc, #104]	@ (800028c <BMP280_CalibrationConstantsRead_I2C+0x13c>)
 8000224:	801a      	strh	r2, [r3, #0]
  dig_P7 = calibrationConstantsRaw[18] | calibrationConstantsRaw[19] << 8;
 8000226:	7dbb      	ldrb	r3, [r7, #22]
 8000228:	b21a      	sxth	r2, r3
 800022a:	7dfb      	ldrb	r3, [r7, #23]
 800022c:	021b      	lsls	r3, r3, #8
 800022e:	b21b      	sxth	r3, r3
 8000230:	4313      	orrs	r3, r2
 8000232:	b21a      	sxth	r2, r3
 8000234:	4b16      	ldr	r3, [pc, #88]	@ (8000290 <BMP280_CalibrationConstantsRead_I2C+0x140>)
 8000236:	801a      	strh	r2, [r3, #0]
  dig_P8 = calibrationConstantsRaw[20] | calibrationConstantsRaw[21] << 8;
 8000238:	7e3b      	ldrb	r3, [r7, #24]
 800023a:	b21a      	sxth	r2, r3
 800023c:	7e7b      	ldrb	r3, [r7, #25]
 800023e:	021b      	lsls	r3, r3, #8
 8000240:	b21b      	sxth	r3, r3
 8000242:	4313      	orrs	r3, r2
 8000244:	b21a      	sxth	r2, r3
 8000246:	4b13      	ldr	r3, [pc, #76]	@ (8000294 <BMP280_CalibrationConstantsRead_I2C+0x144>)
 8000248:	801a      	strh	r2, [r3, #0]
  dig_P9 = calibrationConstantsRaw[22] | calibrationConstantsRaw[23] << 8;
 800024a:	7ebb      	ldrb	r3, [r7, #26]
 800024c:	b21a      	sxth	r2, r3
 800024e:	7efb      	ldrb	r3, [r7, #27]
 8000250:	021b      	lsls	r3, r3, #8
 8000252:	b21b      	sxth	r3, r3
 8000254:	4313      	orrs	r3, r2
 8000256:	b21a      	sxth	r2, r3
 8000258:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <BMP280_CalibrationConstantsRead_I2C+0x148>)
 800025a:	801a      	strh	r2, [r3, #0]
} //@}
 800025c:	bf00      	nop
 800025e:	3720      	adds	r7, #32
 8000260:	46bd      	mov	sp, r7
 8000262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000266:	b004      	add	sp, #16
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000088 	.word	0x20000088
 8000270:	2000008c 	.word	0x2000008c
 8000274:	2000008e 	.word	0x2000008e
 8000278:	2000008a 	.word	0x2000008a
 800027c:	20000090 	.word	0x20000090
 8000280:	20000092 	.word	0x20000092
 8000284:	20000094 	.word	0x20000094
 8000288:	20000096 	.word	0x20000096
 800028c:	20000098 	.word	0x20000098
 8000290:	2000009a 	.word	0x2000009a
 8000294:	2000009c 	.word	0x2000009c
 8000298:	2000009e 	.word	0x2000009e

0800029c <BMP280_Init_I2C>:
                     uint8_t osrs_p,
                     uint8_t acq_mode,
                     uint8_t t_sb,
                     uint8_t filter_tc,
                     I2C_HandleTypeDef i2c_handle,
                     uint8_t device_address) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b097      	sub	sp, #92	@ 0x5c
 80002a0:	af12      	add	r7, sp, #72	@ 0x48
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
  uint8_t writeBuffer, readBuffer; // Variables used for applying changes to
                                   // selected bits in device registers */
  HAL_StatusTypeDef status;

  // Reset the device
  writeBuffer = 0xB6;
 80002ba:	23b6      	movs	r3, #182	@ 0xb6
 80002bc:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle,
 80002be:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80002c2:	b299      	uxth	r1, r3
 80002c4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80002c8:	f04f 33ff 	mov.w	r3, #4294967295
 80002cc:	9302      	str	r3, [sp, #8]
 80002ce:	2301      	movs	r3, #1
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	f107 030e 	add.w	r3, r7, #14
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2301      	movs	r3, #1
 80002da:	22e0      	movs	r2, #224	@ 0xe0
 80002dc:	f001 f94c 	bl	8001578 <HAL_I2C_Mem_Write>
 80002e0:	4603      	mov	r3, r0
 80002e2:	73fb      	strb	r3, [r7, #15]
                             BMP280_REG_RESET,
                             1,
                             &writeBuffer,
                             1,
                             HAL_MAX_DELAY);
  if (status != HAL_OK) {
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <BMP280_Init_I2C+0x52>
    return false;
 80002ea:	2300      	movs	r3, #0
 80002ec:	e0a4      	b.n	8000438 <BMP280_Init_I2C+0x19c>
  }
  HAL_Delay(100);
 80002ee:	2064      	movs	r0, #100	@ 0x64
 80002f0:	f000 fd44 	bl	8000d7c <HAL_Delay>

  // Read device ID
  status = HAL_I2C_Mem_Read(&i2c_handle,
 80002f4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80002f8:	b299      	uxth	r1, r3
 80002fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80002fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000302:	9302      	str	r3, [sp, #8]
 8000304:	2301      	movs	r3, #1
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	f107 030d 	add.w	r3, r7, #13
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2301      	movs	r3, #1
 8000310:	22d0      	movs	r2, #208	@ 0xd0
 8000312:	f001 fa2b 	bl	800176c <HAL_I2C_Mem_Read>
 8000316:	4603      	mov	r3, r0
 8000318:	73fb      	strb	r3, [r7, #15]
                            BMP280_REG_ID,
                            1,
                            &readBuffer,
                            1,
                            HAL_MAX_DELAY);
  if (status != HAL_OK || readBuffer != 0x58) {
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d102      	bne.n	8000326 <BMP280_Init_I2C+0x8a>
 8000320:	7b7b      	ldrb	r3, [r7, #13]
 8000322:	2b58      	cmp	r3, #88	@ 0x58
 8000324:	d001      	beq.n	800032a <BMP280_Init_I2C+0x8e>
    return false;
 8000326:	2300      	movs	r3, #0
 8000328:	e086      	b.n	8000438 <BMP280_Init_I2C+0x19c>
  }

  // Read calibration constants
  BMP280_CalibrationConstantsRead_I2C(i2c_handle, device_address);
 800032a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800032e:	9311      	str	r3, [sp, #68]	@ 0x44
 8000330:	4668      	mov	r0, sp
 8000332:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000336:	2244      	movs	r2, #68	@ 0x44
 8000338:	4619      	mov	r1, r3
 800033a:	f006 fc20 	bl	8006b7e <memcpy>
 800033e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000342:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000344:	f7ff ff04 	bl	8000150 <BMP280_CalibrationConstantsRead_I2C>

  // Write timing and IIR data to config register
  writeBuffer = (t_sb << 5) | (filter_tc << 2);
 8000348:	793b      	ldrb	r3, [r7, #4]
 800034a:	015b      	lsls	r3, r3, #5
 800034c:	b25a      	sxtb	r2, r3
 800034e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	b25b      	sxtb	r3, r3
 8000356:	4313      	orrs	r3, r2
 8000358:	b25b      	sxtb	r3, r3
 800035a:	b2db      	uxtb	r3, r3
 800035c:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle,
 800035e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000362:	b299      	uxth	r1, r3
 8000364:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000368:	f04f 33ff 	mov.w	r3, #4294967295
 800036c:	9302      	str	r3, [sp, #8]
 800036e:	2301      	movs	r3, #1
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	f107 030e 	add.w	r3, r7, #14
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2301      	movs	r3, #1
 800037a:	22f5      	movs	r2, #245	@ 0xf5
 800037c:	f001 f8fc 	bl	8001578 <HAL_I2C_Mem_Write>
 8000380:	4603      	mov	r3, r0
 8000382:	73fb      	strb	r3, [r7, #15]
                             BMP280_REG_CONFIG,
                             1,
                             &writeBuffer,
                             1,
                             HAL_MAX_DELAY);
  status = HAL_I2C_Mem_Read(&i2c_handle,
 8000384:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000388:	b299      	uxth	r1, r3
 800038a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	9302      	str	r3, [sp, #8]
 8000394:	2301      	movs	r3, #1
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	f107 030d 	add.w	r3, r7, #13
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	22f5      	movs	r2, #245	@ 0xf5
 80003a2:	f001 f9e3 	bl	800176c <HAL_I2C_Mem_Read>
 80003a6:	4603      	mov	r3, r0
 80003a8:	73fb      	strb	r3, [r7, #15]
                            BMP280_REG_CONFIG,
                            1,
                            &readBuffer,
                            1,
                            HAL_MAX_DELAY);
  if (readBuffer != writeBuffer || status != HAL_OK) {
 80003aa:	7b7a      	ldrb	r2, [r7, #13]
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d102      	bne.n	80003b8 <BMP280_Init_I2C+0x11c>
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <BMP280_Init_I2C+0x120>
    return false;
 80003b8:	2300      	movs	r3, #0
 80003ba:	e03d      	b.n	8000438 <BMP280_Init_I2C+0x19c>
  }

  // Write oversampling and mode data to ctrl_meas register
  writeBuffer = (osrs_t << 5) | (osrs_p << 2) | (acq_mode << 0);
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	015b      	lsls	r3, r3, #5
 80003c0:	b25a      	sxtb	r2, r3
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b25a      	sxtb	r2, r3
 80003cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle,
 80003d8:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80003dc:	b299      	uxth	r1, r3
 80003de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295
 80003e6:	9302      	str	r3, [sp, #8]
 80003e8:	2301      	movs	r3, #1
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	f107 030e 	add.w	r3, r7, #14
 80003f0:	9300      	str	r3, [sp, #0]
 80003f2:	2301      	movs	r3, #1
 80003f4:	22f4      	movs	r2, #244	@ 0xf4
 80003f6:	f001 f8bf 	bl	8001578 <HAL_I2C_Mem_Write>
 80003fa:	4603      	mov	r3, r0
 80003fc:	73fb      	strb	r3, [r7, #15]
                             BMP280_REG_CTRL_MEAS,
                             1,
                             &writeBuffer,
                             1,
                             HAL_MAX_DELAY);
  status = HAL_I2C_Mem_Read(&i2c_handle,
 80003fe:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000402:	b299      	uxth	r1, r3
 8000404:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000408:	f04f 33ff 	mov.w	r3, #4294967295
 800040c:	9302      	str	r3, [sp, #8]
 800040e:	2301      	movs	r3, #1
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	f107 030d 	add.w	r3, r7, #13
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	2301      	movs	r3, #1
 800041a:	22f4      	movs	r2, #244	@ 0xf4
 800041c:	f001 f9a6 	bl	800176c <HAL_I2C_Mem_Read>
 8000420:	4603      	mov	r3, r0
 8000422:	73fb      	strb	r3, [r7, #15]
                            BMP280_REG_CTRL_MEAS,
                            1,
                            &readBuffer,
                            1,
                            HAL_MAX_DELAY);
  if (readBuffer != writeBuffer || status != HAL_OK) {
 8000424:	7b7a      	ldrb	r2, [r7, #13]
 8000426:	7bbb      	ldrb	r3, [r7, #14]
 8000428:	429a      	cmp	r2, r3
 800042a:	d102      	bne.n	8000432 <BMP280_Init_I2C+0x196>
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <BMP280_Init_I2C+0x19a>
    return false;
 8000432:	2300      	movs	r3, #0
 8000434:	e000      	b.n	8000438 <BMP280_Init_I2C+0x19c>
  }

  return true;
 8000436:	2301      	movs	r3, #1
} //@}
 8000438:	4618      	mov	r0, r3
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	bd90      	pop	{r4, r7, pc}

08000440 <BMP280_Wake_I2C>:

/**
 * Wake sensor by writing MEASURE_MODE_FORCED bit to CTRL_MEAS register
 */
bool BMP280_Wake_I2C(I2C_HandleTypeDef i2c_handle, uint8_t device_address) {
 8000440:	b084      	sub	sp, #16
 8000442:	b580      	push	{r7, lr}
 8000444:	b086      	sub	sp, #24
 8000446:	af04      	add	r7, sp, #16
 8000448:	f107 0c10 	add.w	ip, r7, #16
 800044c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t buffer; // Helper variable, used to prevent overwriting other data in
                  // CTRL_MEAS register
  HAL_StatusTypeDef status;

  status = HAL_I2C_Mem_Read(&i2c_handle,
 8000450:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000454:	b299      	uxth	r1, r3
 8000456:	f04f 33ff 	mov.w	r3, #4294967295
 800045a:	9302      	str	r3, [sp, #8]
 800045c:	2301      	movs	r3, #1
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	1dbb      	adds	r3, r7, #6
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2301      	movs	r3, #1
 8000466:	22f4      	movs	r2, #244	@ 0xf4
 8000468:	f107 0010 	add.w	r0, r7, #16
 800046c:	f001 f97e 	bl	800176c <HAL_I2C_Mem_Read>
 8000470:	4603      	mov	r3, r0
 8000472:	71fb      	strb	r3, [r7, #7]
                            BMP280_REG_CTRL_MEAS,
                            1,
                            &buffer,
                            1,
                            HAL_MAX_DELAY);
  if (status != HAL_OK) {
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <BMP280_Wake_I2C+0x3e>
    return false;
 800047a:	2300      	movs	r3, #0
 800047c:	e01c      	b.n	80004b8 <BMP280_Wake_I2C+0x78>
  }

  buffer |= BMP280_VAL_CTRL_MEAS_MODE_FORCED;
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	b2db      	uxtb	r3, r3
 8000486:	71bb      	strb	r3, [r7, #6]

  status = HAL_I2C_Mem_Write(&i2c_handle,
 8000488:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800048c:	b299      	uxth	r1, r3
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	9302      	str	r3, [sp, #8]
 8000494:	2301      	movs	r3, #1
 8000496:	9301      	str	r3, [sp, #4]
 8000498:	1dbb      	adds	r3, r7, #6
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	2301      	movs	r3, #1
 800049e:	22f4      	movs	r2, #244	@ 0xf4
 80004a0:	f107 0010 	add.w	r0, r7, #16
 80004a4:	f001 f868 	bl	8001578 <HAL_I2C_Mem_Write>
 80004a8:	4603      	mov	r3, r0
 80004aa:	71fb      	strb	r3, [r7, #7]
                             BMP280_REG_CTRL_MEAS,
                             1,
                             &buffer,
                             1,
                             HAL_MAX_DELAY);
  if (status != HAL_OK) {
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <BMP280_Wake_I2C+0x76>
    return false;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e000      	b.n	80004b8 <BMP280_Wake_I2C+0x78>
  }

  return true;
 80004b6:	2301      	movs	r3, #1
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004c2:	b004      	add	sp, #16
 80004c4:	4770      	bx	lr

080004c6 <vApplicationIdleHook>:

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  memory allocated by the kernel to any task that has since been deleted. */
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
  // printf("idle task\r\n");
  //  vTaskDelay(pdMS_TO_TICKS(1000));
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
	...

080004d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of USART2TxMutex */
  USART2TxMutexHandle = osMutexNew(&USART2TxMutex_attributes);
 80004d8:	480b      	ldr	r0, [pc, #44]	@ (8000508 <MX_FREERTOS_Init+0x34>)
 80004da:	f003 f809 	bl	80034f0 <osMutexNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <MX_FREERTOS_Init+0x38>)
 80004e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of statusTask */
  statusTaskHandle = osThreadNew(vStatusTask, NULL, &statusTask_attributes);
 80004e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <MX_FREERTOS_Init+0x3c>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480a      	ldr	r0, [pc, #40]	@ (8000514 <MX_FREERTOS_Init+0x40>)
 80004ea:	f002 ff29 	bl	8003340 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a09      	ldr	r2, [pc, #36]	@ (8000518 <MX_FREERTOS_Init+0x44>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(vLedTask, NULL, &ledTask_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	@ (800051c <MX_FREERTOS_Init+0x48>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	@ (8000520 <MX_FREERTOS_Init+0x4c>)
 80004fa:	f002 ff21 	bl	8003340 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <MX_FREERTOS_Init+0x50>)
 8000502:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	080070bc 	.word	0x080070bc
 800050c:	200000a8 	.word	0x200000a8
 8000510:	08007074 	.word	0x08007074
 8000514:	08000529 	.word	0x08000529
 8000518:	200000a0 	.word	0x200000a0
 800051c:	08007098 	.word	0x08007098
 8000520:	08000571 	.word	0x08000571
 8000524:	200000a4 	.word	0x200000a4

08000528 <vStatusTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_vStatusTask */
void vStatusTask(void *argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStatusTask */
  /* Infinite loop */
  while (true && osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 8000530:	e00b      	b.n	800054a <vStatusTask+0x22>
    printf("test\r\n");
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <vStatusTask+0x40>)
 8000534:	f006 f972 	bl	800681c <puts>
    osMutexRelease(USART2TxMutexHandle);
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <vStatusTask+0x44>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f003 f8cf 	bl	80036e0 <osMutexRelease>
    osDelay(1000);
 8000542:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000546:	f002 ffa5 	bl	8003494 <osDelay>
  while (true && osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <vStatusTask+0x44>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f04f 31ff 	mov.w	r1, #4294967295
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f866 	bl	8003624 <osMutexAcquire>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0e9      	beq.n	8000532 <vStatusTask+0xa>
  }
  /* USER CODE END vStatusTask */
}
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	0800703c 	.word	0x0800703c
 800056c:	200000a8 	.word	0x200000a8

08000570 <vLedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vLedTask */
void vLedTask(void *argument)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vLedTask */
  /* Infinite loop */
  while (true) {
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000578:	2104      	movs	r1, #4
 800057a:	4807      	ldr	r0, [pc, #28]	@ (8000598 <vLedTask+0x28>)
 800057c:	f000 fe9e 	bl	80012bc <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4805      	ldr	r0, [pc, #20]	@ (800059c <vLedTask+0x2c>)
 8000586:	f000 fe99 	bl	80012bc <HAL_GPIO_TogglePin>
    osDelay(1000);
 800058a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058e:	f002 ff81 	bl	8003494 <osDelay>
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000592:	bf00      	nop
 8000594:	e7f0      	b.n	8000578 <vLedTask+0x8>
 8000596:	bf00      	nop
 8000598:	40010c00 	.word	0x40010c00
 800059c:	40011000 	.word	0x40011000

080005a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a37      	ldr	r2, [pc, #220]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b35      	ldr	r3, [pc, #212]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0310 	and.w	r3, r3, #16
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005cc:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a31      	ldr	r2, [pc, #196]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0320 	and.w	r3, r3, #32
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <MX_GPIO_Init+0xf8>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a25      	ldr	r2, [pc, #148]	@ (8000698 <MX_GPIO_Init+0xf8>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_GPIO_Init+0xf8>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061a:	4820      	ldr	r0, [pc, #128]	@ (800069c <MX_GPIO_Init+0xfc>)
 800061c:	f000 fe36 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2104      	movs	r1, #4
 8000624:	481e      	ldr	r0, [pc, #120]	@ (80006a0 <MX_GPIO_Init+0x100>)
 8000626:	f000 fe31 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_2_Pin;
 800062a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_2_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4816      	ldr	r0, [pc, #88]	@ (800069c <MX_GPIO_Init+0xfc>)
 8000644:	f000 fc9e 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000648:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 800064c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064e:	2303      	movs	r3, #3
 8000650:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	4619      	mov	r1, r3
 8000658:	4812      	ldr	r0, [pc, #72]	@ (80006a4 <MX_GPIO_Init+0x104>)
 800065a:	f000 fc93 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800065e:	f64f 733b 	movw	r3, #65339	@ 0xff3b
 8000662:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000664:	2303      	movs	r3, #3
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <MX_GPIO_Init+0x100>)
 8000670:	f000 fc88 	bl	8000f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_1_Pin;
 8000674:	2304      	movs	r3, #4
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_1_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0x100>)
 800068c:	f000 fc7a 	bl	8000f84 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	40011000 	.word	0x40011000
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	40010800 	.word	0x40010800

080006a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006ae:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <MX_I2C1_Init+0x54>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006b4:	4a12      	ldr	r2, [pc, #72]	@ (8000700 <MX_I2C1_Init+0x58>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_I2C1_Init+0x50>)
 80006e6:	f000 fe03 	bl	80012f0 <HAL_I2C_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 f8f2 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000ac 	.word	0x200000ac
 80006fc:	40005400 	.word	0x40005400
 8000700:	000186a0 	.word	0x000186a0

08000704 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b088      	sub	sp, #32
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <HAL_I2C_MspInit+0x70>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d123      	bne.n	800076c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <HAL_I2C_MspInit+0x74>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <HAL_I2C_MspInit+0x74>)
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <HAL_I2C_MspInit+0x74>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0308 	and.w	r3, r3, #8
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800073c:	23c0      	movs	r3, #192	@ 0xc0
 800073e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000740:	2312      	movs	r3, #18
 8000742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	480b      	ldr	r0, [pc, #44]	@ (800077c <HAL_I2C_MspInit+0x78>)
 8000750:	f000 fc18 	bl	8000f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_I2C_MspInit+0x74>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_I2C_MspInit+0x74>)
 800075a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <HAL_I2C_MspInit+0x74>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40005400 	.word	0x40005400
 8000778:	40021000 	.word	0x40021000
 800077c:	40010c00 	.word	0x40010c00

08000780 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b099      	sub	sp, #100	@ 0x64
 8000784:	af18      	add	r7, sp, #96	@ 0x60

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000786:	f000 fac7 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f835 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f7ff ff07 	bl	80005a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000792:	f7ff ff89 	bl	80006a8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000796:	f000 fa25 	bl	8000be4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("System initializing\r\n");
 800079a:	4815      	ldr	r0, [pc, #84]	@ (80007f0 <main+0x70>)
 800079c:	f006 f83e 	bl	800681c <puts>
  BMP280_Init_I2C(BMP280_VAL_CTRL_MEAS_OSRS_T_16,
 80007a0:	23ec      	movs	r3, #236	@ 0xec
 80007a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80007a4:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <main+0x74>)
 80007a6:	ab01      	add	r3, sp, #4
 80007a8:	4611      	mov	r1, r2
 80007aa:	2254      	movs	r2, #84	@ 0x54
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 f9e6 	bl	8006b7e <memcpy>
 80007b2:	2304      	movs	r3, #4
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	23a0      	movs	r3, #160	@ 0xa0
 80007b8:	2203      	movs	r2, #3
 80007ba:	211c      	movs	r1, #28
 80007bc:	20e0      	movs	r0, #224	@ 0xe0
 80007be:	f7ff fd6d 	bl	800029c <BMP280_Init_I2C>
                  BMP280_VAL_CTRL_MEAS_MODE_NORMAL,
                  BMP280_VAL_CTRL_CONFIG_T_SB_1000,
                  BMP280_VAL_CTRL_CONFIG_FILTER_2,
                  hi2c1,
                  BMP280_DEVICE_ADDRESS_GND);
  BMP280_Wake_I2C(hi2c1, BMP280_DEVICE_ADDRESS_GND);
 80007c2:	4c0c      	ldr	r4, [pc, #48]	@ (80007f4 <main+0x74>)
 80007c4:	23ec      	movs	r3, #236	@ 0xec
 80007c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80007c8:	4668      	mov	r0, sp
 80007ca:	f104 0310 	add.w	r3, r4, #16
 80007ce:	2244      	movs	r2, #68	@ 0x44
 80007d0:	4619      	mov	r1, r3
 80007d2:	f006 f9d4 	bl	8006b7e <memcpy>
 80007d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007da:	f7ff fe31 	bl	8000440 <BMP280_Wake_I2C>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007de:	f002 fd49 	bl	8003274 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007e2:	f7ff fe77 	bl	80004d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007e6:	f002 fd77 	bl	80032d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true) {
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <main+0x6a>
 80007ee:	bf00      	nop
 80007f0:	08007044 	.word	0x08007044
 80007f4:	200000ac 	.word	0x200000ac

080007f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b090      	sub	sp, #64	@ 0x40
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2228      	movs	r2, #40	@ 0x28
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f006 f8e8 	bl	80069dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000822:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000836:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fdaf 	bl	80023a4 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x58>
    Error_Handler();
 800084c:	f000 f844 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000850:	230f      	movs	r3, #15
 8000852:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f002 f81c 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x82>
    Error_Handler();
 8000876:	f000 f82f 	bl	80008d8 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3740      	adds	r7, #64	@ 0x40
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <__io_putchar>:
/* USER CODE BEGIN 4 */

/**
 * @brief putchar() override - redirect printf to USART2
 */
int __io_putchar(int ch) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 800088c:	e000      	b.n	8000890 <__io_putchar+0xc>
    asm("nop");
 800088e:	bf00      	nop
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <__io_putchar+0x2c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0f8      	beq.n	800088e <__io_putchar+0xa>
  }
  USART2->DR = (ch & 0xFF); // write data to TX register
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <__io_putchar+0x2c>)
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	6053      	str	r3, [r2, #4]
  return ch;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	40004400 	.word	0x40004400

080008b4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c6:	f000 fa3d 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40000800 	.word	0x40000800

080008d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <HAL_MspInit+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a17      	ldr	r2, [pc, #92]	@ (800094c <HAL_MspInit+0x68>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <HAL_MspInit+0x68>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <HAL_MspInit+0x68>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a11      	ldr	r2, [pc, #68]	@ (800094c <HAL_MspInit+0x68>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x68>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	210f      	movs	r1, #15
 800091e:	f06f 0001 	mvn.w	r0, #1
 8000922:	f000 fb04 	bl	8000f2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000926:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <HAL_MspInit+0x6c>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <HAL_MspInit+0x6c>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	40010000 	.word	0x40010000

08000954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	@ 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800096a:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <HAL_InitTick+0xe8>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a33      	ldr	r2, [pc, #204]	@ (8000a3c <HAL_InitTick+0xe8>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b31      	ldr	r3, [pc, #196]	@ (8000a3c <HAL_InitTick+0xe8>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000982:	f107 0210 	add.w	r2, r7, #16
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f8fb 	bl	8002b88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000998:	2b00      	cmp	r3, #0
 800099a:	d103      	bne.n	80009a4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800099c:	f002 f8cc 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 80009a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80009a2:	e004      	b.n	80009ae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009a4:	f002 f8c8 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 80009a8:	4603      	mov	r3, r0
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b0:	4a23      	ldr	r2, [pc, #140]	@ (8000a40 <HAL_InitTick+0xec>)
 80009b2:	fba2 2303 	umull	r2, r3, r2, r3
 80009b6:	0c9b      	lsrs	r3, r3, #18
 80009b8:	3b01      	subs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009bc:	4b21      	ldr	r3, [pc, #132]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009be:	4a22      	ldr	r2, [pc, #136]	@ (8000a48 <HAL_InitTick+0xf4>)
 80009c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009c8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ce:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009e2:	4818      	ldr	r0, [pc, #96]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009e4:	f002 f91e 	bl	8002c24 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d11b      	bne.n	8000a2e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009f6:	4813      	ldr	r0, [pc, #76]	@ (8000a44 <HAL_InitTick+0xf0>)
 80009f8:	f002 f96c 	bl	8002cd4 <HAL_TIM_Base_Start_IT>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d111      	bne.n	8000a2e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a0a:	201e      	movs	r0, #30
 8000a0c:	f000 faab 	bl	8000f66 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d808      	bhi.n	8000a28 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a16:	2200      	movs	r2, #0
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	201e      	movs	r0, #30
 8000a1c:	f000 fa87 	bl	8000f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a20:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_InitTick+0xf8>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	e002      	b.n	8000a2e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3738      	adds	r7, #56	@ 0x38
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	431bde83 	.word	0x431bde83
 8000a44:	20000100 	.word	0x20000100
 8000a48:	40000800 	.word	0x40000800
 8000a4c:	20000004 	.word	0x20000004

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <NMI_Handler+0x4>

08000a58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <MemManage_Handler+0x4>

08000a68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <TIM4_IRQHandler+0x10>)
 8000a8a:	f002 f975 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000100 	.word	0x20000100

08000a98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	e00a      	b.n	8000ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aaa:	f3af 8000 	nop.w
 8000aae:	4601      	mov	r1, r0
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	b2ca      	uxtb	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf0      	blt.n	8000aaa <_read+0x12>
  }

  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e009      	b.n	8000af8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fec9 	bl	8000884 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf1      	blt.n	8000ae4 <_write+0x12>
  }
  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_close>:

int _close(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b30:	605a      	str	r2, [r3, #4]
  return 0;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
	...

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f005 ffc2 	bl	8006b24 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20005000 	.word	0x20005000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	20000148 	.word	0x20000148
 8000bd4:	20001cc8 	.word	0x20001cc8

08000bd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_USART2_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f002 fa4c 	bl	80030b8 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f7ff fe57 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000014c 	.word	0x2000014c
 8000c34:	40004400 	.word	0x40004400

08000c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <HAL_UART_MspInit+0x88>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d12f      	bne.n	8000cb8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c5a:	69db      	ldr	r3, [r3, #28]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	@ (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c62:	61d3      	str	r3, [r2, #28]
 8000c64:	4b17      	ldr	r3, [pc, #92]	@ (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c9c:	f000 f972 	bl	8000f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <HAL_UART_MspInit+0x90>)
 8000cb4:	f000 f966 	bl	8000f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010800 	.word	0x40010800

08000ccc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff ff84 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cd2:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ce8:	4c09      	ldr	r4, [pc, #36]	@ (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f005 ff1b 	bl	8006b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfa:	f7ff fd41 	bl	8000780 <main>
  bx lr
 8000cfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d08:	08007100 	.word	0x08007100
  ldr r2, =_sbss
 8000d0c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d10:	20001cc4 	.word	0x20001cc4

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <HAL_Init+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <HAL_Init+0x28>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8f5 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f7ff fe10 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fdd6 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000194 	.word	0x20000194

08000d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	@ (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000194 	.word	0x20000194

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff0 	bl	8000d68 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffe0 	bl	8000d68 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4906      	ldr	r1, [pc, #24]	@ (8000e5c <__NVIC_EnableIRQ+0x34>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff4f 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff64 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ffb2 	bl	8000eb4 <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff81 	bl	8000e60 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff57 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b08b      	sub	sp, #44	@ 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f96:	e169      	b.n	800126c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	f040 8158 	bne.w	8001266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4a9a      	ldr	r2, [pc, #616]	@ (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d05e      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a98      	ldr	r2, [pc, #608]	@ (8001224 <HAL_GPIO_Init+0x2a0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d875      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fc6:	4a98      	ldr	r2, [pc, #608]	@ (8001228 <HAL_GPIO_Init+0x2a4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d058      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fcc:	4a96      	ldr	r2, [pc, #600]	@ (8001228 <HAL_GPIO_Init+0x2a4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d86f      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fd2:	4a96      	ldr	r2, [pc, #600]	@ (800122c <HAL_GPIO_Init+0x2a8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d052      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fd8:	4a94      	ldr	r2, [pc, #592]	@ (800122c <HAL_GPIO_Init+0x2a8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d869      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fde:	4a94      	ldr	r2, [pc, #592]	@ (8001230 <HAL_GPIO_Init+0x2ac>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d04c      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000fe4:	4a92      	ldr	r2, [pc, #584]	@ (8001230 <HAL_GPIO_Init+0x2ac>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d863      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000fea:	4a92      	ldr	r2, [pc, #584]	@ (8001234 <HAL_GPIO_Init+0x2b0>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d046      	beq.n	800107e <HAL_GPIO_Init+0xfa>
 8000ff0:	4a90      	ldr	r2, [pc, #576]	@ (8001234 <HAL_GPIO_Init+0x2b0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d85d      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d82a      	bhi.n	8001050 <HAL_GPIO_Init+0xcc>
 8000ffa:	2b12      	cmp	r3, #18
 8000ffc:	d859      	bhi.n	80010b2 <HAL_GPIO_Init+0x12e>
 8000ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8001004 <HAL_GPIO_Init+0x80>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	0800107f 	.word	0x0800107f
 8001008:	08001059 	.word	0x08001059
 800100c:	0800106b 	.word	0x0800106b
 8001010:	080010ad 	.word	0x080010ad
 8001014:	080010b3 	.word	0x080010b3
 8001018:	080010b3 	.word	0x080010b3
 800101c:	080010b3 	.word	0x080010b3
 8001020:	080010b3 	.word	0x080010b3
 8001024:	080010b3 	.word	0x080010b3
 8001028:	080010b3 	.word	0x080010b3
 800102c:	080010b3 	.word	0x080010b3
 8001030:	080010b3 	.word	0x080010b3
 8001034:	080010b3 	.word	0x080010b3
 8001038:	080010b3 	.word	0x080010b3
 800103c:	080010b3 	.word	0x080010b3
 8001040:	080010b3 	.word	0x080010b3
 8001044:	080010b3 	.word	0x080010b3
 8001048:	08001061 	.word	0x08001061
 800104c:	08001075 	.word	0x08001075
 8001050:	4a79      	ldr	r2, [pc, #484]	@ (8001238 <HAL_GPIO_Init+0x2b4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001056:	e02c      	b.n	80010b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e029      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	3304      	adds	r3, #4
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e024      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	3308      	adds	r3, #8
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e01f      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	330c      	adds	r3, #12
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e01a      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001086:	2304      	movs	r3, #4
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e013      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	611a      	str	r2, [r3, #16]
          break;
 800109e:	e009      	b.n	80010b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a0:	2308      	movs	r3, #8
 80010a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	615a      	str	r2, [r3, #20]
          break;
 80010aa:	e003      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x130>
          break;
 80010b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2bff      	cmp	r3, #255	@ 0xff
 80010b8:	d801      	bhi.n	80010be <HAL_GPIO_Init+0x13a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	e001      	b.n	80010c2 <HAL_GPIO_Init+0x13e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3304      	adds	r3, #4
 80010c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d802      	bhi.n	80010d0 <HAL_GPIO_Init+0x14c>
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	e002      	b.n	80010d6 <HAL_GPIO_Init+0x152>
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	3b08      	subs	r3, #8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	210f      	movs	r1, #15
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	6a39      	ldr	r1, [r7, #32]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	431a      	orrs	r2, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 80b1 	beq.w	8001266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001104:	4b4d      	ldr	r3, [pc, #308]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a4c      	ldr	r2, [pc, #304]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b4a      	ldr	r3, [pc, #296]	@ (800123c <HAL_GPIO_Init+0x2b8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800111c:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <HAL_GPIO_Init+0x2bc>)
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a40      	ldr	r2, [pc, #256]	@ (8001244 <HAL_GPIO_Init+0x2c0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1ec>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a3f      	ldr	r2, [pc, #252]	@ (8001248 <HAL_GPIO_Init+0x2c4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1e8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3e      	ldr	r2, [pc, #248]	@ (800124c <HAL_GPIO_Init+0x2c8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3d      	ldr	r2, [pc, #244]	@ (8001250 <HAL_GPIO_Init+0x2cc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1e0>
 8001160:	2303      	movs	r3, #3
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001164:	2304      	movs	r3, #4
 8001166:	e004      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001168:	2302      	movs	r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_GPIO_Init+0x1ee>
 8001170:	2300      	movs	r3, #0
 8001172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001174:	f002 0203 	and.w	r2, r2, #3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4093      	lsls	r3, r2
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001182:	492f      	ldr	r1, [pc, #188]	@ (8001240 <HAL_GPIO_Init+0x2bc>)
 8001184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800119c:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	492c      	ldr	r1, [pc, #176]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	608b      	str	r3, [r1, #8]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4928      	ldr	r1, [pc, #160]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c4:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4922      	ldr	r1, [pc, #136]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	60cb      	str	r3, [r1, #12]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	491e      	ldr	r1, [pc, #120]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ec:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4918      	ldr	r1, [pc, #96]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	43db      	mvns	r3, r3
 8001202:	4914      	ldr	r1, [pc, #80]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 8001204:	4013      	ands	r3, r2
 8001206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d021      	beq.n	8001258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	490e      	ldr	r1, [pc, #56]	@ (8001254 <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e021      	b.n	8001266 <HAL_GPIO_Init+0x2e2>
 8001222:	bf00      	nop
 8001224:	10320000 	.word	0x10320000
 8001228:	10310000 	.word	0x10310000
 800122c:	10220000 	.word	0x10220000
 8001230:	10210000 	.word	0x10210000
 8001234:	10120000 	.word	0x10120000
 8001238:	10110000 	.word	0x10110000
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000
 8001244:	40010800 	.word	0x40010800
 8001248:	40010c00 	.word	0x40010c00
 800124c:	40011000 	.word	0x40011000
 8001250:	40011400 	.word	0x40011400
 8001254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_GPIO_Init+0x304>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	43db      	mvns	r3, r3
 8001260:	4909      	ldr	r1, [pc, #36]	@ (8001288 <HAL_GPIO_Init+0x304>)
 8001262:	4013      	ands	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	3301      	adds	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	f47f ae8e 	bne.w	8000f98 <HAL_GPIO_Init+0x14>
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	372c      	adds	r7, #44	@ 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	611a      	str	r2, [r3, #16]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4013      	ands	r3, r2
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43d9      	mvns	r1, r3
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	400b      	ands	r3, r1
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	611a      	str	r2, [r3, #16]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e12b      	b.n	800155a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d106      	bne.n	800131c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff f9f4 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2224      	movs	r2, #36	@ 0x24
 8001320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001352:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001354:	f001 fbf0 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a81      	ldr	r2, [pc, #516]	@ (8001564 <HAL_I2C_Init+0x274>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d807      	bhi.n	8001374 <HAL_I2C_Init+0x84>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a80      	ldr	r2, [pc, #512]	@ (8001568 <HAL_I2C_Init+0x278>)
 8001368:	4293      	cmp	r3, r2
 800136a:	bf94      	ite	ls
 800136c:	2301      	movls	r3, #1
 800136e:	2300      	movhi	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	e006      	b.n	8001382 <HAL_I2C_Init+0x92>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4a7d      	ldr	r2, [pc, #500]	@ (800156c <HAL_I2C_Init+0x27c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	bf94      	ite	ls
 800137c:	2301      	movls	r3, #1
 800137e:	2300      	movhi	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0e7      	b.n	800155a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a78      	ldr	r2, [pc, #480]	@ (8001570 <HAL_I2C_Init+0x280>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0c9b      	lsrs	r3, r3, #18
 8001394:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001564 <HAL_I2C_Init+0x274>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d802      	bhi.n	80013c4 <HAL_I2C_Init+0xd4>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	e009      	b.n	80013d8 <HAL_I2C_Init+0xe8>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	4a69      	ldr	r2, [pc, #420]	@ (8001574 <HAL_I2C_Init+0x284>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	3301      	adds	r3, #1
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	430b      	orrs	r3, r1
 80013de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	495c      	ldr	r1, [pc, #368]	@ (8001564 <HAL_I2C_Init+0x274>)
 80013f4:	428b      	cmp	r3, r1
 80013f6:	d819      	bhi.n	800142c <HAL_I2C_Init+0x13c>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1e59      	subs	r1, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fbb1 f3f3 	udiv	r3, r1, r3
 8001406:	1c59      	adds	r1, r3, #1
 8001408:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800140c:	400b      	ands	r3, r1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00a      	beq.n	8001428 <HAL_I2C_Init+0x138>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1e59      	subs	r1, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001420:	3301      	adds	r3, #1
 8001422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001426:	e051      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 8001428:	2304      	movs	r3, #4
 800142a:	e04f      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d111      	bne.n	8001458 <HAL_I2C_Init+0x168>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e58      	subs	r0, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	440b      	add	r3, r1
 8001442:	fbb0 f3f3 	udiv	r3, r0, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	e012      	b.n	800147e <HAL_I2C_Init+0x18e>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e58      	subs	r0, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	0099      	lsls	r1, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	fbb0 f3f3 	udiv	r3, r0, r3
 800146e:	3301      	adds	r3, #1
 8001470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_Init+0x196>
 8001482:	2301      	movs	r3, #1
 8001484:	e022      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10e      	bne.n	80014ac <HAL_I2C_Init+0x1bc>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e58      	subs	r0, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6859      	ldr	r1, [r3, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014aa:	e00f      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	0099      	lsls	r1, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	6809      	ldr	r1, [r1, #0]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6911      	ldr	r1, [r2, #16]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68d2      	ldr	r2, [r2, #12]
 8001506:	4311      	orrs	r1, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	000186a0 	.word	0x000186a0
 8001568:	001e847f 	.word	0x001e847f
 800156c:	003d08ff 	.word	0x003d08ff
 8001570:	431bde83 	.word	0x431bde83
 8001574:	10624dd3 	.word	0x10624dd3

08001578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	817b      	strh	r3, [r7, #10]
 800158a:	460b      	mov	r3, r1
 800158c:	813b      	strh	r3, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001592:	f7ff fbe9 	bl	8000d68 <HAL_GetTick>
 8001596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	f040 80d9 	bne.w	8001758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2319      	movs	r3, #25
 80015ac:	2201      	movs	r2, #1
 80015ae:	496d      	ldr	r1, [pc, #436]	@ (8001764 <HAL_I2C_Mem_Write+0x1ec>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 fcc1 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_I2C_Mem_Write+0x56>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e0c5      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d007      	beq.n	80015f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2221      	movs	r2, #33	@ 0x21
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001624:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a4d      	ldr	r2, [pc, #308]	@ (8001768 <HAL_I2C_Mem_Write+0x1f0>)
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001636:	88f8      	ldrh	r0, [r7, #6]
 8001638:	893a      	ldrh	r2, [r7, #8]
 800163a:	8979      	ldrh	r1, [r7, #10]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4603      	mov	r3, r0
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 faf8 	bl	8001c3c <I2C_RequestMemoryWrite>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d052      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e081      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fd86 	bl	800216c <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Mem_Write+0x180>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1aa      	bne.n	8001656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fd79 	bl	80021fc <I2C_WaitOnBTFFlagUntilTimeout>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	2b04      	cmp	r3, #4
 8001716:	d107      	bne.n	8001728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e016      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	817b      	strh	r3, [r7, #10]
 800177e:	460b      	mov	r3, r1
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800178a:	f7ff faed 	bl	8000d68 <HAL_GetTick>
 800178e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b20      	cmp	r3, #32
 800179a:	f040 8244 	bne.w	8001c26 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2319      	movs	r3, #25
 80017a4:	2201      	movs	r2, #1
 80017a6:	4982      	ldr	r1, [pc, #520]	@ (80019b0 <HAL_I2C_Mem_Read+0x244>)
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f000 fbc5 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
 80017b6:	e237      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_I2C_Mem_Read+0x5a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e230      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d007      	beq.n	80017ec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2222      	movs	r2, #34	@ 0x22
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800181c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a62      	ldr	r2, [pc, #392]	@ (80019b4 <HAL_I2C_Mem_Read+0x248>)
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182e:	88f8      	ldrh	r0, [r7, #6]
 8001830:	893a      	ldrh	r2, [r7, #8]
 8001832:	8979      	ldrh	r1, [r7, #10]
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	4603      	mov	r3, r0
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 fa92 	bl	8001d68 <I2C_RequestMemoryRead>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1ec      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001852:	2b00      	cmp	r3, #0
 8001854:	d113      	bne.n	800187e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e1c0      	b.n	8001c00 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	2b01      	cmp	r3, #1
 8001884:	d11e      	bne.n	80018c4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001894:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001896:	b672      	cpsid	i
}
 8001898:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018c0:	b662      	cpsie	i
}
 80018c2:	e035      	b.n	8001930 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d11e      	bne.n	800190a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001906:	b662      	cpsie	i
}
 8001908:	e012      	b.n	8001930 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001918:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001930:	e166      	b.n	8001c00 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001936:	2b03      	cmp	r3, #3
 8001938:	f200 811f 	bhi.w	8001b7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	2b01      	cmp	r3, #1
 8001942:	d123      	bne.n	800198c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001946:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fc9f 	bl	800228c <I2C_WaitOnRXNEFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e167      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800198a:	e139      	b.n	8001c00 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001990:	2b02      	cmp	r3, #2
 8001992:	d152      	bne.n	8001a3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800199a:	2200      	movs	r2, #0
 800199c:	4906      	ldr	r1, [pc, #24]	@ (80019b8 <HAL_I2C_Mem_Read+0x24c>)
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 faca 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e13c      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
 80019ae:	bf00      	nop
 80019b0:	00100002 	.word	0x00100002
 80019b4:	ffff0000 	.word	0xffff0000
 80019b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a02:	b662      	cpsie	i
}
 8001a04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a38:	e0e2      	b.n	8001c00 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a40:	2200      	movs	r2, #0
 8001a42:	497b      	ldr	r1, [pc, #492]	@ (8001c30 <HAL_I2C_Mem_Read+0x4c4>)
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 fa77 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0e9      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a9a:	4b66      	ldr	r3, [pc, #408]	@ (8001c34 <HAL_I2C_Mem_Read+0x4c8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	08db      	lsrs	r3, r3, #3
 8001aa0:	4a65      	ldr	r2, [pc, #404]	@ (8001c38 <HAL_I2C_Mem_Read+0x4cc>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0a1a      	lsrs	r2, r3, #8
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00da      	lsls	r2, r3, #3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d118      	bne.n	8001af2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f043 0220 	orr.w	r2, r3, #32
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ae2:	b662      	cpsie	i
}
 8001ae4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e09a      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d1d9      	bne.n	8001ab4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b42:	b662      	cpsie	i
}
 8001b44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b78:	e042      	b.n	8001c00 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fb84 	bl	800228c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e04c      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d118      	bne.n	8001c00 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f ae94 	bne.w	8001932 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3728      	adds	r7, #40	@ 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	00010004 	.word	0x00010004
 8001c34:	20000000 	.word	0x20000000
 8001c38:	14f8b589 	.word	0x14f8b589

08001c3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	817b      	strh	r3, [r7, #10]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	813b      	strh	r3, [r7, #8]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f960 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c8c:	d103      	bne.n	8001c96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e05f      	b.n	8001d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	492d      	ldr	r1, [pc, #180]	@ (8001d64 <I2C_RequestMemoryWrite+0x128>)
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f9bb 	bl	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04c      	b.n	8001d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd8:	6a39      	ldr	r1, [r7, #32]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fa46 	bl	800216c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00d      	beq.n	8001d02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d107      	bne.n	8001cfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e02b      	b.n	8001d5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d08:	893b      	ldrh	r3, [r7, #8]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	e021      	b.n	8001d58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d14:	893b      	ldrh	r3, [r7, #8]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fa20 	bl	800216c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00d      	beq.n	8001d4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d107      	bne.n	8001d4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e005      	b.n	8001d5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d4e:	893b      	ldrh	r3, [r7, #8]
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	00010002 	.word	0x00010002

08001d68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	4608      	mov	r0, r1
 8001d72:	4611      	mov	r1, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	817b      	strh	r3, [r7, #10]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	813b      	strh	r3, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001da0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f8c2 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dc8:	d103      	bne.n	8001dd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0aa      	b.n	8001f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001de4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	6a3a      	ldr	r2, [r7, #32]
 8001dea:	4952      	ldr	r1, [pc, #328]	@ (8001f34 <I2C_RequestMemoryRead+0x1cc>)
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f91d 	bl	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e097      	b.n	8001f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f9a8 	bl	800216c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00d      	beq.n	8001e3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d107      	bne.n	8001e3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e076      	b.n	8001f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	e021      	b.n	8001e94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e50:	893b      	ldrh	r3, [r7, #8]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f982 	bl	800216c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d107      	bne.n	8001e86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e050      	b.n	8001f2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e8a:	893b      	ldrh	r3, [r7, #8]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e96:	6a39      	ldr	r1, [r7, #32]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f967 	bl	800216c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d107      	bne.n	8001ebc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e035      	b.n	8001f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ece:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f82b 	bl	8001f38 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef6:	d103      	bne.n	8001f00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001efe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e013      	b.n	8001f2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f04:	897b      	ldrh	r3, [r7, #10]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	6a3a      	ldr	r2, [r7, #32]
 8001f18:	4906      	ldr	r1, [pc, #24]	@ (8001f34 <I2C_RequestMemoryRead+0x1cc>)
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f886 	bl	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	00010002 	.word	0x00010002

08001f38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f48:	e048      	b.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d044      	beq.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7fe ff09 	bl	8000d68 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d139      	bne.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10d      	bne.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	43da      	mvns	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	e00c      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	43da      	mvns	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d116      	bne.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e023      	b.n	8002024 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	0c1b      	lsrs	r3, r3, #16
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10d      	bne.n	8002002 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	e00c      	b.n	800201c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	43da      	mvns	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4013      	ands	r3, r2
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	429a      	cmp	r2, r3
 8002020:	d093      	beq.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800203a:	e071      	b.n	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204a:	d123      	bne.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800205a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f043 0204 	orr.w	r2, r3, #4
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e067      	b.n	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d041      	beq.n	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209c:	f7fe fe64 	bl	8000d68 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d302      	bcc.n	80020b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d136      	bne.n	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d10c      	bne.n	80020d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4013      	ands	r3, r2
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf14      	ite	ne
 80020ce:	2301      	movne	r3, #1
 80020d0:	2300      	moveq	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	e00b      	b.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e021      	b.n	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0c1b      	lsrs	r3, r3, #16
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10c      	bne.n	8002144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	43da      	mvns	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4013      	ands	r3, r2
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e00b      	b.n	800215c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4013      	ands	r3, r2
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	f47f af6d 	bne.w	800203c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002178:	e034      	b.n	80021e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f8e3 	bl	8002346 <I2C_IsAcknowledgeFailed>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e034      	b.n	80021f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d028      	beq.n	80021e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002192:	f7fe fde9 	bl	8000d68 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d302      	bcc.n	80021a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d11d      	bne.n	80021e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b2:	2b80      	cmp	r3, #128	@ 0x80
 80021b4:	d016      	beq.n	80021e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e007      	b.n	80021f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	2b80      	cmp	r3, #128	@ 0x80
 80021f0:	d1c3      	bne.n	800217a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002208:	e034      	b.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f89b 	bl	8002346 <I2C_IsAcknowledgeFailed>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e034      	b.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d028      	beq.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7fe fda1 	bl	8000d68 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11d      	bne.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d016      	beq.n	8002274 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e007      	b.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d1c3      	bne.n	800220a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002298:	e049      	b.n	800232e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b10      	cmp	r3, #16
 80022a6:	d119      	bne.n	80022dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0210 	mvn.w	r2, #16
 80022b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e030      	b.n	800233e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022dc:	f7fe fd44 	bl	8000d68 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d302      	bcc.n	80022f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d11d      	bne.n	800232e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fc:	2b40      	cmp	r3, #64	@ 0x40
 80022fe:	d016      	beq.n	800232e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e007      	b.n	800233e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002338:	2b40      	cmp	r3, #64	@ 0x40
 800233a:	d1ae      	bne.n	800229a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235c:	d11b      	bne.n	8002396 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002366:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f043 0204 	orr.w	r2, r3, #4
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e272      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8087 	beq.w	80024d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023c4:	4b92      	ldr	r3, [pc, #584]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d00c      	beq.n	80023ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d112      	bne.n	8002402 <HAL_RCC_OscConfig+0x5e>
 80023dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e8:	d10b      	bne.n	8002402 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ea:	4b89      	ldr	r3, [pc, #548]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d06c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x12c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d168      	bne.n	80024d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e24c      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x76>
 800240c:	4b80      	ldr	r3, [pc, #512]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a7f      	ldr	r2, [pc, #508]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002412:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e02e      	b.n	8002478 <HAL_RCC_OscConfig+0xd4>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x98>
 8002422:	4b7b      	ldr	r3, [pc, #492]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a7a      	ldr	r2, [pc, #488]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b78      	ldr	r3, [pc, #480]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a77      	ldr	r2, [pc, #476]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e01d      	b.n	8002478 <HAL_RCC_OscConfig+0xd4>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0xbc>
 8002446:	4b72      	ldr	r3, [pc, #456]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a71      	ldr	r2, [pc, #452]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800244c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b6f      	ldr	r3, [pc, #444]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6e      	ldr	r2, [pc, #440]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e00b      	b.n	8002478 <HAL_RCC_OscConfig+0xd4>
 8002460:	4b6b      	ldr	r3, [pc, #428]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a6a      	ldr	r2, [pc, #424]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b68      	ldr	r3, [pc, #416]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a67      	ldr	r2, [pc, #412]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002476:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe fc72 	bl	8000d68 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7fe fc6e 	bl	8000d68 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	@ 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e200      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b5d      	ldr	r3, [pc, #372]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0xe4>
 80024a6:	e014      	b.n	80024d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe fc5e 	bl	8000d68 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe fc5a 	bl	8000d68 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1ec      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	4b53      	ldr	r3, [pc, #332]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x10c>
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d063      	beq.n	80025a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024de:	4b4c      	ldr	r3, [pc, #304]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ea:	4b49      	ldr	r3, [pc, #292]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d11c      	bne.n	8002530 <HAL_RCC_OscConfig+0x18c>
 80024f6:	4b46      	ldr	r3, [pc, #280]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002502:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x176>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e1c0      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251a:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4939      	ldr	r1, [pc, #228]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	e03a      	b.n	80025a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002538:	4b36      	ldr	r3, [pc, #216]	@ (8002614 <HAL_RCC_OscConfig+0x270>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe fc13 	bl	8000d68 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7fe fc0f 	bl	8000d68 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e1a1      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	4b2d      	ldr	r3, [pc, #180]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b2a      	ldr	r3, [pc, #168]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4927      	ldr	r1, [pc, #156]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
 8002578:	e015      	b.n	80025a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257a:	4b26      	ldr	r3, [pc, #152]	@ (8002614 <HAL_RCC_OscConfig+0x270>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fbf2 	bl	8000d68 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002588:	f7fe fbee 	bl	8000d68 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e180      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259a:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d03a      	beq.n	8002628 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d019      	beq.n	80025ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ba:	4b17      	ldr	r3, [pc, #92]	@ (8002618 <HAL_RCC_OscConfig+0x274>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7fe fbd2 	bl	8000d68 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7fe fbce 	bl	8000d68 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e160      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f000 fafe 	bl	8002be8 <RCC_Delay>
 80025ec:	e01c      	b.n	8002628 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_RCC_OscConfig+0x274>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fbb8 	bl	8000d68 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fa:	e00f      	b.n	800261c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe fbb4 	bl	8000d68 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d908      	bls.n	800261c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e146      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	42420000 	.word	0x42420000
 8002618:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b92      	ldr	r3, [pc, #584]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1e9      	bne.n	80025fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a6 	beq.w	8002782 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b8b      	ldr	r3, [pc, #556]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10d      	bne.n	8002662 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b88      	ldr	r3, [pc, #544]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	4a87      	ldr	r2, [pc, #540]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002650:	61d3      	str	r3, [r2, #28]
 8002652:	4b85      	ldr	r3, [pc, #532]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002662:	4b82      	ldr	r3, [pc, #520]	@ (800286c <HAL_RCC_OscConfig+0x4c8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d118      	bne.n	80026a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266e:	4b7f      	ldr	r3, [pc, #508]	@ (800286c <HAL_RCC_OscConfig+0x4c8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a7e      	ldr	r2, [pc, #504]	@ (800286c <HAL_RCC_OscConfig+0x4c8>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267a:	f7fe fb75 	bl	8000d68 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7fe fb71 	bl	8000d68 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b64      	cmp	r3, #100	@ 0x64
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e103      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	4b75      	ldr	r3, [pc, #468]	@ (800286c <HAL_RCC_OscConfig+0x4c8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x312>
 80026a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	e02d      	b.n	8002712 <HAL_RCC_OscConfig+0x36e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x334>
 80026be:	4b6a      	ldr	r3, [pc, #424]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a69      	ldr	r2, [pc, #420]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	6213      	str	r3, [r2, #32]
 80026ca:	4b67      	ldr	r3, [pc, #412]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a66      	ldr	r2, [pc, #408]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	e01c      	b.n	8002712 <HAL_RCC_OscConfig+0x36e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d10c      	bne.n	80026fa <HAL_RCC_OscConfig+0x356>
 80026e0:	4b61      	ldr	r3, [pc, #388]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4a60      	ldr	r2, [pc, #384]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	6213      	str	r3, [r2, #32]
 80026ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4a5d      	ldr	r2, [pc, #372]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6213      	str	r3, [r2, #32]
 80026f8:	e00b      	b.n	8002712 <HAL_RCC_OscConfig+0x36e>
 80026fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	4b58      	ldr	r3, [pc, #352]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a57      	ldr	r2, [pc, #348]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d015      	beq.n	8002746 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271a:	f7fe fb25 	bl	8000d68 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	e00a      	b.n	8002738 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002722:	f7fe fb21 	bl	8000d68 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0b1      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0ee      	beq.n	8002722 <HAL_RCC_OscConfig+0x37e>
 8002744:	e014      	b.n	8002770 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe fb0f 	bl	8000d68 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	e00a      	b.n	8002764 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7fe fb0b 	bl	8000d68 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e09b      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	4b40      	ldr	r3, [pc, #256]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1ee      	bne.n	800274e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d105      	bne.n	8002782 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002776:	4b3c      	ldr	r3, [pc, #240]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a3b      	ldr	r2, [pc, #236]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002780:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8087 	beq.w	800289a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278c:	4b36      	ldr	r3, [pc, #216]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d061      	beq.n	800285c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d146      	bne.n	800282e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a0:	4b33      	ldr	r3, [pc, #204]	@ (8002870 <HAL_RCC_OscConfig+0x4cc>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe fadf 	bl	8000d68 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fe fadb 	bl	8000d68 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e06d      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	4b29      	ldr	r3, [pc, #164]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d6:	4b24      	ldr	r3, [pc, #144]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4921      	ldr	r1, [pc, #132]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a19      	ldr	r1, [r3, #32]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	430b      	orrs	r3, r1
 80027fa:	491b      	ldr	r1, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe faaf 	bl	8000d68 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7fe faab 	bl	8000d68 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e03d      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x46a>
 800282c:	e035      	b.n	800289a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_RCC_OscConfig+0x4cc>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fa98 	bl	8000d68 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fa94 	bl	8000d68 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e026      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x498>
 800285a:	e01e      	b.n	800289a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e019      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
 8002868:	40021000 	.word	0x40021000
 800286c:	40007000 	.word	0x40007000
 8002870:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002874:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_RCC_OscConfig+0x500>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	429a      	cmp	r2, r3
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d001      	beq.n	800289a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0d0      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b67      	ldr	r3, [pc, #412]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	4965      	ldr	r1, [pc, #404]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b63      	ldr	r3, [pc, #396]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0b8      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002904:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a58      	ldr	r2, [pc, #352]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800290e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a52      	ldr	r2, [pc, #328]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002926:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	494d      	ldr	r1, [pc, #308]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d040      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b47      	ldr	r3, [pc, #284]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d115      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e07f      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b41      	ldr	r3, [pc, #260]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e073      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	4b3d      	ldr	r3, [pc, #244]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4936      	ldr	r1, [pc, #216]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002998:	f7fe f9e6 	bl	8000d68 <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7fe f9e2 	bl	8000d68 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e053      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b27      	ldr	r3, [pc, #156]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d210      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 0207 	bic.w	r2, r3, #7
 80029de:	4922      	ldr	r1, [pc, #136]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e032      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4916      	ldr	r1, [pc, #88]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	490e      	ldr	r1, [pc, #56]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a36:	f000 f821 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	490a      	ldr	r1, [pc, #40]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a48:	5ccb      	ldrb	r3, [r1, r3]
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x1cc>)
 8002a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a52:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_RCC_ClockConfig+0x1d0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd ff7c 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	080070cc 	.word	0x080070cc
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a96:	4b1e      	ldr	r3, [pc, #120]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d002      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x30>
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aaa:	e027      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aae:	613b      	str	r3, [r7, #16]
      break;
 8002ab0:	e027      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	0c9b      	lsrs	r3, r3, #18
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x94>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0c5b      	lsrs	r3, r3, #17
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	4a11      	ldr	r2, [pc, #68]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ade:	fb03 f202 	mul.w	r2, r3, r2
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e004      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	613b      	str	r3, [r7, #16]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afe:	613b      	str	r3, [r7, #16]
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	693b      	ldr	r3, [r7, #16]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	007a1200 	.word	0x007a1200
 8002b18:	080070e4 	.word	0x080070e4
 8002b1c:	080070f4 	.word	0x080070f4
 8002b20:	003d0900 	.word	0x003d0900

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b02      	ldr	r3, [pc, #8]	@ (8002b34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	20000000 	.word	0x20000000

08002b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b3c:	f7ff fff2 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	0a1b      	lsrs	r3, r3, #8
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4903      	ldr	r1, [pc, #12]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	080070dc 	.word	0x080070dc

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	0adb      	lsrs	r3, r3, #11
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	080070dc 	.word	0x080070dc

08002b88 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	220f      	movs	r2, #15
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_GetClockConfig+0x58>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <HAL_RCC_GetClockConfig+0x58>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_GetClockConfig+0x58>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002bbc:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <HAL_RCC_GetClockConfig+0x58>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0207 	and.w	r2, r3, #7
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40022000 	.word	0x40022000

08002be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <RCC_Delay+0x34>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <RCC_Delay+0x38>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a5b      	lsrs	r3, r3, #9
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c04:	bf00      	nop
  }
  while (Delay --);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	60fa      	str	r2, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f9      	bne.n	8002c04 <RCC_Delay+0x1c>
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f839 	bl	8002cc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 f9b4 	bl	8002fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d001      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e03a      	b.n	8002d62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a18      	ldr	r2, [pc, #96]	@ (8002d6c <HAL_TIM_Base_Start_IT+0x98>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00e      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x58>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d16:	d009      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x58>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a14      	ldr	r2, [pc, #80]	@ (8002d70 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_TIM_Base_Start_IT+0x58>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a13      	ldr	r2, [pc, #76]	@ (8002d74 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d111      	bne.n	8002d50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d010      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4e:	e007      	b.n	8002d60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800

08002d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0202 	mvn.w	r2, #2
 8002da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8ed 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f8e0 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f8ef 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0204 	mvn.w	r2, #4
 8002df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8c3 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8b6 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f8c5 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0208 	mvn.w	r2, #8
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f899 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f88c 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f89b 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0210 	mvn.w	r2, #16
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f86f 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f862 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f871 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0201 	mvn.w	r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fcdc 	bl	80008b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f06:	2b80      	cmp	r3, #128	@ 0x80
 8002f08:	d10e      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f14:	2b80      	cmp	r3, #128	@ 0x80
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8bf 	bl	80030a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	2b40      	cmp	r3, #64	@ 0x40
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f40:	2b40      	cmp	r3, #64	@ 0x40
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f835 	bl	8002fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0220 	mvn.w	r2, #32
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f88a 	bl	8003094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a29      	ldr	r2, [pc, #164]	@ (8003088 <TIM_Base_SetConfig+0xb8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_Base_SetConfig+0x30>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fee:	d007      	beq.n	8003000 <TIM_Base_SetConfig+0x30>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a26      	ldr	r2, [pc, #152]	@ (800308c <TIM_Base_SetConfig+0xbc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_Base_SetConfig+0x30>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a25      	ldr	r2, [pc, #148]	@ (8003090 <TIM_Base_SetConfig+0xc0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d108      	bne.n	8003012 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1c      	ldr	r2, [pc, #112]	@ (8003088 <TIM_Base_SetConfig+0xb8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_Base_SetConfig+0x62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003020:	d007      	beq.n	8003032 <TIM_Base_SetConfig+0x62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a19      	ldr	r2, [pc, #100]	@ (800308c <TIM_Base_SetConfig+0xbc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_Base_SetConfig+0x62>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <TIM_Base_SetConfig+0xc0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d108      	bne.n	8003044 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a07      	ldr	r2, [pc, #28]	@ (8003088 <TIM_Base_SetConfig+0xb8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d103      	bne.n	8003078 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	615a      	str	r2, [r3, #20]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800

08003094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e042      	b.n	8003150 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fdaa 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	@ 0x24
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f82b 	bl	8003158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003192:	f023 030c 	bic.w	r3, r3, #12
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	430b      	orrs	r3, r1
 800319e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	@ (800326c <UART_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d103      	bne.n	80031c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7ff fcce 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	e002      	b.n	80031ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7ff fcb6 	bl	8002b38 <HAL_RCC_GetPCLK1Freq>
 80031cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	4a22      	ldr	r2, [pc, #136]	@ (8003270 <UART_SetConfig+0x118>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	0119      	lsls	r1, r3, #4
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	4b1a      	ldr	r3, [pc, #104]	@ (8003270 <UART_SetConfig+0x118>)
 8003206:	fba3 0302 	umull	r0, r3, r3, r2
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2064      	movs	r0, #100	@ 0x64
 800320e:	fb00 f303 	mul.w	r3, r0, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	3332      	adds	r3, #50	@ 0x32
 8003218:	4a15      	ldr	r2, [pc, #84]	@ (8003270 <UART_SetConfig+0x118>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003224:	4419      	add	r1, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fbb2 f2f3 	udiv	r2, r2, r3
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <UART_SetConfig+0x118>)
 800323e:	fba3 0302 	umull	r0, r3, r3, r2
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2064      	movs	r0, #100	@ 0x64
 8003246:	fb00 f303 	mul.w	r3, r0, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	3332      	adds	r3, #50	@ 0x32
 8003250:	4a07      	ldr	r2, [pc, #28]	@ (8003270 <UART_SetConfig+0x118>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	f003 020f 	and.w	r2, r3, #15
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	440a      	add	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40013800 	.word	0x40013800
 8003270:	51eb851f 	.word	0x51eb851f

08003274 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800327a:	f3ef 8305 	mrs	r3, IPSR
 800327e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003280:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10f      	bne.n	80032a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003286:	f3ef 8310 	mrs	r3, PRIMASK
 800328a:	607b      	str	r3, [r7, #4]
  return(result);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <osKernelInitialize+0x32>
 8003292:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <osKernelInitialize+0x60>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d109      	bne.n	80032ae <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800329a:	f3ef 8311 	mrs	r3, BASEPRI
 800329e:	603b      	str	r3, [r7, #0]
  return(result);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80032a6:	f06f 0305 	mvn.w	r3, #5
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e00c      	b.n	80032c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <osKernelInitialize+0x60>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80032b6:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <osKernelInitialize+0x60>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e002      	b.n	80032c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032c8:	68fb      	ldr	r3, [r7, #12]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr
 80032d4:	20000198 	.word	0x20000198

080032d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032de:	f3ef 8305 	mrs	r3, IPSR
 80032e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80032e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10f      	bne.n	800330a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ea:	f3ef 8310 	mrs	r3, PRIMASK
 80032ee:	607b      	str	r3, [r7, #4]
  return(result);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <osKernelStart+0x32>
 80032f6:	4b11      	ldr	r3, [pc, #68]	@ (800333c <osKernelStart+0x64>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d109      	bne.n	8003312 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003302:	603b      	str	r3, [r7, #0]
  return(result);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <osKernelStart+0x3a>
    stat = osErrorISR;
 800330a:	f06f 0305 	mvn.w	r3, #5
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e00e      	b.n	8003330 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003312:	4b0a      	ldr	r3, [pc, #40]	@ (800333c <osKernelStart+0x64>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d107      	bne.n	800332a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <osKernelStart+0x64>)
 800331c:	2202      	movs	r2, #2
 800331e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003320:	f001 fc10 	bl	8004b44 <vTaskStartScheduler>
      stat = osOK;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e002      	b.n	8003330 <osKernelStart+0x58>
    } else {
      stat = osError;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003330:	68fb      	ldr	r3, [r7, #12]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000198 	.word	0x20000198

08003340 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b092      	sub	sp, #72	@ 0x48
 8003344:	af04      	add	r7, sp, #16
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003350:	f3ef 8305 	mrs	r3, IPSR
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003358:	2b00      	cmp	r3, #0
 800335a:	f040 8094 	bne.w	8003486 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335e:	f3ef 8310 	mrs	r3, PRIMASK
 8003362:	623b      	str	r3, [r7, #32]
  return(result);
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 808d 	bne.w	8003486 <osThreadNew+0x146>
 800336c:	4b48      	ldr	r3, [pc, #288]	@ (8003490 <osThreadNew+0x150>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d106      	bne.n	8003382 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003374:	f3ef 8311 	mrs	r3, BASEPRI
 8003378:	61fb      	str	r3, [r7, #28]
  return(result);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f040 8082 	bne.w	8003486 <osThreadNew+0x146>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d07e      	beq.n	8003486 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800338c:	2318      	movs	r3, #24
 800338e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003390:	2300      	movs	r3, #0
 8003392:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003394:	f107 031b 	add.w	r3, r7, #27
 8003398:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800339a:	f04f 33ff 	mov.w	r3, #4294967295
 800339e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d045      	beq.n	8003432 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <osThreadNew+0x74>
        name = attr->name;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <osThreadNew+0x9a>
 80033c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ca:	2b38      	cmp	r3, #56	@ 0x38
 80033cc:	d805      	bhi.n	80033da <osThreadNew+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <osThreadNew+0x9e>
        return (NULL);
 80033da:	2300      	movs	r3, #0
 80033dc:	e054      	b.n	8003488 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00e      	beq.n	8003414 <osThreadNew+0xd4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	2ba7      	cmp	r3, #167	@ 0xa7
 80033fc:	d90a      	bls.n	8003414 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <osThreadNew+0xd4>
        mem = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003412:	e010      	b.n	8003436 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10c      	bne.n	8003436 <osThreadNew+0xf6>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d108      	bne.n	8003436 <osThreadNew+0xf6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <osThreadNew+0xf6>
          mem = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003430:	e001      	b.n	8003436 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	2b01      	cmp	r3, #1
 800343a:	d110      	bne.n	800345e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003444:	9202      	str	r2, [sp, #8]
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003450:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f001 f98c 	bl	8004770 <xTaskCreateStatic>
 8003458:	4603      	mov	r3, r0
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e013      	b.n	8003486 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d110      	bne.n	8003486 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	b29a      	uxth	r2, r3
 8003468:	f107 0314 	add.w	r3, r7, #20
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f001 f9d9 	bl	800482e <xTaskCreate>
 800347c:	4603      	mov	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <osThreadNew+0x146>
          hTask = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003486:	697b      	ldr	r3, [r7, #20]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3738      	adds	r7, #56	@ 0x38
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000198 	.word	0x20000198

08003494 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800349c:	f3ef 8305 	mrs	r3, IPSR
 80034a0:	613b      	str	r3, [r7, #16]
  return(result);
 80034a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10f      	bne.n	80034c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a8:	f3ef 8310 	mrs	r3, PRIMASK
 80034ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <osDelay+0x34>
 80034b4:	4b0d      	ldr	r3, [pc, #52]	@ (80034ec <osDelay+0x58>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d109      	bne.n	80034d0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034bc:	f3ef 8311 	mrs	r3, BASEPRI
 80034c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <osDelay+0x3c>
    stat = osErrorISR;
 80034c8:	f06f 0305 	mvn.w	r3, #5
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e007      	b.n	80034e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 fafc 	bl	8004ad8 <vTaskDelay>
    }
  }

  return (stat);
 80034e0:	697b      	ldr	r3, [r7, #20]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000198 	.word	0x20000198

080034f0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	@ 0x28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fc:	f3ef 8305 	mrs	r3, IPSR
 8003500:	613b      	str	r3, [r7, #16]
  return(result);
 8003502:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 8085 	bne.w	8003614 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d17e      	bne.n	8003614 <osMutexNew+0x124>
 8003516:	4b42      	ldr	r3, [pc, #264]	@ (8003620 <osMutexNew+0x130>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d105      	bne.n	800352a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800351e:	f3ef 8311 	mrs	r3, BASEPRI
 8003522:	60bb      	str	r3, [r7, #8]
  return(result);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d174      	bne.n	8003614 <osMutexNew+0x124>
    if (attr != NULL) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <osMutexNew+0x48>
      type = attr->attr_bits;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	e001      	b.n	800353c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <osMutexNew+0x5c>
      rmtx = 1U;
 8003546:	2301      	movs	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	e001      	b.n	8003550 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d15c      	bne.n	8003614 <osMutexNew+0x124>
      mem = -1;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d015      	beq.n	8003592 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <osMutexNew+0x8c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b4f      	cmp	r3, #79	@ 0x4f
 8003574:	d902      	bls.n	800357c <osMutexNew+0x8c>
          mem = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e00c      	b.n	8003596 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d108      	bne.n	8003596 <osMutexNew+0xa6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <osMutexNew+0xa6>
            mem = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e001      	b.n	8003596 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d112      	bne.n	80035c2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d007      	beq.n	80035b2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	4619      	mov	r1, r3
 80035a8:	2004      	movs	r0, #4
 80035aa:	f000 fb45 	bl	8003c38 <xQueueCreateMutexStatic>
 80035ae:	6278      	str	r0, [r7, #36]	@ 0x24
 80035b0:	e016      	b.n	80035e0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4619      	mov	r1, r3
 80035b8:	2001      	movs	r0, #1
 80035ba:	f000 fb3d 	bl	8003c38 <xQueueCreateMutexStatic>
 80035be:	6278      	str	r0, [r7, #36]	@ 0x24
 80035c0:	e00e      	b.n	80035e0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80035ce:	2004      	movs	r0, #4
 80035d0:	f000 fb1a 	bl	8003c08 <xQueueCreateMutex>
 80035d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80035d6:	e003      	b.n	80035e0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80035d8:	2001      	movs	r0, #1
 80035da:	f000 fb15 	bl	8003c08 <xQueueCreateMutex>
 80035de:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00c      	beq.n	8003600 <osMutexNew+0x110>
        if (attr != NULL) {
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <osMutexNew+0x104>
          name = attr->name;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e001      	b.n	80035f8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80035f8:	6979      	ldr	r1, [r7, #20]
 80035fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035fc:	f001 f85c 	bl	80046b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <osMutexNew+0x124>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003616:	4618      	mov	r0, r3
 8003618:	3728      	adds	r7, #40	@ 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000198 	.word	0x20000198

08003624 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003642:	f3ef 8305 	mrs	r3, IPSR
 8003646:	613b      	str	r3, [r7, #16]
  return(result);
 8003648:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364e:	f3ef 8310 	mrs	r3, PRIMASK
 8003652:	60fb      	str	r3, [r7, #12]
  return(result);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <osMutexAcquire+0x4a>
 800365a:	4b20      	ldr	r3, [pc, #128]	@ (80036dc <osMutexAcquire+0xb8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d109      	bne.n	8003676 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003662:	f3ef 8311 	mrs	r3, BASEPRI
 8003666:	60bb      	str	r3, [r7, #8]
  return(result);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800366e:	f06f 0305 	mvn.w	r3, #5
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e02c      	b.n	80036d0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800367c:	f06f 0303 	mvn.w	r3, #3
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e025      	b.n	80036d0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800368a:	6839      	ldr	r1, [r7, #0]
 800368c:	69b8      	ldr	r0, [r7, #24]
 800368e:	f000 fb23 	bl	8003cd8 <xQueueTakeMutexRecursive>
 8003692:	4603      	mov	r3, r0
 8003694:	2b01      	cmp	r3, #1
 8003696:	d01b      	beq.n	80036d0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800369e:	f06f 0301 	mvn.w	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e014      	b.n	80036d0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80036a6:	f06f 0302 	mvn.w	r3, #2
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	e010      	b.n	80036d0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	69b8      	ldr	r0, [r7, #24]
 80036b2:	f000 fdc9 	bl	8004248 <xQueueSemaphoreTake>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d009      	beq.n	80036d0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80036c2:	f06f 0301 	mvn.w	r3, #1
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e002      	b.n	80036d0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80036ca:	f06f 0302 	mvn.w	r3, #2
 80036ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80036d0:	69fb      	ldr	r3, [r7, #28]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000198 	.word	0x20000198

080036e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036fc:	f3ef 8305 	mrs	r3, IPSR
 8003700:	613b      	str	r3, [r7, #16]
  return(result);
 8003702:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10f      	bne.n	8003728 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	60fb      	str	r3, [r7, #12]
  return(result);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d109      	bne.n	8003728 <osMutexRelease+0x48>
 8003714:	4b19      	ldr	r3, [pc, #100]	@ (800377c <osMutexRelease+0x9c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d109      	bne.n	8003730 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800371c:	f3ef 8311 	mrs	r3, BASEPRI
 8003720:	60bb      	str	r3, [r7, #8]
  return(result);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003728:	f06f 0305 	mvn.w	r3, #5
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e01f      	b.n	8003770 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8003736:	f06f 0303 	mvn.w	r3, #3
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	e018      	b.n	8003770 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003744:	69b8      	ldr	r0, [r7, #24]
 8003746:	f000 fa92 	bl	8003c6e <xQueueGiveMutexRecursive>
 800374a:	4603      	mov	r3, r0
 800374c:	2b01      	cmp	r3, #1
 800374e:	d00f      	beq.n	8003770 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003750:	f06f 0302 	mvn.w	r3, #2
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e00b      	b.n	8003770 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003758:	2300      	movs	r3, #0
 800375a:	2200      	movs	r2, #0
 800375c:	2100      	movs	r1, #0
 800375e:	69b8      	ldr	r0, [r7, #24]
 8003760:	f000 faf2 	bl	8003d48 <xQueueGenericSend>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d002      	beq.n	8003770 <osMutexRelease+0x90>
        stat = osErrorResource;
 800376a:	f06f 0302 	mvn.w	r3, #2
 800376e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8003770:	69fb      	ldr	r3, [r7, #28]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000198 	.word	0x20000198

08003780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a06      	ldr	r2, [pc, #24]	@ (80037a8 <vApplicationGetIdleTaskMemory+0x28>)
 8003790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a05      	ldr	r2, [pc, #20]	@ (80037ac <vApplicationGetIdleTaskMemory+0x2c>)
 8003796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	2000019c 	.word	0x2000019c
 80037ac:	20000244 	.word	0x20000244

080037b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a07      	ldr	r2, [pc, #28]	@ (80037dc <vApplicationGetTimerTaskMemory+0x2c>)
 80037c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a06      	ldr	r2, [pc, #24]	@ (80037e0 <vApplicationGetTimerTaskMemory+0x30>)
 80037c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ce:	601a      	str	r2, [r3, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000444 	.word	0x20000444
 80037e0:	200004ec 	.word	0x200004ec

080037e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f103 0208 	add.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f103 0208 	add.w	r2, r3, #8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f103 0208 	add.w	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800383a:	b480      	push	{r7}
 800383c:	b085      	sub	sp, #20
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d103      	bne.n	80038a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e00c      	b.n	80038ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3308      	adds	r3, #8
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e002      	b.n	80038ae <vListInsert+0x2e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d2f6      	bcs.n	80038a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6852      	ldr	r2, [r2, #4]
 8003910:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d103      	bne.n	8003924 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
	...

08003944 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003970:	f002 fb5c 	bl	800602c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003980:	fb01 f303 	mul.w	r3, r1, r3
 8003984:	441a      	add	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	3b01      	subs	r3, #1
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	441a      	add	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	22ff      	movs	r2, #255	@ 0xff
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	22ff      	movs	r2, #255	@ 0xff
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d114      	bne.n	80039f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01a      	beq.n	8003a04 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3310      	adds	r3, #16
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fb56 	bl	8005084 <xTaskRemoveFromEventList>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d012      	beq.n	8003a04 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039de:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <xQueueGenericReset+0xd0>)
 80039e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	e009      	b.n	8003a04 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3310      	adds	r3, #16
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fef5 	bl	80037e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3324      	adds	r3, #36	@ 0x24
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fef0 	bl	80037e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a04:	f002 fb42 	bl	800608c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a08:	2301      	movs	r3, #1
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000ed04 	.word	0xe000ed04

08003a18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	@ 0x38
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10b      	bne.n	8003a62 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	e7fd      	b.n	8003a5e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <xQueueGenericCreateStatic+0x56>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <xQueueGenericCreateStatic+0x5a>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <xQueueGenericCreateStatic+0x5c>
 8003a72:	2300      	movs	r3, #0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	623b      	str	r3, [r7, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <xQueueGenericCreateStatic+0x84>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <xQueueGenericCreateStatic+0x88>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <xQueueGenericCreateStatic+0x8a>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	61fb      	str	r3, [r7, #28]
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	e7fd      	b.n	8003aba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003abe:	2350      	movs	r3, #80	@ 0x50
 8003ac0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b50      	cmp	r3, #80	@ 0x50
 8003ac6:	d00b      	beq.n	8003ae0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61bb      	str	r3, [r7, #24]
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003af2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f844 	bl	8003b8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3730      	adds	r7, #48	@ 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <xQueueGenericCreate+0x2c>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	613b      	str	r3, [r7, #16]
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e004      	b.n	8003b52 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	fb02 f303 	mul.w	r3, r2, r3
 8003b50:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3350      	adds	r3, #80	@ 0x50
 8003b56:	4618      	mov	r0, r3
 8003b58:	f002 fb6a 	bl	8006230 <pvPortMalloc>
 8003b5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00f      	beq.n	8003b84 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	3350      	adds	r3, #80	@ 0x50
 8003b68:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b72:	79fa      	ldrb	r2, [r7, #7]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f805 	bl	8003b8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b84:	69bb      	ldr	r3, [r7, #24]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	e002      	b.n	8003bb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	69b8      	ldr	r0, [r7, #24]
 8003bc0:	f7ff fec0 	bl	8003944 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00e      	beq.n	8003c00 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8a4 	bl	8003d48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c12:	2301      	movs	r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6939      	ldr	r1, [r7, #16]
 8003c20:	6978      	ldr	r0, [r7, #20]
 8003c22:	f7ff ff75 	bl	8003b10 <xQueueGenericCreate>
 8003c26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff ffd3 	bl	8003bd4 <prvInitialiseMutex>

		return pxNewQueue;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
	}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	6939      	ldr	r1, [r7, #16]
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f7ff fede 	bl	8003a18 <xQueueGenericCreateStatic>
 8003c5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f7ff ffb8 	bl	8003bd4 <prvInitialiseMutex>

		return pxNewQueue;
 8003c64:	68fb      	ldr	r3, [r7, #12]
	}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003c6e:	b590      	push	{r4, r7, lr}
 8003c70:	b087      	sub	sp, #28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	685c      	ldr	r4, [r3, #4]
 8003c9c:	f001 fbbe 	bl	800541c <xTaskGetCurrentTaskHandle>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	429c      	cmp	r4, r3
 8003ca4:	d111      	bne.n	8003cca <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	1e5a      	subs	r2, r3, #1
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6938      	ldr	r0, [r7, #16]
 8003cc0:	f000 f842 	bl	8003d48 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e001      	b.n	8003cce <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003cce:	697b      	ldr	r3, [r7, #20]
	}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd90      	pop	{r4, r7, pc}

08003cd8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	60fb      	str	r3, [r7, #12]
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	e7fd      	b.n	8003d00 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	685c      	ldr	r4, [r3, #4]
 8003d08:	f001 fb88 	bl	800541c <xTaskGetCurrentTaskHandle>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	429c      	cmp	r4, r3
 8003d10:	d107      	bne.n	8003d22 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e00c      	b.n	8003d3c <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8003d22:	6839      	ldr	r1, [r7, #0]
 8003d24:	6938      	ldr	r0, [r7, #16]
 8003d26:	f000 fa8f 	bl	8004248 <xQueueSemaphoreTake>
 8003d2a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8003d3c:	697b      	ldr	r3, [r7, #20]
	}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd90      	pop	{r4, r7, pc}
	...

08003d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	@ 0x38
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <xQueueGenericSend+0x34>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <xQueueGenericSend+0x42>
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <xQueueGenericSend+0x46>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <xQueueGenericSend+0x48>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xQueueGenericSend+0x64>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d103      	bne.n	8003dba <xQueueGenericSend+0x72>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <xQueueGenericSend+0x76>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <xQueueGenericSend+0x78>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <xQueueGenericSend+0x94>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	623b      	str	r3, [r7, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	e7fd      	b.n	8003dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ddc:	f001 fb2c 	bl	8005438 <xTaskGetSchedulerState>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <xQueueGenericSend+0xa4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <xQueueGenericSend+0xa8>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <xQueueGenericSend+0xaa>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	61fb      	str	r3, [r7, #28]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e0e:	f002 f90d 	bl	800602c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <xQueueGenericSend+0xdc>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d129      	bne.n	8003e78 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e2a:	f000 fb34 	bl	8004496 <prvCopyDataToQueue>
 8003e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d010      	beq.n	8003e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	3324      	adds	r3, #36	@ 0x24
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 f921 	bl	8005084 <xTaskRemoveFromEventList>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e48:	4b3f      	ldr	r3, [pc, #252]	@ (8003f48 <xQueueGenericSend+0x200>)
 8003e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	e00a      	b.n	8003e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e60:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <xQueueGenericSend+0x200>)
 8003e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e70:	f002 f90c 	bl	800608c <vPortExitCritical>
				return pdPASS;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e063      	b.n	8003f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e7e:	f002 f905 	bl	800608c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e05c      	b.n	8003f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f95b 	bl	800514c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e9a:	f002 f8f7 	bl	800608c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e9e:	f000 fec1 	bl	8004c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ea2:	f002 f8c3 	bl	800602c <vPortEnterCritical>
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d103      	bne.n	8003ebc <xQueueGenericSend+0x174>
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d103      	bne.n	8003ed2 <xQueueGenericSend+0x18a>
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ed2:	f002 f8db 	bl	800608c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed6:	1d3a      	adds	r2, r7, #4
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f94a 	bl	8005178 <xTaskCheckForTimeOut>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d124      	bne.n	8003f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eec:	f000 fbcb 	bl	8004686 <prvIsQueueFull>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	3310      	adds	r3, #16
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 f86e 	bl	8004fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f06:	f000 fb56 	bl	80045b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f0a:	f000 fe99 	bl	8004c40 <xTaskResumeAll>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f af7c 	bne.w	8003e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f16:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <xQueueGenericSend+0x200>)
 8003f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	e772      	b.n	8003e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f2a:	f000 fb44 	bl	80045b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f2e:	f000 fe87 	bl	8004c40 <xTaskResumeAll>
 8003f32:	e76c      	b.n	8003e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f36:	f000 fb3e 	bl	80045b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f3a:	f000 fe81 	bl	8004c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f3e:	2300      	movs	r3, #0
		}
	}
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3738      	adds	r7, #56	@ 0x38
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08e      	sub	sp, #56	@ 0x38
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <xQueueGenericSendFromISR+0x3e>
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <xQueueGenericSendFromISR+0x42>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <xQueueGenericSendFromISR+0x44>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	623b      	str	r3, [r7, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d103      	bne.n	8003fba <xQueueGenericSendFromISR+0x6e>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <xQueueGenericSendFromISR+0x72>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueGenericSendFromISR+0x74>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	61fb      	str	r3, [r7, #28]
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fdc:	f002 f8e8 	bl	80061b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	61ba      	str	r2, [r7, #24]
 8003ff6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <xQueueGenericSendFromISR+0xc2>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d12c      	bne.n	8004068 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004014:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800401e:	f000 fa3a 	bl	8004496 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004022:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d112      	bne.n	8004052 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800402c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d016      	beq.n	8004062 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	3324      	adds	r3, #36	@ 0x24
 8004038:	4618      	mov	r0, r3
 800403a:	f001 f823 	bl	8005084 <xTaskRemoveFromEventList>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00e      	beq.n	8004062 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e007      	b.n	8004062 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004052:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004056:	3301      	adds	r3, #1
 8004058:	b2db      	uxtb	r3, r3
 800405a:	b25a      	sxtb	r2, r3
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004062:	2301      	movs	r3, #1
 8004064:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004066:	e001      	b.n	800406c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004068:	2300      	movs	r3, #0
 800406a:	637b      	str	r3, [r7, #52]	@ 0x34
 800406c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004076:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800407a:	4618      	mov	r0, r3
 800407c:	3738      	adds	r7, #56	@ 0x38
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	@ 0x30
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <xQueueReceive+0x32>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	623b      	str	r3, [r7, #32]
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <xQueueReceive+0x40>
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueReceive+0x44>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <xQueueReceive+0x46>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xQueueReceive+0x62>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61fb      	str	r3, [r7, #28]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040e6:	f001 f9a7 	bl	8005438 <xTaskGetSchedulerState>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <xQueueReceive+0x72>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <xQueueReceive+0x76>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <xQueueReceive+0x78>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <xQueueReceive+0x94>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	61bb      	str	r3, [r7, #24]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004118:	f001 ff88 	bl	800602c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01f      	beq.n	8004168 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800412c:	f000 fa1d 	bl	800456a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	1e5a      	subs	r2, r3, #1
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00f      	beq.n	8004160 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	3310      	adds	r3, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f000 ff9d 	bl	8005084 <xTaskRemoveFromEventList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004150:	4b3c      	ldr	r3, [pc, #240]	@ (8004244 <xQueueReceive+0x1c0>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004160:	f001 ff94 	bl	800608c <vPortExitCritical>
				return pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	e069      	b.n	800423c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800416e:	f001 ff8d 	bl	800608c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004172:	2300      	movs	r3, #0
 8004174:	e062      	b.n	800423c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800417c:	f107 0310 	add.w	r3, r7, #16
 8004180:	4618      	mov	r0, r3
 8004182:	f000 ffe3 	bl	800514c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800418a:	f001 ff7f 	bl	800608c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800418e:	f000 fd49 	bl	8004c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004192:	f001 ff4b 	bl	800602c <vPortEnterCritical>
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d103      	bne.n	80041ac <xQueueReceive+0x128>
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d103      	bne.n	80041c2 <xQueueReceive+0x13e>
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c2:	f001 ff63 	bl	800608c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c6:	1d3a      	adds	r2, r7, #4
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 ffd2 	bl	8005178 <xTaskCheckForTimeOut>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d123      	bne.n	8004222 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041dc:	f000 fa3d 	bl	800465a <prvIsQueueEmpty>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d017      	beq.n	8004216 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	3324      	adds	r3, #36	@ 0x24
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fef6 	bl	8004fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041f6:	f000 f9de 	bl	80045b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041fa:	f000 fd21 	bl	8004c40 <xTaskResumeAll>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d189      	bne.n	8004118 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004204:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <xQueueReceive+0x1c0>)
 8004206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	e780      	b.n	8004118 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004218:	f000 f9cd 	bl	80045b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800421c:	f000 fd10 	bl	8004c40 <xTaskResumeAll>
 8004220:	e77a      	b.n	8004118 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004224:	f000 f9c7 	bl	80045b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004228:	f000 fd0a 	bl	8004c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800422c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800422e:	f000 fa14 	bl	800465a <prvIsQueueEmpty>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	f43f af6f 	beq.w	8004118 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800423a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800423c:	4618      	mov	r0, r3
 800423e:	3730      	adds	r7, #48	@ 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08e      	sub	sp, #56	@ 0x38
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800425a:	2300      	movs	r3, #0
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	623b      	str	r3, [r7, #32]
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	61fb      	str	r3, [r7, #28]
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800429c:	f001 f8cc 	bl	8005438 <xTaskGetSchedulerState>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <xQueueSemaphoreTake+0x64>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <xQueueSemaphoreTake+0x68>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <xQueueSemaphoreTake+0x6a>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	61bb      	str	r3, [r7, #24]
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ce:	f001 fead 	bl	800602c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80042d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d024      	beq.n	8004328 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d104      	bne.n	80042f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80042ee:	f001 fa27 	bl	8005740 <pvTaskIncrementMutexHeldCount>
 80042f2:	4602      	mov	r2, r0
 80042f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00f      	beq.n	8004320 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004302:	3310      	adds	r3, #16
 8004304:	4618      	mov	r0, r3
 8004306:	f000 febd 	bl	8005084 <xTaskRemoveFromEventList>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004310:	4b54      	ldr	r3, [pc, #336]	@ (8004464 <xQueueSemaphoreTake+0x21c>)
 8004312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004320:	f001 feb4 	bl	800608c <vPortExitCritical>
				return pdPASS;
 8004324:	2301      	movs	r3, #1
 8004326:	e098      	b.n	800445a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d112      	bne.n	8004354 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800432e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	617b      	str	r3, [r7, #20]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800434c:	f001 fe9e 	bl	800608c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004350:	2300      	movs	r3, #0
 8004352:	e082      	b.n	800445a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800435a:	f107 030c 	add.w	r3, r7, #12
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fef4 	bl	800514c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004364:	2301      	movs	r3, #1
 8004366:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004368:	f001 fe90 	bl	800608c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800436c:	f000 fc5a 	bl	8004c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004370:	f001 fe5c 	bl	800602c <vPortEnterCritical>
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800437a:	b25b      	sxtb	r3, r3
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d103      	bne.n	800438a <xQueueSemaphoreTake+0x142>
 8004382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800438a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004390:	b25b      	sxtb	r3, r3
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d103      	bne.n	80043a0 <xQueueSemaphoreTake+0x158>
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043a0:	f001 fe74 	bl	800608c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043a4:	463a      	mov	r2, r7
 80043a6:	f107 030c 	add.w	r3, r7, #12
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fee3 	bl	8005178 <xTaskCheckForTimeOut>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d132      	bne.n	800441e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043ba:	f000 f94e 	bl	800465a <prvIsQueueEmpty>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d026      	beq.n	8004412 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80043cc:	f001 fe2e 	bl	800602c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80043d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 f84d 	bl	8005474 <xTaskPriorityInherit>
 80043da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80043dc:	f001 fe56 	bl	800608c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	3324      	adds	r3, #36	@ 0x24
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fdf9 	bl	8004fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043f0:	f000 f8e1 	bl	80045b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043f4:	f000 fc24 	bl	8004c40 <xTaskResumeAll>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f47f af67 	bne.w	80042ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004400:	4b18      	ldr	r3, [pc, #96]	@ (8004464 <xQueueSemaphoreTake+0x21c>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	e75d      	b.n	80042ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004412:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004414:	f000 f8cf 	bl	80045b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004418:	f000 fc12 	bl	8004c40 <xTaskResumeAll>
 800441c:	e757      	b.n	80042ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800441e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004420:	f000 f8c9 	bl	80045b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004424:	f000 fc0c 	bl	8004c40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004428:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800442a:	f000 f916 	bl	800465a <prvIsQueueEmpty>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f43f af4c 	beq.w	80042ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800443c:	f001 fdf6 	bl	800602c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004440:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004442:	f000 f811 	bl	8004468 <prvGetDisinheritPriorityAfterTimeout>
 8004446:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800444e:	4618      	mov	r0, r3
 8004450:	f001 f8ee 	bl	8005630 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004454:	f001 fe1a 	bl	800608c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004458:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800445a:	4618      	mov	r0, r3
 800445c:	3738      	adds	r7, #56	@ 0x38
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e001      	b.n	800448a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800448a:	68fb      	ldr	r3, [r7, #12]
	}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d14d      	bne.n	8004558 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 f845 	bl	8005550 <xTaskPriorityDisinherit>
 80044c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	e043      	b.n	8004558 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d119      	bne.n	800450a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6898      	ldr	r0, [r3, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	461a      	mov	r2, r3
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	f002 fb4c 	bl	8006b7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	441a      	add	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d32b      	bcc.n	8004558 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	e026      	b.n	8004558 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	68d8      	ldr	r0, [r3, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	461a      	mov	r2, r3
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	f002 fb32 	bl	8006b7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	425b      	negs	r3, r3
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d207      	bcs.n	8004546 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	425b      	negs	r3, r3
 8004540:	441a      	add	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d105      	bne.n	8004558 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	3b01      	subs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004560:	697b      	ldr	r3, [r7, #20]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d018      	beq.n	80045ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d303      	bcc.n	800459e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68d9      	ldr	r1, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	461a      	mov	r2, r3
 80045a8:	6838      	ldr	r0, [r7, #0]
 80045aa:	f002 fae8 	bl	8006b7e <memcpy>
	}
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045be:	f001 fd35 	bl	800602c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045ca:	e011      	b.n	80045f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3324      	adds	r3, #36	@ 0x24
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fd53 	bl	8005084 <xTaskRemoveFromEventList>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80045e4:	f000 fe2c 	bl	8005240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	dce9      	bgt.n	80045cc <prvUnlockQueue+0x16>
 80045f8:	e000      	b.n	80045fc <prvUnlockQueue+0x46>
					break;
 80045fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	22ff      	movs	r2, #255	@ 0xff
 8004600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004604:	f001 fd42 	bl	800608c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004608:	f001 fd10 	bl	800602c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004612:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004614:	e011      	b.n	800463a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d012      	beq.n	8004644 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3310      	adds	r3, #16
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fd2e 	bl	8005084 <xTaskRemoveFromEventList>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800462e:	f000 fe07 	bl	8005240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004632:	7bbb      	ldrb	r3, [r7, #14]
 8004634:	3b01      	subs	r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800463a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800463e:	2b00      	cmp	r3, #0
 8004640:	dce9      	bgt.n	8004616 <prvUnlockQueue+0x60>
 8004642:	e000      	b.n	8004646 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004644:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	22ff      	movs	r2, #255	@ 0xff
 800464a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800464e:	f001 fd1d 	bl	800608c <vPortExitCritical>
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004662:	f001 fce3 	bl	800602c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d102      	bne.n	8004674 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800466e:	2301      	movs	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e001      	b.n	8004678 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004678:	f001 fd08 	bl	800608c <vPortExitCritical>

	return xReturn;
 800467c:	68fb      	ldr	r3, [r7, #12]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800468e:	f001 fccd 	bl	800602c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	429a      	cmp	r2, r3
 800469c:	d102      	bne.n	80046a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800469e:	2301      	movs	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e001      	b.n	80046a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046a8:	f001 fcf0 	bl	800608c <vPortExitCritical>

	return xReturn;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e014      	b.n	80046f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004704 <vQueueAddToRegistry+0x4c>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046d4:	490b      	ldr	r1, [pc, #44]	@ (8004704 <vQueueAddToRegistry+0x4c>)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046de:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <vQueueAddToRegistry+0x4c>)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80046ea:	e006      	b.n	80046fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b07      	cmp	r3, #7
 80046f6:	d9e7      	bls.n	80046c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	200008ec 	.word	0x200008ec

08004708 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004718:	f001 fc88 	bl	800602c <vPortEnterCritical>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004722:	b25b      	sxtb	r3, r3
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d103      	bne.n	8004732 <vQueueWaitForMessageRestricted+0x2a>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004738:	b25b      	sxtb	r3, r3
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d103      	bne.n	8004748 <vQueueWaitForMessageRestricted+0x40>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004748:	f001 fca0 	bl	800608c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d106      	bne.n	8004762 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3324      	adds	r3, #36	@ 0x24
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fc65 	bl	800502c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004762:	6978      	ldr	r0, [r7, #20]
 8004764:	f7ff ff27 	bl	80045b6 <prvUnlockQueue>
	}
 8004768:	bf00      	nop
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	@ 0x38
 8004774:	af04      	add	r7, sp, #16
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800477e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	623b      	str	r3, [r7, #32]
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10b      	bne.n	80047ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	61fb      	str	r3, [r7, #28]
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	e7fd      	b.n	80047b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047ba:	23a8      	movs	r3, #168	@ 0xa8
 80047bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80047c2:	d00b      	beq.n	80047dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	61bb      	str	r3, [r7, #24]
}
 80047d6:	bf00      	nop
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01e      	beq.n	8004820 <xTaskCreateStatic+0xb0>
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d01b      	beq.n	8004820 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047fa:	2300      	movs	r3, #0
 80047fc:	9303      	str	r3, [sp, #12]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	9302      	str	r3, [sp, #8]
 8004802:	f107 0314 	add.w	r3, r7, #20
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f850 	bl	80048b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004818:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800481a:	f000 f8ed 	bl	80049f8 <prvAddNewTaskToReadyList>
 800481e:	e001      	b.n	8004824 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004824:	697b      	ldr	r3, [r7, #20]
	}
 8004826:	4618      	mov	r0, r3
 8004828:	3728      	adds	r7, #40	@ 0x28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800482e:	b580      	push	{r7, lr}
 8004830:	b08c      	sub	sp, #48	@ 0x30
 8004832:	af04      	add	r7, sp, #16
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f001 fcf4 	bl	8006230 <pvPortMalloc>
 8004848:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00e      	beq.n	800486e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004850:	20a8      	movs	r0, #168	@ 0xa8
 8004852:	f001 fced 	bl	8006230 <pvPortMalloc>
 8004856:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
 8004864:	e005      	b.n	8004872 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004866:	6978      	ldr	r0, [r7, #20]
 8004868:	f001 fdaa 	bl	80063c0 <vPortFree>
 800486c:	e001      	b.n	8004872 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d017      	beq.n	80048a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	2300      	movs	r3, #0
 8004884:	9303      	str	r3, [sp, #12]
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	9302      	str	r3, [sp, #8]
 800488a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f80e 	bl	80048b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800489c:	69f8      	ldr	r0, [r7, #28]
 800489e:	f000 f8ab 	bl	80049f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	e002      	b.n	80048ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048ae:	69bb      	ldr	r3, [r7, #24]
	}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	461a      	mov	r2, r3
 80048d0:	21a5      	movs	r1, #165	@ 0xa5
 80048d2:	f002 f883 	bl	80069dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048e0:	3b01      	subs	r3, #1
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f023 0307 	bic.w	r3, r3, #7
 80048ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	617b      	str	r3, [r7, #20]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	e012      	b.n	800493e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	7819      	ldrb	r1, [r3, #0]
 8004920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	3334      	adds	r3, #52	@ 0x34
 8004928:	460a      	mov	r2, r1
 800492a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d006      	beq.n	8004946 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3301      	adds	r3, #1
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d9e9      	bls.n	8004918 <prvInitialiseNewTask+0x60>
 8004944:	e000      	b.n	8004948 <prvInitialiseNewTask+0x90>
		{
			break;
 8004946:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004952:	2b37      	cmp	r3, #55	@ 0x37
 8004954:	d901      	bls.n	800495a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004956:	2337      	movs	r3, #55	@ 0x37
 8004958:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004964:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004968:	2200      	movs	r2, #0
 800496a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	3304      	adds	r3, #4
 8004970:	4618      	mov	r0, r3
 8004972:	f7fe ff56 	bl	8003822 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	3318      	adds	r3, #24
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe ff51 	bl	8003822 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004984:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800498c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004994:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004998:	2200      	movs	r2, #0
 800499a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800499e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	3354      	adds	r3, #84	@ 0x54
 80049aa:	224c      	movs	r2, #76	@ 0x4c
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f002 f814 	bl	80069dc <memset>
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	4a0d      	ldr	r2, [pc, #52]	@ (80049ec <prvInitialiseNewTask+0x134>)
 80049b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80049ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049bc:	4a0c      	ldr	r2, [pc, #48]	@ (80049f0 <prvInitialiseNewTask+0x138>)
 80049be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <prvInitialiseNewTask+0x13c>)
 80049c4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	69b8      	ldr	r0, [r7, #24]
 80049cc:	f001 fa40 	bl	8005e50 <pxPortInitialiseStack>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049e2:	bf00      	nop
 80049e4:	3720      	adds	r7, #32
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20001b78 	.word	0x20001b78
 80049f0:	20001be0 	.word	0x20001be0
 80049f4:	20001c48 	.word	0x20001c48

080049f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a00:	f001 fb14 	bl	800602c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a04:	4b2d      	ldr	r3, [pc, #180]	@ (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac0 <prvAddNewTaskToReadyList+0xc8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a16:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac0 <prvAddNewTaskToReadyList+0xc8>)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a1c:	4b27      	ldr	r3, [pc, #156]	@ (8004abc <prvAddNewTaskToReadyList+0xc4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d110      	bne.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a24:	f000 fc32 	bl	800528c <prvInitialiseTaskLists>
 8004a28:	e00d      	b.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a2a:	4b26      	ldr	r3, [pc, #152]	@ (8004ac4 <prvAddNewTaskToReadyList+0xcc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a32:	4b23      	ldr	r3, [pc, #140]	@ (8004ac0 <prvAddNewTaskToReadyList+0xc8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d802      	bhi.n	8004a46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac0 <prvAddNewTaskToReadyList+0xc8>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a46:	4b20      	ldr	r3, [pc, #128]	@ (8004ac8 <prvAddNewTaskToReadyList+0xd0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac8 <prvAddNewTaskToReadyList+0xd0>)
 8004a4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <prvAddNewTaskToReadyList+0xd0>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <prvAddNewTaskToReadyList+0xd4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d903      	bls.n	8004a6c <prvAddNewTaskToReadyList+0x74>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	4a18      	ldr	r2, [pc, #96]	@ (8004acc <prvAddNewTaskToReadyList+0xd4>)
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4a15      	ldr	r2, [pc, #84]	@ (8004ad0 <prvAddNewTaskToReadyList+0xd8>)
 8004a7a:	441a      	add	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fe fed9 	bl	800383a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a88:	f001 fb00 	bl	800608c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <prvAddNewTaskToReadyList+0xcc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a94:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <prvAddNewTaskToReadyList+0xc8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d207      	bcs.n	8004ab2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <prvAddNewTaskToReadyList+0xdc>)
 8004aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000e00 	.word	0x20000e00
 8004ac0:	2000092c 	.word	0x2000092c
 8004ac4:	20000e0c 	.word	0x20000e0c
 8004ac8:	20000e1c 	.word	0x20000e1c
 8004acc:	20000e08 	.word	0x20000e08
 8004ad0:	20000930 	.word	0x20000930
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004aea:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <vTaskDelay+0x64>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <vTaskDelay+0x32>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60bb      	str	r3, [r7, #8]
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	e7fd      	b.n	8004b06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b0a:	f000 f88b 	bl	8004c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b0e:	2100      	movs	r1, #0
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fe29 	bl	8005768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b16:	f000 f893 	bl	8004c40 <xTaskResumeAll>
 8004b1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d107      	bne.n	8004b32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004b22:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <vTaskDelay+0x68>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000e28 	.word	0x20000e28
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	@ 0x28
 8004b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b52:	463a      	mov	r2, r7
 8004b54:	1d39      	adds	r1, r7, #4
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fe10 	bl	8003780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	9202      	str	r2, [sp, #8]
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	460a      	mov	r2, r1
 8004b72:	4924      	ldr	r1, [pc, #144]	@ (8004c04 <vTaskStartScheduler+0xc0>)
 8004b74:	4824      	ldr	r0, [pc, #144]	@ (8004c08 <vTaskStartScheduler+0xc4>)
 8004b76:	f7ff fdfb 	bl	8004770 <xTaskCreateStatic>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4a23      	ldr	r2, [pc, #140]	@ (8004c0c <vTaskStartScheduler+0xc8>)
 8004b7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b80:	4b22      	ldr	r3, [pc, #136]	@ (8004c0c <vTaskStartScheduler+0xc8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e001      	b.n	8004b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d102      	bne.n	8004b9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b98:	f000 fe3a 	bl	8005810 <xTimerCreateTimerTask>
 8004b9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d11b      	bne.n	8004bdc <vTaskStartScheduler+0x98>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	613b      	str	r3, [r7, #16]
}
 8004bb6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bb8:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <vTaskStartScheduler+0xcc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3354      	adds	r3, #84	@ 0x54
 8004bbe:	4a15      	ldr	r2, [pc, #84]	@ (8004c14 <vTaskStartScheduler+0xd0>)
 8004bc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc2:	4b15      	ldr	r3, [pc, #84]	@ (8004c18 <vTaskStartScheduler+0xd4>)
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004bca:	4b14      	ldr	r3, [pc, #80]	@ (8004c1c <vTaskStartScheduler+0xd8>)
 8004bcc:	2201      	movs	r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004bd0:	4b13      	ldr	r3, [pc, #76]	@ (8004c20 <vTaskStartScheduler+0xdc>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004bd6:	f001 f9b7 	bl	8005f48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004bda:	e00f      	b.n	8004bfc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d10b      	bne.n	8004bfc <vTaskStartScheduler+0xb8>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	60fb      	str	r3, [r7, #12]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <vTaskStartScheduler+0xb4>
}
 8004bfc:	bf00      	nop
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	0800705c 	.word	0x0800705c
 8004c08:	08005259 	.word	0x08005259
 8004c0c:	20000e24 	.word	0x20000e24
 8004c10:	2000092c 	.word	0x2000092c
 8004c14:	2000001c 	.word	0x2000001c
 8004c18:	20000e20 	.word	0x20000e20
 8004c1c:	20000e0c 	.word	0x20000e0c
 8004c20:	20000e04 	.word	0x20000e04

08004c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004c28:	4b04      	ldr	r3, [pc, #16]	@ (8004c3c <vTaskSuspendAll+0x18>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	4a03      	ldr	r2, [pc, #12]	@ (8004c3c <vTaskSuspendAll+0x18>)
 8004c30:	6013      	str	r3, [r2, #0]
}
 8004c32:	bf00      	nop
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000e28 	.word	0x20000e28

08004c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c4e:	4b42      	ldr	r3, [pc, #264]	@ (8004d58 <xTaskResumeAll+0x118>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10b      	bne.n	8004c6e <xTaskResumeAll+0x2e>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	603b      	str	r3, [r7, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c6e:	f001 f9dd 	bl	800602c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c72:	4b39      	ldr	r3, [pc, #228]	@ (8004d58 <xTaskResumeAll+0x118>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4a37      	ldr	r2, [pc, #220]	@ (8004d58 <xTaskResumeAll+0x118>)
 8004c7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c7c:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <xTaskResumeAll+0x118>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d162      	bne.n	8004d4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c84:	4b35      	ldr	r3, [pc, #212]	@ (8004d5c <xTaskResumeAll+0x11c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05e      	beq.n	8004d4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c8c:	e02f      	b.n	8004cee <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c8e:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <xTaskResumeAll+0x120>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3318      	adds	r3, #24
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fe28 	bl	80038f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fe fe23 	bl	80038f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cae:	4b2d      	ldr	r3, [pc, #180]	@ (8004d64 <xTaskResumeAll+0x124>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d903      	bls.n	8004cbe <xTaskResumeAll+0x7e>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	4a2a      	ldr	r2, [pc, #168]	@ (8004d64 <xTaskResumeAll+0x124>)
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <xTaskResumeAll+0x128>)
 8004ccc:	441a      	add	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7fe fdb0 	bl	800383a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cde:	4b23      	ldr	r3, [pc, #140]	@ (8004d6c <xTaskResumeAll+0x12c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ce8:	4b21      	ldr	r3, [pc, #132]	@ (8004d70 <xTaskResumeAll+0x130>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cee:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <xTaskResumeAll+0x120>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1cb      	bne.n	8004c8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004cfc:	f000 fb6a 	bl	80053d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d00:	4b1c      	ldr	r3, [pc, #112]	@ (8004d74 <xTaskResumeAll+0x134>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d010      	beq.n	8004d2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d0c:	f000 f844 	bl	8004d98 <xTaskIncrementTick>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004d16:	4b16      	ldr	r3, [pc, #88]	@ (8004d70 <xTaskResumeAll+0x130>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f1      	bne.n	8004d0c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004d28:	4b12      	ldr	r3, [pc, #72]	@ (8004d74 <xTaskResumeAll+0x134>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d2e:	4b10      	ldr	r3, [pc, #64]	@ (8004d70 <xTaskResumeAll+0x130>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d36:	2301      	movs	r3, #1
 8004d38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <xTaskResumeAll+0x138>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d4a:	f001 f99f 	bl	800608c <vPortExitCritical>

	return xAlreadyYielded;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000e28 	.word	0x20000e28
 8004d5c:	20000e00 	.word	0x20000e00
 8004d60:	20000dc0 	.word	0x20000dc0
 8004d64:	20000e08 	.word	0x20000e08
 8004d68:	20000930 	.word	0x20000930
 8004d6c:	2000092c 	.word	0x2000092c
 8004d70:	20000e14 	.word	0x20000e14
 8004d74:	20000e10 	.word	0x20000e10
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d82:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <xTaskGetTickCount+0x18>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d88:	687b      	ldr	r3, [r7, #4]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	20000e04 	.word	0x20000e04

08004d98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004da2:	4b52      	ldr	r3, [pc, #328]	@ (8004eec <xTaskIncrementTick+0x154>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 808f 	bne.w	8004eca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004dac:	4b50      	ldr	r3, [pc, #320]	@ (8004ef0 <xTaskIncrementTick+0x158>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004db4:	4a4e      	ldr	r2, [pc, #312]	@ (8004ef0 <xTaskIncrementTick+0x158>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d121      	bne.n	8004e04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8004ef4 <xTaskIncrementTick+0x15c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	603b      	str	r3, [r7, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <xTaskIncrementTick+0x46>
 8004de2:	4b44      	ldr	r3, [pc, #272]	@ (8004ef4 <xTaskIncrementTick+0x15c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	4b43      	ldr	r3, [pc, #268]	@ (8004ef8 <xTaskIncrementTick+0x160>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a41      	ldr	r2, [pc, #260]	@ (8004ef4 <xTaskIncrementTick+0x15c>)
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4a41      	ldr	r2, [pc, #260]	@ (8004ef8 <xTaskIncrementTick+0x160>)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b41      	ldr	r3, [pc, #260]	@ (8004efc <xTaskIncrementTick+0x164>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8004efc <xTaskIncrementTick+0x164>)
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	f000 fae8 	bl	80053d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e04:	4b3e      	ldr	r3, [pc, #248]	@ (8004f00 <xTaskIncrementTick+0x168>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d34e      	bcc.n	8004eac <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e0e:	4b39      	ldr	r3, [pc, #228]	@ (8004ef4 <xTaskIncrementTick+0x15c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <xTaskIncrementTick+0x84>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <xTaskIncrementTick+0x86>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e22:	4b37      	ldr	r3, [pc, #220]	@ (8004f00 <xTaskIncrementTick+0x168>)
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	601a      	str	r2, [r3, #0]
					break;
 8004e2a:	e03f      	b.n	8004eac <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e2c:	4b31      	ldr	r3, [pc, #196]	@ (8004ef4 <xTaskIncrementTick+0x15c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d203      	bcs.n	8004e4c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e44:	4a2e      	ldr	r2, [pc, #184]	@ (8004f00 <xTaskIncrementTick+0x168>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
						break;
 8004e4a:	e02f      	b.n	8004eac <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe fd4d 	bl	80038f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3318      	adds	r3, #24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe fd44 	bl	80038f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e6c:	4b25      	ldr	r3, [pc, #148]	@ (8004f04 <xTaskIncrementTick+0x16c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <xTaskIncrementTick+0xe4>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	4a22      	ldr	r2, [pc, #136]	@ (8004f04 <xTaskIncrementTick+0x16c>)
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4a1f      	ldr	r2, [pc, #124]	@ (8004f08 <xTaskIncrementTick+0x170>)
 8004e8a:	441a      	add	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7fe fcd1 	bl	800383a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <xTaskIncrementTick+0x174>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d3b3      	bcc.n	8004e0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eaa:	e7b0      	b.n	8004e0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004eac:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <xTaskIncrementTick+0x174>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb2:	4915      	ldr	r1, [pc, #84]	@ (8004f08 <xTaskIncrementTick+0x170>)
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d907      	bls.n	8004ed4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e004      	b.n	8004ed4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004eca:	4b11      	ldr	r3, [pc, #68]	@ (8004f10 <xTaskIncrementTick+0x178>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8004f10 <xTaskIncrementTick+0x178>)
 8004ed2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <xTaskIncrementTick+0x17c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ee0:	697b      	ldr	r3, [r7, #20]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000e28 	.word	0x20000e28
 8004ef0:	20000e04 	.word	0x20000e04
 8004ef4:	20000db8 	.word	0x20000db8
 8004ef8:	20000dbc 	.word	0x20000dbc
 8004efc:	20000e18 	.word	0x20000e18
 8004f00:	20000e20 	.word	0x20000e20
 8004f04:	20000e08 	.word	0x20000e08
 8004f08:	20000930 	.word	0x20000930
 8004f0c:	2000092c 	.word	0x2000092c
 8004f10:	20000e10 	.word	0x20000e10
 8004f14:	20000e14 	.word	0x20000e14

08004f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <vTaskSwitchContext+0xb0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f26:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <vTaskSwitchContext+0xb4>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f2c:	e047      	b.n	8004fbe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <vTaskSwitchContext+0xb4>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f34:	4b26      	ldr	r3, [pc, #152]	@ (8004fd0 <vTaskSwitchContext+0xb8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e011      	b.n	8004f60 <vTaskSwitchContext+0x48>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <vTaskSwitchContext+0x42>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <vTaskSwitchContext+0x3e>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	491c      	ldr	r1, [pc, #112]	@ (8004fd4 <vTaskSwitchContext+0xbc>)
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0e3      	beq.n	8004f3c <vTaskSwitchContext+0x24>
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <vTaskSwitchContext+0xbc>)
 8004f80:	4413      	add	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	605a      	str	r2, [r3, #4]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3308      	adds	r3, #8
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d104      	bne.n	8004fa4 <vTaskSwitchContext+0x8c>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd8 <vTaskSwitchContext+0xc0>)
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4a08      	ldr	r2, [pc, #32]	@ (8004fd0 <vTaskSwitchContext+0xb8>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fb4:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <vTaskSwitchContext+0xc0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3354      	adds	r3, #84	@ 0x54
 8004fba:	4a08      	ldr	r2, [pc, #32]	@ (8004fdc <vTaskSwitchContext+0xc4>)
 8004fbc:	6013      	str	r3, [r2, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr
 8004fc8:	20000e28 	.word	0x20000e28
 8004fcc:	20000e14 	.word	0x20000e14
 8004fd0:	20000e08 	.word	0x20000e08
 8004fd4:	20000930 	.word	0x20000930
 8004fd8:	2000092c 	.word	0x2000092c
 8004fdc:	2000001c 	.word	0x2000001c

08004fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	60fb      	str	r3, [r7, #12]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005008:	4b07      	ldr	r3, [pc, #28]	@ (8005028 <vTaskPlaceOnEventList+0x48>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3318      	adds	r3, #24
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7fe fc35 	bl	8003880 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005016:	2101      	movs	r1, #1
 8005018:	6838      	ldr	r0, [r7, #0]
 800501a:	f000 fba5 	bl	8005768 <prvAddCurrentTaskToDelayedList>
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	2000092c 	.word	0x2000092c

0800502c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	617b      	str	r3, [r7, #20]
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	e7fd      	b.n	8005052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005056:	4b0a      	ldr	r3, [pc, #40]	@ (8005080 <vTaskPlaceOnEventListRestricted+0x54>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3318      	adds	r3, #24
 800505c:	4619      	mov	r1, r3
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7fe fbeb 	bl	800383a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
 800506e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	68b8      	ldr	r0, [r7, #8]
 8005074:	f000 fb78 	bl	8005768 <prvAddCurrentTaskToDelayedList>
	}
 8005078:	bf00      	nop
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	2000092c 	.word	0x2000092c

08005084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60fb      	str	r3, [r7, #12]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	3318      	adds	r3, #24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fc1a 	bl	80038f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005134 <xTaskRemoveFromEventList+0xb0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d11d      	bne.n	8005100 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	3304      	adds	r3, #4
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fe fc11 	bl	80038f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d2:	4b19      	ldr	r3, [pc, #100]	@ (8005138 <xTaskRemoveFromEventList+0xb4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d903      	bls.n	80050e2 <xTaskRemoveFromEventList+0x5e>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	4a16      	ldr	r2, [pc, #88]	@ (8005138 <xTaskRemoveFromEventList+0xb4>)
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4a13      	ldr	r2, [pc, #76]	@ (800513c <xTaskRemoveFromEventList+0xb8>)
 80050f0:	441a      	add	r2, r3
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f7fe fb9e 	bl	800383a <vListInsertEnd>
 80050fe:	e005      	b.n	800510c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	3318      	adds	r3, #24
 8005104:	4619      	mov	r1, r3
 8005106:	480e      	ldr	r0, [pc, #56]	@ (8005140 <xTaskRemoveFromEventList+0xbc>)
 8005108:	f7fe fb97 	bl	800383a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005110:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <xTaskRemoveFromEventList+0xc0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	429a      	cmp	r2, r3
 8005118:	d905      	bls.n	8005126 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800511a:	2301      	movs	r3, #1
 800511c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800511e:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <xTaskRemoveFromEventList+0xc4>)
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e001      	b.n	800512a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800512a:	697b      	ldr	r3, [r7, #20]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000e28 	.word	0x20000e28
 8005138:	20000e08 	.word	0x20000e08
 800513c:	20000930 	.word	0x20000930
 8005140:	20000dc0 	.word	0x20000dc0
 8005144:	2000092c 	.word	0x2000092c
 8005148:	20000e14 	.word	0x20000e14

0800514c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <vTaskInternalSetTimeOutState+0x24>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <vTaskInternalSetTimeOutState+0x28>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	605a      	str	r2, [r3, #4]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000e18 	.word	0x20000e18
 8005174:	20000e04 	.word	0x20000e04

08005178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	613b      	str	r3, [r7, #16]
}
 800519a:	bf00      	nop
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	60fb      	str	r3, [r7, #12]
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80051be:	f000 ff35 	bl	800602c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <xTaskCheckForTimeOut+0xc0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d102      	bne.n	80051e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	e023      	b.n	800522a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b15      	ldr	r3, [pc, #84]	@ (800523c <xTaskCheckForTimeOut+0xc4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d007      	beq.n	80051fe <xTaskCheckForTimeOut+0x86>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	e015      	b.n	800522a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	429a      	cmp	r2, r3
 8005206:	d20b      	bcs.n	8005220 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff ff99 	bl	800514c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	e004      	b.n	800522a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005226:	2301      	movs	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f000 ff2f 	bl	800608c <vPortExitCritical>

	return xReturn;
 800522e:	69fb      	ldr	r3, [r7, #28]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000e04 	.word	0x20000e04
 800523c:	20000e18 	.word	0x20000e18

08005240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005244:	4b03      	ldr	r3, [pc, #12]	@ (8005254 <vTaskMissedYield+0x14>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000e14 	.word	0x20000e14

08005258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005260:	f000 f854 	bl	800530c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005264:	4b07      	ldr	r3, [pc, #28]	@ (8005284 <prvIdleTask+0x2c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d907      	bls.n	800527c <prvIdleTask+0x24>
			{
				taskYIELD();
 800526c:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <prvIdleTask+0x30>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800527c:	f7fb f923 	bl	80004c6 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005280:	e7ee      	b.n	8005260 <prvIdleTask+0x8>
 8005282:	bf00      	nop
 8005284:	20000930 	.word	0x20000930
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	e00c      	b.n	80052b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4a12      	ldr	r2, [pc, #72]	@ (80052ec <prvInitialiseTaskLists+0x60>)
 80052a4:	4413      	add	r3, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe fa9c 	bl	80037e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	3301      	adds	r3, #1
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b37      	cmp	r3, #55	@ 0x37
 80052b6:	d9ef      	bls.n	8005298 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052b8:	480d      	ldr	r0, [pc, #52]	@ (80052f0 <prvInitialiseTaskLists+0x64>)
 80052ba:	f7fe fa93 	bl	80037e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052be:	480d      	ldr	r0, [pc, #52]	@ (80052f4 <prvInitialiseTaskLists+0x68>)
 80052c0:	f7fe fa90 	bl	80037e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052c4:	480c      	ldr	r0, [pc, #48]	@ (80052f8 <prvInitialiseTaskLists+0x6c>)
 80052c6:	f7fe fa8d 	bl	80037e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052ca:	480c      	ldr	r0, [pc, #48]	@ (80052fc <prvInitialiseTaskLists+0x70>)
 80052cc:	f7fe fa8a 	bl	80037e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052d0:	480b      	ldr	r0, [pc, #44]	@ (8005300 <prvInitialiseTaskLists+0x74>)
 80052d2:	f7fe fa87 	bl	80037e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <prvInitialiseTaskLists+0x78>)
 80052d8:	4a05      	ldr	r2, [pc, #20]	@ (80052f0 <prvInitialiseTaskLists+0x64>)
 80052da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <prvInitialiseTaskLists+0x7c>)
 80052de:	4a05      	ldr	r2, [pc, #20]	@ (80052f4 <prvInitialiseTaskLists+0x68>)
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000930 	.word	0x20000930
 80052f0:	20000d90 	.word	0x20000d90
 80052f4:	20000da4 	.word	0x20000da4
 80052f8:	20000dc0 	.word	0x20000dc0
 80052fc:	20000dd4 	.word	0x20000dd4
 8005300:	20000dec 	.word	0x20000dec
 8005304:	20000db8 	.word	0x20000db8
 8005308:	20000dbc 	.word	0x20000dbc

0800530c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005312:	e019      	b.n	8005348 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005314:	f000 fe8a 	bl	800602c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005318:	4b10      	ldr	r3, [pc, #64]	@ (800535c <prvCheckTasksWaitingTermination+0x50>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fae3 	bl	80038f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800532a:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <prvCheckTasksWaitingTermination+0x54>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	4a0b      	ldr	r2, [pc, #44]	@ (8005360 <prvCheckTasksWaitingTermination+0x54>)
 8005332:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <prvCheckTasksWaitingTermination+0x58>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3b01      	subs	r3, #1
 800533a:	4a0a      	ldr	r2, [pc, #40]	@ (8005364 <prvCheckTasksWaitingTermination+0x58>)
 800533c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800533e:	f000 fea5 	bl	800608c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f810 	bl	8005368 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005348:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <prvCheckTasksWaitingTermination+0x58>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e1      	bne.n	8005314 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000dd4 	.word	0x20000dd4
 8005360:	20000e00 	.word	0x20000e00
 8005364:	20000de8 	.word	0x20000de8

08005368 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3354      	adds	r3, #84	@ 0x54
 8005374:	4618      	mov	r0, r3
 8005376:	f001 fb49 	bl	8006a0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005380:	2b00      	cmp	r3, #0
 8005382:	d108      	bne.n	8005396 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	4618      	mov	r0, r3
 800538a:	f001 f819 	bl	80063c0 <vPortFree>
				vPortFree( pxTCB );
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 f816 	bl	80063c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005394:	e019      	b.n	80053ca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800539c:	2b01      	cmp	r3, #1
 800539e:	d103      	bne.n	80053a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 f80d 	bl	80063c0 <vPortFree>
	}
 80053a6:	e010      	b.n	80053ca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d00b      	beq.n	80053ca <prvDeleteTCB+0x62>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	60fb      	str	r3, [r7, #12]
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	e7fd      	b.n	80053c6 <prvDeleteTCB+0x5e>
	}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <prvResetNextTaskUnblockTime+0x40>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <prvResetNextTaskUnblockTime+0x14>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <prvResetNextTaskUnblockTime+0x16>
 80053e8:	2300      	movs	r3, #0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d004      	beq.n	80053f8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <prvResetNextTaskUnblockTime+0x44>)
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053f6:	e008      	b.n	800540a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053f8:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <prvResetNextTaskUnblockTime+0x40>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4a04      	ldr	r2, [pc, #16]	@ (8005418 <prvResetNextTaskUnblockTime+0x44>)
 8005408:	6013      	str	r3, [r2, #0]
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	20000db8 	.word	0x20000db8
 8005418:	20000e20 	.word	0x20000e20

0800541c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005422:	4b04      	ldr	r3, [pc, #16]	@ (8005434 <xTaskGetCurrentTaskHandle+0x18>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005428:	687b      	ldr	r3, [r7, #4]
	}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	2000092c 	.word	0x2000092c

08005438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800543e:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <xTaskGetSchedulerState+0x34>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005446:	2301      	movs	r3, #1
 8005448:	607b      	str	r3, [r7, #4]
 800544a:	e008      	b.n	800545e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800544c:	4b08      	ldr	r3, [pc, #32]	@ (8005470 <xTaskGetSchedulerState+0x38>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005454:	2302      	movs	r3, #2
 8005456:	607b      	str	r3, [r7, #4]
 8005458:	e001      	b.n	800545e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800545e:	687b      	ldr	r3, [r7, #4]
	}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000e0c 	.word	0x20000e0c
 8005470:	20000e28 	.word	0x20000e28

08005474 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d056      	beq.n	8005538 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800548e:	4b2d      	ldr	r3, [pc, #180]	@ (8005544 <xTaskPriorityInherit+0xd0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	429a      	cmp	r2, r3
 8005496:	d246      	bcs.n	8005526 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	db06      	blt.n	80054ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a0:	4b28      	ldr	r3, [pc, #160]	@ (8005544 <xTaskPriorityInherit+0xd0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	6959      	ldr	r1, [r3, #20]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4a22      	ldr	r2, [pc, #136]	@ (8005548 <xTaskPriorityInherit+0xd4>)
 80054c0:	4413      	add	r3, r2
 80054c2:	4299      	cmp	r1, r3
 80054c4:	d101      	bne.n	80054ca <xTaskPriorityInherit+0x56>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <xTaskPriorityInherit+0x58>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d022      	beq.n	8005516 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fa0b 	bl	80038f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80054da:	4b1a      	ldr	r3, [pc, #104]	@ (8005544 <xTaskPriorityInherit+0xd0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e8:	4b18      	ldr	r3, [pc, #96]	@ (800554c <xTaskPriorityInherit+0xd8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d903      	bls.n	80054f8 <xTaskPriorityInherit+0x84>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	4a15      	ldr	r2, [pc, #84]	@ (800554c <xTaskPriorityInherit+0xd8>)
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4a10      	ldr	r2, [pc, #64]	@ (8005548 <xTaskPriorityInherit+0xd4>)
 8005506:	441a      	add	r2, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f7fe f993 	bl	800383a <vListInsertEnd>
 8005514:	e004      	b.n	8005520 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005516:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <xTaskPriorityInherit+0xd0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005520:	2301      	movs	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e008      	b.n	8005538 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800552a:	4b06      	ldr	r3, [pc, #24]	@ (8005544 <xTaskPriorityInherit+0xd0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d201      	bcs.n	8005538 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005534:	2301      	movs	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005538:	68fb      	ldr	r3, [r7, #12]
	}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	2000092c 	.word	0x2000092c
 8005548:	20000930 	.word	0x20000930
 800554c:	20000e08 	.word	0x20000e08

08005550 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d058      	beq.n	8005618 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005566:	4b2f      	ldr	r3, [pc, #188]	@ (8005624 <xTaskPriorityDisinherit+0xd4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	429a      	cmp	r2, r3
 800556e:	d00b      	beq.n	8005588 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	60fb      	str	r3, [r7, #12]
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	e7fd      	b.n	8005584 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10b      	bne.n	80055a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60bb      	str	r3, [r7, #8]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d02c      	beq.n	8005618 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d128      	bne.n	8005618 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe f990 	bl	80038f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005628 <xTaskPriorityDisinherit+0xd8>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d903      	bls.n	80055f8 <xTaskPriorityDisinherit+0xa8>
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005628 <xTaskPriorityDisinherit+0xd8>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4a09      	ldr	r2, [pc, #36]	@ (800562c <xTaskPriorityDisinherit+0xdc>)
 8005606:	441a      	add	r2, r3
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fe f913 	bl	800383a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005614:	2301      	movs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005618:	697b      	ldr	r3, [r7, #20]
	}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	2000092c 	.word	0x2000092c
 8005628:	20000e08 	.word	0x20000e08
 800562c:	20000930 	.word	0x20000930

08005630 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800563e:	2301      	movs	r3, #1
 8005640:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d071      	beq.n	800572c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10b      	bne.n	8005668 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	60fb      	str	r3, [r7, #12]
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	e7fd      	b.n	8005664 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d902      	bls.n	8005678 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	e002      	b.n	800567e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	429a      	cmp	r2, r3
 8005686:	d051      	beq.n	800572c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	429a      	cmp	r2, r3
 8005690:	d14c      	bne.n	800572c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005692:	4b28      	ldr	r3, [pc, #160]	@ (8005734 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	429a      	cmp	r2, r3
 800569a:	d10b      	bne.n	80056b4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	60bb      	str	r3, [r7, #8]
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	db04      	blt.n	80056d2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	6959      	ldr	r1, [r3, #20]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4a15      	ldr	r2, [pc, #84]	@ (8005738 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80056e2:	4413      	add	r3, r2
 80056e4:	4299      	cmp	r1, r3
 80056e6:	d101      	bne.n	80056ec <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01c      	beq.n	800572c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe f8fa 	bl	80038f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005700:	4b0e      	ldr	r3, [pc, #56]	@ (800573c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d903      	bls.n	8005710 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	4a0b      	ldr	r2, [pc, #44]	@ (800573c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4a06      	ldr	r2, [pc, #24]	@ (8005738 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800571e:	441a      	add	r2, r3
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f7fe f887 	bl	800383a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800572c:	bf00      	nop
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2000092c 	.word	0x2000092c
 8005738:	20000930 	.word	0x20000930
 800573c:	20000e08 	.word	0x20000e08

08005740 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005744:	4b07      	ldr	r3, [pc, #28]	@ (8005764 <pvTaskIncrementMutexHeldCount+0x24>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800574c:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <pvTaskIncrementMutexHeldCount+0x24>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005752:	3201      	adds	r2, #1
 8005754:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005756:	4b03      	ldr	r3, [pc, #12]	@ (8005764 <pvTaskIncrementMutexHeldCount+0x24>)
 8005758:	681b      	ldr	r3, [r3, #0]
	}
 800575a:	4618      	mov	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	2000092c 	.word	0x2000092c

08005768 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005772:	4b21      	ldr	r3, [pc, #132]	@ (80057f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005778:	4b20      	ldr	r3, [pc, #128]	@ (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3304      	adds	r3, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe f8b6 	bl	80038f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578a:	d10a      	bne.n	80057a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d007      	beq.n	80057a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005792:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4819      	ldr	r0, [pc, #100]	@ (8005800 <prvAddCurrentTaskToDelayedList+0x98>)
 800579c:	f7fe f84d 	bl	800383a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057a0:	e026      	b.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4413      	add	r3, r2
 80057a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057aa:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d209      	bcs.n	80057ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b0f      	ldr	r3, [pc, #60]	@ (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7fe f85a 	bl	8003880 <vListInsert>
}
 80057cc:	e010      	b.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005808 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <prvAddCurrentTaskToDelayedList+0x94>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4619      	mov	r1, r3
 80057da:	4610      	mov	r0, r2
 80057dc:	f7fe f850 	bl	8003880 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057e0:	4b0a      	ldr	r3, [pc, #40]	@ (800580c <prvAddCurrentTaskToDelayedList+0xa4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d202      	bcs.n	80057f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057ea:	4a08      	ldr	r2, [pc, #32]	@ (800580c <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6013      	str	r3, [r2, #0]
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000e04 	.word	0x20000e04
 80057fc:	2000092c 	.word	0x2000092c
 8005800:	20000dec 	.word	0x20000dec
 8005804:	20000dbc 	.word	0x20000dbc
 8005808:	20000db8 	.word	0x20000db8
 800580c:	20000e20 	.word	0x20000e20

08005810 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	@ 0x28
 8005814:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800581a:	f000 fad9 	bl	8005dd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800581e:	4b1d      	ldr	r3, [pc, #116]	@ (8005894 <xTimerCreateTimerTask+0x84>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d021      	beq.n	800586a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800582e:	1d3a      	adds	r2, r7, #4
 8005830:	f107 0108 	add.w	r1, r7, #8
 8005834:	f107 030c 	add.w	r3, r7, #12
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd ffb9 	bl	80037b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	2302      	movs	r3, #2
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	2300      	movs	r3, #0
 800584e:	460a      	mov	r2, r1
 8005850:	4911      	ldr	r1, [pc, #68]	@ (8005898 <xTimerCreateTimerTask+0x88>)
 8005852:	4812      	ldr	r0, [pc, #72]	@ (800589c <xTimerCreateTimerTask+0x8c>)
 8005854:	f7fe ff8c 	bl	8004770 <xTaskCreateStatic>
 8005858:	4603      	mov	r3, r0
 800585a:	4a11      	ldr	r2, [pc, #68]	@ (80058a0 <xTimerCreateTimerTask+0x90>)
 800585c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800585e:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <xTimerCreateTimerTask+0x90>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005866:	2301      	movs	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	613b      	str	r3, [r7, #16]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005888:	697b      	ldr	r3, [r7, #20]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000e5c 	.word	0x20000e5c
 8005898:	08007064 	.word	0x08007064
 800589c:	080059c5 	.word	0x080059c5
 80058a0:	20000e60 	.word	0x20000e60

080058a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	@ 0x28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10b      	bne.n	80058d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	623b      	str	r3, [r7, #32]
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058d4:	4b19      	ldr	r3, [pc, #100]	@ (800593c <xTimerGenericCommand+0x98>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02a      	beq.n	8005932 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	dc18      	bgt.n	8005920 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058ee:	f7ff fda3 	bl	8005438 <xTaskGetSchedulerState>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d109      	bne.n	800590c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058f8:	4b10      	ldr	r3, [pc, #64]	@ (800593c <xTimerGenericCommand+0x98>)
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	f107 0110 	add.w	r1, r7, #16
 8005900:	2300      	movs	r3, #0
 8005902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005904:	f7fe fa20 	bl	8003d48 <xQueueGenericSend>
 8005908:	6278      	str	r0, [r7, #36]	@ 0x24
 800590a:	e012      	b.n	8005932 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800590c:	4b0b      	ldr	r3, [pc, #44]	@ (800593c <xTimerGenericCommand+0x98>)
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	f107 0110 	add.w	r1, r7, #16
 8005914:	2300      	movs	r3, #0
 8005916:	2200      	movs	r2, #0
 8005918:	f7fe fa16 	bl	8003d48 <xQueueGenericSend>
 800591c:	6278      	str	r0, [r7, #36]	@ 0x24
 800591e:	e008      	b.n	8005932 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005920:	4b06      	ldr	r3, [pc, #24]	@ (800593c <xTimerGenericCommand+0x98>)
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	f107 0110 	add.w	r1, r7, #16
 8005928:	2300      	movs	r3, #0
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	f7fe fb0e 	bl	8003f4c <xQueueGenericSendFromISR>
 8005930:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005934:	4618      	mov	r0, r3
 8005936:	3728      	adds	r7, #40	@ 0x28
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000e5c 	.word	0x20000e5c

08005940 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af02      	add	r7, sp, #8
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800594a:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <prvProcessExpiredTimer+0x80>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3304      	adds	r3, #4
 8005958:	4618      	mov	r0, r3
 800595a:	f7fd ffc9 	bl	80038f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d123      	bne.n	80059ae <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	18d1      	adds	r1, r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	f000 f8cc 	bl	8005b10 <prvInsertTimerInActiveList>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d017      	beq.n	80059ae <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800597e:	2300      	movs	r3, #0
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	2100      	movs	r1, #0
 8005988:	6978      	ldr	r0, [r7, #20]
 800598a:	f7ff ff8b 	bl	80058a4 <xTimerGenericCommand>
 800598e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	4798      	blx	r3
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000e54 	.word	0x20000e54

080059c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059cc:	f107 0308 	add.w	r3, r7, #8
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f859 	bl	8005a88 <prvGetNextExpireTime>
 80059d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4619      	mov	r1, r3
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f805 	bl	80059ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059e2:	f000 f8d7 	bl	8005b94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059e6:	bf00      	nop
 80059e8:	e7f0      	b.n	80059cc <prvTimerTask+0x8>
	...

080059ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059f6:	f7ff f915 	bl	8004c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059fa:	f107 0308 	add.w	r3, r7, #8
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f866 	bl	8005ad0 <prvSampleTimeNow>
 8005a04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d130      	bne.n	8005a6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <prvProcessTimerOrBlockTask+0x3c>
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d806      	bhi.n	8005a28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a1a:	f7ff f911 	bl	8004c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff ff8d 	bl	8005940 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a26:	e024      	b.n	8005a72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a2e:	4b13      	ldr	r3, [pc, #76]	@ (8005a7c <prvProcessTimerOrBlockTask+0x90>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a40:	4b0f      	ldr	r3, [pc, #60]	@ (8005a80 <prvProcessTimerOrBlockTask+0x94>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f7fe fe5b 	bl	8004708 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a52:	f7ff f8f5 	bl	8004c40 <xTaskResumeAll>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a5c:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <prvProcessTimerOrBlockTask+0x98>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
}
 8005a6c:	e001      	b.n	8005a72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a6e:	f7ff f8e7 	bl	8004c40 <xTaskResumeAll>
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000e58 	.word	0x20000e58
 8005a80:	20000e5c 	.word	0x20000e5c
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a90:	4b0e      	ldr	r3, [pc, #56]	@ (8005acc <prvGetNextExpireTime+0x44>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d105      	bne.n	8005aba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aae:	4b07      	ldr	r3, [pc, #28]	@ (8005acc <prvGetNextExpireTime+0x44>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e001      	b.n	8005abe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005abe:	68fb      	ldr	r3, [r7, #12]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000e54 	.word	0x20000e54

08005ad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ad8:	f7ff f950 	bl	8004d7c <xTaskGetTickCount>
 8005adc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ade:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <prvSampleTimeNow+0x3c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d205      	bcs.n	8005af4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ae8:	f000 f910 	bl	8005d0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e002      	b.n	8005afa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005afa:	4a04      	ldr	r2, [pc, #16]	@ (8005b0c <prvSampleTimeNow+0x3c>)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b00:	68fb      	ldr	r3, [r7, #12]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000e64 	.word	0x20000e64

08005b10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d812      	bhi.n	8005b5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e01b      	b.n	8005b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b4a:	4b10      	ldr	r3, [pc, #64]	@ (8005b8c <prvInsertTimerInActiveList+0x7c>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f7fd fe93 	bl	8003880 <vListInsert>
 8005b5a:	e012      	b.n	8005b82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d206      	bcs.n	8005b72 <prvInsertTimerInActiveList+0x62>
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e007      	b.n	8005b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b72:	4b07      	ldr	r3, [pc, #28]	@ (8005b90 <prvInsertTimerInActiveList+0x80>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f7fd fe7f 	bl	8003880 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b82:	697b      	ldr	r3, [r7, #20]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000e58 	.word	0x20000e58
 8005b90:	20000e54 	.word	0x20000e54

08005b94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08e      	sub	sp, #56	@ 0x38
 8005b98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b9a:	e0a5      	b.n	8005ce8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da19      	bge.n	8005bd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ba2:	1d3b      	adds	r3, r7, #4
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	61fb      	str	r3, [r7, #28]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bcc:	6850      	ldr	r0, [r2, #4]
 8005bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bd0:	6892      	ldr	r2, [r2, #8]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f2c0 8085 	blt.w	8005ce8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bec:	3304      	adds	r3, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd fe7e 	bl	80038f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bf4:	463b      	mov	r3, r7
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff ff6a 	bl	8005ad0 <prvSampleTimeNow>
 8005bfc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b09      	cmp	r3, #9
 8005c02:	d86c      	bhi.n	8005cde <prvProcessReceivedCommands+0x14a>
 8005c04:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <prvProcessReceivedCommands+0x78>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c35 	.word	0x08005c35
 8005c18:	08005cdf 	.word	0x08005cdf
 8005c1c:	08005c93 	.word	0x08005c93
 8005c20:	08005ccd 	.word	0x08005ccd
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c35 	.word	0x08005c35
 8005c2c:	08005cdf 	.word	0x08005cdf
 8005c30:	08005c93 	.word	0x08005c93
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	18d1      	adds	r1, r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c42:	f7ff ff65 	bl	8005b10 <prvInsertTimerInActiveList>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d04a      	beq.n	8005ce2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c52:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d142      	bne.n	8005ce2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	441a      	add	r2, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c6e:	f7ff fe19 	bl	80058a4 <xTimerGenericCommand>
 8005c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d133      	bne.n	8005ce2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61bb      	str	r3, [r7, #24]
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10b      	bne.n	8005cb8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	617b      	str	r3, [r7, #20]
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	699a      	ldr	r2, [r3, #24]
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	18d1      	adds	r1, r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc6:	f7ff ff23 	bl	8005b10 <prvInsertTimerInActiveList>
					break;
 8005cca:	e00d      	b.n	8005ce8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d107      	bne.n	8005ce6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cd8:	f000 fb72 	bl	80063c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cdc:	e003      	b.n	8005ce6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <prvProcessReceivedCommands+0x154>
					break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <prvProcessReceivedCommands+0x154>
					break;
 8005ce6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ce8:	4b07      	ldr	r3, [pc, #28]	@ (8005d08 <prvProcessReceivedCommands+0x174>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	1d39      	adds	r1, r7, #4
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe f9c7 	bl	8004084 <xQueueReceive>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f47f af4f 	bne.w	8005b9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	3730      	adds	r7, #48	@ 0x30
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000e5c 	.word	0x20000e5c

08005d0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d12:	e046      	b.n	8005da2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d14:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc8 <prvSwitchTimerLists+0xbc>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc8 <prvSwitchTimerLists+0xbc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fd fddf 	bl	80038f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d12f      	bne.n	8005da2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d90e      	bls.n	8005d72 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <prvSwitchTimerLists+0xbc>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f7fd fd88 	bl	8003880 <vListInsert>
 8005d70:	e017      	b.n	8005da2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d72:	2300      	movs	r3, #0
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	2300      	movs	r3, #0
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fd91 	bl	80058a4 <xTimerGenericCommand>
 8005d82:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10b      	bne.n	8005da2 <prvSwitchTimerLists+0x96>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	603b      	str	r3, [r7, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	e7fd      	b.n	8005d9e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005da2:	4b09      	ldr	r3, [pc, #36]	@ (8005dc8 <prvSwitchTimerLists+0xbc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1b3      	bne.n	8005d14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <prvSwitchTimerLists+0xbc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005db2:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <prvSwitchTimerLists+0xc0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a04      	ldr	r2, [pc, #16]	@ (8005dc8 <prvSwitchTimerLists+0xbc>)
 8005db8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005dba:	4a04      	ldr	r2, [pc, #16]	@ (8005dcc <prvSwitchTimerLists+0xc0>)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	6013      	str	r3, [r2, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000e54 	.word	0x20000e54
 8005dcc:	20000e58 	.word	0x20000e58

08005dd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005dd6:	f000 f929 	bl	800602c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005dda:	4b15      	ldr	r3, [pc, #84]	@ (8005e30 <prvCheckForValidListAndQueue+0x60>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d120      	bne.n	8005e24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005de2:	4814      	ldr	r0, [pc, #80]	@ (8005e34 <prvCheckForValidListAndQueue+0x64>)
 8005de4:	f7fd fcfe 	bl	80037e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005de8:	4813      	ldr	r0, [pc, #76]	@ (8005e38 <prvCheckForValidListAndQueue+0x68>)
 8005dea:	f7fd fcfb 	bl	80037e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005dee:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <prvCheckForValidListAndQueue+0x6c>)
 8005df0:	4a10      	ldr	r2, [pc, #64]	@ (8005e34 <prvCheckForValidListAndQueue+0x64>)
 8005df2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005df4:	4b12      	ldr	r3, [pc, #72]	@ (8005e40 <prvCheckForValidListAndQueue+0x70>)
 8005df6:	4a10      	ldr	r2, [pc, #64]	@ (8005e38 <prvCheckForValidListAndQueue+0x68>)
 8005df8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <prvCheckForValidListAndQueue+0x74>)
 8005e00:	4a11      	ldr	r2, [pc, #68]	@ (8005e48 <prvCheckForValidListAndQueue+0x78>)
 8005e02:	2110      	movs	r1, #16
 8005e04:	200a      	movs	r0, #10
 8005e06:	f7fd fe07 	bl	8003a18 <xQueueGenericCreateStatic>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4a08      	ldr	r2, [pc, #32]	@ (8005e30 <prvCheckForValidListAndQueue+0x60>)
 8005e0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e10:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <prvCheckForValidListAndQueue+0x60>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e18:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <prvCheckForValidListAndQueue+0x60>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	490b      	ldr	r1, [pc, #44]	@ (8005e4c <prvCheckForValidListAndQueue+0x7c>)
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fc4a 	bl	80046b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e24:	f000 f932 	bl	800608c <vPortExitCritical>
}
 8005e28:	bf00      	nop
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000e5c 	.word	0x20000e5c
 8005e34:	20000e2c 	.word	0x20000e2c
 8005e38:	20000e40 	.word	0x20000e40
 8005e3c:	20000e54 	.word	0x20000e54
 8005e40:	20000e58 	.word	0x20000e58
 8005e44:	20000f08 	.word	0x20000f08
 8005e48:	20000e68 	.word	0x20000e68
 8005e4c:	0800706c 	.word	0x0800706c

08005e50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b04      	subs	r3, #4
 8005e60:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b04      	subs	r3, #4
 8005e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f023 0201 	bic.w	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3b04      	subs	r3, #4
 8005e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e80:	4a08      	ldr	r2, [pc, #32]	@ (8005ea4 <pxPortInitialiseStack+0x54>)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b14      	subs	r3, #20
 8005e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3b20      	subs	r3, #32
 8005e96:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e98:	68fb      	ldr	r3, [r7, #12]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr
 8005ea4:	08005ea9 	.word	0x08005ea9

08005ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eb2:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <prvTaskExitError+0x54>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d00b      	beq.n	8005ed4 <prvTaskExitError+0x2c>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60fb      	str	r3, [r7, #12]
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	e7fd      	b.n	8005ed0 <prvTaskExitError+0x28>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	60bb      	str	r3, [r7, #8]
}
 8005ee6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ee8:	bf00      	nop
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0fc      	beq.n	8005eea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr
 8005efc:	2000000c 	.word	0x2000000c

08005f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f00:	4b07      	ldr	r3, [pc, #28]	@ (8005f20 <pxCurrentTCBConst2>)
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	6808      	ldr	r0, [r1, #0]
 8005f06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f0a:	f380 8809 	msr	PSP, r0
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	f380 8811 	msr	BASEPRI, r0
 8005f1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005f1e:	4770      	bx	lr

08005f20 <pxCurrentTCBConst2>:
 8005f20:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f28:	4806      	ldr	r0, [pc, #24]	@ (8005f44 <prvPortStartFirstTask+0x1c>)
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	6800      	ldr	r0, [r0, #0]
 8005f2e:	f380 8808 	msr	MSP, r0
 8005f32:	b662      	cpsie	i
 8005f34:	b661      	cpsie	f
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	df00      	svc	0
 8005f40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f42:	bf00      	nop
 8005f44:	e000ed08 	.word	0xe000ed08

08005f48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f4e:	4b32      	ldr	r3, [pc, #200]	@ (8006018 <xPortStartScheduler+0xd0>)
 8005f50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	22ff      	movs	r2, #255	@ 0xff
 8005f5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	4b2a      	ldr	r3, [pc, #168]	@ (800601c <xPortStartScheduler+0xd4>)
 8005f74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f76:	4b2a      	ldr	r3, [pc, #168]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005f78:	2207      	movs	r2, #7
 8005f7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f7c:	e009      	b.n	8005f92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f7e:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	4a26      	ldr	r2, [pc, #152]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005f86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9a:	2b80      	cmp	r3, #128	@ 0x80
 8005f9c:	d0ef      	beq.n	8005f7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f9e:	4b20      	ldr	r3, [pc, #128]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1c3 0307 	rsb	r3, r3, #7
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d00b      	beq.n	8005fc2 <xPortStartScheduler+0x7a>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	60bb      	str	r3, [r7, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005fc2:	4b17      	ldr	r3, [pc, #92]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	4a15      	ldr	r2, [pc, #84]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005fca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fcc:	4b14      	ldr	r3, [pc, #80]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fd4:	4a12      	ldr	r2, [pc, #72]	@ (8006020 <xPortStartScheduler+0xd8>)
 8005fd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <xPortStartScheduler+0xdc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8006024 <xPortStartScheduler+0xdc>)
 8005fe6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005fea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fec:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <xPortStartScheduler+0xdc>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8006024 <xPortStartScheduler+0xdc>)
 8005ff2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005ff6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ff8:	f000 f8b8 	bl	800616c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <xPortStartScheduler+0xe0>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006002:	f7ff ff91 	bl	8005f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006006:	f7fe ff87 	bl	8004f18 <vTaskSwitchContext>
	prvTaskExitError();
 800600a:	f7ff ff4d 	bl	8005ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	e000e400 	.word	0xe000e400
 800601c:	20000f58 	.word	0x20000f58
 8006020:	20000f5c 	.word	0x20000f5c
 8006024:	e000ed20 	.word	0xe000ed20
 8006028:	2000000c 	.word	0x2000000c

0800602c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	607b      	str	r3, [r7, #4]
}
 8006044:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006046:	4b0f      	ldr	r3, [pc, #60]	@ (8006084 <vPortEnterCritical+0x58>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	4a0d      	ldr	r2, [pc, #52]	@ (8006084 <vPortEnterCritical+0x58>)
 800604e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006050:	4b0c      	ldr	r3, [pc, #48]	@ (8006084 <vPortEnterCritical+0x58>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d110      	bne.n	800607a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006058:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <vPortEnterCritical+0x5c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <vPortEnterCritical+0x4e>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	603b      	str	r3, [r7, #0]
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <vPortEnterCritical+0x4a>
	}
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr
 8006084:	2000000c 	.word	0x2000000c
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006092:	4b12      	ldr	r3, [pc, #72]	@ (80060dc <vPortExitCritical+0x50>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <vPortExitCritical+0x26>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	607b      	str	r3, [r7, #4]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <vPortExitCritical+0x50>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	4a08      	ldr	r2, [pc, #32]	@ (80060dc <vPortExitCritical+0x50>)
 80060ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060bc:	4b07      	ldr	r3, [pc, #28]	@ (80060dc <vPortExitCritical+0x50>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d105      	bne.n	80060d0 <vPortExitCritical+0x44>
 80060c4:	2300      	movs	r3, #0
 80060c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f383 8811 	msr	BASEPRI, r3
}
 80060ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bc80      	pop	{r7}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000000c 	.word	0x2000000c

080060e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060e0:	f3ef 8009 	mrs	r0, PSP
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <pxCurrentTCBConst>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060f0:	6010      	str	r0, [r2, #0]
 80060f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80060f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060fa:	f380 8811 	msr	BASEPRI, r0
 80060fe:	f7fe ff0b 	bl	8004f18 <vTaskSwitchContext>
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f380 8811 	msr	BASEPRI, r0
 800610a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006116:	f380 8809 	msr	PSP, r0
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	4770      	bx	lr

08006120 <pxCurrentTCBConst>:
 8006120:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop

08006128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	607b      	str	r3, [r7, #4]
}
 8006140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006142:	f7fe fe29 	bl	8004d98 <xTaskIncrementTick>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800614c:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <SysTick_Handler+0x40>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	2300      	movs	r3, #0
 8006156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f383 8811 	msr	BASEPRI, r3
}
 800615e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <vPortSetupTimerInterrupt+0x30>)
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006176:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <vPortSetupTimerInterrupt+0x34>)
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800617c:	4b09      	ldr	r3, [pc, #36]	@ (80061a4 <vPortSetupTimerInterrupt+0x38>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a09      	ldr	r2, [pc, #36]	@ (80061a8 <vPortSetupTimerInterrupt+0x3c>)
 8006182:	fba2 2303 	umull	r2, r3, r2, r3
 8006186:	099b      	lsrs	r3, r3, #6
 8006188:	4a08      	ldr	r2, [pc, #32]	@ (80061ac <vPortSetupTimerInterrupt+0x40>)
 800618a:	3b01      	subs	r3, #1
 800618c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800618e:	4b03      	ldr	r3, [pc, #12]	@ (800619c <vPortSetupTimerInterrupt+0x30>)
 8006190:	2207      	movs	r2, #7
 8006192:	601a      	str	r2, [r3, #0]
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	e000e010 	.word	0xe000e010
 80061a0:	e000e018 	.word	0xe000e018
 80061a4:	20000000 	.word	0x20000000
 80061a8:	10624dd3 	.word	0x10624dd3
 80061ac:	e000e014 	.word	0xe000e014

080061b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061b6:	f3ef 8305 	mrs	r3, IPSR
 80061ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b0f      	cmp	r3, #15
 80061c0:	d915      	bls.n	80061ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061c2:	4a17      	ldr	r2, [pc, #92]	@ (8006220 <vPortValidateInterruptPriority+0x70>)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061cc:	4b15      	ldr	r3, [pc, #84]	@ (8006224 <vPortValidateInterruptPriority+0x74>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	7afa      	ldrb	r2, [r7, #11]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d20b      	bcs.n	80061ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	607b      	str	r3, [r7, #4]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006228 <vPortValidateInterruptPriority+0x78>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061f6:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <vPortValidateInterruptPriority+0x7c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d90b      	bls.n	8006216 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	603b      	str	r3, [r7, #0]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <vPortValidateInterruptPriority+0x62>
	}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr
 8006220:	e000e3f0 	.word	0xe000e3f0
 8006224:	20000f58 	.word	0x20000f58
 8006228:	e000ed0c 	.word	0xe000ed0c
 800622c:	20000f5c 	.word	0x20000f5c

08006230 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	@ 0x28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006238:	2300      	movs	r3, #0
 800623a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800623c:	f7fe fcf2 	bl	8004c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006240:	4b5a      	ldr	r3, [pc, #360]	@ (80063ac <pvPortMalloc+0x17c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006248:	f000 f916 	bl	8006478 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800624c:	4b58      	ldr	r3, [pc, #352]	@ (80063b0 <pvPortMalloc+0x180>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8090 	bne.w	800637a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01e      	beq.n	800629e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006260:	2208      	movs	r2, #8
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4413      	add	r3, r2
 8006266:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d015      	beq.n	800629e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	3308      	adds	r3, #8
 800627a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <pvPortMalloc+0x6e>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	617b      	str	r3, [r7, #20]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d06a      	beq.n	800637a <pvPortMalloc+0x14a>
 80062a4:	4b43      	ldr	r3, [pc, #268]	@ (80063b4 <pvPortMalloc+0x184>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d865      	bhi.n	800637a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062ae:	4b42      	ldr	r3, [pc, #264]	@ (80063b8 <pvPortMalloc+0x188>)
 80062b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062b2:	4b41      	ldr	r3, [pc, #260]	@ (80063b8 <pvPortMalloc+0x188>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062b8:	e004      	b.n	80062c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d903      	bls.n	80062d6 <pvPortMalloc+0xa6>
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f1      	bne.n	80062ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062d6:	4b35      	ldr	r3, [pc, #212]	@ (80063ac <pvPortMalloc+0x17c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062dc:	429a      	cmp	r2, r3
 80062de:	d04c      	beq.n	800637a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2208      	movs	r2, #8
 80062e6:	4413      	add	r3, r2
 80062e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	1ad2      	subs	r2, r2, r3
 80062fa:	2308      	movs	r3, #8
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	429a      	cmp	r2, r3
 8006300:	d920      	bls.n	8006344 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <pvPortMalloc+0xfc>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	613b      	str	r3, [r7, #16]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800633e:	69b8      	ldr	r0, [r7, #24]
 8006340:	f000 f8fc 	bl	800653c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006344:	4b1b      	ldr	r3, [pc, #108]	@ (80063b4 <pvPortMalloc+0x184>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	4a19      	ldr	r2, [pc, #100]	@ (80063b4 <pvPortMalloc+0x184>)
 8006350:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006352:	4b18      	ldr	r3, [pc, #96]	@ (80063b4 <pvPortMalloc+0x184>)
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b19      	ldr	r3, [pc, #100]	@ (80063bc <pvPortMalloc+0x18c>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d203      	bcs.n	8006366 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800635e:	4b15      	ldr	r3, [pc, #84]	@ (80063b4 <pvPortMalloc+0x184>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a16      	ldr	r2, [pc, #88]	@ (80063bc <pvPortMalloc+0x18c>)
 8006364:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	4b11      	ldr	r3, [pc, #68]	@ (80063b0 <pvPortMalloc+0x180>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	431a      	orrs	r2, r3
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800637a:	f7fe fc61 	bl	8004c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <pvPortMalloc+0x170>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60fb      	str	r3, [r7, #12]
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <pvPortMalloc+0x16c>
	return pvReturn;
 80063a0:	69fb      	ldr	r3, [r7, #28]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3728      	adds	r7, #40	@ 0x28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20001b68 	.word	0x20001b68
 80063b0:	20001b74 	.word	0x20001b74
 80063b4:	20001b6c 	.word	0x20001b6c
 80063b8:	20001b60 	.word	0x20001b60
 80063bc:	20001b70 	.word	0x20001b70

080063c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d04a      	beq.n	8006468 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063d2:	2308      	movs	r3, #8
 80063d4:	425b      	negs	r3, r3
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4413      	add	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	4b22      	ldr	r3, [pc, #136]	@ (8006470 <vPortFree+0xb0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <vPortFree+0x46>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60fb      	str	r3, [r7, #12]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <vPortFree+0x66>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	60bb      	str	r3, [r7, #8]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	4b11      	ldr	r3, [pc, #68]	@ (8006470 <vPortFree+0xb0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d019      	beq.n	8006468 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d115      	bne.n	8006468 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	4b0b      	ldr	r3, [pc, #44]	@ (8006470 <vPortFree+0xb0>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	43db      	mvns	r3, r3
 8006446:	401a      	ands	r2, r3
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800644c:	f7fe fbea 	bl	8004c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	4b07      	ldr	r3, [pc, #28]	@ (8006474 <vPortFree+0xb4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4413      	add	r3, r2
 800645a:	4a06      	ldr	r2, [pc, #24]	@ (8006474 <vPortFree+0xb4>)
 800645c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800645e:	6938      	ldr	r0, [r7, #16]
 8006460:	f000 f86c 	bl	800653c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006464:	f7fe fbec 	bl	8004c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006468:	bf00      	nop
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20001b74 	.word	0x20001b74
 8006474:	20001b6c 	.word	0x20001b6c

08006478 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800647e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006482:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006484:	4b27      	ldr	r3, [pc, #156]	@ (8006524 <prvHeapInit+0xac>)
 8006486:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00c      	beq.n	80064ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3307      	adds	r3, #7
 8006496:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0307 	bic.w	r3, r3, #7
 800649e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006524 <prvHeapInit+0xac>)
 80064a8:	4413      	add	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006528 <prvHeapInit+0xb0>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006528 <prvHeapInit+0xb0>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	4413      	add	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064c4:	2208      	movs	r2, #8
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0307 	bic.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a15      	ldr	r2, [pc, #84]	@ (800652c <prvHeapInit+0xb4>)
 80064d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064da:	4b14      	ldr	r3, [pc, #80]	@ (800652c <prvHeapInit+0xb4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2200      	movs	r2, #0
 80064e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064e2:	4b12      	ldr	r3, [pc, #72]	@ (800652c <prvHeapInit+0xb4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064f8:	4b0c      	ldr	r3, [pc, #48]	@ (800652c <prvHeapInit+0xb4>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4a0a      	ldr	r2, [pc, #40]	@ (8006530 <prvHeapInit+0xb8>)
 8006506:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	4a09      	ldr	r2, [pc, #36]	@ (8006534 <prvHeapInit+0xbc>)
 800650e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006510:	4b09      	ldr	r3, [pc, #36]	@ (8006538 <prvHeapInit+0xc0>)
 8006512:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006516:	601a      	str	r2, [r3, #0]
}
 8006518:	bf00      	nop
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000f60 	.word	0x20000f60
 8006528:	20001b60 	.word	0x20001b60
 800652c:	20001b68 	.word	0x20001b68
 8006530:	20001b70 	.word	0x20001b70
 8006534:	20001b6c 	.word	0x20001b6c
 8006538:	20001b74 	.word	0x20001b74

0800653c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006544:	4b27      	ldr	r3, [pc, #156]	@ (80065e4 <prvInsertBlockIntoFreeList+0xa8>)
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e002      	b.n	8006550 <prvInsertBlockIntoFreeList+0x14>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	429a      	cmp	r2, r3
 8006558:	d8f7      	bhi.n	800654a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	4413      	add	r3, r2
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d108      	bne.n	800657e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	441a      	add	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	441a      	add	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d118      	bne.n	80065c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b14      	ldr	r3, [pc, #80]	@ (80065e8 <prvInsertBlockIntoFreeList+0xac>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d00d      	beq.n	80065ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	441a      	add	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e008      	b.n	80065cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065ba:	4b0b      	ldr	r3, [pc, #44]	@ (80065e8 <prvInsertBlockIntoFreeList+0xac>)
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e003      	b.n	80065cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d002      	beq.n	80065da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr
 80065e4:	20001b60 	.word	0x20001b60
 80065e8:	20001b68 	.word	0x20001b68

080065ec <std>:
 80065ec:	2300      	movs	r3, #0
 80065ee:	b510      	push	{r4, lr}
 80065f0:	4604      	mov	r4, r0
 80065f2:	e9c0 3300 	strd	r3, r3, [r0]
 80065f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fa:	6083      	str	r3, [r0, #8]
 80065fc:	8181      	strh	r1, [r0, #12]
 80065fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006600:	81c2      	strh	r2, [r0, #14]
 8006602:	6183      	str	r3, [r0, #24]
 8006604:	4619      	mov	r1, r3
 8006606:	2208      	movs	r2, #8
 8006608:	305c      	adds	r0, #92	@ 0x5c
 800660a:	f000 f9e7 	bl	80069dc <memset>
 800660e:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <std+0x58>)
 8006610:	6224      	str	r4, [r4, #32]
 8006612:	6263      	str	r3, [r4, #36]	@ 0x24
 8006614:	4b0c      	ldr	r3, [pc, #48]	@ (8006648 <std+0x5c>)
 8006616:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006618:	4b0c      	ldr	r3, [pc, #48]	@ (800664c <std+0x60>)
 800661a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800661c:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <std+0x64>)
 800661e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006620:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <std+0x68>)
 8006622:	429c      	cmp	r4, r3
 8006624:	d006      	beq.n	8006634 <std+0x48>
 8006626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800662a:	4294      	cmp	r4, r2
 800662c:	d002      	beq.n	8006634 <std+0x48>
 800662e:	33d0      	adds	r3, #208	@ 0xd0
 8006630:	429c      	cmp	r4, r3
 8006632:	d105      	bne.n	8006640 <std+0x54>
 8006634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f000 ba9c 	b.w	8006b78 <__retarget_lock_init_recursive>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	0800682d 	.word	0x0800682d
 8006648:	0800684f 	.word	0x0800684f
 800664c:	08006887 	.word	0x08006887
 8006650:	080068ab 	.word	0x080068ab
 8006654:	20001b78 	.word	0x20001b78

08006658 <stdio_exit_handler>:
 8006658:	4a02      	ldr	r2, [pc, #8]	@ (8006664 <stdio_exit_handler+0xc>)
 800665a:	4903      	ldr	r1, [pc, #12]	@ (8006668 <stdio_exit_handler+0x10>)
 800665c:	4803      	ldr	r0, [pc, #12]	@ (800666c <stdio_exit_handler+0x14>)
 800665e:	f000 b869 	b.w	8006734 <_fwalk_sglue>
 8006662:	bf00      	nop
 8006664:	20000010 	.word	0x20000010
 8006668:	08006e89 	.word	0x08006e89
 800666c:	20000020 	.word	0x20000020

08006670 <cleanup_stdio>:
 8006670:	6841      	ldr	r1, [r0, #4]
 8006672:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <cleanup_stdio+0x34>)
 8006674:	b510      	push	{r4, lr}
 8006676:	4299      	cmp	r1, r3
 8006678:	4604      	mov	r4, r0
 800667a:	d001      	beq.n	8006680 <cleanup_stdio+0x10>
 800667c:	f000 fc04 	bl	8006e88 <_fflush_r>
 8006680:	68a1      	ldr	r1, [r4, #8]
 8006682:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <cleanup_stdio+0x38>)
 8006684:	4299      	cmp	r1, r3
 8006686:	d002      	beq.n	800668e <cleanup_stdio+0x1e>
 8006688:	4620      	mov	r0, r4
 800668a:	f000 fbfd 	bl	8006e88 <_fflush_r>
 800668e:	68e1      	ldr	r1, [r4, #12]
 8006690:	4b06      	ldr	r3, [pc, #24]	@ (80066ac <cleanup_stdio+0x3c>)
 8006692:	4299      	cmp	r1, r3
 8006694:	d004      	beq.n	80066a0 <cleanup_stdio+0x30>
 8006696:	4620      	mov	r0, r4
 8006698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669c:	f000 bbf4 	b.w	8006e88 <_fflush_r>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	bf00      	nop
 80066a4:	20001b78 	.word	0x20001b78
 80066a8:	20001be0 	.word	0x20001be0
 80066ac:	20001c48 	.word	0x20001c48

080066b0 <global_stdio_init.part.0>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4b0b      	ldr	r3, [pc, #44]	@ (80066e0 <global_stdio_init.part.0+0x30>)
 80066b4:	4c0b      	ldr	r4, [pc, #44]	@ (80066e4 <global_stdio_init.part.0+0x34>)
 80066b6:	4a0c      	ldr	r2, [pc, #48]	@ (80066e8 <global_stdio_init.part.0+0x38>)
 80066b8:	4620      	mov	r0, r4
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	2104      	movs	r1, #4
 80066be:	2200      	movs	r2, #0
 80066c0:	f7ff ff94 	bl	80065ec <std>
 80066c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066c8:	2201      	movs	r2, #1
 80066ca:	2109      	movs	r1, #9
 80066cc:	f7ff ff8e 	bl	80065ec <std>
 80066d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80066d4:	2202      	movs	r2, #2
 80066d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066da:	2112      	movs	r1, #18
 80066dc:	f7ff bf86 	b.w	80065ec <std>
 80066e0:	20001cb0 	.word	0x20001cb0
 80066e4:	20001b78 	.word	0x20001b78
 80066e8:	08006659 	.word	0x08006659

080066ec <__sfp_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	@ (80066f4 <__sfp_lock_acquire+0x8>)
 80066ee:	f000 ba44 	b.w	8006b7a <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	20001cb9 	.word	0x20001cb9

080066f8 <__sfp_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	@ (8006700 <__sfp_lock_release+0x8>)
 80066fa:	f000 ba3f 	b.w	8006b7c <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	20001cb9 	.word	0x20001cb9

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sfp_lock_acquire>
 800670c:	6a23      	ldr	r3, [r4, #32]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sfp_lock_release>
 8006718:	4b04      	ldr	r3, [pc, #16]	@ (800672c <__sinit+0x28>)
 800671a:	6223      	str	r3, [r4, #32]
 800671c:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <__sinit+0x2c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f5      	bne.n	8006710 <__sinit+0xc>
 8006724:	f7ff ffc4 	bl	80066b0 <global_stdio_init.part.0>
 8006728:	e7f2      	b.n	8006710 <__sinit+0xc>
 800672a:	bf00      	nop
 800672c:	08006671 	.word	0x08006671
 8006730:	20001cb0 	.word	0x20001cb0

08006734 <_fwalk_sglue>:
 8006734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006738:	4607      	mov	r7, r0
 800673a:	4688      	mov	r8, r1
 800673c:	4614      	mov	r4, r2
 800673e:	2600      	movs	r6, #0
 8006740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006744:	f1b9 0901 	subs.w	r9, r9, #1
 8006748:	d505      	bpl.n	8006756 <_fwalk_sglue+0x22>
 800674a:	6824      	ldr	r4, [r4, #0]
 800674c:	2c00      	cmp	r4, #0
 800674e:	d1f7      	bne.n	8006740 <_fwalk_sglue+0xc>
 8006750:	4630      	mov	r0, r6
 8006752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006756:	89ab      	ldrh	r3, [r5, #12]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d907      	bls.n	800676c <_fwalk_sglue+0x38>
 800675c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006760:	3301      	adds	r3, #1
 8006762:	d003      	beq.n	800676c <_fwalk_sglue+0x38>
 8006764:	4629      	mov	r1, r5
 8006766:	4638      	mov	r0, r7
 8006768:	47c0      	blx	r8
 800676a:	4306      	orrs	r6, r0
 800676c:	3568      	adds	r5, #104	@ 0x68
 800676e:	e7e9      	b.n	8006744 <_fwalk_sglue+0x10>

08006770 <_puts_r>:
 8006770:	6a03      	ldr	r3, [r0, #32]
 8006772:	b570      	push	{r4, r5, r6, lr}
 8006774:	4605      	mov	r5, r0
 8006776:	460e      	mov	r6, r1
 8006778:	6884      	ldr	r4, [r0, #8]
 800677a:	b90b      	cbnz	r3, 8006780 <_puts_r+0x10>
 800677c:	f7ff ffc2 	bl	8006704 <__sinit>
 8006780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006782:	07db      	lsls	r3, r3, #31
 8006784:	d405      	bmi.n	8006792 <_puts_r+0x22>
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	0598      	lsls	r0, r3, #22
 800678a:	d402      	bmi.n	8006792 <_puts_r+0x22>
 800678c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800678e:	f000 f9f4 	bl	8006b7a <__retarget_lock_acquire_recursive>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	0719      	lsls	r1, r3, #28
 8006796:	d502      	bpl.n	800679e <_puts_r+0x2e>
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d135      	bne.n	800680a <_puts_r+0x9a>
 800679e:	4621      	mov	r1, r4
 80067a0:	4628      	mov	r0, r5
 80067a2:	f000 f8c5 	bl	8006930 <__swsetup_r>
 80067a6:	b380      	cbz	r0, 800680a <_puts_r+0x9a>
 80067a8:	f04f 35ff 	mov.w	r5, #4294967295
 80067ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067ae:	07da      	lsls	r2, r3, #31
 80067b0:	d405      	bmi.n	80067be <_puts_r+0x4e>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	059b      	lsls	r3, r3, #22
 80067b6:	d402      	bmi.n	80067be <_puts_r+0x4e>
 80067b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067ba:	f000 f9df 	bl	8006b7c <__retarget_lock_release_recursive>
 80067be:	4628      	mov	r0, r5
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da04      	bge.n	80067d0 <_puts_r+0x60>
 80067c6:	69a2      	ldr	r2, [r4, #24]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	dc17      	bgt.n	80067fc <_puts_r+0x8c>
 80067cc:	290a      	cmp	r1, #10
 80067ce:	d015      	beq.n	80067fc <_puts_r+0x8c>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	7019      	strb	r1, [r3, #0]
 80067d8:	68a3      	ldr	r3, [r4, #8]
 80067da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067de:	3b01      	subs	r3, #1
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	2900      	cmp	r1, #0
 80067e4:	d1ed      	bne.n	80067c2 <_puts_r+0x52>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da11      	bge.n	800680e <_puts_r+0x9e>
 80067ea:	4622      	mov	r2, r4
 80067ec:	210a      	movs	r1, #10
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 f85f 	bl	80068b2 <__swbuf_r>
 80067f4:	3001      	adds	r0, #1
 80067f6:	d0d7      	beq.n	80067a8 <_puts_r+0x38>
 80067f8:	250a      	movs	r5, #10
 80067fa:	e7d7      	b.n	80067ac <_puts_r+0x3c>
 80067fc:	4622      	mov	r2, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	f000 f857 	bl	80068b2 <__swbuf_r>
 8006804:	3001      	adds	r0, #1
 8006806:	d1e7      	bne.n	80067d8 <_puts_r+0x68>
 8006808:	e7ce      	b.n	80067a8 <_puts_r+0x38>
 800680a:	3e01      	subs	r6, #1
 800680c:	e7e4      	b.n	80067d8 <_puts_r+0x68>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	6022      	str	r2, [r4, #0]
 8006814:	220a      	movs	r2, #10
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	e7ee      	b.n	80067f8 <_puts_r+0x88>
	...

0800681c <puts>:
 800681c:	4b02      	ldr	r3, [pc, #8]	@ (8006828 <puts+0xc>)
 800681e:	4601      	mov	r1, r0
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f7ff bfa5 	b.w	8006770 <_puts_r>
 8006826:	bf00      	nop
 8006828:	2000001c 	.word	0x2000001c

0800682c <__sread>:
 800682c:	b510      	push	{r4, lr}
 800682e:	460c      	mov	r4, r1
 8006830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006834:	f000 f952 	bl	8006adc <_read_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	bfab      	itete	ge
 800683c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800683e:	89a3      	ldrhlt	r3, [r4, #12]
 8006840:	181b      	addge	r3, r3, r0
 8006842:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006846:	bfac      	ite	ge
 8006848:	6563      	strge	r3, [r4, #84]	@ 0x54
 800684a:	81a3      	strhlt	r3, [r4, #12]
 800684c:	bd10      	pop	{r4, pc}

0800684e <__swrite>:
 800684e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006852:	461f      	mov	r7, r3
 8006854:	898b      	ldrh	r3, [r1, #12]
 8006856:	4605      	mov	r5, r0
 8006858:	05db      	lsls	r3, r3, #23
 800685a:	460c      	mov	r4, r1
 800685c:	4616      	mov	r6, r2
 800685e:	d505      	bpl.n	800686c <__swrite+0x1e>
 8006860:	2302      	movs	r3, #2
 8006862:	2200      	movs	r2, #0
 8006864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006868:	f000 f926 	bl	8006ab8 <_lseek_r>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	4632      	mov	r2, r6
 8006870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	4628      	mov	r0, r5
 8006878:	463b      	mov	r3, r7
 800687a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800687e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006882:	f000 b93d 	b.w	8006b00 <_write_r>

08006886 <__sseek>:
 8006886:	b510      	push	{r4, lr}
 8006888:	460c      	mov	r4, r1
 800688a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688e:	f000 f913 	bl	8006ab8 <_lseek_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	bf15      	itete	ne
 8006898:	6560      	strne	r0, [r4, #84]	@ 0x54
 800689a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800689e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068a2:	81a3      	strheq	r3, [r4, #12]
 80068a4:	bf18      	it	ne
 80068a6:	81a3      	strhne	r3, [r4, #12]
 80068a8:	bd10      	pop	{r4, pc}

080068aa <__sclose>:
 80068aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ae:	f000 b89d 	b.w	80069ec <_close_r>

080068b2 <__swbuf_r>:
 80068b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b4:	460e      	mov	r6, r1
 80068b6:	4614      	mov	r4, r2
 80068b8:	4605      	mov	r5, r0
 80068ba:	b118      	cbz	r0, 80068c4 <__swbuf_r+0x12>
 80068bc:	6a03      	ldr	r3, [r0, #32]
 80068be:	b90b      	cbnz	r3, 80068c4 <__swbuf_r+0x12>
 80068c0:	f7ff ff20 	bl	8006704 <__sinit>
 80068c4:	69a3      	ldr	r3, [r4, #24]
 80068c6:	60a3      	str	r3, [r4, #8]
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	071a      	lsls	r2, r3, #28
 80068cc:	d501      	bpl.n	80068d2 <__swbuf_r+0x20>
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	b943      	cbnz	r3, 80068e4 <__swbuf_r+0x32>
 80068d2:	4621      	mov	r1, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 f82b 	bl	8006930 <__swsetup_r>
 80068da:	b118      	cbz	r0, 80068e4 <__swbuf_r+0x32>
 80068dc:	f04f 37ff 	mov.w	r7, #4294967295
 80068e0:	4638      	mov	r0, r7
 80068e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	6922      	ldr	r2, [r4, #16]
 80068e8:	b2f6      	uxtb	r6, r6
 80068ea:	1a98      	subs	r0, r3, r2
 80068ec:	6963      	ldr	r3, [r4, #20]
 80068ee:	4637      	mov	r7, r6
 80068f0:	4283      	cmp	r3, r0
 80068f2:	dc05      	bgt.n	8006900 <__swbuf_r+0x4e>
 80068f4:	4621      	mov	r1, r4
 80068f6:	4628      	mov	r0, r5
 80068f8:	f000 fac6 	bl	8006e88 <_fflush_r>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d1ed      	bne.n	80068dc <__swbuf_r+0x2a>
 8006900:	68a3      	ldr	r3, [r4, #8]
 8006902:	3b01      	subs	r3, #1
 8006904:	60a3      	str	r3, [r4, #8]
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	701e      	strb	r6, [r3, #0]
 800690e:	6962      	ldr	r2, [r4, #20]
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	429a      	cmp	r2, r3
 8006914:	d004      	beq.n	8006920 <__swbuf_r+0x6e>
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	07db      	lsls	r3, r3, #31
 800691a:	d5e1      	bpl.n	80068e0 <__swbuf_r+0x2e>
 800691c:	2e0a      	cmp	r6, #10
 800691e:	d1df      	bne.n	80068e0 <__swbuf_r+0x2e>
 8006920:	4621      	mov	r1, r4
 8006922:	4628      	mov	r0, r5
 8006924:	f000 fab0 	bl	8006e88 <_fflush_r>
 8006928:	2800      	cmp	r0, #0
 800692a:	d0d9      	beq.n	80068e0 <__swbuf_r+0x2e>
 800692c:	e7d6      	b.n	80068dc <__swbuf_r+0x2a>
	...

08006930 <__swsetup_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4b29      	ldr	r3, [pc, #164]	@ (80069d8 <__swsetup_r+0xa8>)
 8006934:	4605      	mov	r5, r0
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	460c      	mov	r4, r1
 800693a:	b118      	cbz	r0, 8006944 <__swsetup_r+0x14>
 800693c:	6a03      	ldr	r3, [r0, #32]
 800693e:	b90b      	cbnz	r3, 8006944 <__swsetup_r+0x14>
 8006940:	f7ff fee0 	bl	8006704 <__sinit>
 8006944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006948:	0719      	lsls	r1, r3, #28
 800694a:	d422      	bmi.n	8006992 <__swsetup_r+0x62>
 800694c:	06da      	lsls	r2, r3, #27
 800694e:	d407      	bmi.n	8006960 <__swsetup_r+0x30>
 8006950:	2209      	movs	r2, #9
 8006952:	602a      	str	r2, [r5, #0]
 8006954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	e033      	b.n	80069c8 <__swsetup_r+0x98>
 8006960:	0758      	lsls	r0, r3, #29
 8006962:	d512      	bpl.n	800698a <__swsetup_r+0x5a>
 8006964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006966:	b141      	cbz	r1, 800697a <__swsetup_r+0x4a>
 8006968:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800696c:	4299      	cmp	r1, r3
 800696e:	d002      	beq.n	8006976 <__swsetup_r+0x46>
 8006970:	4628      	mov	r0, r5
 8006972:	f000 f913 	bl	8006b9c <_free_r>
 8006976:	2300      	movs	r3, #0
 8006978:	6363      	str	r3, [r4, #52]	@ 0x34
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006980:	81a3      	strh	r3, [r4, #12]
 8006982:	2300      	movs	r3, #0
 8006984:	6063      	str	r3, [r4, #4]
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f043 0308 	orr.w	r3, r3, #8
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	b94b      	cbnz	r3, 80069aa <__swsetup_r+0x7a>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800699c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069a0:	d003      	beq.n	80069aa <__swsetup_r+0x7a>
 80069a2:	4621      	mov	r1, r4
 80069a4:	4628      	mov	r0, r5
 80069a6:	f000 fabc 	bl	8006f22 <__smakebuf_r>
 80069aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ae:	f013 0201 	ands.w	r2, r3, #1
 80069b2:	d00a      	beq.n	80069ca <__swsetup_r+0x9a>
 80069b4:	2200      	movs	r2, #0
 80069b6:	60a2      	str	r2, [r4, #8]
 80069b8:	6962      	ldr	r2, [r4, #20]
 80069ba:	4252      	negs	r2, r2
 80069bc:	61a2      	str	r2, [r4, #24]
 80069be:	6922      	ldr	r2, [r4, #16]
 80069c0:	b942      	cbnz	r2, 80069d4 <__swsetup_r+0xa4>
 80069c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069c6:	d1c5      	bne.n	8006954 <__swsetup_r+0x24>
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	0799      	lsls	r1, r3, #30
 80069cc:	bf58      	it	pl
 80069ce:	6962      	ldrpl	r2, [r4, #20]
 80069d0:	60a2      	str	r2, [r4, #8]
 80069d2:	e7f4      	b.n	80069be <__swsetup_r+0x8e>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7f7      	b.n	80069c8 <__swsetup_r+0x98>
 80069d8:	2000001c 	.word	0x2000001c

080069dc <memset>:
 80069dc:	4603      	mov	r3, r0
 80069de:	4402      	add	r2, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <_close_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	2300      	movs	r3, #0
 80069f0:	4d05      	ldr	r5, [pc, #20]	@ (8006a08 <_close_r+0x1c>)
 80069f2:	4604      	mov	r4, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	602b      	str	r3, [r5, #0]
 80069f8:	f7fa f887 	bl	8000b0a <_close>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_close_r+0x1a>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_close_r+0x1a>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	20001cb4 	.word	0x20001cb4

08006a0c <_reclaim_reent>:
 8006a0c:	4b29      	ldr	r3, [pc, #164]	@ (8006ab4 <_reclaim_reent+0xa8>)
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4604      	mov	r4, r0
 8006a14:	4283      	cmp	r3, r0
 8006a16:	d04b      	beq.n	8006ab0 <_reclaim_reent+0xa4>
 8006a18:	69c3      	ldr	r3, [r0, #28]
 8006a1a:	b1ab      	cbz	r3, 8006a48 <_reclaim_reent+0x3c>
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	b16b      	cbz	r3, 8006a3c <_reclaim_reent+0x30>
 8006a20:	2500      	movs	r5, #0
 8006a22:	69e3      	ldr	r3, [r4, #28]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	5959      	ldr	r1, [r3, r5]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d13b      	bne.n	8006aa4 <_reclaim_reent+0x98>
 8006a2c:	3504      	adds	r5, #4
 8006a2e:	2d80      	cmp	r5, #128	@ 0x80
 8006a30:	d1f7      	bne.n	8006a22 <_reclaim_reent+0x16>
 8006a32:	69e3      	ldr	r3, [r4, #28]
 8006a34:	4620      	mov	r0, r4
 8006a36:	68d9      	ldr	r1, [r3, #12]
 8006a38:	f000 f8b0 	bl	8006b9c <_free_r>
 8006a3c:	69e3      	ldr	r3, [r4, #28]
 8006a3e:	6819      	ldr	r1, [r3, #0]
 8006a40:	b111      	cbz	r1, 8006a48 <_reclaim_reent+0x3c>
 8006a42:	4620      	mov	r0, r4
 8006a44:	f000 f8aa 	bl	8006b9c <_free_r>
 8006a48:	6961      	ldr	r1, [r4, #20]
 8006a4a:	b111      	cbz	r1, 8006a52 <_reclaim_reent+0x46>
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f000 f8a5 	bl	8006b9c <_free_r>
 8006a52:	69e1      	ldr	r1, [r4, #28]
 8006a54:	b111      	cbz	r1, 8006a5c <_reclaim_reent+0x50>
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 f8a0 	bl	8006b9c <_free_r>
 8006a5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006a5e:	b111      	cbz	r1, 8006a66 <_reclaim_reent+0x5a>
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 f89b 	bl	8006b9c <_free_r>
 8006a66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a68:	b111      	cbz	r1, 8006a70 <_reclaim_reent+0x64>
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 f896 	bl	8006b9c <_free_r>
 8006a70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006a72:	b111      	cbz	r1, 8006a7a <_reclaim_reent+0x6e>
 8006a74:	4620      	mov	r0, r4
 8006a76:	f000 f891 	bl	8006b9c <_free_r>
 8006a7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006a7c:	b111      	cbz	r1, 8006a84 <_reclaim_reent+0x78>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f88c 	bl	8006b9c <_free_r>
 8006a84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006a86:	b111      	cbz	r1, 8006a8e <_reclaim_reent+0x82>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 f887 	bl	8006b9c <_free_r>
 8006a8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006a90:	b111      	cbz	r1, 8006a98 <_reclaim_reent+0x8c>
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 f882 	bl	8006b9c <_free_r>
 8006a98:	6a23      	ldr	r3, [r4, #32]
 8006a9a:	b14b      	cbz	r3, 8006ab0 <_reclaim_reent+0xa4>
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006aa2:	4718      	bx	r3
 8006aa4:	680e      	ldr	r6, [r1, #0]
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f878 	bl	8006b9c <_free_r>
 8006aac:	4631      	mov	r1, r6
 8006aae:	e7bb      	b.n	8006a28 <_reclaim_reent+0x1c>
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2000001c 	.word	0x2000001c

08006ab8 <_lseek_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	4611      	mov	r1, r2
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4d05      	ldr	r5, [pc, #20]	@ (8006ad8 <_lseek_r+0x20>)
 8006ac4:	602a      	str	r2, [r5, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f7fa f843 	bl	8000b52 <_lseek>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_lseek_r+0x1e>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_lseek_r+0x1e>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20001cb4 	.word	0x20001cb4

08006adc <_read_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4604      	mov	r4, r0
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4d05      	ldr	r5, [pc, #20]	@ (8006afc <_read_r+0x20>)
 8006ae8:	602a      	str	r2, [r5, #0]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f7f9 ffd4 	bl	8000a98 <_read>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_read_r+0x1e>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_read_r+0x1e>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	20001cb4 	.word	0x20001cb4

08006b00 <_write_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	4611      	mov	r1, r2
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4d05      	ldr	r5, [pc, #20]	@ (8006b20 <_write_r+0x20>)
 8006b0c:	602a      	str	r2, [r5, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f7f9 ffdf 	bl	8000ad2 <_write>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_write_r+0x1e>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_write_r+0x1e>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	20001cb4 	.word	0x20001cb4

08006b24 <__errno>:
 8006b24:	4b01      	ldr	r3, [pc, #4]	@ (8006b2c <__errno+0x8>)
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	2000001c 	.word	0x2000001c

08006b30 <__libc_init_array>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	2600      	movs	r6, #0
 8006b34:	4d0c      	ldr	r5, [pc, #48]	@ (8006b68 <__libc_init_array+0x38>)
 8006b36:	4c0d      	ldr	r4, [pc, #52]	@ (8006b6c <__libc_init_array+0x3c>)
 8006b38:	1b64      	subs	r4, r4, r5
 8006b3a:	10a4      	asrs	r4, r4, #2
 8006b3c:	42a6      	cmp	r6, r4
 8006b3e:	d109      	bne.n	8006b54 <__libc_init_array+0x24>
 8006b40:	f000 fa5e 	bl	8007000 <_init>
 8006b44:	2600      	movs	r6, #0
 8006b46:	4d0a      	ldr	r5, [pc, #40]	@ (8006b70 <__libc_init_array+0x40>)
 8006b48:	4c0a      	ldr	r4, [pc, #40]	@ (8006b74 <__libc_init_array+0x44>)
 8006b4a:	1b64      	subs	r4, r4, r5
 8006b4c:	10a4      	asrs	r4, r4, #2
 8006b4e:	42a6      	cmp	r6, r4
 8006b50:	d105      	bne.n	8006b5e <__libc_init_array+0x2e>
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b58:	4798      	blx	r3
 8006b5a:	3601      	adds	r6, #1
 8006b5c:	e7ee      	b.n	8006b3c <__libc_init_array+0xc>
 8006b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b62:	4798      	blx	r3
 8006b64:	3601      	adds	r6, #1
 8006b66:	e7f2      	b.n	8006b4e <__libc_init_array+0x1e>
 8006b68:	080070f8 	.word	0x080070f8
 8006b6c:	080070f8 	.word	0x080070f8
 8006b70:	080070f8 	.word	0x080070f8
 8006b74:	080070fc 	.word	0x080070fc

08006b78 <__retarget_lock_init_recursive>:
 8006b78:	4770      	bx	lr

08006b7a <__retarget_lock_acquire_recursive>:
 8006b7a:	4770      	bx	lr

08006b7c <__retarget_lock_release_recursive>:
 8006b7c:	4770      	bx	lr

08006b7e <memcpy>:
 8006b7e:	440a      	add	r2, r1
 8006b80:	4291      	cmp	r1, r2
 8006b82:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b86:	d100      	bne.n	8006b8a <memcpy+0xc>
 8006b88:	4770      	bx	lr
 8006b8a:	b510      	push	{r4, lr}
 8006b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b90:	4291      	cmp	r1, r2
 8006b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b96:	d1f9      	bne.n	8006b8c <memcpy+0xe>
 8006b98:	bd10      	pop	{r4, pc}
	...

08006b9c <_free_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d040      	beq.n	8006c26 <_free_r+0x8a>
 8006ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba8:	1f0c      	subs	r4, r1, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bfb8      	it	lt
 8006bae:	18e4      	addlt	r4, r4, r3
 8006bb0:	f000 f8de 	bl	8006d70 <__malloc_lock>
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c28 <_free_r+0x8c>)
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	b933      	cbnz	r3, 8006bc8 <_free_r+0x2c>
 8006bba:	6063      	str	r3, [r4, #4]
 8006bbc:	6014      	str	r4, [r2, #0]
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc4:	f000 b8da 	b.w	8006d7c <__malloc_unlock>
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d908      	bls.n	8006bde <_free_r+0x42>
 8006bcc:	6820      	ldr	r0, [r4, #0]
 8006bce:	1821      	adds	r1, r4, r0
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	bf01      	itttt	eq
 8006bd4:	6819      	ldreq	r1, [r3, #0]
 8006bd6:	685b      	ldreq	r3, [r3, #4]
 8006bd8:	1809      	addeq	r1, r1, r0
 8006bda:	6021      	streq	r1, [r4, #0]
 8006bdc:	e7ed      	b.n	8006bba <_free_r+0x1e>
 8006bde:	461a      	mov	r2, r3
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	b10b      	cbz	r3, 8006be8 <_free_r+0x4c>
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	d9fa      	bls.n	8006bde <_free_r+0x42>
 8006be8:	6811      	ldr	r1, [r2, #0]
 8006bea:	1850      	adds	r0, r2, r1
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d10b      	bne.n	8006c08 <_free_r+0x6c>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	4401      	add	r1, r0
 8006bf4:	1850      	adds	r0, r2, r1
 8006bf6:	4283      	cmp	r3, r0
 8006bf8:	6011      	str	r1, [r2, #0]
 8006bfa:	d1e0      	bne.n	8006bbe <_free_r+0x22>
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4408      	add	r0, r1
 8006c02:	6010      	str	r0, [r2, #0]
 8006c04:	6053      	str	r3, [r2, #4]
 8006c06:	e7da      	b.n	8006bbe <_free_r+0x22>
 8006c08:	d902      	bls.n	8006c10 <_free_r+0x74>
 8006c0a:	230c      	movs	r3, #12
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	e7d6      	b.n	8006bbe <_free_r+0x22>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	1821      	adds	r1, r4, r0
 8006c14:	428b      	cmp	r3, r1
 8006c16:	bf01      	itttt	eq
 8006c18:	6819      	ldreq	r1, [r3, #0]
 8006c1a:	685b      	ldreq	r3, [r3, #4]
 8006c1c:	1809      	addeq	r1, r1, r0
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	6054      	str	r4, [r2, #4]
 8006c24:	e7cb      	b.n	8006bbe <_free_r+0x22>
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20001cc0 	.word	0x20001cc0

08006c2c <sbrk_aligned>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c6c <sbrk_aligned+0x40>)
 8006c30:	460c      	mov	r4, r1
 8006c32:	6831      	ldr	r1, [r6, #0]
 8006c34:	4605      	mov	r5, r0
 8006c36:	b911      	cbnz	r1, 8006c3e <sbrk_aligned+0x12>
 8006c38:	f000 f9d2 	bl	8006fe0 <_sbrk_r>
 8006c3c:	6030      	str	r0, [r6, #0]
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 f9cd 	bl	8006fe0 <_sbrk_r>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	d103      	bne.n	8006c52 <sbrk_aligned+0x26>
 8006c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c4e:	4620      	mov	r0, r4
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	1cc4      	adds	r4, r0, #3
 8006c54:	f024 0403 	bic.w	r4, r4, #3
 8006c58:	42a0      	cmp	r0, r4
 8006c5a:	d0f8      	beq.n	8006c4e <sbrk_aligned+0x22>
 8006c5c:	1a21      	subs	r1, r4, r0
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 f9be 	bl	8006fe0 <_sbrk_r>
 8006c64:	3001      	adds	r0, #1
 8006c66:	d1f2      	bne.n	8006c4e <sbrk_aligned+0x22>
 8006c68:	e7ef      	b.n	8006c4a <sbrk_aligned+0x1e>
 8006c6a:	bf00      	nop
 8006c6c:	20001cbc 	.word	0x20001cbc

08006c70 <_malloc_r>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	1ccd      	adds	r5, r1, #3
 8006c76:	f025 0503 	bic.w	r5, r5, #3
 8006c7a:	3508      	adds	r5, #8
 8006c7c:	2d0c      	cmp	r5, #12
 8006c7e:	bf38      	it	cc
 8006c80:	250c      	movcc	r5, #12
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	4606      	mov	r6, r0
 8006c86:	db01      	blt.n	8006c8c <_malloc_r+0x1c>
 8006c88:	42a9      	cmp	r1, r5
 8006c8a:	d904      	bls.n	8006c96 <_malloc_r+0x26>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	6033      	str	r3, [r6, #0]
 8006c90:	2000      	movs	r0, #0
 8006c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d6c <_malloc_r+0xfc>
 8006c9a:	f000 f869 	bl	8006d70 <__malloc_lock>
 8006c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca2:	461c      	mov	r4, r3
 8006ca4:	bb44      	cbnz	r4, 8006cf8 <_malloc_r+0x88>
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f7ff ffbf 	bl	8006c2c <sbrk_aligned>
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	d158      	bne.n	8006d66 <_malloc_r+0xf6>
 8006cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8006cb8:	4627      	mov	r7, r4
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	d143      	bne.n	8006d46 <_malloc_r+0xd6>
 8006cbe:	2c00      	cmp	r4, #0
 8006cc0:	d04b      	beq.n	8006d5a <_malloc_r+0xea>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	eb04 0903 	add.w	r9, r4, r3
 8006ccc:	f000 f988 	bl	8006fe0 <_sbrk_r>
 8006cd0:	4581      	cmp	r9, r0
 8006cd2:	d142      	bne.n	8006d5a <_malloc_r+0xea>
 8006cd4:	6821      	ldr	r1, [r4, #0]
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	1a6d      	subs	r5, r5, r1
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7ff ffa6 	bl	8006c2c <sbrk_aligned>
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d03a      	beq.n	8006d5a <_malloc_r+0xea>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	442b      	add	r3, r5
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	f8d8 3000 	ldr.w	r3, [r8]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	bb62      	cbnz	r2, 8006d4c <_malloc_r+0xdc>
 8006cf2:	f8c8 7000 	str.w	r7, [r8]
 8006cf6:	e00f      	b.n	8006d18 <_malloc_r+0xa8>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	1b52      	subs	r2, r2, r5
 8006cfc:	d420      	bmi.n	8006d40 <_malloc_r+0xd0>
 8006cfe:	2a0b      	cmp	r2, #11
 8006d00:	d917      	bls.n	8006d32 <_malloc_r+0xc2>
 8006d02:	1961      	adds	r1, r4, r5
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	6025      	str	r5, [r4, #0]
 8006d08:	bf18      	it	ne
 8006d0a:	6059      	strne	r1, [r3, #4]
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	bf08      	it	eq
 8006d10:	f8c8 1000 	streq.w	r1, [r8]
 8006d14:	5162      	str	r2, [r4, r5]
 8006d16:	604b      	str	r3, [r1, #4]
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 f82f 	bl	8006d7c <__malloc_unlock>
 8006d1e:	f104 000b 	add.w	r0, r4, #11
 8006d22:	1d23      	adds	r3, r4, #4
 8006d24:	f020 0007 	bic.w	r0, r0, #7
 8006d28:	1ac2      	subs	r2, r0, r3
 8006d2a:	bf1c      	itt	ne
 8006d2c:	1a1b      	subne	r3, r3, r0
 8006d2e:	50a3      	strne	r3, [r4, r2]
 8006d30:	e7af      	b.n	8006c92 <_malloc_r+0x22>
 8006d32:	6862      	ldr	r2, [r4, #4]
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	bf0c      	ite	eq
 8006d38:	f8c8 2000 	streq.w	r2, [r8]
 8006d3c:	605a      	strne	r2, [r3, #4]
 8006d3e:	e7eb      	b.n	8006d18 <_malloc_r+0xa8>
 8006d40:	4623      	mov	r3, r4
 8006d42:	6864      	ldr	r4, [r4, #4]
 8006d44:	e7ae      	b.n	8006ca4 <_malloc_r+0x34>
 8006d46:	463c      	mov	r4, r7
 8006d48:	687f      	ldr	r7, [r7, #4]
 8006d4a:	e7b6      	b.n	8006cba <_malloc_r+0x4a>
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d1fb      	bne.n	8006d4c <_malloc_r+0xdc>
 8006d54:	2300      	movs	r3, #0
 8006d56:	6053      	str	r3, [r2, #4]
 8006d58:	e7de      	b.n	8006d18 <_malloc_r+0xa8>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	f000 f80c 	bl	8006d7c <__malloc_unlock>
 8006d64:	e794      	b.n	8006c90 <_malloc_r+0x20>
 8006d66:	6005      	str	r5, [r0, #0]
 8006d68:	e7d6      	b.n	8006d18 <_malloc_r+0xa8>
 8006d6a:	bf00      	nop
 8006d6c:	20001cc0 	.word	0x20001cc0

08006d70 <__malloc_lock>:
 8006d70:	4801      	ldr	r0, [pc, #4]	@ (8006d78 <__malloc_lock+0x8>)
 8006d72:	f7ff bf02 	b.w	8006b7a <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	20001cb8 	.word	0x20001cb8

08006d7c <__malloc_unlock>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	@ (8006d84 <__malloc_unlock+0x8>)
 8006d7e:	f7ff befd 	b.w	8006b7c <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	20001cb8 	.word	0x20001cb8

08006d88 <__sflush_r>:
 8006d88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	0716      	lsls	r6, r2, #28
 8006d90:	4605      	mov	r5, r0
 8006d92:	460c      	mov	r4, r1
 8006d94:	d454      	bmi.n	8006e40 <__sflush_r+0xb8>
 8006d96:	684b      	ldr	r3, [r1, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dc02      	bgt.n	8006da2 <__sflush_r+0x1a>
 8006d9c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd48      	ble.n	8006e34 <__sflush_r+0xac>
 8006da2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006da4:	2e00      	cmp	r6, #0
 8006da6:	d045      	beq.n	8006e34 <__sflush_r+0xac>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dae:	682f      	ldr	r7, [r5, #0]
 8006db0:	6a21      	ldr	r1, [r4, #32]
 8006db2:	602b      	str	r3, [r5, #0]
 8006db4:	d030      	beq.n	8006e18 <__sflush_r+0x90>
 8006db6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	0759      	lsls	r1, r3, #29
 8006dbc:	d505      	bpl.n	8006dca <__sflush_r+0x42>
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dc4:	b10b      	cbz	r3, 8006dca <__sflush_r+0x42>
 8006dc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006dc8:	1ad2      	subs	r2, r2, r3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	4628      	mov	r0, r5
 8006dce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006dd0:	6a21      	ldr	r1, [r4, #32]
 8006dd2:	47b0      	blx	r6
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	89a3      	ldrh	r3, [r4, #12]
 8006dd8:	d106      	bne.n	8006de8 <__sflush_r+0x60>
 8006dda:	6829      	ldr	r1, [r5, #0]
 8006ddc:	291d      	cmp	r1, #29
 8006dde:	d82b      	bhi.n	8006e38 <__sflush_r+0xb0>
 8006de0:	4a28      	ldr	r2, [pc, #160]	@ (8006e84 <__sflush_r+0xfc>)
 8006de2:	410a      	asrs	r2, r1
 8006de4:	07d6      	lsls	r6, r2, #31
 8006de6:	d427      	bmi.n	8006e38 <__sflush_r+0xb0>
 8006de8:	2200      	movs	r2, #0
 8006dea:	6062      	str	r2, [r4, #4]
 8006dec:	6922      	ldr	r2, [r4, #16]
 8006dee:	04d9      	lsls	r1, r3, #19
 8006df0:	6022      	str	r2, [r4, #0]
 8006df2:	d504      	bpl.n	8006dfe <__sflush_r+0x76>
 8006df4:	1c42      	adds	r2, r0, #1
 8006df6:	d101      	bne.n	8006dfc <__sflush_r+0x74>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b903      	cbnz	r3, 8006dfe <__sflush_r+0x76>
 8006dfc:	6560      	str	r0, [r4, #84]	@ 0x54
 8006dfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e00:	602f      	str	r7, [r5, #0]
 8006e02:	b1b9      	cbz	r1, 8006e34 <__sflush_r+0xac>
 8006e04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d002      	beq.n	8006e12 <__sflush_r+0x8a>
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f7ff fec5 	bl	8006b9c <_free_r>
 8006e12:	2300      	movs	r3, #0
 8006e14:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e16:	e00d      	b.n	8006e34 <__sflush_r+0xac>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b0      	blx	r6
 8006e1e:	4602      	mov	r2, r0
 8006e20:	1c50      	adds	r0, r2, #1
 8006e22:	d1c9      	bne.n	8006db8 <__sflush_r+0x30>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0c6      	beq.n	8006db8 <__sflush_r+0x30>
 8006e2a:	2b1d      	cmp	r3, #29
 8006e2c:	d001      	beq.n	8006e32 <__sflush_r+0xaa>
 8006e2e:	2b16      	cmp	r3, #22
 8006e30:	d11d      	bne.n	8006e6e <__sflush_r+0xe6>
 8006e32:	602f      	str	r7, [r5, #0]
 8006e34:	2000      	movs	r0, #0
 8006e36:	e021      	b.n	8006e7c <__sflush_r+0xf4>
 8006e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e3c:	b21b      	sxth	r3, r3
 8006e3e:	e01a      	b.n	8006e76 <__sflush_r+0xee>
 8006e40:	690f      	ldr	r7, [r1, #16]
 8006e42:	2f00      	cmp	r7, #0
 8006e44:	d0f6      	beq.n	8006e34 <__sflush_r+0xac>
 8006e46:	0793      	lsls	r3, r2, #30
 8006e48:	bf18      	it	ne
 8006e4a:	2300      	movne	r3, #0
 8006e4c:	680e      	ldr	r6, [r1, #0]
 8006e4e:	bf08      	it	eq
 8006e50:	694b      	ldreq	r3, [r1, #20]
 8006e52:	1bf6      	subs	r6, r6, r7
 8006e54:	600f      	str	r7, [r1, #0]
 8006e56:	608b      	str	r3, [r1, #8]
 8006e58:	2e00      	cmp	r6, #0
 8006e5a:	ddeb      	ble.n	8006e34 <__sflush_r+0xac>
 8006e5c:	4633      	mov	r3, r6
 8006e5e:	463a      	mov	r2, r7
 8006e60:	4628      	mov	r0, r5
 8006e62:	6a21      	ldr	r1, [r4, #32]
 8006e64:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006e68:	47e0      	blx	ip
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	dc07      	bgt.n	8006e7e <__sflush_r+0xf6>
 8006e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e76:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7e:	4407      	add	r7, r0
 8006e80:	1a36      	subs	r6, r6, r0
 8006e82:	e7e9      	b.n	8006e58 <__sflush_r+0xd0>
 8006e84:	dfbffffe 	.word	0xdfbffffe

08006e88 <_fflush_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	690b      	ldr	r3, [r1, #16]
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	460c      	mov	r4, r1
 8006e90:	b913      	cbnz	r3, 8006e98 <_fflush_r+0x10>
 8006e92:	2500      	movs	r5, #0
 8006e94:	4628      	mov	r0, r5
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	b118      	cbz	r0, 8006ea2 <_fflush_r+0x1a>
 8006e9a:	6a03      	ldr	r3, [r0, #32]
 8006e9c:	b90b      	cbnz	r3, 8006ea2 <_fflush_r+0x1a>
 8006e9e:	f7ff fc31 	bl	8006704 <__sinit>
 8006ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f3      	beq.n	8006e92 <_fflush_r+0xa>
 8006eaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006eac:	07d0      	lsls	r0, r2, #31
 8006eae:	d404      	bmi.n	8006eba <_fflush_r+0x32>
 8006eb0:	0599      	lsls	r1, r3, #22
 8006eb2:	d402      	bmi.n	8006eba <_fflush_r+0x32>
 8006eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eb6:	f7ff fe60 	bl	8006b7a <__retarget_lock_acquire_recursive>
 8006eba:	4628      	mov	r0, r5
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	f7ff ff63 	bl	8006d88 <__sflush_r>
 8006ec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	07da      	lsls	r2, r3, #31
 8006ec8:	d4e4      	bmi.n	8006e94 <_fflush_r+0xc>
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	059b      	lsls	r3, r3, #22
 8006ece:	d4e1      	bmi.n	8006e94 <_fflush_r+0xc>
 8006ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ed2:	f7ff fe53 	bl	8006b7c <__retarget_lock_release_recursive>
 8006ed6:	e7dd      	b.n	8006e94 <_fflush_r+0xc>

08006ed8 <__swhatbuf_r>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	460c      	mov	r4, r1
 8006edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee0:	4615      	mov	r5, r2
 8006ee2:	2900      	cmp	r1, #0
 8006ee4:	461e      	mov	r6, r3
 8006ee6:	b096      	sub	sp, #88	@ 0x58
 8006ee8:	da0c      	bge.n	8006f04 <__swhatbuf_r+0x2c>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	2100      	movs	r1, #0
 8006eee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ef2:	bf14      	ite	ne
 8006ef4:	2340      	movne	r3, #64	@ 0x40
 8006ef6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006efa:	2000      	movs	r0, #0
 8006efc:	6031      	str	r1, [r6, #0]
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	b016      	add	sp, #88	@ 0x58
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	466a      	mov	r2, sp
 8006f06:	f000 f849 	bl	8006f9c <_fstat_r>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	dbed      	blt.n	8006eea <__swhatbuf_r+0x12>
 8006f0e:	9901      	ldr	r1, [sp, #4]
 8006f10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006f14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006f18:	4259      	negs	r1, r3
 8006f1a:	4159      	adcs	r1, r3
 8006f1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f20:	e7eb      	b.n	8006efa <__swhatbuf_r+0x22>

08006f22 <__smakebuf_r>:
 8006f22:	898b      	ldrh	r3, [r1, #12]
 8006f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f26:	079d      	lsls	r5, r3, #30
 8006f28:	4606      	mov	r6, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	d507      	bpl.n	8006f3e <__smakebuf_r+0x1c>
 8006f2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f32:	6023      	str	r3, [r4, #0]
 8006f34:	6123      	str	r3, [r4, #16]
 8006f36:	2301      	movs	r3, #1
 8006f38:	6163      	str	r3, [r4, #20]
 8006f3a:	b003      	add	sp, #12
 8006f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3e:	466a      	mov	r2, sp
 8006f40:	ab01      	add	r3, sp, #4
 8006f42:	f7ff ffc9 	bl	8006ed8 <__swhatbuf_r>
 8006f46:	9f00      	ldr	r7, [sp, #0]
 8006f48:	4605      	mov	r5, r0
 8006f4a:	4639      	mov	r1, r7
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff fe8f 	bl	8006c70 <_malloc_r>
 8006f52:	b948      	cbnz	r0, 8006f68 <__smakebuf_r+0x46>
 8006f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f58:	059a      	lsls	r2, r3, #22
 8006f5a:	d4ee      	bmi.n	8006f3a <__smakebuf_r+0x18>
 8006f5c:	f023 0303 	bic.w	r3, r3, #3
 8006f60:	f043 0302 	orr.w	r3, r3, #2
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	e7e2      	b.n	8006f2e <__smakebuf_r+0xc>
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f72:	81a3      	strh	r3, [r4, #12]
 8006f74:	9b01      	ldr	r3, [sp, #4]
 8006f76:	6020      	str	r0, [r4, #0]
 8006f78:	b15b      	cbz	r3, 8006f92 <__smakebuf_r+0x70>
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f80:	f000 f81e 	bl	8006fc0 <_isatty_r>
 8006f84:	b128      	cbz	r0, 8006f92 <__smakebuf_r+0x70>
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f023 0303 	bic.w	r3, r3, #3
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	431d      	orrs	r5, r3
 8006f96:	81a5      	strh	r5, [r4, #12]
 8006f98:	e7cf      	b.n	8006f3a <__smakebuf_r+0x18>
	...

08006f9c <_fstat_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4d06      	ldr	r5, [pc, #24]	@ (8006fbc <_fstat_r+0x20>)
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	f7f9 fdb9 	bl	8000b20 <_fstat>
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	d102      	bne.n	8006fb8 <_fstat_r+0x1c>
 8006fb2:	682b      	ldr	r3, [r5, #0]
 8006fb4:	b103      	cbz	r3, 8006fb8 <_fstat_r+0x1c>
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	bd38      	pop	{r3, r4, r5, pc}
 8006fba:	bf00      	nop
 8006fbc:	20001cb4 	.word	0x20001cb4

08006fc0 <_isatty_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	4d05      	ldr	r5, [pc, #20]	@ (8006fdc <_isatty_r+0x1c>)
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	f7f9 fdb7 	bl	8000b3e <_isatty>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_isatty_r+0x1a>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_isatty_r+0x1a>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	20001cb4 	.word	0x20001cb4

08006fe0 <_sbrk_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	4d05      	ldr	r5, [pc, #20]	@ (8006ffc <_sbrk_r+0x1c>)
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	f7f9 fdbe 	bl	8000b6c <_sbrk>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_sbrk_r+0x1a>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_sbrk_r+0x1a>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	20001cb4 	.word	0x20001cb4

08007000 <_init>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	bf00      	nop
 8007004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007006:	bc08      	pop	{r3}
 8007008:	469e      	mov	lr, r3
 800700a:	4770      	bx	lr

0800700c <_fini>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr
