
bmp280-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a71c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800a830  0800a830  0000b830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac90  0800ac90  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac90  0800ac90  0000bc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac98  0800ac98  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac98  0800ac98  0000bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac9c  0800ac9c  0000bc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800aca0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c74  200001d8  0800ae78  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e4c  0800ae78  0000ce4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab96  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d35  00000000  00000000  00026d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0002aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000120b  00000000  00000000  0002c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba6a  00000000  00000000  0002d3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc22  00000000  00000000  00048e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099011  00000000  00000000  00065a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fea90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007204  00000000  00000000  000fead4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00105cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a814 	.word	0x0800a814

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a814 	.word	0x0800a814

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b7a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	@ 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	@ 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_ldivmod>:
 8000dc8:	b97b      	cbnz	r3, 8000dea <__aeabi_ldivmod+0x22>
 8000dca:	b972      	cbnz	r2, 8000dea <__aeabi_ldivmod+0x22>
 8000dcc:	2900      	cmp	r1, #0
 8000dce:	bfbe      	ittt	lt
 8000dd0:	2000      	movlt	r0, #0
 8000dd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000dd6:	e006      	blt.n	8000de6 <__aeabi_ldivmod+0x1e>
 8000dd8:	bf08      	it	eq
 8000dda:	2800      	cmpeq	r0, #0
 8000ddc:	bf1c      	itt	ne
 8000dde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000de2:	f04f 30ff 	movne.w	r0, #4294967295
 8000de6:	f000 b99b 	b.w	8001120 <__aeabi_idiv0>
 8000dea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df2:	2900      	cmp	r1, #0
 8000df4:	db09      	blt.n	8000e0a <__aeabi_ldivmod+0x42>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db1a      	blt.n	8000e30 <__aeabi_ldivmod+0x68>
 8000dfa:	f000 f835 	bl	8000e68 <__udivmoddi4>
 8000dfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e06:	b004      	add	sp, #16
 8000e08:	4770      	bx	lr
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db1b      	blt.n	8000e4c <__aeabi_ldivmod+0x84>
 8000e14:	f000 f828 	bl	8000e68 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	4252      	negs	r2, r2
 8000e2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e2e:	4770      	bx	lr
 8000e30:	4252      	negs	r2, r2
 8000e32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e36:	f000 f817 	bl	8000e68 <__udivmoddi4>
 8000e3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e42:	b004      	add	sp, #16
 8000e44:	4240      	negs	r0, r0
 8000e46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f809 	bl	8000e68 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4252      	negs	r2, r2
 8000e62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e66:	4770      	bx	lr

08000e68 <__udivmoddi4>:
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	9d08      	ldr	r5, [sp, #32]
 8000e6e:	460c      	mov	r4, r1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d14e      	bne.n	8000f12 <__udivmoddi4+0xaa>
 8000e74:	4694      	mov	ip, r2
 8000e76:	458c      	cmp	ip, r1
 8000e78:	4686      	mov	lr, r0
 8000e7a:	fab2 f282 	clz	r2, r2
 8000e7e:	d962      	bls.n	8000f46 <__udivmoddi4+0xde>
 8000e80:	b14a      	cbz	r2, 8000e96 <__udivmoddi4+0x2e>
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	4091      	lsls	r1, r2
 8000e88:	fa20 f303 	lsr.w	r3, r0, r3
 8000e8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e90:	4319      	orrs	r1, r3
 8000e92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e9e:	fb07 1114 	mls	r1, r7, r4, r1
 8000ea2:	fa1f f68c 	uxth.w	r6, ip
 8000ea6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eae:	fb04 f106 	mul.w	r1, r4, r6
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d90a      	bls.n	8000ecc <__udivmoddi4+0x64>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ebe:	f080 8110 	bcs.w	80010e2 <__udivmoddi4+0x27a>
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	f240 810d 	bls.w	80010e2 <__udivmoddi4+0x27a>
 8000ec8:	3c02      	subs	r4, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	1a59      	subs	r1, r3, r1
 8000ece:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ed6:	fb00 f606 	mul.w	r6, r0, r6
 8000eda:	fa1f f38e 	uxth.w	r3, lr
 8000ede:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee2:	429e      	cmp	r6, r3
 8000ee4:	d90a      	bls.n	8000efc <__udivmoddi4+0x94>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eee:	f080 80fa 	bcs.w	80010e6 <__udivmoddi4+0x27e>
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	f240 80f7 	bls.w	80010e6 <__udivmoddi4+0x27e>
 8000ef8:	4463      	add	r3, ip
 8000efa:	3802      	subs	r0, #2
 8000efc:	2100      	movs	r1, #0
 8000efe:	1b9b      	subs	r3, r3, r6
 8000f00:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f04:	b11d      	cbz	r5, 8000f0e <__udivmoddi4+0xa6>
 8000f06:	40d3      	lsrs	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d905      	bls.n	8000f22 <__udivmoddi4+0xba>
 8000f16:	b10d      	cbz	r5, 8000f1c <__udivmoddi4+0xb4>
 8000f18:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	e7f5      	b.n	8000f0e <__udivmoddi4+0xa6>
 8000f22:	fab3 f183 	clz	r1, r3
 8000f26:	2900      	cmp	r1, #0
 8000f28:	d146      	bne.n	8000fb8 <__udivmoddi4+0x150>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d302      	bcc.n	8000f34 <__udivmoddi4+0xcc>
 8000f2e:	4290      	cmp	r0, r2
 8000f30:	f0c0 80ee 	bcc.w	8001110 <__udivmoddi4+0x2a8>
 8000f34:	1a86      	subs	r6, r0, r2
 8000f36:	eb64 0303 	sbc.w	r3, r4, r3
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	d0e6      	beq.n	8000f0e <__udivmoddi4+0xa6>
 8000f40:	e9c5 6300 	strd	r6, r3, [r5]
 8000f44:	e7e3      	b.n	8000f0e <__udivmoddi4+0xa6>
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	f040 808f 	bne.w	800106a <__udivmoddi4+0x202>
 8000f4c:	eba1 040c 	sub.w	r4, r1, ip
 8000f50:	2101      	movs	r1, #1
 8000f52:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f56:	fa1f f78c 	uxth.w	r7, ip
 8000f5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f62:	fb07 f006 	mul.w	r0, r7, r6
 8000f66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6e:	4298      	cmp	r0, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x11c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x11a>
 8000f7c:	4298      	cmp	r0, r3
 8000f7e:	f200 80cb 	bhi.w	8001118 <__udivmoddi4+0x2b0>
 8000f82:	4626      	mov	r6, r4
 8000f84:	1a1c      	subs	r4, r3, r0
 8000f86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f8e:	fb00 f707 	mul.w	r7, r0, r7
 8000f92:	fa1f f38e 	uxth.w	r3, lr
 8000f96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f9a:	429f      	cmp	r7, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x148>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fa6:	d202      	bcs.n	8000fae <__udivmoddi4+0x146>
 8000fa8:	429f      	cmp	r7, r3
 8000faa:	f200 80ae 	bhi.w	800110a <__udivmoddi4+0x2a2>
 8000fae:	4620      	mov	r0, r4
 8000fb0:	1bdb      	subs	r3, r3, r7
 8000fb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fb6:	e7a5      	b.n	8000f04 <__udivmoddi4+0x9c>
 8000fb8:	f1c1 0720 	rsb	r7, r1, #32
 8000fbc:	408b      	lsls	r3, r1
 8000fbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fc6:	fa24 f607 	lsr.w	r6, r4, r7
 8000fca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fce:	fbb6 f8f9 	udiv	r8, r6, r9
 8000fd2:	fa1f fe8c 	uxth.w	lr, ip
 8000fd6:	fb09 6618 	mls	r6, r9, r8, r6
 8000fda:	fa20 f307 	lsr.w	r3, r0, r7
 8000fde:	408c      	lsls	r4, r1
 8000fe0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000fe4:	fb08 f00e 	mul.w	r0, r8, lr
 8000fe8:	431c      	orrs	r4, r3
 8000fea:	0c23      	lsrs	r3, r4, #16
 8000fec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ff0:	4298      	cmp	r0, r3
 8000ff2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ff6:	d90a      	bls.n	800100e <__udivmoddi4+0x1a6>
 8000ff8:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffc:	f108 36ff 	add.w	r6, r8, #4294967295
 8001000:	f080 8081 	bcs.w	8001106 <__udivmoddi4+0x29e>
 8001004:	4298      	cmp	r0, r3
 8001006:	d97e      	bls.n	8001106 <__udivmoddi4+0x29e>
 8001008:	f1a8 0802 	sub.w	r8, r8, #2
 800100c:	4463      	add	r3, ip
 800100e:	1a1e      	subs	r6, r3, r0
 8001010:	fbb6 f3f9 	udiv	r3, r6, r9
 8001014:	fb09 6613 	mls	r6, r9, r3, r6
 8001018:	fb03 fe0e 	mul.w	lr, r3, lr
 800101c:	b2a4      	uxth	r4, r4
 800101e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001022:	45a6      	cmp	lr, r4
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x1d0>
 8001026:	eb1c 0404 	adds.w	r4, ip, r4
 800102a:	f103 30ff 	add.w	r0, r3, #4294967295
 800102e:	d266      	bcs.n	80010fe <__udivmoddi4+0x296>
 8001030:	45a6      	cmp	lr, r4
 8001032:	d964      	bls.n	80010fe <__udivmoddi4+0x296>
 8001034:	3b02      	subs	r3, #2
 8001036:	4464      	add	r4, ip
 8001038:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800103c:	fba0 8302 	umull	r8, r3, r0, r2
 8001040:	eba4 040e 	sub.w	r4, r4, lr
 8001044:	429c      	cmp	r4, r3
 8001046:	46c6      	mov	lr, r8
 8001048:	461e      	mov	r6, r3
 800104a:	d350      	bcc.n	80010ee <__udivmoddi4+0x286>
 800104c:	d04d      	beq.n	80010ea <__udivmoddi4+0x282>
 800104e:	b155      	cbz	r5, 8001066 <__udivmoddi4+0x1fe>
 8001050:	ebba 030e 	subs.w	r3, sl, lr
 8001054:	eb64 0406 	sbc.w	r4, r4, r6
 8001058:	fa04 f707 	lsl.w	r7, r4, r7
 800105c:	40cb      	lsrs	r3, r1
 800105e:	431f      	orrs	r7, r3
 8001060:	40cc      	lsrs	r4, r1
 8001062:	e9c5 7400 	strd	r7, r4, [r5]
 8001066:	2100      	movs	r1, #0
 8001068:	e751      	b.n	8000f0e <__udivmoddi4+0xa6>
 800106a:	fa0c fc02 	lsl.w	ip, ip, r2
 800106e:	f1c2 0320 	rsb	r3, r2, #32
 8001072:	40d9      	lsrs	r1, r3
 8001074:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001078:	fa20 f303 	lsr.w	r3, r0, r3
 800107c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001080:	fbb1 f0f8 	udiv	r0, r1, r8
 8001084:	fb08 1110 	mls	r1, r8, r0, r1
 8001088:	4094      	lsls	r4, r2
 800108a:	431c      	orrs	r4, r3
 800108c:	fa1f f78c 	uxth.w	r7, ip
 8001090:	0c23      	lsrs	r3, r4, #16
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f107 	mul.w	r1, r0, r7
 800109a:	4299      	cmp	r1, r3
 800109c:	d908      	bls.n	80010b0 <__udivmoddi4+0x248>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80010a6:	d22c      	bcs.n	8001102 <__udivmoddi4+0x29a>
 80010a8:	4299      	cmp	r1, r3
 80010aa:	d92a      	bls.n	8001102 <__udivmoddi4+0x29a>
 80010ac:	3802      	subs	r0, #2
 80010ae:	4463      	add	r3, ip
 80010b0:	1a5b      	subs	r3, r3, r1
 80010b2:	fbb3 f1f8 	udiv	r1, r3, r8
 80010b6:	fb08 3311 	mls	r3, r8, r1, r3
 80010ba:	b2a4      	uxth	r4, r4
 80010bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010c0:	fb01 f307 	mul.w	r3, r1, r7
 80010c4:	42a3      	cmp	r3, r4
 80010c6:	d908      	bls.n	80010da <__udivmoddi4+0x272>
 80010c8:	eb1c 0404 	adds.w	r4, ip, r4
 80010cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80010d0:	d213      	bcs.n	80010fa <__udivmoddi4+0x292>
 80010d2:	42a3      	cmp	r3, r4
 80010d4:	d911      	bls.n	80010fa <__udivmoddi4+0x292>
 80010d6:	3902      	subs	r1, #2
 80010d8:	4464      	add	r4, ip
 80010da:	1ae4      	subs	r4, r4, r3
 80010dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010e0:	e73b      	b.n	8000f5a <__udivmoddi4+0xf2>
 80010e2:	4604      	mov	r4, r0
 80010e4:	e6f2      	b.n	8000ecc <__udivmoddi4+0x64>
 80010e6:	4608      	mov	r0, r1
 80010e8:	e708      	b.n	8000efc <__udivmoddi4+0x94>
 80010ea:	45c2      	cmp	sl, r8
 80010ec:	d2af      	bcs.n	800104e <__udivmoddi4+0x1e6>
 80010ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80010f2:	eb63 060c 	sbc.w	r6, r3, ip
 80010f6:	3801      	subs	r0, #1
 80010f8:	e7a9      	b.n	800104e <__udivmoddi4+0x1e6>
 80010fa:	4631      	mov	r1, r6
 80010fc:	e7ed      	b.n	80010da <__udivmoddi4+0x272>
 80010fe:	4603      	mov	r3, r0
 8001100:	e79a      	b.n	8001038 <__udivmoddi4+0x1d0>
 8001102:	4630      	mov	r0, r6
 8001104:	e7d4      	b.n	80010b0 <__udivmoddi4+0x248>
 8001106:	46b0      	mov	r8, r6
 8001108:	e781      	b.n	800100e <__udivmoddi4+0x1a6>
 800110a:	4463      	add	r3, ip
 800110c:	3802      	subs	r0, #2
 800110e:	e74f      	b.n	8000fb0 <__udivmoddi4+0x148>
 8001110:	4606      	mov	r6, r0
 8001112:	4623      	mov	r3, r4
 8001114:	4608      	mov	r0, r1
 8001116:	e711      	b.n	8000f3c <__udivmoddi4+0xd4>
 8001118:	3e02      	subs	r6, #2
 800111a:	4463      	add	r3, ip
 800111c:	e732      	b.n	8000f84 <__udivmoddi4+0x11c>
 800111e:	bf00      	nop

08001120 <__aeabi_idiv0>:
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <BMP280_CalibrationConstantsRead_I2C>:
 * Read constants used for temperature and pressure calculations from
 * sensor's memory
 */
//@{
void BMP280_CalibrationConstantsRead_I2C(I2C_HandleTypeDef i2c_handle,
                                         uint8_t device_address) {
 8001124:	b084      	sub	sp, #16
 8001126:	b580      	push	{r7, lr}
 8001128:	b08c      	sub	sp, #48	@ 0x30
 800112a:	af04      	add	r7, sp, #16
 800112c:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8001130:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t calibrationConstantsRaw[26];

  HAL_I2C_Mem_Read(&i2c_handle,
 8001134:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8001138:	b299      	uxth	r1, r3
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	231a      	movs	r3, #26
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	2288      	movs	r2, #136	@ 0x88
 800114c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001150:	f001 fecc 	bl	8002eec <HAL_I2C_Mem_Read>
                   1,
                   calibrationConstantsRaw,
                   26,
                   HAL_MAX_DELAY);

  dig_T1 = calibrationConstantsRaw[0] | calibrationConstantsRaw[1] << 8;
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	b21a      	sxth	r2, r3
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21b      	sxth	r3, r3
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <BMP280_CalibrationConstantsRead_I2C+0x11c>)
 8001166:	801a      	strh	r2, [r3, #0]
  dig_T2 = calibrationConstantsRaw[2] | calibrationConstantsRaw[3] << 8;
 8001168:	79bb      	ldrb	r3, [r7, #6]
 800116a:	b21a      	sxth	r2, r3
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <BMP280_CalibrationConstantsRead_I2C+0x120>)
 8001178:	801a      	strh	r2, [r3, #0]
  dig_T3 = calibrationConstantsRaw[4] | calibrationConstantsRaw[5] << 8;
 800117a:	7a3b      	ldrb	r3, [r7, #8]
 800117c:	b21a      	sxth	r2, r3
 800117e:	7a7b      	ldrb	r3, [r7, #9]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <BMP280_CalibrationConstantsRead_I2C+0x124>)
 800118a:	801a      	strh	r2, [r3, #0]

  dig_P1 = calibrationConstantsRaw[6] | calibrationConstantsRaw[7] << 8;
 800118c:	7abb      	ldrb	r3, [r7, #10]
 800118e:	b21a      	sxth	r2, r3
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21b      	sxth	r3, r3
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <BMP280_CalibrationConstantsRead_I2C+0x128>)
 800119e:	801a      	strh	r2, [r3, #0]
  dig_P2 = calibrationConstantsRaw[8] | calibrationConstantsRaw[9] << 8;
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <BMP280_CalibrationConstantsRead_I2C+0x12c>)
 80011b0:	801a      	strh	r2, [r3, #0]
  dig_P3 = calibrationConstantsRaw[10] | calibrationConstantsRaw[11] << 8;
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b24      	ldr	r3, [pc, #144]	@ (8001254 <BMP280_CalibrationConstantsRead_I2C+0x130>)
 80011c2:	801a      	strh	r2, [r3, #0]
  dig_P4 = calibrationConstantsRaw[12] | calibrationConstantsRaw[13] << 8;
 80011c4:	7c3b      	ldrb	r3, [r7, #16]
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7c7b      	ldrb	r3, [r7, #17]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <BMP280_CalibrationConstantsRead_I2C+0x134>)
 80011d4:	801a      	strh	r2, [r3, #0]
  dig_P5 = calibrationConstantsRaw[14] | calibrationConstantsRaw[15] << 8;
 80011d6:	7cbb      	ldrb	r3, [r7, #18]
 80011d8:	b21a      	sxth	r2, r3
 80011da:	7cfb      	ldrb	r3, [r7, #19]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <BMP280_CalibrationConstantsRead_I2C+0x138>)
 80011e6:	801a      	strh	r2, [r3, #0]
  dig_P6 = calibrationConstantsRaw[16] | calibrationConstantsRaw[17] << 8;
 80011e8:	7d3b      	ldrb	r3, [r7, #20]
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7d7b      	ldrb	r3, [r7, #21]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <BMP280_CalibrationConstantsRead_I2C+0x13c>)
 80011f8:	801a      	strh	r2, [r3, #0]
  dig_P7 = calibrationConstantsRaw[18] | calibrationConstantsRaw[19] << 8;
 80011fa:	7dbb      	ldrb	r3, [r7, #22]
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7dfb      	ldrb	r3, [r7, #23]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <BMP280_CalibrationConstantsRead_I2C+0x140>)
 800120a:	801a      	strh	r2, [r3, #0]
  dig_P8 = calibrationConstantsRaw[20] | calibrationConstantsRaw[21] << 8;
 800120c:	7e3b      	ldrb	r3, [r7, #24]
 800120e:	b21a      	sxth	r2, r3
 8001210:	7e7b      	ldrb	r3, [r7, #25]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <BMP280_CalibrationConstantsRead_I2C+0x144>)
 800121c:	801a      	strh	r2, [r3, #0]
  dig_P9 = calibrationConstantsRaw[22] | calibrationConstantsRaw[23] << 8;
 800121e:	7ebb      	ldrb	r3, [r7, #26]
 8001220:	b21a      	sxth	r2, r3
 8001222:	7efb      	ldrb	r3, [r7, #27]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <BMP280_CalibrationConstantsRead_I2C+0x148>)
 800122e:	801a      	strh	r2, [r3, #0]

} //@}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800123a:	b004      	add	sp, #16
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000204 	.word	0x20000204
 8001244:	20000208 	.word	0x20000208
 8001248:	2000020a 	.word	0x2000020a
 800124c:	20000206 	.word	0x20000206
 8001250:	2000020c 	.word	0x2000020c
 8001254:	2000020e 	.word	0x2000020e
 8001258:	20000210 	.word	0x20000210
 800125c:	20000212 	.word	0x20000212
 8001260:	20000214 	.word	0x20000214
 8001264:	20000216 	.word	0x20000216
 8001268:	20000218 	.word	0x20000218
 800126c:	2000021a 	.word	0x2000021a

08001270 <BMP280_Init_I2C>:
                     uint8_t osrs_p,
                     uint8_t acq_mode,
                     uint8_t t_sb,
                     uint8_t filter_tc,
                     I2C_HandleTypeDef i2c_handle,
                     uint8_t device_address) {
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b097      	sub	sp, #92	@ 0x5c
 8001274:	af12      	add	r7, sp, #72	@ 0x48
 8001276:	4604      	mov	r4, r0
 8001278:	4608      	mov	r0, r1
 800127a:	4611      	mov	r1, r2
 800127c:	461a      	mov	r2, r3
 800127e:	4623      	mov	r3, r4
 8001280:	71fb      	strb	r3, [r7, #7]
 8001282:	4603      	mov	r3, r0
 8001284:	71bb      	strb	r3, [r7, #6]
 8001286:	460b      	mov	r3, r1
 8001288:	717b      	strb	r3, [r7, #5]
 800128a:	4613      	mov	r3, r2
 800128c:	713b      	strb	r3, [r7, #4]
  uint8_t writeBuffer, readBuffer; // Variables used for applying changes to
                                   // selected bits in device registers */
  HAL_StatusTypeDef status;

  // Reset the device
  writeBuffer = 0xB6;
 800128e:	23b6      	movs	r3, #182	@ 0xb6
 8001290:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle,
 8001292:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001296:	b299      	uxth	r1, r3
 8001298:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	2301      	movs	r3, #1
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	f107 030e 	add.w	r3, r7, #14
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	22e0      	movs	r2, #224	@ 0xe0
 80012b0:	f001 fd22 	bl	8002cf8 <HAL_I2C_Mem_Write>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
                             BMP280_REG_RESET,
                             1,
                             &writeBuffer,
                             1,
                             HAL_MAX_DELAY);
  if (status != HAL_OK) {
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <BMP280_Init_I2C+0x52>
    return false;
 80012be:	2300      	movs	r3, #0
 80012c0:	e0a4      	b.n	800140c <BMP280_Init_I2C+0x19c>
  }
  HAL_Delay(100);
 80012c2:	2064      	movs	r0, #100	@ 0x64
 80012c4:	f001 f934 	bl	8002530 <HAL_Delay>

  // Read device ID
  status = HAL_I2C_Mem_Read(&i2c_handle,
 80012c8:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80012cc:	b299      	uxth	r1, r3
 80012ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2301      	movs	r3, #1
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f107 030d 	add.w	r3, r7, #13
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	22d0      	movs	r2, #208	@ 0xd0
 80012e6:	f001 fe01 	bl	8002eec <HAL_I2C_Mem_Read>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
                            BMP280_REG_ID,
                            1,
                            &readBuffer,
                            1,
                            HAL_MAX_DELAY);
  if (status != HAL_OK || readBuffer != BMP280_VAL_DEVID) {
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <BMP280_Init_I2C+0x8a>
 80012f4:	7b7b      	ldrb	r3, [r7, #13]
 80012f6:	2b58      	cmp	r3, #88	@ 0x58
 80012f8:	d001      	beq.n	80012fe <BMP280_Init_I2C+0x8e>
    return false;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e086      	b.n	800140c <BMP280_Init_I2C+0x19c>
  }

  // Read calibration constants
  BMP280_CalibrationConstantsRead_I2C(i2c_handle, device_address);
 80012fe:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001302:	9311      	str	r3, [sp, #68]	@ 0x44
 8001304:	4668      	mov	r0, sp
 8001306:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800130a:	2244      	movs	r2, #68	@ 0x44
 800130c:	4619      	mov	r1, r3
 800130e:	f007 fc76 	bl	8008bfe <memcpy>
 8001312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001316:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001318:	f7ff ff04 	bl	8001124 <BMP280_CalibrationConstantsRead_I2C>

  // Write timing and IIR data to config register
  writeBuffer = (t_sb << 5) | (filter_tc << 2);
 800131c:	793b      	ldrb	r3, [r7, #4]
 800131e:	015b      	lsls	r3, r3, #5
 8001320:	b25a      	sxtb	r2, r3
 8001322:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	b25b      	sxtb	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle,
 8001332:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8001336:	b299      	uxth	r1, r3
 8001338:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030e 	add.w	r3, r7, #14
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22f5      	movs	r2, #245	@ 0xf5
 8001350:	f001 fcd2 	bl	8002cf8 <HAL_I2C_Mem_Write>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
                             BMP280_REG_CONFIG,
                             1,
                             &writeBuffer,
                             1,
                             HAL_MAX_DELAY);
  status = HAL_I2C_Mem_Read(&i2c_handle,
 8001358:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800135c:	b299      	uxth	r1, r3
 800135e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f107 030d 	add.w	r3, r7, #13
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	22f5      	movs	r2, #245	@ 0xf5
 8001376:	f001 fdb9 	bl	8002eec <HAL_I2C_Mem_Read>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
                            BMP280_REG_CONFIG,
                            1,
                            &readBuffer,
                            1,
                            HAL_MAX_DELAY);
  if (readBuffer != writeBuffer || status != HAL_OK) {
 800137e:	7b7a      	ldrb	r2, [r7, #13]
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	429a      	cmp	r2, r3
 8001384:	d102      	bne.n	800138c <BMP280_Init_I2C+0x11c>
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <BMP280_Init_I2C+0x120>
    return false;
 800138c:	2300      	movs	r3, #0
 800138e:	e03d      	b.n	800140c <BMP280_Init_I2C+0x19c>
  }

  // Write oversampling and mode data to ctrl_meas register
  writeBuffer = (osrs_t << 5) | (osrs_p << 2) | (acq_mode << 0);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	b25a      	sxtb	r2, r3
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25a      	sxtb	r2, r3
 80013a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Write(&i2c_handle,
 80013ac:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80013b0:	b299      	uxth	r1, r3
 80013b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	2301      	movs	r3, #1
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f107 030e 	add.w	r3, r7, #14
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	22f4      	movs	r2, #244	@ 0xf4
 80013ca:	f001 fc95 	bl	8002cf8 <HAL_I2C_Mem_Write>
 80013ce:	4603      	mov	r3, r0
 80013d0:	73fb      	strb	r3, [r7, #15]
                             BMP280_REG_CTRL_MEAS,
                             1,
                             &writeBuffer,
                             1,
                             HAL_MAX_DELAY);
  status = HAL_I2C_Mem_Read(&i2c_handle,
 80013d2:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80013d6:	b299      	uxth	r1, r3
 80013d8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	2301      	movs	r3, #1
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f107 030d 	add.w	r3, r7, #13
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	22f4      	movs	r2, #244	@ 0xf4
 80013f0:	f001 fd7c 	bl	8002eec <HAL_I2C_Mem_Read>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
                            BMP280_REG_CTRL_MEAS,
                            1,
                            &readBuffer,
                            1,
                            HAL_MAX_DELAY);
  if (readBuffer != writeBuffer || status != HAL_OK) {
 80013f8:	7b7a      	ldrb	r2, [r7, #13]
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d102      	bne.n	8001406 <BMP280_Init_I2C+0x196>
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <BMP280_Init_I2C+0x19a>
    return false;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <BMP280_Init_I2C+0x19c>
  }

  return true;
 800140a:	2301      	movs	r3, #1
} //@}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}

08001414 <BMP280_Measure_I2C>:

  return true;
}

struct BMP280_Result BMP280_Measure_I2C(I2C_HandleTypeDef i2c_handle,
                                        uint8_t device_address) {
 8001414:	b084      	sub	sp, #16
 8001416:	b580      	push	{r7, lr}
 8001418:	b094      	sub	sp, #80	@ 0x50
 800141a:	af12      	add	r7, sp, #72	@ 0x48
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	f107 0014 	add.w	r0, r7, #20
 8001422:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  if (BMP280_RawDataRead_I2C(i2c_handle, device_address) == HAL_OK) {
 8001426:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800142a:	9311      	str	r3, [sp, #68]	@ 0x44
 800142c:	4668      	mov	r0, sp
 800142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001432:	2244      	movs	r2, #68	@ 0x44
 8001434:	4619      	mov	r1, r3
 8001436:	f007 fbe2 	bl	8008bfe <memcpy>
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001440:	f000 f866 	bl	8001510 <BMP280_RawDataRead_I2C>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d148      	bne.n	80014dc <BMP280_Measure_I2C+0xc8>
    if (rawTemperature == 0x80000) {
 800144a:	4b2c      	ldr	r3, [pc, #176]	@ (80014fc <BMP280_Measure_I2C+0xe8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001452:	d104      	bne.n	800145e <BMP280_Measure_I2C+0x4a>
      result.Temperature = 0; // value in case temp measurement was disabled
 8001454:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <BMP280_Measure_I2C+0xec>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e016      	b.n	800148c <BMP280_Measure_I2C+0x78>
    } else {
      result.Temperature = (BMP280_calculate_T_int32(rawTemperature)) /
 800145e:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <BMP280_Measure_I2C+0xe8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f8ae 	bl	80015c4 <BMP280_calculate_T_int32>
 8001468:	4603      	mov	r3, r0
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe ffca 	bl	8000404 <__aeabi_i2d>
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <BMP280_Measure_I2C+0xf0>)
 8001476:	f7ff f959 	bl	800072c <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb01 	bl	8000a88 <__aeabi_d2f>
 8001486:	4603      	mov	r3, r0
 8001488:	4a1d      	ldr	r2, [pc, #116]	@ (8001500 <BMP280_Measure_I2C+0xec>)
 800148a:	6013      	str	r3, [r2, #0]
                           100.0; // as per datasheet, the temp is x100
    }

    if (rawPressure == 0x80000)
 800148c:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <BMP280_Measure_I2C+0xf4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001494:	d104      	bne.n	80014a0 <BMP280_Measure_I2C+0x8c>
      result.Pressure = 0; // value in case temp measurement was disabled
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <BMP280_Measure_I2C+0xec>)
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	e016      	b.n	80014ce <BMP280_Measure_I2C+0xba>
    else {
#if RETURN_64BIT
      result.Pressure = (BMP280_calculate_P_int64(rawPressure)) /
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <BMP280_Measure_I2C+0xf4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f8cd 	bl	8001644 <BMP280_calculate_P_int64>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe ff99 	bl	80003e4 <__aeabi_ui2d>
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <BMP280_Measure_I2C+0xf8>)
 80014b8:	f7ff f938 	bl	800072c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fae0 	bl	8000a88 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001500 <BMP280_Measure_I2C+0xec>)
 80014cc:	6053      	str	r3, [r2, #4]
      result.Pressure = (BMP280_calculate_P_int32(
          rawPressure)); // as per datasheet, the pressure is Pa

#endif
    }
    return result;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <BMP280_Measure_I2C+0xec>)
 80014d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80014da:	e007      	b.n	80014ec <BMP280_Measure_I2C+0xd8>
  }

  // if the device is detached
  else {
    return noResult;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  }
}
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014f6:	b004      	add	sp, #16
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	200001f4 	.word	0x200001f4
 8001500:	200001fc 	.word	0x200001fc
 8001504:	40590000 	.word	0x40590000
 8001508:	200001f8 	.word	0x200001f8
 800150c:	40700000 	.word	0x40700000

08001510 <BMP280_RawDataRead_I2C>:

static inline HAL_StatusTypeDef
BMP280_RawDataRead_I2C(I2C_HandleTypeDef i2c_handle, uint8_t device_address) {
 8001510:	b084      	sub	sp, #16
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af04      	add	r7, sp, #16
 8001518:	f107 0c10 	add.w	ip, r7, #16
 800151c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  HAL_StatusTypeDef status;
  uint8_t MeasurementStatus = {0}, RawData[6] = {0};
 8001520:	2300      	movs	r3, #0
 8001522:	71bb      	strb	r3, [r7, #6]
 8001524:	2300      	movs	r3, #0
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	80bb      	strh	r3, [r7, #4]

  do {
    status = HAL_I2C_Mem_Read(&i2c_handle,
 800152c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001530:	b299      	uxth	r1, r3
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	2301      	movs	r3, #1
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2301      	movs	r3, #1
 8001542:	22f3      	movs	r2, #243	@ 0xf3
 8001544:	f107 0010 	add.w	r0, r7, #16
 8001548:	f001 fcd0 	bl	8002eec <HAL_I2C_Mem_Read>
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
                              BMP280_REG_STATUS,
                              1,
                              &MeasurementStatus,
                              1,
                              HAL_MAX_DELAY);
  } while (MeasurementStatus & 0b00001000); // Wait for measurement to finish
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e8      	bne.n	800152c <BMP280_RawDataRead_I2C+0x1c>

  status = HAL_I2C_Mem_Read(&i2c_handle,
 800155a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800155e:	b299      	uxth	r1, r3
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2306      	movs	r3, #6
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	463b      	mov	r3, r7
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2301      	movs	r3, #1
 8001570:	22f7      	movs	r2, #247	@ 0xf7
 8001572:	f107 0010 	add.w	r0, r7, #16
 8001576:	f001 fcb9 	bl	8002eec <HAL_I2C_Mem_Read>
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
                            1,
                            RawData,
                            6,
                            HAL_MAX_DELAY);

  rawPressure = RawData[0] << 12 | RawData[1] << 4 | RawData[2] >> 4;
 800157e:	783b      	ldrb	r3, [r7, #0]
 8001580:	031a      	lsls	r2, r3, #12
 8001582:	787b      	ldrb	r3, [r7, #1]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4313      	orrs	r3, r2
 8001588:	78ba      	ldrb	r2, [r7, #2]
 800158a:	0912      	lsrs	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	4313      	orrs	r3, r2
 8001590:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <BMP280_RawDataRead_I2C+0xac>)
 8001592:	6013      	str	r3, [r2, #0]
  rawTemperature = RawData[3] << 12 | RawData[4] << 4 | RawData[5] >> 4;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	031a      	lsls	r2, r3, #12
 8001598:	793b      	ldrb	r3, [r7, #4]
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4313      	orrs	r3, r2
 800159e:	797a      	ldrb	r2, [r7, #5]
 80015a0:	0912      	lsrs	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	4313      	orrs	r3, r2
 80015a6:	4a06      	ldr	r2, [pc, #24]	@ (80015c0 <BMP280_RawDataRead_I2C+0xb0>)
 80015a8:	6013      	str	r3, [r2, #0]

  return status;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015b6:	b004      	add	sp, #16
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200001f8 	.word	0x200001f8
 80015c0:	200001f4 	.word	0x200001f4

080015c4 <BMP280_calculate_T_int32>:

/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123”
   equals 51.23 DegC. t_fine carries fine temperature as global value
*/
int32_t t_fine;
static inline int32_t BMP280_calculate_T_int32(int32_t adc_T) {
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  int32_t var1, var2, T;
  // compensate
  var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	10da      	asrs	r2, r3, #3
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <BMP280_calculate_T_int32+0x70>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <BMP280_calculate_T_int32+0x74>)
 80015da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	12db      	asrs	r3, r3, #11
 80015e4:	617b      	str	r3, [r7, #20]
  var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	111b      	asrs	r3, r3, #4
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <BMP280_calculate_T_int32+0x70>)
 80015ec:	8812      	ldrh	r2, [r2, #0]
 80015ee:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - ((int32_t)dig_T1))) >>
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	1112      	asrs	r2, r2, #4
 80015f4:	490f      	ldr	r1, [pc, #60]	@ (8001634 <BMP280_calculate_T_int32+0x70>)
 80015f6:	8809      	ldrh	r1, [r1, #0]
 80015f8:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
            ((adc_T >> 4) - ((int32_t)dig_T1))) >>
 80015fe:	131b      	asrs	r3, r3, #12
           12) *
          ((int32_t)dig_T3)) >>
 8001600:	4a0e      	ldr	r2, [pc, #56]	@ (800163c <BMP280_calculate_T_int32+0x78>)
 8001602:	f9b2 2000 	ldrsh.w	r2, [r2]
           12) *
 8001606:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 800160a:	139b      	asrs	r3, r3, #14
 800160c:	613b      	str	r3, [r7, #16]
         14;
  t_fine = var1 + var2;
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4413      	add	r3, r2
 8001614:	4a0a      	ldr	r2, [pc, #40]	@ (8001640 <BMP280_calculate_T_int32+0x7c>)
 8001616:	6013      	str	r3, [r2, #0]
  T = (t_fine * 5 + 128) >> 8;
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <BMP280_calculate_T_int32+0x7c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3380      	adds	r3, #128	@ 0x80
 8001624:	121b      	asrs	r3, r3, #8
 8001626:	60fb      	str	r3, [r7, #12]
  // calculate
  return T;
 8001628:	68fb      	ldr	r3, [r7, #12]
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000204 	.word	0x20000204
 8001638:	20000208 	.word	0x20000208
 800163c:	2000020a 	.word	0x2000020a
 8001640:	2000021c 	.word	0x2000021c

08001644 <BMP280_calculate_P_int64>:
#if RETURN_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer
   bits and 8 fractional bits). Output value of “24674867” represents
   24674867/256 = 96386.2 Pa = 963.862 hPa
*/
static inline uint32_t BMP280_calculate_P_int64(int32_t adc_P) {
 8001644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001648:	b0ca      	sub	sp, #296	@ 0x128
 800164a:	af00      	add	r7, sp, #0
 800164c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  int64_t var1, var2, p;
  var1 = ((int64_t)t_fine) - 128000;
 8001650:	4bae      	ldr	r3, [pc, #696]	@ (800190c <BMP280_calculate_P_int64+0x2c8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	17da      	asrs	r2, r3, #31
 8001656:	461c      	mov	r4, r3
 8001658:	4615      	mov	r5, r2
 800165a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800165e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001662:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
  var2 = var1 * var1 * (int64_t)dig_P6;
 8001666:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800166a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800166e:	fb03 f102 	mul.w	r1, r3, r2
 8001672:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001676:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	18ca      	adds	r2, r1, r3
 8001680:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001684:	fba3 8903 	umull	r8, r9, r3, r3
 8001688:	eb02 0309 	add.w	r3, r2, r9
 800168c:	4699      	mov	r9, r3
 800168e:	4ba0      	ldr	r3, [pc, #640]	@ (8001910 <BMP280_calculate_P_int64+0x2cc>)
 8001690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001694:	b21b      	sxth	r3, r3
 8001696:	17da      	asrs	r2, r3, #31
 8001698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800169c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80016a0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016a4:	4603      	mov	r3, r0
 80016a6:	fb03 f209 	mul.w	r2, r3, r9
 80016aa:	460b      	mov	r3, r1
 80016ac:	fb08 f303 	mul.w	r3, r8, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	4602      	mov	r2, r0
 80016b4:	fba8 2102 	umull	r2, r1, r8, r2
 80016b8:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 80016bc:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80016c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016c4:	4413      	add	r3, r2
 80016c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80016ca:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80016ce:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80016d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 80016d6:	4b8f      	ldr	r3, [pc, #572]	@ (8001914 <BMP280_calculate_P_int64+0x2d0>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80016e4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80016e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016ec:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80016f0:	462a      	mov	r2, r5
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	441a      	add	r2, r3
 8001702:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001706:	4621      	mov	r1, r4
 8001708:	fba3 3101 	umull	r3, r1, r3, r1
 800170c:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001710:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800172a:	462b      	mov	r3, r5
 800172c:	0459      	lsls	r1, r3, #17
 800172e:	4622      	mov	r2, r4
 8001730:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001734:	4623      	mov	r3, r4
 8001736:	0458      	lsls	r0, r3, #17
 8001738:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800173c:	1814      	adds	r4, r2, r0
 800173e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001740:	414b      	adcs	r3, r1
 8001742:	647b      	str	r3, [r7, #68]	@ 0x44
 8001744:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001748:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var2 = var2 + (((int64_t)dig_P4) << 35);
 800174c:	4b72      	ldr	r3, [pc, #456]	@ (8001918 <BMP280_calculate_P_int64+0x2d4>)
 800174e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001752:	b21b      	sxth	r3, r3
 8001754:	17da      	asrs	r2, r3, #31
 8001756:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800175a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800175e:	f04f 0000 	mov.w	r0, #0
 8001762:	f04f 0100 	mov.w	r1, #0
 8001766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800176a:	00d9      	lsls	r1, r3, #3
 800176c:	2000      	movs	r0, #0
 800176e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001772:	1814      	adds	r4, r2, r0
 8001774:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001776:	414b      	adcs	r3, r1
 8001778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800177a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800177e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var1 =
      ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
 8001782:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001786:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800178a:	fb03 f102 	mul.w	r1, r3, r2
 800178e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001792:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	18ca      	adds	r2, r1, r3
 800179c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017a0:	fba3 3103 	umull	r3, r1, r3, r3
 80017a4:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 80017a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80017ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017b6:	4b59      	ldr	r3, [pc, #356]	@ (800191c <BMP280_calculate_P_int64+0x2d8>)
 80017b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	17da      	asrs	r2, r3, #31
 80017c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80017c4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80017c8:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 80017cc:	4622      	mov	r2, r4
 80017ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80017d2:	4641      	mov	r1, r8
 80017d4:	fb01 f202 	mul.w	r2, r1, r2
 80017d8:	464d      	mov	r5, r9
 80017da:	4618      	mov	r0, r3
 80017dc:	4621      	mov	r1, r4
 80017de:	4603      	mov	r3, r0
 80017e0:	fb03 f305 	mul.w	r3, r3, r5
 80017e4:	4413      	add	r3, r2
 80017e6:	4602      	mov	r2, r0
 80017e8:	4641      	mov	r1, r8
 80017ea:	fba2 2101 	umull	r2, r1, r2, r1
 80017ee:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80017f2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80017f6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80017fa:	4413      	add	r3, r2
 80017fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800180c:	4623      	mov	r3, r4
 800180e:	0a18      	lsrs	r0, r3, #8
 8001810:	462a      	mov	r2, r5
 8001812:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001816:	462b      	mov	r3, r5
 8001818:	1219      	asrs	r1, r3, #8
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <BMP280_calculate_P_int64+0x2dc>)
 800181c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001820:	b21b      	sxth	r3, r3
 8001822:	17da      	asrs	r2, r3, #31
 8001824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001828:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800182c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001830:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001834:	464a      	mov	r2, r9
 8001836:	fb02 f203 	mul.w	r2, r2, r3
 800183a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800183e:	4644      	mov	r4, r8
 8001840:	fb04 f303 	mul.w	r3, r4, r3
 8001844:	441a      	add	r2, r3
 8001846:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800184a:	4644      	mov	r4, r8
 800184c:	fba3 3404 	umull	r3, r4, r3, r4
 8001850:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001854:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001858:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800185c:	18d3      	adds	r3, r2, r3
 800185e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800186e:	464c      	mov	r4, r9
 8001870:	0323      	lsls	r3, r4, #12
 8001872:	46c4      	mov	ip, r8
 8001874:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001878:	4644      	mov	r4, r8
 800187a:	0322      	lsls	r2, r4, #12
  var1 =
 800187c:	1884      	adds	r4, r0, r2
 800187e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001880:	eb41 0303 	adc.w	r3, r1, r3
 8001884:	637b      	str	r3, [r7, #52]	@ 0x34
 8001886:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800188a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
  var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 800188e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001892:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001896:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800189a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <BMP280_calculate_P_int64+0x2e0>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018aa:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018ae:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80018b2:	4622      	mov	r2, r4
 80018b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80018b8:	4641      	mov	r1, r8
 80018ba:	fb01 f202 	mul.w	r2, r1, r2
 80018be:	464d      	mov	r5, r9
 80018c0:	4618      	mov	r0, r3
 80018c2:	4621      	mov	r1, r4
 80018c4:	4603      	mov	r3, r0
 80018c6:	fb03 f305 	mul.w	r3, r3, r5
 80018ca:	4413      	add	r3, r2
 80018cc:	4602      	mov	r2, r0
 80018ce:	4641      	mov	r1, r8
 80018d0:	fba2 2101 	umull	r2, r1, r2, r1
 80018d4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 80018d8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80018dc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80018e0:	4413      	add	r3, r2
 80018e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80018f2:	4629      	mov	r1, r5
 80018f4:	104a      	asrs	r2, r1, #1
 80018f6:	4629      	mov	r1, r5
 80018f8:	17cb      	asrs	r3, r1, #31
 80018fa:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  if (var1 == 0) {
 80018fe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001902:	4313      	orrs	r3, r2
 8001904:	d110      	bne.n	8001928 <BMP280_calculate_P_int64+0x2e4>
    return 0; // avoid exception caused by division by zero
 8001906:	2300      	movs	r3, #0
 8001908:	e152      	b.n	8001bb0 <BMP280_calculate_P_int64+0x56c>
 800190a:	bf00      	nop
 800190c:	2000021c 	.word	0x2000021c
 8001910:	20000214 	.word	0x20000214
 8001914:	20000212 	.word	0x20000212
 8001918:	20000210 	.word	0x20000210
 800191c:	2000020e 	.word	0x2000020e
 8001920:	2000020c 	.word	0x2000020c
 8001924:	20000206 	.word	0x20000206
  }
  p = 1048576 - adc_P;
 8001928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800192c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001930:	17da      	asrs	r2, r3, #31
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001934:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001936:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800193a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  p = (((p << 31) - var2) * 3125) / var1;
 800193e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001942:	105b      	asrs	r3, r3, #1
 8001944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001948:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800194c:	07db      	lsls	r3, r3, #31
 800194e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001952:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800195a:	4604      	mov	r4, r0
 800195c:	1aa4      	subs	r4, r4, r2
 800195e:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001960:	eb61 0303 	sbc.w	r3, r1, r3
 8001964:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001966:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	1891      	adds	r1, r2, r2
 8001970:	6239      	str	r1, [r7, #32]
 8001972:	415b      	adcs	r3, r3
 8001974:	627b      	str	r3, [r7, #36]	@ 0x24
 8001976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800197a:	4621      	mov	r1, r4
 800197c:	1851      	adds	r1, r2, r1
 800197e:	61b9      	str	r1, [r7, #24]
 8001980:	4629      	mov	r1, r5
 8001982:	414b      	adcs	r3, r1
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001992:	4649      	mov	r1, r9
 8001994:	018b      	lsls	r3, r1, #6
 8001996:	4641      	mov	r1, r8
 8001998:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199c:	4641      	mov	r1, r8
 800199e:	018a      	lsls	r2, r1, #6
 80019a0:	4641      	mov	r1, r8
 80019a2:	1889      	adds	r1, r1, r2
 80019a4:	6139      	str	r1, [r7, #16]
 80019a6:	4649      	mov	r1, r9
 80019a8:	eb43 0101 	adc.w	r1, r3, r1
 80019ac:	6179      	str	r1, [r7, #20]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019ba:	4649      	mov	r1, r9
 80019bc:	008b      	lsls	r3, r1, #2
 80019be:	46c4      	mov	ip, r8
 80019c0:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80019c4:	4641      	mov	r1, r8
 80019c6:	008a      	lsls	r2, r1, #2
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	4603      	mov	r3, r0
 80019ce:	4622      	mov	r2, r4
 80019d0:	189b      	adds	r3, r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	460b      	mov	r3, r1
 80019d6:	462a      	mov	r2, r5
 80019d8:	eb42 0303 	adc.w	r3, r2, r3
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019ea:	4649      	mov	r1, r9
 80019ec:	008b      	lsls	r3, r1, #2
 80019ee:	46c4      	mov	ip, r8
 80019f0:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 80019f4:	4641      	mov	r1, r8
 80019f6:	008a      	lsls	r2, r1, #2
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	4603      	mov	r3, r0
 80019fe:	4622      	mov	r2, r4
 8001a00:	189b      	adds	r3, r3, r2
 8001a02:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a04:	462b      	mov	r3, r5
 8001a06:	460a      	mov	r2, r1
 8001a08:	eb42 0303 	adc.w	r3, r2, r3
 8001a0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a0e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a12:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a16:	f7ff f9d7 	bl	8000dc8 <__aeabi_ldivmod>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
  var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001a22:	4b66      	ldr	r3, [pc, #408]	@ (8001bbc <BMP280_calculate_P_int64+0x578>)
 8001a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	17da      	asrs	r2, r3, #31
 8001a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a30:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a34:	f04f 0000 	mov.w	r0, #0
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	0b50      	lsrs	r0, r2, #13
 8001a3e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a42:	1359      	asrs	r1, r3, #13
 8001a44:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a48:	462b      	mov	r3, r5
 8001a4a:	fb00 f203 	mul.w	r2, r0, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	fb03 f301 	mul.w	r3, r3, r1
 8001a54:	4413      	add	r3, r2
 8001a56:	4622      	mov	r2, r4
 8001a58:	fba2 2100 	umull	r2, r1, r2, r0
 8001a5c:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001a60:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a68:	4413      	add	r3, r2
 8001a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a6e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	0b50      	lsrs	r0, r2, #13
 8001a7c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a80:	1359      	asrs	r1, r3, #13
 8001a82:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001a86:	462b      	mov	r3, r5
 8001a88:	fb00 f203 	mul.w	r2, r0, r3
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	fb03 f301 	mul.w	r3, r3, r1
 8001a92:	4413      	add	r3, r2
 8001a94:	4622      	mov	r2, r4
 8001a96:	fba2 2100 	umull	r2, r1, r2, r0
 8001a9a:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001a9e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001aa2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001ab8:	4621      	mov	r1, r4
 8001aba:	0e4a      	lsrs	r2, r1, #25
 8001abc:	4620      	mov	r0, r4
 8001abe:	4629      	mov	r1, r5
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001ac6:	164b      	asrs	r3, r1, #25
 8001ac8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  var2 = (((int64_t)dig_P8) * p) >> 19;
 8001acc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc0 <BMP280_calculate_P_int64+0x57c>)
 8001ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	17da      	asrs	r2, r3, #31
 8001ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ad8:	667a      	str	r2, [r7, #100]	@ 0x64
 8001ada:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ade:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ae2:	462a      	mov	r2, r5
 8001ae4:	fb02 f203 	mul.w	r2, r2, r3
 8001ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001aec:	4621      	mov	r1, r4
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001af8:	4621      	mov	r1, r4
 8001afa:	fba2 2101 	umull	r2, r1, r2, r1
 8001afe:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001b02:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b06:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	0cca      	lsrs	r2, r1, #19
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	460c      	mov	r4, r1
 8001b26:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001b2a:	14cb      	asrs	r3, r1, #19
 8001b2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8001b30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001b34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b38:	1884      	adds	r4, r0, r2
 8001b3a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b3c:	eb41 0303 	adc.w	r3, r1, r3
 8001b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001b46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	1889      	adds	r1, r1, r2
 8001b4e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b50:	4629      	mov	r1, r5
 8001b52:	eb43 0101 	adc.w	r1, r3, r1
 8001b56:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b64:	4623      	mov	r3, r4
 8001b66:	0a18      	lsrs	r0, r3, #8
 8001b68:	462a      	mov	r2, r5
 8001b6a:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b6e:	462b      	mov	r3, r5
 8001b70:	1219      	asrs	r1, r3, #8
 8001b72:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <BMP280_calculate_P_int64+0x580>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	17da      	asrs	r2, r3, #31
 8001b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001b8c:	464c      	mov	r4, r9
 8001b8e:	0123      	lsls	r3, r4, #4
 8001b90:	46c4      	mov	ip, r8
 8001b92:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001b96:	4644      	mov	r4, r8
 8001b98:	0122      	lsls	r2, r4, #4
 8001b9a:	1884      	adds	r4, r0, r2
 8001b9c:	603c      	str	r4, [r7, #0]
 8001b9e:	eb41 0303 	adc.w	r3, r1, r3
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ba8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  return (uint32_t)p;
 8001bac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bbc:	2000021a 	.word	0x2000021a
 8001bc0:	20000218 	.word	0x20000218
 8001bc4:	20000216 	.word	0x20000216

08001bc8 <vApplicationIdleHook>:

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  memory allocated by the kernel to any task that has since been deleted. */
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
  // printf("idle task\r\n");
  //  vTaskDelay(pdMS_TO_TICKS(1000));
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of USART2TxMutex */
  USART2TxMutexHandle = osMutexNew(&USART2TxMutex_attributes);
 8001bd8:	480b      	ldr	r0, [pc, #44]	@ (8001c08 <MX_FREERTOS_Init+0x34>)
 8001bda:	f003 f849 	bl	8004c70 <osMutexNew>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <MX_FREERTOS_Init+0x38>)
 8001be2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of statusTask */
  statusTaskHandle = osThreadNew(vStatusTask, NULL, &statusTask_attributes);
 8001be4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <MX_FREERTOS_Init+0x3c>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	480a      	ldr	r0, [pc, #40]	@ (8001c14 <MX_FREERTOS_Init+0x40>)
 8001bea:	f002 ff69 	bl	8004ac0 <osThreadNew>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a09      	ldr	r2, [pc, #36]	@ (8001c18 <MX_FREERTOS_Init+0x44>)
 8001bf2:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(vLedTask, NULL, &ledTask_attributes);
 8001bf4:	4a09      	ldr	r2, [pc, #36]	@ (8001c1c <MX_FREERTOS_Init+0x48>)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <MX_FREERTOS_Init+0x4c>)
 8001bfa:	f002 ff61 	bl	8004ac0 <osThreadNew>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <MX_FREERTOS_Init+0x50>)
 8001c02:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	0800a8e8 	.word	0x0800a8e8
 8001c0c:	20000230 	.word	0x20000230
 8001c10:	0800a8a0 	.word	0x0800a8a0
 8001c14:	08001c29 	.word	0x08001c29
 8001c18:	20000228 	.word	0x20000228
 8001c1c:	0800a8c4 	.word	0x0800a8c4
 8001c20:	08001ccd 	.word	0x08001ccd
 8001c24:	2000022c 	.word	0x2000022c

08001c28 <vStatusTask>:
 * @brief  Function implementing the statusTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_vStatusTask */
void vStatusTask(void *argument) {
 8001c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2a:	b099      	sub	sp, #100	@ 0x64
 8001c2c:	af14      	add	r7, sp, #80	@ 0x50
 8001c2e:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN vStatusTask */
  /* Infinite loop */
  while (true) {
    bmp280_result = BMP280_Measure_I2C(hi2c1, BMP280_DEVICE_ADDRESS_GND);
 8001c30:	4e21      	ldr	r6, [pc, #132]	@ (8001cb8 <vStatusTask+0x90>)
 8001c32:	463d      	mov	r5, r7
 8001c34:	4c21      	ldr	r4, [pc, #132]	@ (8001cbc <vStatusTask+0x94>)
 8001c36:	23ec      	movs	r3, #236	@ 0xec
 8001c38:	9312      	str	r3, [sp, #72]	@ 0x48
 8001c3a:	4668      	mov	r0, sp
 8001c3c:	f104 030c 	add.w	r3, r4, #12
 8001c40:	2248      	movs	r2, #72	@ 0x48
 8001c42:	4619      	mov	r1, r3
 8001c44:	f006 ffdb 	bl	8008bfe <memcpy>
 8001c48:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f7ff fbe1 	bl	8001414 <BMP280_Measure_I2C>
 8001c52:	4632      	mov	r2, r6
 8001c54:	463b      	mov	r3, r7
 8001c56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c5a:	e882 0003 	stmia.w	r2, {r0, r1}

    if (osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <vStatusTask+0x98>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f04f 31ff 	mov.w	r1, #4294967295
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 f89c 	bl	8004da4 <osMutexAcquire>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11e      	bne.n	8001cb0 <vStatusTask+0x88>
      // printf("Pressure\tTemperature\r\n");
      printf("%0.2f hPa\r\n%0.2f deg C\r\n",
             bmp280_result.Pressure / 100,
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <vStatusTask+0x90>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4913      	ldr	r1, [pc, #76]	@ (8001cc4 <vStatusTask+0x9c>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f809 	bl	8000c90 <__aeabi_fdiv>
 8001c7e:	4603      	mov	r3, r0
      printf("%0.2f hPa\r\n%0.2f deg C\r\n",
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fbd1 	bl	8000428 <__aeabi_f2d>
 8001c86:	4604      	mov	r4, r0
 8001c88:	460d      	mov	r5, r1
             bmp280_result.Temperature);
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <vStatusTask+0x90>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
      printf("%0.2f hPa\r\n%0.2f deg C\r\n",
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fbca 	bl	8000428 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	e9cd 2300 	strd	r2, r3, [sp]
 8001c9c:	4622      	mov	r2, r4
 8001c9e:	462b      	mov	r3, r5
 8001ca0:	4809      	ldr	r0, [pc, #36]	@ (8001cc8 <vStatusTask+0xa0>)
 8001ca2:	f006 fd81 	bl	80087a8 <iprintf>
      osMutexRelease(USART2TxMutexHandle);
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <vStatusTask+0x98>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 f8d8 	bl	8004e60 <osMutexRelease>
    }
    osDelay(50);
 8001cb0:	2032      	movs	r0, #50	@ 0x32
 8001cb2:	f002 ffaf 	bl	8004c14 <osDelay>
    bmp280_result = BMP280_Measure_I2C(hi2c1, BMP280_DEVICE_ADDRESS_GND);
 8001cb6:	e7bb      	b.n	8001c30 <vStatusTask+0x8>
 8001cb8:	20000220 	.word	0x20000220
 8001cbc:	20000234 	.word	0x20000234
 8001cc0:	20000230 	.word	0x20000230
 8001cc4:	42c80000 	.word	0x42c80000
 8001cc8:	0800a854 	.word	0x0800a854

08001ccc <vLedTask>:
 * @brief Function implementing the ledTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vLedTask */
void vLedTask(void *argument) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vLedTask */
  /* Infinite loop */
  uint8_t rhythm = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  while (true) {
    if (rhythm < 3) {
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d80e      	bhi.n	8001cfc <vLedTask+0x30>
      GPIOB->ODR ^= (1U << 2) | (1U << 13);
 8001cde:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <vLedTask+0x5c>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <vLedTask+0x5c>)
 8001ce4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001ce8:	f083 0304 	eor.w	r3, r3, #4
 8001cec:	60d3      	str	r3, [r2, #12]
      ++rhythm;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      osDelay(100);
 8001cf4:	2064      	movs	r0, #100	@ 0x64
 8001cf6:	f002 ff8d 	bl	8004c14 <osDelay>
 8001cfa:	e7ed      	b.n	8001cd8 <vLedTask+0xc>
    } else if (rhythm < 6) {
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d80f      	bhi.n	8001d22 <vLedTask+0x56>
      GPIOB->ODR ^= (1U << 2) | (1U << 13);
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <vLedTask+0x5c>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4a08      	ldr	r2, [pc, #32]	@ (8001d28 <vLedTask+0x5c>)
 8001d08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001d0c:	f083 0304 	eor.w	r3, r3, #4
 8001d10:	60d3      	str	r3, [r2, #12]
      ++rhythm;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	3301      	adds	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      osDelay(500);
 8001d18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d1c:	f002 ff7a 	bl	8004c14 <osDelay>
 8001d20:	e7da      	b.n	8001cd8 <vLedTask+0xc>
    } else {
      rhythm = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
    if (rhythm < 3) {
 8001d26:	e7d7      	b.n	8001cd8 <vLedTask+0xc>
 8001d28:	40010c00 	.word	0x40010c00

08001d2c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d40:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a37      	ldr	r2, [pc, #220]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b35      	ldr	r3, [pc, #212]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d58:	4b32      	ldr	r3, [pc, #200]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a31      	ldr	r2, [pc, #196]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d5e:	f043 0320 	orr.w	r3, r3, #32
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b2c      	ldr	r3, [pc, #176]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a2b      	ldr	r2, [pc, #172]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d76:	f043 0304 	orr.w	r3, r3, #4
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a25      	ldr	r2, [pc, #148]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b23      	ldr	r3, [pc, #140]	@ (8001e24 <MX_GPIO_Init+0xf8>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin, GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001da6:	4820      	ldr	r0, [pc, #128]	@ (8001e28 <MX_GPIO_Init+0xfc>)
 8001da8:	f000 fe4a 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2104      	movs	r1, #4
 8001db0:	481e      	ldr	r0, [pc, #120]	@ (8001e2c <MX_GPIO_Init+0x100>)
 8001db2:	f000 fe45 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_2_Pin;
 8001db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_2_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4816      	ldr	r0, [pc, #88]	@ (8001e28 <MX_GPIO_Init+0xfc>)
 8001dd0:	f000 fcb2 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001dd4:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8001dd8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4619      	mov	r1, r3
 8001de4:	4812      	ldr	r0, [pc, #72]	@ (8001e30 <MX_GPIO_Init+0x104>)
 8001de6:	f000 fca7 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8001dea:	f64f 733b 	movw	r3, #65339	@ 0xff3b
 8001dee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df0:	2303      	movs	r3, #3
 8001df2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <MX_GPIO_Init+0x100>)
 8001dfc:	f000 fc9c 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_1_Pin;
 8001e00:	2304      	movs	r3, #4
 8001e02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_1_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4619      	mov	r1, r3
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <MX_GPIO_Init+0x100>)
 8001e18:	f000 fc8e 	bl	8002738 <HAL_GPIO_Init>

}
 8001e1c:	bf00      	nop
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40011000 	.word	0x40011000
 8001e2c:	40010c00 	.word	0x40010c00
 8001e30:	40010800 	.word	0x40010800

08001e34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e3a:	4a13      	ldr	r2, [pc, #76]	@ (8001e88 <MX_I2C1_Init+0x54>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e40:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <MX_I2C1_Init+0x58>)
 8001e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e70:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <MX_I2C1_Init+0x50>)
 8001e72:	f000 fdfd 	bl	8002a70 <HAL_I2C_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e7c:	f000 f8e4 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000234 	.word	0x20000234
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	00061a80 	.word	0x00061a80

08001e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a15      	ldr	r2, [pc, #84]	@ (8001f00 <HAL_I2C_MspInit+0x70>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d123      	bne.n	8001ef8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <HAL_I2C_MspInit+0x74>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <HAL_I2C_MspInit+0x74>)
 8001eb6:	f043 0308 	orr.w	r3, r3, #8
 8001eba:	6193      	str	r3, [r2, #24]
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_I2C_MspInit+0x74>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ec8:	23c0      	movs	r3, #192	@ 0xc0
 8001eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ecc:	2312      	movs	r3, #18
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480b      	ldr	r0, [pc, #44]	@ (8001f08 <HAL_I2C_MspInit+0x78>)
 8001edc:	f000 fc2c 	bl	8002738 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_I2C_MspInit+0x74>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_I2C_MspInit+0x74>)
 8001ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eea:	61d3      	str	r3, [r2, #28]
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_I2C_MspInit+0x74>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40005400 	.word	0x40005400
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40010c00 	.word	0x40010c00

08001f0c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b098      	sub	sp, #96	@ 0x60
 8001f10:	af18      	add	r7, sp, #96	@ 0x60

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8001f12:	f000 fadb 	bl	80024cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f16:	f000 f827 	bl	8001f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f1a:	f7ff ff07 	bl	8001d2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f1e:	f7ff ff89 	bl	8001e34 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001f22:	f000 fa39 	bl	8002398 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("System initializing\r\n");
 8001f26:	480e      	ldr	r0, [pc, #56]	@ (8001f60 <main+0x54>)
 8001f28:	f006 fca6 	bl	8008878 <puts>

  BMP280_Init_I2C(BMP280_VAL_CTRL_MEAS_OSRS_T_16,
 8001f2c:	23ec      	movs	r3, #236	@ 0xec
 8001f2e:	9316      	str	r3, [sp, #88]	@ 0x58
 8001f30:	4a0c      	ldr	r2, [pc, #48]	@ (8001f64 <main+0x58>)
 8001f32:	ab01      	add	r3, sp, #4
 8001f34:	4611      	mov	r1, r2
 8001f36:	2254      	movs	r2, #84	@ 0x54
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f006 fe60 	bl	8008bfe <memcpy>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	2203      	movs	r2, #3
 8001f46:	2105      	movs	r1, #5
 8001f48:	2005      	movs	r0, #5
 8001f4a:	f7ff f991 	bl	8001270 <BMP280_Init_I2C>
                  hi2c1,
                  BMP280_DEVICE_ADDRESS_GND);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f4e:	f002 fd51 	bl	80049f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f52:	f7ff fe3f 	bl	8001bd4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f56:	f002 fd7f 	bl	8004a58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true) {
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <main+0x4e>
 8001f5e:	bf00      	nop
 8001f60:	0800a870 	.word	0x0800a870
 8001f64:	20000234 	.word	0x20000234

08001f68 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b090      	sub	sp, #64	@ 0x40
 8001f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6e:	f107 0318 	add.w	r3, r7, #24
 8001f72:	2228      	movs	r2, #40	@ 0x28
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f006 fd5e 	bl	8008a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fa6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f001 fdb7 	bl	8003b24 <HAL_RCC_OscConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <SystemClock_Config+0x58>
    Error_Handler();
 8001fbc:	f000 f844 	bl	8002048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 f824 	bl	8004028 <HAL_RCC_ClockConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SystemClock_Config+0x82>
    Error_Handler();
 8001fe6:	f000 f82f 	bl	8002048 <Error_Handler>
  }
}
 8001fea:	bf00      	nop
 8001fec:	3740      	adds	r7, #64	@ 0x40
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <__io_putchar>:
/* USER CODE BEGIN 4 */

/**
 * @brief putchar() override - redirect printf to USART2
 */
int __io_putchar(int ch) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 8001ffc:	e000      	b.n	8002000 <__io_putchar+0xc>
    asm("nop");
 8001ffe:	bf00      	nop
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 8002000:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <__io_putchar+0x2c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f8      	beq.n	8001ffe <__io_putchar+0xa>
  }
  USART2->DR = (ch & 0xFF); // write data to TX register
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <__io_putchar+0x2c>)
 8002010:	b2db      	uxtb	r3, r3
 8002012:	6053      	str	r3, [r2, #4]
  // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40004400 	.word	0x40004400

08002024 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a04      	ldr	r2, [pc, #16]	@ (8002044 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002036:	f000 fa5f 	bl	80024f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40000800 	.word	0x40000800

08002048 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800204c:	b672      	cpsid	i
}
 800204e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <Error_Handler+0x8>

08002054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800205a:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <HAL_MspInit+0x68>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4a17      	ldr	r2, [pc, #92]	@ (80020bc <HAL_MspInit+0x68>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6193      	str	r3, [r2, #24]
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_MspInit+0x68>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <HAL_MspInit+0x68>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a11      	ldr	r2, [pc, #68]	@ (80020bc <HAL_MspInit+0x68>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <HAL_MspInit+0x68>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	210f      	movs	r1, #15
 800208e:	f06f 0001 	mvn.w	r0, #1
 8002092:	f000 fb26 	bl	80026e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_MspInit+0x6c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_MspInit+0x6c>)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000

080020c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08e      	sub	sp, #56	@ 0x38
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80020da:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_InitTick+0xe8>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a33      	ldr	r2, [pc, #204]	@ (80021ac <HAL_InitTick+0xe8>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b31      	ldr	r3, [pc, #196]	@ (80021ac <HAL_InitTick+0xe8>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020f2:	f107 0210 	add.w	r2, r7, #16
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 f903 	bl	8004308 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d103      	bne.n	8002114 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800210c:	f002 f8d4 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8002110:	6378      	str	r0, [r7, #52]	@ 0x34
 8002112:	e004      	b.n	800211e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002114:	f002 f8d0 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8002118:	4603      	mov	r3, r0
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800211e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002120:	4a23      	ldr	r2, [pc, #140]	@ (80021b0 <HAL_InitTick+0xec>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0c9b      	lsrs	r3, r3, #18
 8002128:	3b01      	subs	r3, #1
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800212c:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <HAL_InitTick+0xf0>)
 800212e:	4a22      	ldr	r2, [pc, #136]	@ (80021b8 <HAL_InitTick+0xf4>)
 8002130:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_InitTick+0xf0>)
 8002134:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002138:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800213a:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <HAL_InitTick+0xf0>)
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002140:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <HAL_InitTick+0xf0>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_InitTick+0xf0>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214c:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <HAL_InitTick+0xf0>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002152:	4818      	ldr	r0, [pc, #96]	@ (80021b4 <HAL_InitTick+0xf0>)
 8002154:	f002 f926 	bl	80043a4 <HAL_TIM_Base_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800215e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11b      	bne.n	800219e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002166:	4813      	ldr	r0, [pc, #76]	@ (80021b4 <HAL_InitTick+0xf0>)
 8002168:	f002 f974 	bl	8004454 <HAL_TIM_Base_Start_IT>
 800216c:	4603      	mov	r3, r0
 800216e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002172:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002176:	2b00      	cmp	r3, #0
 8002178:	d111      	bne.n	800219e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800217a:	201e      	movs	r0, #30
 800217c:	f000 facd 	bl	800271a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b0f      	cmp	r3, #15
 8002184:	d808      	bhi.n	8002198 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002186:	2200      	movs	r2, #0
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	201e      	movs	r0, #30
 800218c:	f000 faa9 	bl	80026e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002190:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <HAL_InitTick+0xf8>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e002      	b.n	800219e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800219e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3738      	adds	r7, #56	@ 0x38
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	20000288 	.word	0x20000288
 80021b8:	40000800 	.word	0x40000800
 80021bc:	20000004 	.word	0x20000004

080021c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <NMI_Handler+0x4>

080021c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <MemManage_Handler+0x4>

080021d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <TIM4_IRQHandler+0x10>)
 80021fa:	f002 f97d 	bl	80044f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000288 	.word	0x20000288

08002208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <_kill>:

int _kill(int pid, int sig)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002220:	f006 fcb2 	bl	8008b88 <__errno>
 8002224:	4603      	mov	r3, r0
 8002226:	2216      	movs	r2, #22
 8002228:	601a      	str	r2, [r3, #0]
  return -1;
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_exit>:

void _exit (int status)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800223e:	f04f 31ff 	mov.w	r1, #4294967295
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffe7 	bl	8002216 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <_exit+0x12>

0800224c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e00a      	b.n	8002274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800225e:	f3af 8000 	nop.w
 8002262:	4601      	mov	r1, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	60ba      	str	r2, [r7, #8]
 800226a:	b2ca      	uxtb	r2, r1
 800226c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	dbf0      	blt.n	800225e <_read+0x12>
  }

  return len;
 800227c:	687b      	ldr	r3, [r7, #4]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e009      	b.n	80022ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	60ba      	str	r2, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fea7 	bl	8001ff4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dbf1      	blt.n	8002298 <_write+0x12>
  }
  return len;
 80022b4:	687b      	ldr	r3, [r7, #4]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <_close>:

int _close(int file)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e4:	605a      	str	r2, [r3, #4]
  return 0;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <_isatty>:

int _isatty(int file)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022fa:	2301      	movs	r3, #1
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
	...

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	@ (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f006 fc1a 	bl	8008b88 <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20005000 	.word	0x20005000
 8002380:	00000400 	.word	0x00000400
 8002384:	200002d0 	.word	0x200002d0
 8002388:	20001e50 	.word	0x20001e50

0800238c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <MX_USART2_UART_Init+0x50>)
 80023a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023be:	220c      	movs	r2, #12
 80023c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c2:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023ce:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <MX_USART2_UART_Init+0x4c>)
 80023d0:	f002 fa32 	bl	8004838 <HAL_UART_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023da:	f7ff fe35 	bl	8002048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200002d4 	.word	0x200002d4
 80023e8:	40004400 	.word	0x40004400

080023ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <HAL_UART_MspInit+0x88>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d12f      	bne.n	800246c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800240c:	4b1a      	ldr	r3, [pc, #104]	@ (8002478 <HAL_UART_MspInit+0x8c>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <HAL_UART_MspInit+0x8c>)
 8002412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002416:	61d3      	str	r3, [r2, #28]
 8002418:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <HAL_UART_MspInit+0x8c>)
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <HAL_UART_MspInit+0x8c>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a13      	ldr	r2, [pc, #76]	@ (8002478 <HAL_UART_MspInit+0x8c>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <HAL_UART_MspInit+0x8c>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800243c:	2304      	movs	r3, #4
 800243e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	480b      	ldr	r0, [pc, #44]	@ (800247c <HAL_UART_MspInit+0x90>)
 8002450:	f000 f972 	bl	8002738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002454:	2308      	movs	r3, #8
 8002456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	4619      	mov	r1, r3
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <HAL_UART_MspInit+0x90>)
 8002468:	f000 f966 	bl	8002738 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40004400 	.word	0x40004400
 8002478:	40021000 	.word	0x40021000
 800247c:	40010800 	.word	0x40010800

08002480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002480:	f7ff ff84 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002484:	480b      	ldr	r0, [pc, #44]	@ (80024b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002486:	490c      	ldr	r1, [pc, #48]	@ (80024b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002488:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a09      	ldr	r2, [pc, #36]	@ (80024c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800249c:	4c09      	ldr	r4, [pc, #36]	@ (80024c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024aa:	f006 fb73 	bl	8008b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ae:	f7ff fd2d 	bl	8001f0c <main>
  bx lr
 80024b2:	4770      	bx	lr
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80024bc:	0800aca0 	.word	0x0800aca0
  ldr r2, =_sbss
 80024c0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024c4:	20001e4c 	.word	0x20001e4c

080024c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC1_2_IRQHandler>
	...

080024cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <HAL_Init+0x28>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_Init+0x28>)
 80024d6:	f043 0310 	orr.w	r3, r3, #16
 80024da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 f8f5 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	200f      	movs	r0, #15
 80024e4:	f7ff fdee 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff fdb4 	bl	8002054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <HAL_IncTick+0x1c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <HAL_IncTick+0x20>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a03      	ldr	r2, [pc, #12]	@ (8002518 <HAL_IncTick+0x20>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000008 	.word	0x20000008
 8002518:	2000031c 	.word	0x2000031c

0800251c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b02      	ldr	r3, [pc, #8]	@ (800252c <HAL_GetTick+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	2000031c 	.word	0x2000031c

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fff0 	bl	800251c <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffe0 	bl	800251c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000008 	.word	0x20000008

08002578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db0b      	blt.n	8002606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4906      	ldr	r1, [pc, #24]	@ (8002610 <__NVIC_EnableIRQ+0x34>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2001      	movs	r0, #1
 80025fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	e000e100 	.word	0xe000e100

08002614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	6039      	str	r1, [r7, #0]
 800261e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	2b00      	cmp	r3, #0
 8002626:	db0a      	blt.n	800263e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	490c      	ldr	r1, [pc, #48]	@ (8002660 <__NVIC_SetPriority+0x4c>)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	0112      	lsls	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	440b      	add	r3, r1
 8002638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800263c:	e00a      	b.n	8002654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <__NVIC_SetPriority+0x50>)
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3b04      	subs	r3, #4
 800264c:	0112      	lsls	r2, r2, #4
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	440b      	add	r3, r1
 8002652:	761a      	strb	r2, [r3, #24]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f1c3 0307 	rsb	r3, r3, #7
 8002682:	2b04      	cmp	r3, #4
 8002684:	bf28      	it	cs
 8002686:	2304      	movcs	r3, #4
 8002688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3304      	adds	r3, #4
 800268e:	2b06      	cmp	r3, #6
 8002690:	d902      	bls.n	8002698 <NVIC_EncodePriority+0x30>
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3b03      	subs	r3, #3
 8002696:	e000      	b.n	800269a <NVIC_EncodePriority+0x32>
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43da      	mvns	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	401a      	ands	r2, r3
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	4313      	orrs	r3, r2
         );
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff4f 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f4:	f7ff ff64 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 80026f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ffb2 	bl	8002668 <NVIC_EncodePriority>
 8002704:	4602      	mov	r2, r0
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff81 	bl	8002614 <__NVIC_SetPriority>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff57 	bl	80025dc <__NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b08b      	sub	sp, #44	@ 0x2c
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274a:	e169      	b.n	8002a20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800274c:	2201      	movs	r2, #1
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	429a      	cmp	r2, r3
 8002766:	f040 8158 	bne.w	8002a1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4a9a      	ldr	r2, [pc, #616]	@ (80029d8 <HAL_GPIO_Init+0x2a0>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d05e      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 8002774:	4a98      	ldr	r2, [pc, #608]	@ (80029d8 <HAL_GPIO_Init+0x2a0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d875      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 800277a:	4a98      	ldr	r2, [pc, #608]	@ (80029dc <HAL_GPIO_Init+0x2a4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d058      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 8002780:	4a96      	ldr	r2, [pc, #600]	@ (80029dc <HAL_GPIO_Init+0x2a4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d86f      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 8002786:	4a96      	ldr	r2, [pc, #600]	@ (80029e0 <HAL_GPIO_Init+0x2a8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d052      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 800278c:	4a94      	ldr	r2, [pc, #592]	@ (80029e0 <HAL_GPIO_Init+0x2a8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d869      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 8002792:	4a94      	ldr	r2, [pc, #592]	@ (80029e4 <HAL_GPIO_Init+0x2ac>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d04c      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 8002798:	4a92      	ldr	r2, [pc, #584]	@ (80029e4 <HAL_GPIO_Init+0x2ac>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d863      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 800279e:	4a92      	ldr	r2, [pc, #584]	@ (80029e8 <HAL_GPIO_Init+0x2b0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d046      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
 80027a4:	4a90      	ldr	r2, [pc, #576]	@ (80029e8 <HAL_GPIO_Init+0x2b0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d85d      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 80027aa:	2b12      	cmp	r3, #18
 80027ac:	d82a      	bhi.n	8002804 <HAL_GPIO_Init+0xcc>
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d859      	bhi.n	8002866 <HAL_GPIO_Init+0x12e>
 80027b2:	a201      	add	r2, pc, #4	@ (adr r2, 80027b8 <HAL_GPIO_Init+0x80>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	08002833 	.word	0x08002833
 80027bc:	0800280d 	.word	0x0800280d
 80027c0:	0800281f 	.word	0x0800281f
 80027c4:	08002861 	.word	0x08002861
 80027c8:	08002867 	.word	0x08002867
 80027cc:	08002867 	.word	0x08002867
 80027d0:	08002867 	.word	0x08002867
 80027d4:	08002867 	.word	0x08002867
 80027d8:	08002867 	.word	0x08002867
 80027dc:	08002867 	.word	0x08002867
 80027e0:	08002867 	.word	0x08002867
 80027e4:	08002867 	.word	0x08002867
 80027e8:	08002867 	.word	0x08002867
 80027ec:	08002867 	.word	0x08002867
 80027f0:	08002867 	.word	0x08002867
 80027f4:	08002867 	.word	0x08002867
 80027f8:	08002867 	.word	0x08002867
 80027fc:	08002815 	.word	0x08002815
 8002800:	08002829 	.word	0x08002829
 8002804:	4a79      	ldr	r2, [pc, #484]	@ (80029ec <HAL_GPIO_Init+0x2b4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800280a:	e02c      	b.n	8002866 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	623b      	str	r3, [r7, #32]
          break;
 8002812:	e029      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	3304      	adds	r3, #4
 800281a:	623b      	str	r3, [r7, #32]
          break;
 800281c:	e024      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	3308      	adds	r3, #8
 8002824:	623b      	str	r3, [r7, #32]
          break;
 8002826:	e01f      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	330c      	adds	r3, #12
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e01a      	b.n	8002868 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800283a:	2304      	movs	r3, #4
 800283c:	623b      	str	r3, [r7, #32]
          break;
 800283e:	e013      	b.n	8002868 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002848:	2308      	movs	r3, #8
 800284a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	611a      	str	r2, [r3, #16]
          break;
 8002852:	e009      	b.n	8002868 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002854:	2308      	movs	r3, #8
 8002856:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	615a      	str	r2, [r3, #20]
          break;
 800285e:	e003      	b.n	8002868 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
          break;
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x130>
          break;
 8002866:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2bff      	cmp	r3, #255	@ 0xff
 800286c:	d801      	bhi.n	8002872 <HAL_GPIO_Init+0x13a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	e001      	b.n	8002876 <HAL_GPIO_Init+0x13e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2bff      	cmp	r3, #255	@ 0xff
 800287c:	d802      	bhi.n	8002884 <HAL_GPIO_Init+0x14c>
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	e002      	b.n	800288a <HAL_GPIO_Init+0x152>
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	3b08      	subs	r3, #8
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	210f      	movs	r1, #15
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	401a      	ands	r2, r3
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	431a      	orrs	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80b1 	beq.w	8002a1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028b8:	4b4d      	ldr	r3, [pc, #308]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a4c      	ldr	r2, [pc, #304]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b4a      	ldr	r3, [pc, #296]	@ (80029f0 <HAL_GPIO_Init+0x2b8>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028d0:	4a48      	ldr	r2, [pc, #288]	@ (80029f4 <HAL_GPIO_Init+0x2bc>)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	220f      	movs	r2, #15
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <HAL_GPIO_Init+0x2c0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_GPIO_Init+0x1ec>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3f      	ldr	r2, [pc, #252]	@ (80029fc <HAL_GPIO_Init+0x2c4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00d      	beq.n	8002920 <HAL_GPIO_Init+0x1e8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3e      	ldr	r2, [pc, #248]	@ (8002a00 <HAL_GPIO_Init+0x2c8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <HAL_GPIO_Init+0x1e4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a04 <HAL_GPIO_Init+0x2cc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_GPIO_Init+0x1e0>
 8002914:	2303      	movs	r3, #3
 8002916:	e006      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 8002918:	2304      	movs	r3, #4
 800291a:	e004      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 800291c:	2302      	movs	r3, #2
 800291e:	e002      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <HAL_GPIO_Init+0x1ee>
 8002924:	2300      	movs	r3, #0
 8002926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002928:	f002 0203 	and.w	r2, r2, #3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4093      	lsls	r3, r2
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002936:	492f      	ldr	r1, [pc, #188]	@ (80029f4 <HAL_GPIO_Init+0x2bc>)
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002950:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	492c      	ldr	r1, [pc, #176]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800295e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	43db      	mvns	r3, r3
 8002966:	4928      	ldr	r1, [pc, #160]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002968:	4013      	ands	r3, r2
 800296a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002978:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4922      	ldr	r1, [pc, #136]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	43db      	mvns	r3, r3
 800298e:	491e      	ldr	r1, [pc, #120]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 8002990:	4013      	ands	r3, r2
 8002992:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4918      	ldr	r1, [pc, #96]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ae:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4914      	ldr	r1, [pc, #80]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d021      	beq.n	8002a0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	490e      	ldr	r1, [pc, #56]	@ (8002a08 <HAL_GPIO_Init+0x2d0>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e021      	b.n	8002a1a <HAL_GPIO_Init+0x2e2>
 80029d6:	bf00      	nop
 80029d8:	10320000 	.word	0x10320000
 80029dc:	10310000 	.word	0x10310000
 80029e0:	10220000 	.word	0x10220000
 80029e4:	10210000 	.word	0x10210000
 80029e8:	10120000 	.word	0x10120000
 80029ec:	10110000 	.word	0x10110000
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010000 	.word	0x40010000
 80029f8:	40010800 	.word	0x40010800
 80029fc:	40010c00 	.word	0x40010c00
 8002a00:	40011000 	.word	0x40011000
 8002a04:	40011400 	.word	0x40011400
 8002a08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <HAL_GPIO_Init+0x304>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	4909      	ldr	r1, [pc, #36]	@ (8002a3c <HAL_GPIO_Init+0x304>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f47f ae8e 	bne.w	800274c <HAL_GPIO_Init+0x14>
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	372c      	adds	r7, #44	@ 0x2c
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a5c:	e003      	b.n	8002a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	041a      	lsls	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e12b      	b.n	8002cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff f9fa 	bl	8001e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	@ 0x24
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0201 	bic.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad4:	f001 fbf0 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8002ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a81      	ldr	r2, [pc, #516]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d807      	bhi.n	8002af4 <HAL_I2C_Init+0x84>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4a80      	ldr	r2, [pc, #512]	@ (8002ce8 <HAL_I2C_Init+0x278>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e006      	b.n	8002b02 <HAL_I2C_Init+0x92>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a7d      	ldr	r2, [pc, #500]	@ (8002cec <HAL_I2C_Init+0x27c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0e7      	b.n	8002cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a78      	ldr	r2, [pc, #480]	@ (8002cf0 <HAL_I2C_Init+0x280>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9b      	lsrs	r3, r3, #18
 8002b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d802      	bhi.n	8002b44 <HAL_I2C_Init+0xd4>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	3301      	adds	r3, #1
 8002b42:	e009      	b.n	8002b58 <HAL_I2C_Init+0xe8>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	4a69      	ldr	r2, [pc, #420]	@ (8002cf4 <HAL_I2C_Init+0x284>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	3301      	adds	r3, #1
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	495c      	ldr	r1, [pc, #368]	@ (8002ce4 <HAL_I2C_Init+0x274>)
 8002b74:	428b      	cmp	r3, r1
 8002b76:	d819      	bhi.n	8002bac <HAL_I2C_Init+0x13c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1e59      	subs	r1, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <HAL_I2C_Init+0x138>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e59      	subs	r1, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba6:	e051      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e04f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d111      	bne.n	8002bd8 <HAL_I2C_Init+0x168>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1e58      	subs	r0, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e012      	b.n	8002bfe <HAL_I2C_Init+0x18e>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1e58      	subs	r0, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	0099      	lsls	r1, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x196>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <HAL_I2C_Init+0x1bc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1e58      	subs	r0, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	440b      	add	r3, r1
 8002c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Init+0x1dc>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1e58      	subs	r0, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	0099      	lsls	r1, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	6809      	ldr	r1, [r1, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6911      	ldr	r1, [r2, #16]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	4311      	orrs	r1, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	000186a0 	.word	0x000186a0
 8002ce8:	001e847f 	.word	0x001e847f
 8002cec:	003d08ff 	.word	0x003d08ff
 8002cf0:	431bde83 	.word	0x431bde83
 8002cf4:	10624dd3 	.word	0x10624dd3

08002cf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d12:	f7ff fc03 	bl	800251c <HAL_GetTick>
 8002d16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	f040 80d9 	bne.w	8002ed8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	2319      	movs	r3, #25
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	496d      	ldr	r1, [pc, #436]	@ (8002ee4 <HAL_I2C_Mem_Write+0x1ec>)
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fcc1 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e0cc      	b.n	8002eda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_Mem_Write+0x56>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e0c5      	b.n	8002eda <HAL_I2C_Mem_Write+0x1e2>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d007      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2221      	movs	r2, #33	@ 0x21
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2240      	movs	r2, #64	@ 0x40
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee8 <HAL_I2C_Mem_Write+0x1f0>)
 8002db4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db6:	88f8      	ldrh	r0, [r7, #6]
 8002db8:	893a      	ldrh	r2, [r7, #8]
 8002dba:	8979      	ldrh	r1, [r7, #10]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 faf8 	bl	80033bc <I2C_RequestMemoryWrite>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d052      	beq.n	8002e78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e081      	b.n	8002eda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fd86 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d107      	bne.n	8002dfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e06b      	b.n	8002eda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d11b      	bne.n	8002e78 <HAL_I2C_Mem_Write+0x180>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d017      	beq.n	8002e78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1aa      	bne.n	8002dd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fd79 	bl	800397c <I2C_WaitOnBTFFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d107      	bne.n	8002ea8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e016      	b.n	8002eda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	00100002 	.word	0x00100002
 8002ee8:	ffff0000 	.word	0xffff0000

08002eec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	@ 0x30
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	817b      	strh	r3, [r7, #10]
 8002efe:	460b      	mov	r3, r1
 8002f00:	813b      	strh	r3, [r7, #8]
 8002f02:	4613      	mov	r3, r2
 8002f04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f0a:	f7ff fb07 	bl	800251c <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	f040 8244 	bne.w	80033a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2319      	movs	r3, #25
 8002f24:	2201      	movs	r2, #1
 8002f26:	4982      	ldr	r1, [pc, #520]	@ (8003130 <HAL_I2C_Mem_Read+0x244>)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fbc5 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
 8002f36:	e237      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Mem_Read+0x5a>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e230      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d007      	beq.n	8002f6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2222      	movs	r2, #34	@ 0x22
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	@ 0x40
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a62      	ldr	r2, [pc, #392]	@ (8003134 <HAL_I2C_Mem_Read+0x248>)
 8002fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fae:	88f8      	ldrh	r0, [r7, #6]
 8002fb0:	893a      	ldrh	r2, [r7, #8]
 8002fb2:	8979      	ldrh	r1, [r7, #10]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fa92 	bl	80034e8 <I2C_RequestMemoryRead>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1ec      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d113      	bne.n	8002ffe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e1c0      	b.n	8003380 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003002:	2b01      	cmp	r3, #1
 8003004:	d11e      	bne.n	8003044 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003014:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003016:	b672      	cpsid	i
}
 8003018:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003040:	b662      	cpsie	i
}
 8003042:	e035      	b.n	80030b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11e      	bne.n	800308a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800305a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800305c:	b672      	cpsid	i
}
 800305e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003084:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003086:	b662      	cpsie	i
}
 8003088:	e012      	b.n	80030b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003098:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030b0:	e166      	b.n	8003380 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	f200 811f 	bhi.w	80032fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d123      	bne.n	800310c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fc9f 	bl	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e167      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800310a:	e139      	b.n	8003380 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	2b02      	cmp	r3, #2
 8003112:	d152      	bne.n	80031ba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311a:	2200      	movs	r2, #0
 800311c:	4906      	ldr	r1, [pc, #24]	@ (8003138 <HAL_I2C_Mem_Read+0x24c>)
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 faca 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e13c      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
 800312e:	bf00      	nop
 8003130:	00100002 	.word	0x00100002
 8003134:	ffff0000 	.word	0xffff0000
 8003138:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800314e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003182:	b662      	cpsie	i
}
 8003184:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031b8:	e0e2      	b.n	8003380 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	2200      	movs	r2, #0
 80031c2:	497b      	ldr	r1, [pc, #492]	@ (80033b0 <HAL_I2C_Mem_Read+0x4c4>)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fa77 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0e9      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031e4:	b672      	cpsid	i
}
 80031e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800321a:	4b66      	ldr	r3, [pc, #408]	@ (80033b4 <HAL_I2C_Mem_Read+0x4c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	08db      	lsrs	r3, r3, #3
 8003220:	4a65      	ldr	r2, [pc, #404]	@ (80033b8 <HAL_I2C_Mem_Read+0x4cc>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0a1a      	lsrs	r2, r3, #8
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	00da      	lsls	r2, r3, #3
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	3b01      	subs	r3, #1
 8003238:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d118      	bne.n	8003272 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003262:	b662      	cpsie	i
}
 8003264:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e09a      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b04      	cmp	r3, #4
 800327e:	d1d9      	bne.n	8003234 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032c2:	b662      	cpsie	i
}
 80032c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032f8:	e042      	b.n	8003380 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fb84 	bl	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e04c      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	d118      	bne.n	8003380 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	f47f ae94 	bne.w	80030b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3728      	adds	r7, #40	@ 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	00010004 	.word	0x00010004
 80033b4:	20000000 	.word	0x20000000
 80033b8:	14f8b589 	.word	0x14f8b589

080033bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	4608      	mov	r0, r1
 80033c6:	4611      	mov	r1, r2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	817b      	strh	r3, [r7, #10]
 80033ce:	460b      	mov	r3, r1
 80033d0:	813b      	strh	r3, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f960 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800340c:	d103      	bne.n	8003416 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e05f      	b.n	80034da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341a:	897b      	ldrh	r3, [r7, #10]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003428:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	492d      	ldr	r1, [pc, #180]	@ (80034e4 <I2C_RequestMemoryWrite+0x128>)
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f9bb 	bl	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e04c      	b.n	80034da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fa46 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b04      	cmp	r3, #4
 800346c:	d107      	bne.n	800347e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e02b      	b.n	80034da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003488:	893b      	ldrh	r3, [r7, #8]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	e021      	b.n	80034d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	b29b      	uxth	r3, r3
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a4:	6a39      	ldr	r1, [r7, #32]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fa20 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00d      	beq.n	80034ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d107      	bne.n	80034ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e005      	b.n	80034da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ce:	893b      	ldrh	r3, [r7, #8]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	00010002 	.word	0x00010002

080034e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	4608      	mov	r0, r1
 80034f2:	4611      	mov	r1, r2
 80034f4:	461a      	mov	r2, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	817b      	strh	r3, [r7, #10]
 80034fa:	460b      	mov	r3, r1
 80034fc:	813b      	strh	r3, [r7, #8]
 80034fe:	4613      	mov	r3, r2
 8003500:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003510:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	2200      	movs	r2, #0
 800352a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f8c2 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003548:	d103      	bne.n	8003552 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0aa      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003568:	6a3a      	ldr	r2, [r7, #32]
 800356a:	4952      	ldr	r1, [pc, #328]	@ (80036b4 <I2C_RequestMemoryRead+0x1cc>)
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f91d 	bl	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e097      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f9a8 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e076      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035c4:	893b      	ldrh	r3, [r7, #8]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]
 80035ce:	e021      	b.n	8003614 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035d0:	893b      	ldrh	r3, [r7, #8]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e0:	6a39      	ldr	r1, [r7, #32]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f982 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00d      	beq.n	800360a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d107      	bne.n	8003606 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e050      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800360a:	893b      	ldrh	r3, [r7, #8]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003616:	6a39      	ldr	r1, [r7, #32]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f967 	bl	80038ec <I2C_WaitOnTXEFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	2b04      	cmp	r3, #4
 800362a:	d107      	bne.n	800363c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e035      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	2200      	movs	r2, #0
 8003658:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f82b 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003676:	d103      	bne.n	8003680 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e013      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	4906      	ldr	r1, [pc, #24]	@ (80036b4 <I2C_RequestMemoryRead+0x1cc>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f886 	bl	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	00010002 	.word	0x00010002

080036b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c8:	e048      	b.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d044      	beq.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fe ff23 	bl	800251c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d139      	bne.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	0c1b      	lsrs	r3, r3, #16
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10d      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x56>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	e00c      	b.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x70>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	43da      	mvns	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	429a      	cmp	r2, r3
 800372c:	d116      	bne.n	800375c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e023      	b.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	0c1b      	lsrs	r3, r3, #16
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10d      	bne.n	8003782 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	e00c      	b.n	800379c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	43da      	mvns	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4013      	ands	r3, r2
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf0c      	ite	eq
 8003794:	2301      	moveq	r3, #1
 8003796:	2300      	movne	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d093      	beq.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ba:	e071      	b.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ca:	d123      	bne.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f043 0204 	orr.w	r2, r3, #4
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e067      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d041      	beq.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381c:	f7fe fe7e 	bl	800251c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d302      	bcc.n	8003832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d136      	bne.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10c      	bne.n	8003856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4013      	ands	r3, r2
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e00b      	b.n	800386e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	43da      	mvns	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4013      	ands	r3, r2
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e021      	b.n	80038e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d10c      	bne.n	80038c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e00b      	b.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	2300      	moveq	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f47f af6d 	bne.w	80037bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f8:	e034      	b.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f8e3 	bl	8003ac6 <I2C_IsAcknowledgeFailed>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e034      	b.n	8003974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d028      	beq.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe fe03 	bl	800251c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11d      	bne.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003932:	2b80      	cmp	r3, #128	@ 0x80
 8003934:	d016      	beq.n	8003964 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d1c3      	bne.n	80038fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003988:	e034      	b.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f89b 	bl	8003ac6 <I2C_IsAcknowledgeFailed>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e034      	b.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d028      	beq.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe fdbb 	bl	800251c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d11d      	bne.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d016      	beq.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e007      	b.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d1c3      	bne.n	800398a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a18:	e049      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d119      	bne.n	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0210 	mvn.w	r2, #16
 8003a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e030      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7fe fd5e 	bl	800251c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11d      	bne.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b40      	cmp	r3, #64	@ 0x40
 8003a7e:	d016      	beq.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e007      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab8:	2b40      	cmp	r3, #64	@ 0x40
 8003aba:	d1ae      	bne.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003adc:	d11b      	bne.n	8003b16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
	...

08003b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e272      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8087 	beq.w	8003c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b44:	4b92      	ldr	r3, [pc, #584]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d00c      	beq.n	8003b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b50:	4b8f      	ldr	r3, [pc, #572]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 030c 	and.w	r3, r3, #12
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d112      	bne.n	8003b82 <HAL_RCC_OscConfig+0x5e>
 8003b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6a:	4b89      	ldr	r3, [pc, #548]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d06c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x12c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d168      	bne.n	8003c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e24c      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x76>
 8003b8c:	4b80      	ldr	r3, [pc, #512]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a7f      	ldr	r2, [pc, #508]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e02e      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x98>
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7a      	ldr	r2, [pc, #488]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b78      	ldr	r3, [pc, #480]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a77      	ldr	r2, [pc, #476]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e01d      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd4>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCC_OscConfig+0xbc>
 8003bc6:	4b72      	ldr	r3, [pc, #456]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a71      	ldr	r2, [pc, #452]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCC_OscConfig+0xd4>
 8003be0:	4b6b      	ldr	r3, [pc, #428]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b68      	ldr	r3, [pc, #416]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a67      	ldr	r2, [pc, #412]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003bf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d013      	beq.n	8003c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fc8c 	bl	800251c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe fc88 	bl	800251c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	@ 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e200      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0xe4>
 8003c26:	e014      	b.n	8003c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe fc78 	bl	800251c <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fe fc74 	bl	800251c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	@ 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e1ec      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	4b53      	ldr	r3, [pc, #332]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x10c>
 8003c4e:	e000      	b.n	8003c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d063      	beq.n	8003d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c6a:	4b49      	ldr	r3, [pc, #292]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d11c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x18c>
 8003c76:	4b46      	ldr	r3, [pc, #280]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d116      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	4b43      	ldr	r3, [pc, #268]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x176>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d001      	beq.n	8003c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e1c0      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4939      	ldr	r1, [pc, #228]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	e03a      	b.n	8003d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb8:	4b36      	ldr	r3, [pc, #216]	@ (8003d94 <HAL_RCC_OscConfig+0x270>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fc2d 	bl	800251c <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7fe fc29 	bl	800251c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1a1      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4927      	ldr	r1, [pc, #156]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
 8003cf8:	e015      	b.n	8003d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfa:	4b26      	ldr	r3, [pc, #152]	@ (8003d94 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe fc0c 	bl	800251c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fe fc08 	bl	800251c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e180      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d03a      	beq.n	8003da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d019      	beq.n	8003d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3a:	4b17      	ldr	r3, [pc, #92]	@ (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d40:	f7fe fbec 	bl	800251c <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d48:	f7fe fbe8 	bl	800251c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e160      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d66:	2001      	movs	r0, #1
 8003d68:	f000 fafe 	bl	8004368 <RCC_Delay>
 8003d6c:	e01c      	b.n	8003da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <HAL_RCC_OscConfig+0x274>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d74:	f7fe fbd2 	bl	800251c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7a:	e00f      	b.n	8003d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fe fbce 	bl	800251c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d908      	bls.n	8003d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e146      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	42420000 	.word	0x42420000
 8003d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	4b92      	ldr	r3, [pc, #584]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e9      	bne.n	8003d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a6 	beq.w	8003f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b8b      	ldr	r3, [pc, #556]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	4b88      	ldr	r3, [pc, #544]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	4a87      	ldr	r2, [pc, #540]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	61d3      	str	r3, [r2, #28]
 8003dd2:	4b85      	ldr	r3, [pc, #532]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de2:	4b82      	ldr	r3, [pc, #520]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d118      	bne.n	8003e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dee:	4b7f      	ldr	r3, [pc, #508]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7fe fb8f 	bl	800251c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fe fb8b 	bl	800251c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b64      	cmp	r3, #100	@ 0x64
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e103      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e14:	4b75      	ldr	r3, [pc, #468]	@ (8003fec <HAL_RCC_OscConfig+0x4c8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x312>
 8003e28:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6213      	str	r3, [r2, #32]
 8003e34:	e02d      	b.n	8003e92 <HAL_RCC_OscConfig+0x36e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x334>
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6213      	str	r3, [r2, #32]
 8003e4a:	4b67      	ldr	r3, [pc, #412]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a66      	ldr	r2, [pc, #408]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	f023 0304 	bic.w	r3, r3, #4
 8003e54:	6213      	str	r3, [r2, #32]
 8003e56:	e01c      	b.n	8003e92 <HAL_RCC_OscConfig+0x36e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x356>
 8003e60:	4b61      	ldr	r3, [pc, #388]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4a60      	ldr	r2, [pc, #384]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	6213      	str	r3, [r2, #32]
 8003e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4a5d      	ldr	r2, [pc, #372]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6213      	str	r3, [r2, #32]
 8003e78:	e00b      	b.n	8003e92 <HAL_RCC_OscConfig+0x36e>
 8003e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	4b58      	ldr	r3, [pc, #352]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a57      	ldr	r2, [pc, #348]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fb3f 	bl	800251c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fe fb3b 	bl	800251c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0b1      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x37e>
 8003ec4:	e014      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fb29 	bl	800251c <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe fb25 	bl	800251c <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e09b      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee4:	4b40      	ldr	r3, [pc, #256]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ee      	bne.n	8003ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8087 	beq.w	800401a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f0c:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d061      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d146      	bne.n	8003fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f20:	4b33      	ldr	r3, [pc, #204]	@ (8003ff0 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fe faf9 	bl	800251c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fe faf5 	bl	800251c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e06d      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f40:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f54:	d108      	bne.n	8003f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f56:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4921      	ldr	r1, [pc, #132]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f68:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a19      	ldr	r1, [r3, #32]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	491b      	ldr	r1, [pc, #108]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fe fac9 	bl	800251c <HAL_GetTick>
 8003f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f8e:	f7fe fac5 	bl	800251c <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e03d      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0f0      	beq.n	8003f8e <HAL_RCC_OscConfig+0x46a>
 8003fac:	e035      	b.n	800401a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <HAL_RCC_OscConfig+0x4cc>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fab2 	bl	800251c <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fe faae 	bl	800251c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e026      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fce:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f0      	bne.n	8003fbc <HAL_RCC_OscConfig+0x498>
 8003fda:	e01e      	b.n	800401a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d107      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e019      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_RCC_OscConfig+0x500>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	429a      	cmp	r2, r3
 8004006:	d106      	bne.n	8004016 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0d0      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b6a      	ldr	r3, [pc, #424]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d910      	bls.n	800406c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b67      	ldr	r3, [pc, #412]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	4965      	ldr	r1, [pc, #404]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b63      	ldr	r3, [pc, #396]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0b8      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d020      	beq.n	80040ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004084:	4b59      	ldr	r3, [pc, #356]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a58      	ldr	r2, [pc, #352]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800408a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800408e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800409c:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4a52      	ldr	r2, [pc, #328]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b50      	ldr	r3, [pc, #320]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	494d      	ldr	r1, [pc, #308]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d040      	beq.n	8004148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b47      	ldr	r3, [pc, #284]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d115      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e07f      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e073      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e06b      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b39      	ldr	r3, [pc, #228]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4936      	ldr	r1, [pc, #216]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fe fa00 	bl	800251c <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fe f9fc 	bl	800251c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e053      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2d      	ldr	r3, [pc, #180]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d210      	bcs.n	8004178 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4922      	ldr	r1, [pc, #136]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e032      	b.n	80041de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b19      	ldr	r3, [pc, #100]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	4916      	ldr	r1, [pc, #88]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041a2:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	490e      	ldr	r1, [pc, #56]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041b6:	f000 f821 	bl	80041fc <HAL_RCC_GetSysClockFreq>
 80041ba:	4602      	mov	r2, r0
 80041bc:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	490a      	ldr	r1, [pc, #40]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041c8:	5ccb      	ldrb	r3, [r1, r3]
 80041ca:	fa22 f303 	lsr.w	r3, r2, r3
 80041ce:	4a09      	ldr	r2, [pc, #36]	@ (80041f4 <HAL_RCC_ClockConfig+0x1cc>)
 80041d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041d2:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <HAL_RCC_ClockConfig+0x1d0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fd ff74 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40022000 	.word	0x40022000
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800a8f8 	.word	0x0800a8f8
 80041f4:	20000000 	.word	0x20000000
 80041f8:	20000004 	.word	0x20000004

080041fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	2300      	movs	r3, #0
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004216:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x30>
 8004226:	2b08      	cmp	r3, #8
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x36>
 800422a:	e027      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800422c:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800422e:	613b      	str	r3, [r7, #16]
      break;
 8004230:	e027      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	0c9b      	lsrs	r3, r3, #18
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	4a17      	ldr	r2, [pc, #92]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x9c>)
 800423c:	5cd3      	ldrb	r3, [r2, r3]
 800423e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d010      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800424a:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x94>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	0c5b      	lsrs	r3, r3, #17
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	4a11      	ldr	r2, [pc, #68]	@ (800429c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a0d      	ldr	r2, [pc, #52]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800425e:	fb03 f202 	mul.w	r2, r3, r2
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e004      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	613b      	str	r3, [r7, #16]
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x98>)
 800427e:	613b      	str	r3, [r7, #16]
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	693b      	ldr	r3, [r7, #16]
}
 8004284:	4618      	mov	r0, r3
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40021000 	.word	0x40021000
 8004294:	007a1200 	.word	0x007a1200
 8004298:	0800a910 	.word	0x0800a910
 800429c:	0800a920 	.word	0x0800a920
 80042a0:	003d0900 	.word	0x003d0900

080042a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a8:	4b02      	ldr	r3, [pc, #8]	@ (80042b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	20000000 	.word	0x20000000

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042bc:	f7ff fff2 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	@ (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800a908 	.word	0x0800a908

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e4:	f7ff ffde 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	0adb      	lsrs	r3, r3, #11
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	@ (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	0800a908 	.word	0x0800a908

08004308 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	220f      	movs	r2, #15
 8004316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004318:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004324:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004330:	4b0b      	ldr	r3, [pc, #44]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800433c:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <HAL_RCC_GetClockConfig+0x58>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCC_GetClockConfig+0x5c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0207 	and.w	r2, r3, #7
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr
 8004360:	40021000 	.word	0x40021000
 8004364:	40022000 	.word	0x40022000

08004368 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <RCC_Delay+0x34>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <RCC_Delay+0x38>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	0a5b      	lsrs	r3, r3, #9
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004384:	bf00      	nop
  }
  while (Delay --);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	60fa      	str	r2, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f9      	bne.n	8004384 <RCC_Delay+0x1c>
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	20000000 	.word	0x20000000
 80043a0:	10624dd3 	.word	0x10624dd3

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e041      	b.n	800443a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f839 	bl	8004442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 f9b4 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e03a      	b.n	80044e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a18      	ldr	r2, [pc, #96]	@ (80044ec <HAL_TIM_Base_Start_IT+0x98>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00e      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x58>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004496:	d009      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x58>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a14      	ldr	r2, [pc, #80]	@ (80044f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x58>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a13      	ldr	r2, [pc, #76]	@ (80044f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d111      	bne.n	80044d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	d010      	beq.n	80044e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ce:	e007      	b.n	80044e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40000400 	.word	0x40000400
 80044f4:	40000800 	.word	0x40000800

080044f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0202 	mvn.w	r2, #2
 8004524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8ed 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8e0 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f8ef 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d122      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b04      	cmp	r3, #4
 800456e:	d11b      	bne.n	80045a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0204 	mvn.w	r2, #4
 8004578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8c3 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 8004594:	e005      	b.n	80045a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8b6 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f8c5 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d122      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d11b      	bne.n	80045fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0208 	mvn.w	r2, #8
 80045cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2204      	movs	r2, #4
 80045d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f899 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f88c 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f89b 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b10      	cmp	r3, #16
 8004608:	d122      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0310 	and.w	r3, r3, #16
 8004614:	2b10      	cmp	r3, #16
 8004616:	d11b      	bne.n	8004650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0210 	mvn.w	r2, #16
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2208      	movs	r2, #8
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f86f 	bl	800471a <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f862 	bl	8004708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f871 	bl	800472c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b01      	cmp	r3, #1
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0201 	mvn.w	r2, #1
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fcd4 	bl	8002024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b80      	cmp	r3, #128	@ 0x80
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	2b80      	cmp	r3, #128	@ 0x80
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8bf 	bl	8004826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b40      	cmp	r3, #64	@ 0x40
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c0:	2b40      	cmp	r3, #64	@ 0x40
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f835 	bl	800473e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0220 	mvn.w	r2, #32
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f88a 	bl	8004814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a29      	ldr	r2, [pc, #164]	@ (8004808 <TIM_Base_SetConfig+0xb8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a26      	ldr	r2, [pc, #152]	@ (800480c <TIM_Base_SetConfig+0xbc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a25      	ldr	r2, [pc, #148]	@ (8004810 <TIM_Base_SetConfig+0xc0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1c      	ldr	r2, [pc, #112]	@ (8004808 <TIM_Base_SetConfig+0xb8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a19      	ldr	r2, [pc, #100]	@ (800480c <TIM_Base_SetConfig+0xbc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <TIM_Base_SetConfig+0xc0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a07      	ldr	r2, [pc, #28]	@ (8004808 <TIM_Base_SetConfig+0xb8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	615a      	str	r2, [r3, #20]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800

08004814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e042      	b.n	80048d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd fdc4 	bl	80023ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	@ 0x24
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800487a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f82b 	bl	80048d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004912:	f023 030c 	bic.w	r3, r3, #12
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	430b      	orrs	r3, r1
 800491e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <UART_SetConfig+0x114>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d103      	bne.n	8004948 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004940:	f7ff fcce 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	e002      	b.n	800494e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004948:	f7ff fcb6 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 800494c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009a      	lsls	r2, r3, #2
 8004958:	441a      	add	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	fbb2 f3f3 	udiv	r3, r2, r3
 8004964:	4a22      	ldr	r2, [pc, #136]	@ (80049f0 <UART_SetConfig+0x118>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	0119      	lsls	r1, r3, #4
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	009a      	lsls	r2, r3, #2
 8004978:	441a      	add	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	fbb2 f2f3 	udiv	r2, r2, r3
 8004984:	4b1a      	ldr	r3, [pc, #104]	@ (80049f0 <UART_SetConfig+0x118>)
 8004986:	fba3 0302 	umull	r0, r3, r3, r2
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	2064      	movs	r0, #100	@ 0x64
 800498e:	fb00 f303 	mul.w	r3, r0, r3
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	3332      	adds	r3, #50	@ 0x32
 8004998:	4a15      	ldr	r2, [pc, #84]	@ (80049f0 <UART_SetConfig+0x118>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049a4:	4419      	add	r1, r3
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <UART_SetConfig+0x118>)
 80049be:	fba3 0302 	umull	r0, r3, r3, r2
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	2064      	movs	r0, #100	@ 0x64
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	3332      	adds	r3, #50	@ 0x32
 80049d0:	4a07      	ldr	r2, [pc, #28]	@ (80049f0 <UART_SetConfig+0x118>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	440a      	add	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40013800 	.word	0x40013800
 80049f0:	51eb851f 	.word	0x51eb851f

080049f4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049fa:	f3ef 8305 	mrs	r3, IPSR
 80049fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10f      	bne.n	8004a26 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a06:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0a:	607b      	str	r3, [r7, #4]
  return(result);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <osKernelInitialize+0x32>
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <osKernelInitialize+0x60>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d109      	bne.n	8004a2e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a26:	f06f 0305 	mvn.w	r3, #5
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	e00c      	b.n	8004a48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a2e:	4b09      	ldr	r3, [pc, #36]	@ (8004a54 <osKernelInitialize+0x60>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004a36:	4b07      	ldr	r3, [pc, #28]	@ (8004a54 <osKernelInitialize+0x60>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	e002      	b.n	8004a48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a42:	f04f 33ff 	mov.w	r3, #4294967295
 8004a46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a48:	68fb      	ldr	r3, [r7, #12]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr
 8004a54:	20000320 	.word	0x20000320

08004a58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a5e:	f3ef 8305 	mrs	r3, IPSR
 8004a62:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10f      	bne.n	8004a8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6e:	607b      	str	r3, [r7, #4]
  return(result);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <osKernelStart+0x32>
 8004a76:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <osKernelStart+0x64>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d109      	bne.n	8004a92 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a82:	603b      	str	r3, [r7, #0]
  return(result);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004a8a:	f06f 0305 	mvn.w	r3, #5
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e00e      	b.n	8004ab0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a92:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <osKernelStart+0x64>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004a9a:	4b08      	ldr	r3, [pc, #32]	@ (8004abc <osKernelStart+0x64>)
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004aa0:	f001 fc10 	bl	80062c4 <vTaskStartScheduler>
      stat = osOK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e002      	b.n	8004ab0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000320 	.word	0x20000320

08004ac0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b092      	sub	sp, #72	@ 0x48
 8004ac4:	af04      	add	r7, sp, #16
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad0:	f3ef 8305 	mrs	r3, IPSR
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 8094 	bne.w	8004c06 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ade:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 808d 	bne.w	8004c06 <osThreadNew+0x146>
 8004aec:	4b48      	ldr	r3, [pc, #288]	@ (8004c10 <osThreadNew+0x150>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d106      	bne.n	8004b02 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004af4:	f3ef 8311 	mrs	r3, BASEPRI
 8004af8:	61fb      	str	r3, [r7, #28]
  return(result);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f040 8082 	bne.w	8004c06 <osThreadNew+0x146>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d07e      	beq.n	8004c06 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004b0c:	2318      	movs	r3, #24
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8004b10:	2300      	movs	r3, #0
 8004b12:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004b14:	f107 031b 	add.w	r3, r7, #27
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d045      	beq.n	8004bb2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <osThreadNew+0x74>
        name = attr->name;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <osThreadNew+0x9a>
 8004b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4a:	2b38      	cmp	r3, #56	@ 0x38
 8004b4c:	d805      	bhi.n	8004b5a <osThreadNew+0x9a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <osThreadNew+0x9e>
        return (NULL);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e054      	b.n	8004c08 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <osThreadNew+0xd4>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b7c:	d90a      	bls.n	8004b94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <osThreadNew+0xd4>
        mem = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b92:	e010      	b.n	8004bb6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10c      	bne.n	8004bb6 <osThreadNew+0xf6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d108      	bne.n	8004bb6 <osThreadNew+0xf6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <osThreadNew+0xf6>
          mem = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bb0:	e001      	b.n	8004bb6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8004bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d110      	bne.n	8004bde <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bc4:	9202      	str	r2, [sp, #8]
 8004bc6:	9301      	str	r3, [sp, #4]
 8004bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f001 f98c 	bl	8005ef0 <xTaskCreateStatic>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e013      	b.n	8004c06 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d110      	bne.n	8004c06 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f001 f9d9 	bl	8005fae <xTaskCreate>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d001      	beq.n	8004c06 <osThreadNew+0x146>
          hTask = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c06:	697b      	ldr	r3, [r7, #20]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3738      	adds	r7, #56	@ 0x38
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000320 	.word	0x20000320

08004c14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c1c:	f3ef 8305 	mrs	r3, IPSR
 8004c20:	613b      	str	r3, [r7, #16]
  return(result);
 8004c22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10f      	bne.n	8004c48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c28:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <osDelay+0x34>
 8004c34:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <osDelay+0x58>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d109      	bne.n	8004c50 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <osDelay+0x3c>
    stat = osErrorISR;
 8004c48:	f06f 0305 	mvn.w	r3, #5
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	e007      	b.n	8004c60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fafc 	bl	8006258 <vTaskDelay>
    }
  }

  return (stat);
 8004c60:	697b      	ldr	r3, [r7, #20]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000320 	.word	0x20000320

08004c70 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	@ 0x28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c7c:	f3ef 8305 	mrs	r3, IPSR
 8004c80:	613b      	str	r3, [r7, #16]
  return(result);
 8004c82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f040 8085 	bne.w	8004d94 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d17e      	bne.n	8004d94 <osMutexNew+0x124>
 8004c96:	4b42      	ldr	r3, [pc, #264]	@ (8004da0 <osMutexNew+0x130>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d105      	bne.n	8004caa <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d174      	bne.n	8004d94 <osMutexNew+0x124>
    if (attr != NULL) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	e001      	b.n	8004cbc <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <osMutexNew+0x5c>
      rmtx = 1U;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e001      	b.n	8004cd0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d15c      	bne.n	8004d94 <osMutexNew+0x124>
      mem = -1;
 8004cda:	f04f 33ff 	mov.w	r3, #4294967295
 8004cde:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d015      	beq.n	8004d12 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <osMutexNew+0x8c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b4f      	cmp	r3, #79	@ 0x4f
 8004cf4:	d902      	bls.n	8004cfc <osMutexNew+0x8c>
          mem = 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e00c      	b.n	8004d16 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d108      	bne.n	8004d16 <osMutexNew+0xa6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d104      	bne.n	8004d16 <osMutexNew+0xa6>
            mem = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e001      	b.n	8004d16 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d112      	bne.n	8004d42 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4619      	mov	r1, r3
 8004d28:	2004      	movs	r0, #4
 8004d2a:	f000 fb45 	bl	80053b8 <xQueueCreateMutexStatic>
 8004d2e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d30:	e016      	b.n	8004d60 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4619      	mov	r1, r3
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f000 fb3d 	bl	80053b8 <xQueueCreateMutexStatic>
 8004d3e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d40:	e00e      	b.n	8004d60 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004d4e:	2004      	movs	r0, #4
 8004d50:	f000 fb1a 	bl	8005388 <xQueueCreateMutex>
 8004d54:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d56:	e003      	b.n	8004d60 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f000 fb15 	bl	8005388 <xQueueCreateMutex>
 8004d5e:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <osMutexNew+0x110>
        if (attr != NULL) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <osMutexNew+0x104>
          name = attr->name;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e001      	b.n	8004d78 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d7c:	f001 f85c 	bl	8005e38 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d006      	beq.n	8004d94 <osMutexNew+0x124>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3728      	adds	r7, #40	@ 0x28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000320 	.word	0x20000320

08004da4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc2:	f3ef 8305 	mrs	r3, IPSR
 8004dc6:	613b      	str	r3, [r7, #16]
  return(result);
 8004dc8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dce:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <osMutexAcquire+0x4a>
 8004dda:	4b20      	ldr	r3, [pc, #128]	@ (8004e5c <osMutexAcquire+0xb8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d109      	bne.n	8004df6 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004de2:	f3ef 8311 	mrs	r3, BASEPRI
 8004de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004dee:	f06f 0305 	mvn.w	r3, #5
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e02c      	b.n	8004e50 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d103      	bne.n	8004e04 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004dfc:	f06f 0303 	mvn.w	r3, #3
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	e025      	b.n	8004e50 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d011      	beq.n	8004e2e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	69b8      	ldr	r0, [r7, #24]
 8004e0e:	f000 fb23 	bl	8005458 <xQueueTakeMutexRecursive>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d01b      	beq.n	8004e50 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004e1e:	f06f 0301 	mvn.w	r3, #1
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	e014      	b.n	8004e50 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004e26:	f06f 0302 	mvn.w	r3, #2
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	e010      	b.n	8004e50 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	69b8      	ldr	r0, [r7, #24]
 8004e32:	f000 fdc9 	bl	80059c8 <xQueueSemaphoreTake>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d009      	beq.n	8004e50 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004e42:	f06f 0301 	mvn.w	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	e002      	b.n	8004e50 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004e4a:	f06f 0302 	mvn.w	r3, #2
 8004e4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004e50:	69fb      	ldr	r3, [r7, #28]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000320 	.word	0x20000320

08004e60 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
 8004e6e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e7c:	f3ef 8305 	mrs	r3, IPSR
 8004e80:	613b      	str	r3, [r7, #16]
  return(result);
 8004e82:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10f      	bne.n	8004ea8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d109      	bne.n	8004ea8 <osMutexRelease+0x48>
 8004e94:	4b19      	ldr	r3, [pc, #100]	@ (8004efc <osMutexRelease+0x9c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d109      	bne.n	8004eb0 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004ea8:	f06f 0305 	mvn.w	r3, #5
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	e01f      	b.n	8004ef0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004eb6:	f06f 0303 	mvn.w	r3, #3
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e018      	b.n	8004ef0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004ec4:	69b8      	ldr	r0, [r7, #24]
 8004ec6:	f000 fa92 	bl	80053ee <xQueueGiveMutexRecursive>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d00f      	beq.n	8004ef0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004ed0:	f06f 0302 	mvn.w	r3, #2
 8004ed4:	61fb      	str	r3, [r7, #28]
 8004ed6:	e00b      	b.n	8004ef0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004ed8:	2300      	movs	r3, #0
 8004eda:	2200      	movs	r2, #0
 8004edc:	2100      	movs	r1, #0
 8004ede:	69b8      	ldr	r0, [r7, #24]
 8004ee0:	f000 faf2 	bl	80054c8 <xQueueGenericSend>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d002      	beq.n	8004ef0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004eea:	f06f 0302 	mvn.w	r3, #2
 8004eee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000320 	.word	0x20000320

08004f00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a06      	ldr	r2, [pc, #24]	@ (8004f28 <vApplicationGetIdleTaskMemory+0x28>)
 8004f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a05      	ldr	r2, [pc, #20]	@ (8004f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2280      	movs	r2, #128	@ 0x80
 8004f1c:	601a      	str	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	20000324 	.word	0x20000324
 8004f2c:	200003cc 	.word	0x200003cc

08004f30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a07      	ldr	r2, [pc, #28]	@ (8004f5c <vApplicationGetTimerTaskMemory+0x2c>)
 8004f40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a06      	ldr	r2, [pc, #24]	@ (8004f60 <vApplicationGetTimerTaskMemory+0x30>)
 8004f46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f4e:	601a      	str	r2, [r3, #0]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	200005cc 	.word	0x200005cc
 8004f60:	20000674 	.word	0x20000674

08004f64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f103 0208 	add.w	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f103 0208 	add.w	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f103 0208 	add.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d103      	bne.n	8005020 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e00c      	b.n	800503a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3308      	adds	r3, #8
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e002      	b.n	800502e <vListInsert+0x2e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	d2f6      	bcs.n	8005028 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6892      	ldr	r2, [r2, #8]
 8005086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6852      	ldr	r2, [r2, #4]
 8005090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d103      	bne.n	80050a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
	...

080050c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050f0:	f002 fb5c 	bl	80077ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	441a      	add	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	3b01      	subs	r3, #1
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	441a      	add	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	22ff      	movs	r2, #255	@ 0xff
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	22ff      	movs	r2, #255	@ 0xff
 800513c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d114      	bne.n	8005170 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d01a      	beq.n	8005184 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3310      	adds	r3, #16
 8005152:	4618      	mov	r0, r3
 8005154:	f001 fb56 	bl	8006804 <xTaskRemoveFromEventList>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d012      	beq.n	8005184 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <xQueueGenericReset+0xd0>)
 8005160:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	e009      	b.n	8005184 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3310      	adds	r3, #16
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fef5 	bl	8004f64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3324      	adds	r3, #36	@ 0x24
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fef0 	bl	8004f64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005184:	f002 fb42 	bl	800780c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005188:	2301      	movs	r3, #1
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000ed04 	.word	0xe000ed04

08005198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08e      	sub	sp, #56	@ 0x38
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051dc:	bf00      	nop
 80051de:	bf00      	nop
 80051e0:	e7fd      	b.n	80051de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <xQueueGenericCreateStatic+0x56>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <xQueueGenericCreateStatic+0x5a>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <xQueueGenericCreateStatic+0x5c>
 80051f2:	2300      	movs	r3, #0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	623b      	str	r3, [r7, #32]
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <xQueueGenericCreateStatic+0x84>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <xQueueGenericCreateStatic+0x88>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <xQueueGenericCreateStatic+0x8a>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	61fb      	str	r3, [r7, #28]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800523e:	2350      	movs	r3, #80	@ 0x50
 8005240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b50      	cmp	r3, #80	@ 0x50
 8005246:	d00b      	beq.n	8005260 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	61bb      	str	r3, [r7, #24]
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	e7fd      	b.n	800525c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005272:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f844 	bl	800530e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005288:	4618      	mov	r0, r3
 800528a:	3730      	adds	r7, #48	@ 0x30
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	@ 0x28
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10b      	bne.n	80052bc <xQueueGenericCreate+0x2c>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	613b      	str	r3, [r7, #16]
}
 80052b6:	bf00      	nop
 80052b8:	bf00      	nop
 80052ba:	e7fd      	b.n	80052b8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	e004      	b.n	80052d2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	fb02 f303 	mul.w	r3, r2, r3
 80052d0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3350      	adds	r3, #80	@ 0x50
 80052d6:	4618      	mov	r0, r3
 80052d8:	f002 fb6a 	bl	80079b0 <pvPortMalloc>
 80052dc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	3350      	adds	r3, #80	@ 0x50
 80052e8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052f2:	79fa      	ldrb	r2, [r7, #7]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f805 	bl	800530e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005304:	69bb      	ldr	r3, [r7, #24]
	}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d103      	bne.n	800532a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e002      	b.n	8005330 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800533c:	2101      	movs	r1, #1
 800533e:	69b8      	ldr	r0, [r7, #24]
 8005340:	f7ff fec0 	bl	80050c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00e      	beq.n	8005380 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005374:	2300      	movs	r3, #0
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f8a4 	bl	80054c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005392:	2301      	movs	r3, #1
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	461a      	mov	r2, r3
 800539e:	6939      	ldr	r1, [r7, #16]
 80053a0:	6978      	ldr	r0, [r7, #20]
 80053a2:	f7ff ff75 	bl	8005290 <xQueueGenericCreate>
 80053a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff ffd3 	bl	8005354 <prvInitialiseMutex>

		return pxNewQueue;
 80053ae:	68fb      	ldr	r3, [r7, #12]
	}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af02      	add	r7, sp, #8
 80053be:	4603      	mov	r3, r0
 80053c0:	6039      	str	r1, [r7, #0]
 80053c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	6939      	ldr	r1, [r7, #16]
 80053d6:	6978      	ldr	r0, [r7, #20]
 80053d8:	f7ff fede 	bl	8005198 <xQueueGenericCreateStatic>
 80053dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff ffb8 	bl	8005354 <prvInitialiseMutex>

		return pxNewQueue;
 80053e4:	68fb      	ldr	r3, [r7, #12]
	}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80053ee:	b590      	push	{r4, r7, lr}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	60fb      	str	r3, [r7, #12]
}
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	685c      	ldr	r4, [r3, #4]
 800541c:	f001 fbbe 	bl	8006b9c <xTaskGetCurrentTaskHandle>
 8005420:	4603      	mov	r3, r0
 8005422:	429c      	cmp	r4, r3
 8005424:	d111      	bne.n	800544a <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	1e5a      	subs	r2, r3, #1
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d105      	bne.n	8005444 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005438:	2300      	movs	r3, #0
 800543a:	2200      	movs	r2, #0
 800543c:	2100      	movs	r1, #0
 800543e:	6938      	ldr	r0, [r7, #16]
 8005440:	f000 f842 	bl	80054c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e001      	b.n	800544e <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800544e:	697b      	ldr	r3, [r7, #20]
	}
 8005450:	4618      	mov	r0, r3
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd90      	pop	{r4, r7, pc}

08005458 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	60fb      	str	r3, [r7, #12]
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	685c      	ldr	r4, [r3, #4]
 8005488:	f001 fb88 	bl	8006b9c <xTaskGetCurrentTaskHandle>
 800548c:	4603      	mov	r3, r0
 800548e:	429c      	cmp	r4, r3
 8005490:	d107      	bne.n	80054a2 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	e00c      	b.n	80054bc <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6938      	ldr	r0, [r7, #16]
 80054a6:	f000 fa8f 	bl	80059c8 <xQueueSemaphoreTake>
 80054aa:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80054bc:	697b      	ldr	r3, [r7, #20]
	}
 80054be:	4618      	mov	r0, r3
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}
	...

080054c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08e      	sub	sp, #56	@ 0x38
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054d6:	2300      	movs	r3, #0
 80054d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10b      	bne.n	80054fc <xQueueGenericSend+0x34>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <xQueueGenericSend+0x42>
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <xQueueGenericSend+0x46>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <xQueueGenericSend+0x48>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <xQueueGenericSend+0x64>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d103      	bne.n	800553a <xQueueGenericSend+0x72>
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <xQueueGenericSend+0x76>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <xQueueGenericSend+0x78>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <xQueueGenericSend+0x94>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	623b      	str	r3, [r7, #32]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800555c:	f001 fb2c 	bl	8006bb8 <xTaskGetSchedulerState>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <xQueueGenericSend+0xa4>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <xQueueGenericSend+0xa8>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <xQueueGenericSend+0xaa>
 8005570:	2300      	movs	r3, #0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <xQueueGenericSend+0xc6>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	61fb      	str	r3, [r7, #28]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800558e:	f002 f90d 	bl	80077ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <xQueueGenericSend+0xdc>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d129      	bne.n	80055f8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055aa:	f000 fb34 	bl	8005c16 <prvCopyDataToQueue>
 80055ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d010      	beq.n	80055da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	3324      	adds	r3, #36	@ 0x24
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f921 	bl	8006804 <xTaskRemoveFromEventList>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d013      	beq.n	80055f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055c8:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <xQueueGenericSend+0x200>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	e00a      	b.n	80055f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055e0:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <xQueueGenericSend+0x200>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055f0:	f002 f90c 	bl	800780c <vPortExitCritical>
				return pdPASS;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e063      	b.n	80056c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d103      	bne.n	8005606 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055fe:	f002 f905 	bl	800780c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005602:	2300      	movs	r3, #0
 8005604:	e05c      	b.n	80056c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800560c:	f107 0314 	add.w	r3, r7, #20
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f95b 	bl	80068cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800561a:	f002 f8f7 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800561e:	f000 fec1 	bl	80063a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005622:	f002 f8c3 	bl	80077ac <vPortEnterCritical>
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800562c:	b25b      	sxtb	r3, r3
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d103      	bne.n	800563c <xQueueGenericSend+0x174>
 8005634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005642:	b25b      	sxtb	r3, r3
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <xQueueGenericSend+0x18a>
 800564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005652:	f002 f8db 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005656:	1d3a      	adds	r2, r7, #4
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f001 f94a 	bl	80068f8 <xTaskCheckForTimeOut>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d124      	bne.n	80056b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800566a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800566c:	f000 fbcb 	bl	8005e06 <prvIsQueueFull>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d018      	beq.n	80056a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	3310      	adds	r3, #16
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f001 f86e 	bl	8006760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005684:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005686:	f000 fb56 	bl	8005d36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800568a:	f000 fe99 	bl	80063c0 <xTaskResumeAll>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f af7c 	bne.w	800558e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005696:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <xQueueGenericSend+0x200>)
 8005698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	e772      	b.n	800558e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056aa:	f000 fb44 	bl	8005d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056ae:	f000 fe87 	bl	80063c0 <xTaskResumeAll>
 80056b2:	e76c      	b.n	800558e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056b6:	f000 fb3e 	bl	8005d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ba:	f000 fe81 	bl	80063c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056be:	2300      	movs	r3, #0
		}
	}
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3738      	adds	r7, #56	@ 0x38
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08e      	sub	sp, #56	@ 0x38
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <xQueueGenericSendFromISR+0x3e>
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <xQueueGenericSendFromISR+0x42>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericSendFromISR+0x44>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	623b      	str	r3, [r7, #32]
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d103      	bne.n	800573a <xQueueGenericSendFromISR+0x6e>
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <xQueueGenericSendFromISR+0x72>
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <xQueueGenericSendFromISR+0x74>
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10b      	bne.n	800575c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	61fb      	str	r3, [r7, #28]
}
 8005756:	bf00      	nop
 8005758:	bf00      	nop
 800575a:	e7fd      	b.n	8005758 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800575c:	f002 f8e8 	bl	8007930 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005760:	f3ef 8211 	mrs	r2, BASEPRI
 8005764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	61ba      	str	r2, [r7, #24]
 8005776:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005778:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800577c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005784:	429a      	cmp	r2, r3
 8005786:	d302      	bcc.n	800578e <xQueueGenericSendFromISR+0xc2>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d12c      	bne.n	80057e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800579e:	f000 fa3a 	bl	8005c16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d112      	bne.n	80057d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d016      	beq.n	80057e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	3324      	adds	r3, #36	@ 0x24
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 f823 	bl	8006804 <xTaskRemoveFromEventList>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e007      	b.n	80057e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057d6:	3301      	adds	r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	b25a      	sxtb	r2, r3
 80057dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057e2:	2301      	movs	r3, #1
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80057e6:	e001      	b.n	80057ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3738      	adds	r7, #56	@ 0x38
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	@ 0x30
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <xQueueReceive+0x32>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	623b      	str	r3, [r7, #32]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <xQueueReceive+0x40>
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <xQueueReceive+0x44>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <xQueueReceive+0x46>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <xQueueReceive+0x62>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	61fb      	str	r3, [r7, #28]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005866:	f001 f9a7 	bl	8006bb8 <xTaskGetSchedulerState>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <xQueueReceive+0x72>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <xQueueReceive+0x76>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <xQueueReceive+0x78>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10b      	bne.n	8005898 <xQueueReceive+0x94>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	61bb      	str	r3, [r7, #24]
}
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005898:	f001 ff88 	bl	80077ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01f      	beq.n	80058e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058ac:	f000 fa1d 	bl	8005cea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	1e5a      	subs	r2, r3, #1
 80058b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00f      	beq.n	80058e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	3310      	adds	r3, #16
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 ff9d 	bl	8006804 <xTaskRemoveFromEventList>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058d0:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <xQueueReceive+0x1c0>)
 80058d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058e0:	f001 ff94 	bl	800780c <vPortExitCritical>
				return pdPASS;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e069      	b.n	80059bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058ee:	f001 ff8d 	bl	800780c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e062      	b.n	80059bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058fc:	f107 0310 	add.w	r3, r7, #16
 8005900:	4618      	mov	r0, r3
 8005902:	f000 ffe3 	bl	80068cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005906:	2301      	movs	r3, #1
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800590a:	f001 ff7f 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800590e:	f000 fd49 	bl	80063a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005912:	f001 ff4b 	bl	80077ac <vPortEnterCritical>
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800591c:	b25b      	sxtb	r3, r3
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d103      	bne.n	800592c <xQueueReceive+0x128>
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005932:	b25b      	sxtb	r3, r3
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d103      	bne.n	8005942 <xQueueReceive+0x13e>
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005942:	f001 ff63 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005946:	1d3a      	adds	r2, r7, #4
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ffd2 	bl	80068f8 <xTaskCheckForTimeOut>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d123      	bne.n	80059a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800595a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800595c:	f000 fa3d 	bl	8005dda <prvIsQueueEmpty>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d017      	beq.n	8005996 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	3324      	adds	r3, #36	@ 0x24
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fef6 	bl	8006760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005976:	f000 f9de 	bl	8005d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800597a:	f000 fd21 	bl	80063c0 <xTaskResumeAll>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d189      	bne.n	8005898 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005984:	4b0f      	ldr	r3, [pc, #60]	@ (80059c4 <xQueueReceive+0x1c0>)
 8005986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	e780      	b.n	8005898 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005998:	f000 f9cd 	bl	8005d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800599c:	f000 fd10 	bl	80063c0 <xTaskResumeAll>
 80059a0:	e77a      	b.n	8005898 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80059a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059a4:	f000 f9c7 	bl	8005d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059a8:	f000 fd0a 	bl	80063c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059ae:	f000 fa14 	bl	8005dda <prvIsQueueEmpty>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f43f af6f 	beq.w	8005898 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3730      	adds	r7, #48	@ 0x30
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	e000ed04 	.word	0xe000ed04

080059c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08e      	sub	sp, #56	@ 0x38
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10b      	bne.n	80059fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80059e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	623b      	str	r3, [r7, #32]
}
 80059f6:	bf00      	nop
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	61fb      	str	r3, [r7, #28]
}
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
 8005a1a:	e7fd      	b.n	8005a18 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a1c:	f001 f8cc 	bl	8006bb8 <xTaskGetSchedulerState>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <xQueueSemaphoreTake+0x64>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <xQueueSemaphoreTake+0x68>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e000      	b.n	8005a32 <xQueueSemaphoreTake+0x6a>
 8005a30:	2300      	movs	r3, #0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10b      	bne.n	8005a4e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	61bb      	str	r3, [r7, #24]
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	e7fd      	b.n	8005a4a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a4e:	f001 fead 	bl	80077ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a56:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d024      	beq.n	8005aa8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a60:	1e5a      	subs	r2, r3, #1
 8005a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005a6e:	f001 fa27 	bl	8006ec0 <pvTaskIncrementMutexHeldCount>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00f      	beq.n	8005aa0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a82:	3310      	adds	r3, #16
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 febd 	bl	8006804 <xTaskRemoveFromEventList>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a90:	4b54      	ldr	r3, [pc, #336]	@ (8005be4 <xQueueSemaphoreTake+0x21c>)
 8005a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aa0:	f001 feb4 	bl	800780c <vPortExitCritical>
				return pdPASS;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e098      	b.n	8005bda <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d112      	bne.n	8005ad4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	617b      	str	r3, [r7, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005acc:	f001 fe9e 	bl	800780c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e082      	b.n	8005bda <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fef4 	bl	80068cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ae8:	f001 fe90 	bl	800780c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aec:	f000 fc5a 	bl	80063a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005af0:	f001 fe5c 	bl	80077ac <vPortEnterCritical>
 8005af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005afa:	b25b      	sxtb	r3, r3
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d103      	bne.n	8005b0a <xQueueSemaphoreTake+0x142>
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d103      	bne.n	8005b20 <xQueueSemaphoreTake+0x158>
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b20:	f001 fe74 	bl	800780c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b24:	463a      	mov	r2, r7
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fee3 	bl	80068f8 <xTaskCheckForTimeOut>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d132      	bne.n	8005b9e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b3a:	f000 f94e 	bl	8005dda <prvIsQueueEmpty>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d026      	beq.n	8005b92 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d109      	bne.n	8005b60 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005b4c:	f001 fe2e 	bl	80077ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 f84d 	bl	8006bf4 <xTaskPriorityInherit>
 8005b5a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005b5c:	f001 fe56 	bl	800780c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b62:	3324      	adds	r3, #36	@ 0x24
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fdf9 	bl	8006760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b70:	f000 f8e1 	bl	8005d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b74:	f000 fc24 	bl	80063c0 <xTaskResumeAll>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f47f af67 	bne.w	8005a4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005b80:	4b18      	ldr	r3, [pc, #96]	@ (8005be4 <xQueueSemaphoreTake+0x21c>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	e75d      	b.n	8005a4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b94:	f000 f8cf 	bl	8005d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b98:	f000 fc12 	bl	80063c0 <xTaskResumeAll>
 8005b9c:	e757      	b.n	8005a4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ba0:	f000 f8c9 	bl	8005d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ba4:	f000 fc0c 	bl	80063c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005baa:	f000 f916 	bl	8005dda <prvIsQueueEmpty>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f43f af4c 	beq.w	8005a4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005bbc:	f001 fdf6 	bl	80077ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005bc2:	f000 f811 	bl	8005be8 <prvGetDisinheritPriorityAfterTimeout>
 8005bc6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f8ee 	bl	8006db0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005bd4:	f001 fe1a 	bl	800780c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3738      	adds	r7, #56	@ 0x38
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d006      	beq.n	8005c06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e001      	b.n	8005c0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
	}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d14d      	bne.n	8005cd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 f845 	bl	8006cd0 <xTaskPriorityDisinherit>
 8005c46:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	605a      	str	r2, [r3, #4]
 8005c4e:	e043      	b.n	8005cd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d119      	bne.n	8005c8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6898      	ldr	r0, [r3, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	f002 ffcc 	bl	8008bfe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6e:	441a      	add	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d32b      	bcc.n	8005cd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
 8005c88:	e026      	b.n	8005cd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68d8      	ldr	r0, [r3, #12]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c92:	461a      	mov	r2, r3
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	f002 ffb2 	bl	8008bfe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	425b      	negs	r3, r3
 8005ca4:	441a      	add	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d207      	bcs.n	8005cc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	425b      	negs	r3, r3
 8005cc0:	441a      	add	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d105      	bne.n	8005cd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005ce0:	697b      	ldr	r3, [r7, #20]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d018      	beq.n	8005d2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	441a      	add	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d303      	bcc.n	8005d1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68d9      	ldr	r1, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d26:	461a      	mov	r2, r3
 8005d28:	6838      	ldr	r0, [r7, #0]
 8005d2a:	f002 ff68 	bl	8008bfe <memcpy>
	}
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d3e:	f001 fd35 	bl	80077ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d4a:	e011      	b.n	8005d70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d012      	beq.n	8005d7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3324      	adds	r3, #36	@ 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fd53 	bl	8006804 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d64:	f000 fe2c 	bl	80069c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dce9      	bgt.n	8005d4c <prvUnlockQueue+0x16>
 8005d78:	e000      	b.n	8005d7c <prvUnlockQueue+0x46>
					break;
 8005d7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	22ff      	movs	r2, #255	@ 0xff
 8005d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d84:	f001 fd42 	bl	800780c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d88:	f001 fd10 	bl	80077ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d94:	e011      	b.n	8005dba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d012      	beq.n	8005dc4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3310      	adds	r3, #16
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fd2e 	bl	8006804 <xTaskRemoveFromEventList>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dae:	f000 fe07 	bl	80069c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dce9      	bgt.n	8005d96 <prvUnlockQueue+0x60>
 8005dc2:	e000      	b.n	8005dc6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dc4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	22ff      	movs	r2, #255	@ 0xff
 8005dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 fd1d 	bl	800780c <vPortExitCritical>
}
 8005dd2:	bf00      	nop
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005de2:	f001 fce3 	bl	80077ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005dee:	2301      	movs	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e001      	b.n	8005df8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005df8:	f001 fd08 	bl	800780c <vPortExitCritical>

	return xReturn;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e0e:	f001 fccd 	bl	80077ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d102      	bne.n	8005e24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e001      	b.n	8005e28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e28:	f001 fcf0 	bl	800780c <vPortExitCritical>

	return xReturn;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e014      	b.n	8005e72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e48:	4a0e      	ldr	r2, [pc, #56]	@ (8005e84 <vQueueAddToRegistry+0x4c>)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e54:	490b      	ldr	r1, [pc, #44]	@ (8005e84 <vQueueAddToRegistry+0x4c>)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e5e:	4a09      	ldr	r2, [pc, #36]	@ (8005e84 <vQueueAddToRegistry+0x4c>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	4413      	add	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e6a:	e006      	b.n	8005e7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b07      	cmp	r3, #7
 8005e76:	d9e7      	bls.n	8005e48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	20000a74 	.word	0x20000a74

08005e88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e98:	f001 fc88 	bl	80077ac <vPortEnterCritical>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ea2:	b25b      	sxtb	r3, r3
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d103      	bne.n	8005eb2 <vQueueWaitForMessageRestricted+0x2a>
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d103      	bne.n	8005ec8 <vQueueWaitForMessageRestricted+0x40>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ec8:	f001 fca0 	bl	800780c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	3324      	adds	r3, #36	@ 0x24
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fc65 	bl	80067ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ee2:	6978      	ldr	r0, [r7, #20]
 8005ee4:	f7ff ff27 	bl	8005d36 <prvUnlockQueue>
	}
 8005ee8:	bf00      	nop
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	@ 0x38
 8005ef4:	af04      	add	r7, sp, #16
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10b      	bne.n	8005f1c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	61fb      	str	r3, [r7, #28]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f3a:	23a8      	movs	r3, #168	@ 0xa8
 8005f3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2ba8      	cmp	r3, #168	@ 0xa8
 8005f42:	d00b      	beq.n	8005f5c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61bb      	str	r3, [r7, #24]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d01e      	beq.n	8005fa0 <xTaskCreateStatic+0xb0>
 8005f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01b      	beq.n	8005fa0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f70:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	2202      	movs	r2, #2
 8005f76:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	9303      	str	r3, [sp, #12]
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	9302      	str	r3, [sp, #8]
 8005f82:	f107 0314 	add.w	r3, r7, #20
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 f850 	bl	8006038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f9a:	f000 f8ed 	bl	8006178 <prvAddNewTaskToReadyList>
 8005f9e:	e001      	b.n	8005fa4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fa4:	697b      	ldr	r3, [r7, #20]
	}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3728      	adds	r7, #40	@ 0x28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b08c      	sub	sp, #48	@ 0x30
 8005fb2:	af04      	add	r7, sp, #16
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 fcf4 	bl	80079b0 <pvPortMalloc>
 8005fc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00e      	beq.n	8005fee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005fd0:	20a8      	movs	r0, #168	@ 0xa8
 8005fd2:	f001 fced 	bl	80079b0 <pvPortMalloc>
 8005fd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fe4:	e005      	b.n	8005ff2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fe6:	6978      	ldr	r0, [r7, #20]
 8005fe8:	f001 fdaa 	bl	8007b40 <vPortFree>
 8005fec:	e001      	b.n	8005ff2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d017      	beq.n	8006028 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	2300      	movs	r3, #0
 8006004:	9303      	str	r3, [sp, #12]
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	9302      	str	r3, [sp, #8]
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f80e 	bl	8006038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800601c:	69f8      	ldr	r0, [r7, #28]
 800601e:	f000 f8ab 	bl	8006178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006022:	2301      	movs	r3, #1
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e002      	b.n	800602e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006028:	f04f 33ff 	mov.w	r3, #4294967295
 800602c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800602e:	69bb      	ldr	r3, [r7, #24]
	}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	461a      	mov	r2, r3
 8006050:	21a5      	movs	r1, #165	@ 0xa5
 8006052:	f002 fcf1 	bl	8008a38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006060:	3b01      	subs	r3, #1
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	f023 0307 	bic.w	r3, r3, #7
 800606e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00b      	beq.n	8006092 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	617b      	str	r3, [r7, #20]
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	e7fd      	b.n	800608e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	e012      	b.n	80060be <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	7819      	ldrb	r1, [r3, #0]
 80060a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	3334      	adds	r3, #52	@ 0x34
 80060a8:	460a      	mov	r2, r1
 80060aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d006      	beq.n	80060c6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	2b0f      	cmp	r3, #15
 80060c2:	d9e9      	bls.n	8006098 <prvInitialiseNewTask+0x60>
 80060c4:	e000      	b.n	80060c8 <prvInitialiseNewTask+0x90>
		{
			break;
 80060c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d2:	2b37      	cmp	r3, #55	@ 0x37
 80060d4:	d901      	bls.n	80060da <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060d6:	2337      	movs	r3, #55	@ 0x37
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	2200      	movs	r2, #0
 80060ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ee:	3304      	adds	r3, #4
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe ff56 	bl	8004fa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	3318      	adds	r3, #24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe ff51 	bl	8004fa2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006104:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	2200      	movs	r2, #0
 800611a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	2200      	movs	r2, #0
 8006122:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	3354      	adds	r3, #84	@ 0x54
 800612a:	224c      	movs	r2, #76	@ 0x4c
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f002 fc82 	bl	8008a38 <memset>
 8006134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006136:	4a0d      	ldr	r2, [pc, #52]	@ (800616c <prvInitialiseNewTask+0x134>)
 8006138:	659a      	str	r2, [r3, #88]	@ 0x58
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	4a0c      	ldr	r2, [pc, #48]	@ (8006170 <prvInitialiseNewTask+0x138>)
 800613e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	4a0c      	ldr	r2, [pc, #48]	@ (8006174 <prvInitialiseNewTask+0x13c>)
 8006144:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	68f9      	ldr	r1, [r7, #12]
 800614a:	69b8      	ldr	r0, [r7, #24]
 800614c:	f001 fa40 	bl	80075d0 <pxPortInitialiseStack>
 8006150:	4602      	mov	r2, r0
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800615c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006162:	bf00      	nop
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20001d00 	.word	0x20001d00
 8006170:	20001d68 	.word	0x20001d68
 8006174:	20001dd0 	.word	0x20001dd0

08006178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006180:	f001 fb14 	bl	80077ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006184:	4b2d      	ldr	r3, [pc, #180]	@ (800623c <prvAddNewTaskToReadyList+0xc4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	4a2c      	ldr	r2, [pc, #176]	@ (800623c <prvAddNewTaskToReadyList+0xc4>)
 800618c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800618e:	4b2c      	ldr	r3, [pc, #176]	@ (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006196:	4a2a      	ldr	r2, [pc, #168]	@ (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800619c:	4b27      	ldr	r3, [pc, #156]	@ (800623c <prvAddNewTaskToReadyList+0xc4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d110      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061a4:	f000 fc32 	bl	8006a0c <prvInitialiseTaskLists>
 80061a8:	e00d      	b.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061aa:	4b26      	ldr	r3, [pc, #152]	@ (8006244 <prvAddNewTaskToReadyList+0xcc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061b2:	4b23      	ldr	r3, [pc, #140]	@ (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d802      	bhi.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061c6:	4b20      	ldr	r3, [pc, #128]	@ (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061dc:	4b1b      	ldr	r3, [pc, #108]	@ (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <prvAddNewTaskToReadyList+0x74>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	4a18      	ldr	r2, [pc, #96]	@ (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a15      	ldr	r2, [pc, #84]	@ (8006250 <prvAddNewTaskToReadyList+0xd8>)
 80061fa:	441a      	add	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7fe fed9 	bl	8004fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006208:	f001 fb00 	bl	800780c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800620c:	4b0d      	ldr	r3, [pc, #52]	@ (8006244 <prvAddNewTaskToReadyList+0xcc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006214:	4b0a      	ldr	r3, [pc, #40]	@ (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d207      	bcs.n	8006232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006222:	4b0c      	ldr	r3, [pc, #48]	@ (8006254 <prvAddNewTaskToReadyList+0xdc>)
 8006224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000f88 	.word	0x20000f88
 8006240:	20000ab4 	.word	0x20000ab4
 8006244:	20000f94 	.word	0x20000f94
 8006248:	20000fa4 	.word	0x20000fa4
 800624c:	20000f90 	.word	0x20000f90
 8006250:	20000ab8 	.word	0x20000ab8
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d018      	beq.n	800629c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800626a:	4b14      	ldr	r3, [pc, #80]	@ (80062bc <vTaskDelay+0x64>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <vTaskDelay+0x32>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800628a:	f000 f88b 	bl	80063a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fe29 	bl	8006ee8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006296:	f000 f893 	bl	80063c0 <xTaskResumeAll>
 800629a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80062a2:	4b07      	ldr	r3, [pc, #28]	@ (80062c0 <vTaskDelay+0x68>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000fb0 	.word	0x20000fb0
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	@ 0x28
 80062c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062d2:	463a      	mov	r2, r7
 80062d4:	1d39      	adds	r1, r7, #4
 80062d6:	f107 0308 	add.w	r3, r7, #8
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fe10 	bl	8004f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	9202      	str	r2, [sp, #8]
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	2300      	movs	r3, #0
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	2300      	movs	r3, #0
 80062f0:	460a      	mov	r2, r1
 80062f2:	4924      	ldr	r1, [pc, #144]	@ (8006384 <vTaskStartScheduler+0xc0>)
 80062f4:	4824      	ldr	r0, [pc, #144]	@ (8006388 <vTaskStartScheduler+0xc4>)
 80062f6:	f7ff fdfb 	bl	8005ef0 <xTaskCreateStatic>
 80062fa:	4603      	mov	r3, r0
 80062fc:	4a23      	ldr	r2, [pc, #140]	@ (800638c <vTaskStartScheduler+0xc8>)
 80062fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006300:	4b22      	ldr	r3, [pc, #136]	@ (800638c <vTaskStartScheduler+0xc8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006308:	2301      	movs	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e001      	b.n	8006312 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d102      	bne.n	800631e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006318:	f000 fe3a 	bl	8006f90 <xTimerCreateTimerTask>
 800631c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d11b      	bne.n	800635c <vTaskStartScheduler+0x98>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	613b      	str	r3, [r7, #16]
}
 8006336:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006338:	4b15      	ldr	r3, [pc, #84]	@ (8006390 <vTaskStartScheduler+0xcc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3354      	adds	r3, #84	@ 0x54
 800633e:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <vTaskStartScheduler+0xd0>)
 8006340:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006342:	4b15      	ldr	r3, [pc, #84]	@ (8006398 <vTaskStartScheduler+0xd4>)
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800634a:	4b14      	ldr	r3, [pc, #80]	@ (800639c <vTaskStartScheduler+0xd8>)
 800634c:	2201      	movs	r2, #1
 800634e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006350:	4b13      	ldr	r3, [pc, #76]	@ (80063a0 <vTaskStartScheduler+0xdc>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006356:	f001 f9b7 	bl	80076c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800635a:	e00f      	b.n	800637c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d10b      	bne.n	800637c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006368:	f383 8811 	msr	BASEPRI, r3
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	60fb      	str	r3, [r7, #12]
}
 8006376:	bf00      	nop
 8006378:	bf00      	nop
 800637a:	e7fd      	b.n	8006378 <vTaskStartScheduler+0xb4>
}
 800637c:	bf00      	nop
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	0800a888 	.word	0x0800a888
 8006388:	080069d9 	.word	0x080069d9
 800638c:	20000fac 	.word	0x20000fac
 8006390:	20000ab4 	.word	0x20000ab4
 8006394:	2000001c 	.word	0x2000001c
 8006398:	20000fa8 	.word	0x20000fa8
 800639c:	20000f94 	.word	0x20000f94
 80063a0:	20000f8c 	.word	0x20000f8c

080063a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80063a8:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <vTaskSuspendAll+0x18>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	4a03      	ldr	r2, [pc, #12]	@ (80063bc <vTaskSuspendAll+0x18>)
 80063b0:	6013      	str	r3, [r2, #0]
}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000fb0 	.word	0x20000fb0

080063c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063ce:	4b42      	ldr	r3, [pc, #264]	@ (80064d8 <xTaskResumeAll+0x118>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <xTaskResumeAll+0x2e>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	603b      	str	r3, [r7, #0]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063ee:	f001 f9dd 	bl	80077ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063f2:	4b39      	ldr	r3, [pc, #228]	@ (80064d8 <xTaskResumeAll+0x118>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	4a37      	ldr	r2, [pc, #220]	@ (80064d8 <xTaskResumeAll+0x118>)
 80063fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fc:	4b36      	ldr	r3, [pc, #216]	@ (80064d8 <xTaskResumeAll+0x118>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d162      	bne.n	80064ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006404:	4b35      	ldr	r3, [pc, #212]	@ (80064dc <xTaskResumeAll+0x11c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d05e      	beq.n	80064ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800640c:	e02f      	b.n	800646e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800640e:	4b34      	ldr	r3, [pc, #208]	@ (80064e0 <xTaskResumeAll+0x120>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3318      	adds	r3, #24
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fe28 	bl	8005070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3304      	adds	r3, #4
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fe23 	bl	8005070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642e:	4b2d      	ldr	r3, [pc, #180]	@ (80064e4 <xTaskResumeAll+0x124>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d903      	bls.n	800643e <xTaskResumeAll+0x7e>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	4a2a      	ldr	r2, [pc, #168]	@ (80064e4 <xTaskResumeAll+0x124>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4a27      	ldr	r2, [pc, #156]	@ (80064e8 <xTaskResumeAll+0x128>)
 800644c:	441a      	add	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fe fdb0 	bl	8004fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645e:	4b23      	ldr	r3, [pc, #140]	@ (80064ec <xTaskResumeAll+0x12c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	429a      	cmp	r2, r3
 8006466:	d302      	bcc.n	800646e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006468:	4b21      	ldr	r3, [pc, #132]	@ (80064f0 <xTaskResumeAll+0x130>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800646e:	4b1c      	ldr	r3, [pc, #112]	@ (80064e0 <xTaskResumeAll+0x120>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1cb      	bne.n	800640e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800647c:	f000 fb6a 	bl	8006b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006480:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <xTaskResumeAll+0x134>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d010      	beq.n	80064ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800648c:	f000 f844 	bl	8006518 <xTaskIncrementTick>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006496:	4b16      	ldr	r3, [pc, #88]	@ (80064f0 <xTaskResumeAll+0x130>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3b01      	subs	r3, #1
 80064a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f1      	bne.n	800648c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80064a8:	4b12      	ldr	r3, [pc, #72]	@ (80064f4 <xTaskResumeAll+0x134>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064ae:	4b10      	ldr	r3, [pc, #64]	@ (80064f0 <xTaskResumeAll+0x130>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064b6:	2301      	movs	r3, #1
 80064b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064ba:	4b0f      	ldr	r3, [pc, #60]	@ (80064f8 <xTaskResumeAll+0x138>)
 80064bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064ca:	f001 f99f 	bl	800780c <vPortExitCritical>

	return xAlreadyYielded;
 80064ce:	68bb      	ldr	r3, [r7, #8]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000fb0 	.word	0x20000fb0
 80064dc:	20000f88 	.word	0x20000f88
 80064e0:	20000f48 	.word	0x20000f48
 80064e4:	20000f90 	.word	0x20000f90
 80064e8:	20000ab8 	.word	0x20000ab8
 80064ec:	20000ab4 	.word	0x20000ab4
 80064f0:	20000f9c 	.word	0x20000f9c
 80064f4:	20000f98 	.word	0x20000f98
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006502:	4b04      	ldr	r3, [pc, #16]	@ (8006514 <xTaskGetTickCount+0x18>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006508:	687b      	ldr	r3, [r7, #4]
}
 800650a:	4618      	mov	r0, r3
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	20000f8c 	.word	0x20000f8c

08006518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006522:	4b52      	ldr	r3, [pc, #328]	@ (800666c <xTaskIncrementTick+0x154>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f040 808f 	bne.w	800664a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800652c:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <xTaskIncrementTick+0x158>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006534:	4a4e      	ldr	r2, [pc, #312]	@ (8006670 <xTaskIncrementTick+0x158>)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d121      	bne.n	8006584 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006540:	4b4c      	ldr	r3, [pc, #304]	@ (8006674 <xTaskIncrementTick+0x15c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00b      	beq.n	8006562 <xTaskIncrementTick+0x4a>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	603b      	str	r3, [r7, #0]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xTaskIncrementTick+0x46>
 8006562:	4b44      	ldr	r3, [pc, #272]	@ (8006674 <xTaskIncrementTick+0x15c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	4b43      	ldr	r3, [pc, #268]	@ (8006678 <xTaskIncrementTick+0x160>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a41      	ldr	r2, [pc, #260]	@ (8006674 <xTaskIncrementTick+0x15c>)
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	4a41      	ldr	r2, [pc, #260]	@ (8006678 <xTaskIncrementTick+0x160>)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4b41      	ldr	r3, [pc, #260]	@ (800667c <xTaskIncrementTick+0x164>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	4a3f      	ldr	r2, [pc, #252]	@ (800667c <xTaskIncrementTick+0x164>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	f000 fae8 	bl	8006b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006584:	4b3e      	ldr	r3, [pc, #248]	@ (8006680 <xTaskIncrementTick+0x168>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	429a      	cmp	r2, r3
 800658c:	d34e      	bcc.n	800662c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800658e:	4b39      	ldr	r3, [pc, #228]	@ (8006674 <xTaskIncrementTick+0x15c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <xTaskIncrementTick+0x84>
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <xTaskIncrementTick+0x86>
 800659c:	2300      	movs	r3, #0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <xTaskIncrementTick+0x168>)
 80065a4:	f04f 32ff 	mov.w	r2, #4294967295
 80065a8:	601a      	str	r2, [r3, #0]
					break;
 80065aa:	e03f      	b.n	800662c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065ac:	4b31      	ldr	r3, [pc, #196]	@ (8006674 <xTaskIncrementTick+0x15c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d203      	bcs.n	80065cc <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006680 <xTaskIncrementTick+0x168>)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6013      	str	r3, [r2, #0]
						break;
 80065ca:	e02f      	b.n	800662c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fd4d 	bl	8005070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d004      	beq.n	80065e8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	3318      	adds	r3, #24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fd44 	bl	8005070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ec:	4b25      	ldr	r3, [pc, #148]	@ (8006684 <xTaskIncrementTick+0x16c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d903      	bls.n	80065fc <xTaskIncrementTick+0xe4>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	4a22      	ldr	r2, [pc, #136]	@ (8006684 <xTaskIncrementTick+0x16c>)
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4a1f      	ldr	r2, [pc, #124]	@ (8006688 <xTaskIncrementTick+0x170>)
 800660a:	441a      	add	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f7fe fcd1 	bl	8004fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661c:	4b1b      	ldr	r3, [pc, #108]	@ (800668c <xTaskIncrementTick+0x174>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006622:	429a      	cmp	r2, r3
 8006624:	d3b3      	bcc.n	800658e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006626:	2301      	movs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800662a:	e7b0      	b.n	800658e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800662c:	4b17      	ldr	r3, [pc, #92]	@ (800668c <xTaskIncrementTick+0x174>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006632:	4915      	ldr	r1, [pc, #84]	@ (8006688 <xTaskIncrementTick+0x170>)
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d907      	bls.n	8006654 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006644:	2301      	movs	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e004      	b.n	8006654 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800664a:	4b11      	ldr	r3, [pc, #68]	@ (8006690 <xTaskIncrementTick+0x178>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3301      	adds	r3, #1
 8006650:	4a0f      	ldr	r2, [pc, #60]	@ (8006690 <xTaskIncrementTick+0x178>)
 8006652:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006654:	4b0f      	ldr	r3, [pc, #60]	@ (8006694 <xTaskIncrementTick+0x17c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006660:	697b      	ldr	r3, [r7, #20]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000fb0 	.word	0x20000fb0
 8006670:	20000f8c 	.word	0x20000f8c
 8006674:	20000f40 	.word	0x20000f40
 8006678:	20000f44 	.word	0x20000f44
 800667c:	20000fa0 	.word	0x20000fa0
 8006680:	20000fa8 	.word	0x20000fa8
 8006684:	20000f90 	.word	0x20000f90
 8006688:	20000ab8 	.word	0x20000ab8
 800668c:	20000ab4 	.word	0x20000ab4
 8006690:	20000f98 	.word	0x20000f98
 8006694:	20000f9c 	.word	0x20000f9c

08006698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800669e:	4b2a      	ldr	r3, [pc, #168]	@ (8006748 <vTaskSwitchContext+0xb0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066a6:	4b29      	ldr	r3, [pc, #164]	@ (800674c <vTaskSwitchContext+0xb4>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066ac:	e047      	b.n	800673e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80066ae:	4b27      	ldr	r3, [pc, #156]	@ (800674c <vTaskSwitchContext+0xb4>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066b4:	4b26      	ldr	r3, [pc, #152]	@ (8006750 <vTaskSwitchContext+0xb8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e011      	b.n	80066e0 <vTaskSwitchContext+0x48>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <vTaskSwitchContext+0x42>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	607b      	str	r3, [r7, #4]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <vTaskSwitchContext+0x3e>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b01      	subs	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	491c      	ldr	r1, [pc, #112]	@ (8006754 <vTaskSwitchContext+0xbc>)
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0e3      	beq.n	80066bc <vTaskSwitchContext+0x24>
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4a15      	ldr	r2, [pc, #84]	@ (8006754 <vTaskSwitchContext+0xbc>)
 8006700:	4413      	add	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	3308      	adds	r3, #8
 8006716:	429a      	cmp	r2, r3
 8006718:	d104      	bne.n	8006724 <vTaskSwitchContext+0x8c>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	605a      	str	r2, [r3, #4]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	4a0b      	ldr	r2, [pc, #44]	@ (8006758 <vTaskSwitchContext+0xc0>)
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	4a08      	ldr	r2, [pc, #32]	@ (8006750 <vTaskSwitchContext+0xb8>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006734:	4b08      	ldr	r3, [pc, #32]	@ (8006758 <vTaskSwitchContext+0xc0>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3354      	adds	r3, #84	@ 0x54
 800673a:	4a08      	ldr	r2, [pc, #32]	@ (800675c <vTaskSwitchContext+0xc4>)
 800673c:	6013      	str	r3, [r2, #0]
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr
 8006748:	20000fb0 	.word	0x20000fb0
 800674c:	20000f9c 	.word	0x20000f9c
 8006750:	20000f90 	.word	0x20000f90
 8006754:	20000ab8 	.word	0x20000ab8
 8006758:	20000ab4 	.word	0x20000ab4
 800675c:	2000001c 	.word	0x2000001c

08006760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60fb      	str	r3, [r7, #12]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006788:	4b07      	ldr	r3, [pc, #28]	@ (80067a8 <vTaskPlaceOnEventList+0x48>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3318      	adds	r3, #24
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7fe fc35 	bl	8005000 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006796:	2101      	movs	r1, #1
 8006798:	6838      	ldr	r0, [r7, #0]
 800679a:	f000 fba5 	bl	8006ee8 <prvAddCurrentTaskToDelayedList>
}
 800679e:	bf00      	nop
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000ab4 	.word	0x20000ab4

080067ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10b      	bne.n	80067d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	617b      	str	r3, [r7, #20]
}
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
 80067d4:	e7fd      	b.n	80067d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006800 <vTaskPlaceOnEventListRestricted+0x54>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3318      	adds	r3, #24
 80067dc:	4619      	mov	r1, r3
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7fe fbeb 	bl	8004fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80067ea:	f04f 33ff 	mov.w	r3, #4294967295
 80067ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	68b8      	ldr	r0, [r7, #8]
 80067f4:	f000 fb78 	bl	8006ee8 <prvAddCurrentTaskToDelayedList>
	}
 80067f8:	bf00      	nop
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000ab4 	.word	0x20000ab4

08006804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60fb      	str	r3, [r7, #12]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3318      	adds	r3, #24
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fc1a 	bl	8005070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800683c:	4b1d      	ldr	r3, [pc, #116]	@ (80068b4 <xTaskRemoveFromEventList+0xb0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11d      	bne.n	8006880 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	3304      	adds	r3, #4
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe fc11 	bl	8005070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006852:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <xTaskRemoveFromEventList+0xb4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d903      	bls.n	8006862 <xTaskRemoveFromEventList+0x5e>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685e:	4a16      	ldr	r2, [pc, #88]	@ (80068b8 <xTaskRemoveFromEventList+0xb4>)
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4a13      	ldr	r2, [pc, #76]	@ (80068bc <xTaskRemoveFromEventList+0xb8>)
 8006870:	441a      	add	r2, r3
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f7fe fb9e 	bl	8004fba <vListInsertEnd>
 800687e:	e005      	b.n	800688c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3318      	adds	r3, #24
 8006884:	4619      	mov	r1, r3
 8006886:	480e      	ldr	r0, [pc, #56]	@ (80068c0 <xTaskRemoveFromEventList+0xbc>)
 8006888:	f7fe fb97 	bl	8004fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006890:	4b0c      	ldr	r3, [pc, #48]	@ (80068c4 <xTaskRemoveFromEventList+0xc0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	429a      	cmp	r2, r3
 8006898:	d905      	bls.n	80068a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800689a:	2301      	movs	r3, #1
 800689c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800689e:	4b0a      	ldr	r3, [pc, #40]	@ (80068c8 <xTaskRemoveFromEventList+0xc4>)
 80068a0:	2201      	movs	r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e001      	b.n	80068aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80068aa:	697b      	ldr	r3, [r7, #20]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000fb0 	.word	0x20000fb0
 80068b8:	20000f90 	.word	0x20000f90
 80068bc:	20000ab8 	.word	0x20000ab8
 80068c0:	20000f48 	.word	0x20000f48
 80068c4:	20000ab4 	.word	0x20000ab4
 80068c8:	20000f9c 	.word	0x20000f9c

080068cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068d4:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <vTaskInternalSetTimeOutState+0x24>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068dc:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <vTaskInternalSetTimeOutState+0x28>)
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	605a      	str	r2, [r3, #4]
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000fa0 	.word	0x20000fa0
 80068f4:	20000f8c 	.word	0x20000f8c

080068f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10b      	bne.n	8006920 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	613b      	str	r3, [r7, #16]
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	e7fd      	b.n	800691c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10b      	bne.n	800693e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	60fb      	str	r3, [r7, #12]
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	e7fd      	b.n	800693a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800693e:	f000 ff35 	bl	80077ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006942:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <xTaskCheckForTimeOut+0xc0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d102      	bne.n	8006962 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	e023      	b.n	80069aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b15      	ldr	r3, [pc, #84]	@ (80069bc <xTaskCheckForTimeOut+0xc4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d007      	beq.n	800697e <xTaskCheckForTimeOut+0x86>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	429a      	cmp	r2, r3
 8006976:	d302      	bcc.n	800697e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	e015      	b.n	80069aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	429a      	cmp	r2, r3
 8006986:	d20b      	bcs.n	80069a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff ff99 	bl	80068cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	e004      	b.n	80069aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069a6:	2301      	movs	r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069aa:	f000 ff2f 	bl	800780c <vPortExitCritical>

	return xReturn;
 80069ae:	69fb      	ldr	r3, [r7, #28]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000f8c 	.word	0x20000f8c
 80069bc:	20000fa0 	.word	0x20000fa0

080069c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069c4:	4b03      	ldr	r3, [pc, #12]	@ (80069d4 <vTaskMissedYield+0x14>)
 80069c6:	2201      	movs	r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
}
 80069ca:	bf00      	nop
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000f9c 	.word	0x20000f9c

080069d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069e0:	f000 f854 	bl	8006a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069e4:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <prvIdleTask+0x2c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d907      	bls.n	80069fc <prvIdleTask+0x24>
			{
				taskYIELD();
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <prvIdleTask+0x30>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80069fc:	f7fb f8e4 	bl	8001bc8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006a00:	e7ee      	b.n	80069e0 <prvIdleTask+0x8>
 8006a02:	bf00      	nop
 8006a04:	20000ab8 	.word	0x20000ab8
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a12:	2300      	movs	r3, #0
 8006a14:	607b      	str	r3, [r7, #4]
 8006a16:	e00c      	b.n	8006a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4a12      	ldr	r2, [pc, #72]	@ (8006a6c <prvInitialiseTaskLists+0x60>)
 8006a24:	4413      	add	r3, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fa9c 	bl	8004f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b37      	cmp	r3, #55	@ 0x37
 8006a36:	d9ef      	bls.n	8006a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a38:	480d      	ldr	r0, [pc, #52]	@ (8006a70 <prvInitialiseTaskLists+0x64>)
 8006a3a:	f7fe fa93 	bl	8004f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a3e:	480d      	ldr	r0, [pc, #52]	@ (8006a74 <prvInitialiseTaskLists+0x68>)
 8006a40:	f7fe fa90 	bl	8004f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a44:	480c      	ldr	r0, [pc, #48]	@ (8006a78 <prvInitialiseTaskLists+0x6c>)
 8006a46:	f7fe fa8d 	bl	8004f64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a4a:	480c      	ldr	r0, [pc, #48]	@ (8006a7c <prvInitialiseTaskLists+0x70>)
 8006a4c:	f7fe fa8a 	bl	8004f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a50:	480b      	ldr	r0, [pc, #44]	@ (8006a80 <prvInitialiseTaskLists+0x74>)
 8006a52:	f7fe fa87 	bl	8004f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a56:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <prvInitialiseTaskLists+0x78>)
 8006a58:	4a05      	ldr	r2, [pc, #20]	@ (8006a70 <prvInitialiseTaskLists+0x64>)
 8006a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a88 <prvInitialiseTaskLists+0x7c>)
 8006a5e:	4a05      	ldr	r2, [pc, #20]	@ (8006a74 <prvInitialiseTaskLists+0x68>)
 8006a60:	601a      	str	r2, [r3, #0]
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000ab8 	.word	0x20000ab8
 8006a70:	20000f18 	.word	0x20000f18
 8006a74:	20000f2c 	.word	0x20000f2c
 8006a78:	20000f48 	.word	0x20000f48
 8006a7c:	20000f5c 	.word	0x20000f5c
 8006a80:	20000f74 	.word	0x20000f74
 8006a84:	20000f40 	.word	0x20000f40
 8006a88:	20000f44 	.word	0x20000f44

08006a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a92:	e019      	b.n	8006ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a94:	f000 fe8a 	bl	80077ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006a98:	4b10      	ldr	r3, [pc, #64]	@ (8006adc <prvCheckTasksWaitingTermination+0x50>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe fae3 	bl	8005070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <prvCheckTasksWaitingTermination+0x54>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8006ae0 <prvCheckTasksWaitingTermination+0x54>)
 8006ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <prvCheckTasksWaitingTermination+0x58>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae4 <prvCheckTasksWaitingTermination+0x58>)
 8006abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006abe:	f000 fea5 	bl	800780c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f810 	bl	8006ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ac8:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <prvCheckTasksWaitingTermination+0x58>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e1      	bne.n	8006a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000f5c 	.word	0x20000f5c
 8006ae0:	20000f88 	.word	0x20000f88
 8006ae4:	20000f70 	.word	0x20000f70

08006ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3354      	adds	r3, #84	@ 0x54
 8006af4:	4618      	mov	r0, r3
 8006af6:	f001 ffbb 	bl	8008a70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d108      	bne.n	8006b16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 f819 	bl	8007b40 <vPortFree>
				vPortFree( pxTCB );
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 f816 	bl	8007b40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b14:	e019      	b.n	8006b4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d103      	bne.n	8006b28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 f80d 	bl	8007b40 <vPortFree>
	}
 8006b26:	e010      	b.n	8006b4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d00b      	beq.n	8006b4a <prvDeleteTCB+0x62>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60fb      	str	r3, [r7, #12]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <prvDeleteTCB+0x5e>
	}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b94 <prvResetNextTaskUnblockTime+0x40>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <prvResetNextTaskUnblockTime+0x14>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <prvResetNextTaskUnblockTime+0x16>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b98 <prvResetNextTaskUnblockTime+0x44>)
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295
 8006b74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b76:	e008      	b.n	8006b8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b78:	4b06      	ldr	r3, [pc, #24]	@ (8006b94 <prvResetNextTaskUnblockTime+0x40>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4a04      	ldr	r2, [pc, #16]	@ (8006b98 <prvResetNextTaskUnblockTime+0x44>)
 8006b88:	6013      	str	r3, [r2, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr
 8006b94:	20000f40 	.word	0x20000f40
 8006b98:	20000fa8 	.word	0x20000fa8

08006b9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006ba2:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <xTaskGetCurrentTaskHandle+0x18>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006ba8:	687b      	ldr	r3, [r7, #4]
	}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr
 8006bb4:	20000ab4 	.word	0x20000ab4

08006bb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <xTaskGetSchedulerState+0x34>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	607b      	str	r3, [r7, #4]
 8006bca:	e008      	b.n	8006bde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bcc:	4b08      	ldr	r3, [pc, #32]	@ (8006bf0 <xTaskGetSchedulerState+0x38>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	607b      	str	r3, [r7, #4]
 8006bd8:	e001      	b.n	8006bde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bde:	687b      	ldr	r3, [r7, #4]
	}
 8006be0:	4618      	mov	r0, r3
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000f94 	.word	0x20000f94
 8006bf0:	20000fb0 	.word	0x20000fb0

08006bf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d056      	beq.n	8006cb8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8006cc4 <xTaskPriorityInherit+0xd0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d246      	bcs.n	8006ca6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	db06      	blt.n	8006c2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c20:	4b28      	ldr	r3, [pc, #160]	@ (8006cc4 <xTaskPriorityInherit+0xd0>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6959      	ldr	r1, [r3, #20]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4a22      	ldr	r2, [pc, #136]	@ (8006cc8 <xTaskPriorityInherit+0xd4>)
 8006c40:	4413      	add	r3, r2
 8006c42:	4299      	cmp	r1, r3
 8006c44:	d101      	bne.n	8006c4a <xTaskPriorityInherit+0x56>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <xTaskPriorityInherit+0x58>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d022      	beq.n	8006c96 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe fa0b 	bl	8005070 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc4 <xTaskPriorityInherit+0xd0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c68:	4b18      	ldr	r3, [pc, #96]	@ (8006ccc <xTaskPriorityInherit+0xd8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d903      	bls.n	8006c78 <xTaskPriorityInherit+0x84>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	4a15      	ldr	r2, [pc, #84]	@ (8006ccc <xTaskPriorityInherit+0xd8>)
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4a10      	ldr	r2, [pc, #64]	@ (8006cc8 <xTaskPriorityInherit+0xd4>)
 8006c86:	441a      	add	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7fe f993 	bl	8004fba <vListInsertEnd>
 8006c94:	e004      	b.n	8006ca0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c96:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <xTaskPriorityInherit+0xd0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e008      	b.n	8006cb8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006caa:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <xTaskPriorityInherit+0xd0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d201      	bcs.n	8006cb8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
	}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000ab4 	.word	0x20000ab4
 8006cc8:	20000ab8 	.word	0x20000ab8
 8006ccc:	20000f90 	.word	0x20000f90

08006cd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d058      	beq.n	8006d98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8006da4 <xTaskPriorityDisinherit+0xd4>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d00b      	beq.n	8006d08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	bf00      	nop
 8006d06:	e7fd      	b.n	8006d04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60bb      	str	r3, [r7, #8]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d2c:	1e5a      	subs	r2, r3, #1
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d02c      	beq.n	8006d98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d128      	bne.n	8006d98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe f990 	bl	8005070 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d68:	4b0f      	ldr	r3, [pc, #60]	@ (8006da8 <xTaskPriorityDisinherit+0xd8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d903      	bls.n	8006d78 <xTaskPriorityDisinherit+0xa8>
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	4a0c      	ldr	r2, [pc, #48]	@ (8006da8 <xTaskPriorityDisinherit+0xd8>)
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4a09      	ldr	r2, [pc, #36]	@ (8006dac <xTaskPriorityDisinherit+0xdc>)
 8006d86:	441a      	add	r2, r3
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fe f913 	bl	8004fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d94:	2301      	movs	r3, #1
 8006d96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d98:	697b      	ldr	r3, [r7, #20]
	}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20000ab4 	.word	0x20000ab4
 8006da8:	20000f90 	.word	0x20000f90
 8006dac:	20000ab8 	.word	0x20000ab8

08006db0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d071      	beq.n	8006eac <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	e7fd      	b.n	8006de4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d902      	bls.n	8006df8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	e002      	b.n	8006dfe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d051      	beq.n	8006eac <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d14c      	bne.n	8006eac <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e12:	4b28      	ldr	r3, [pc, #160]	@ (8006eb4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d10b      	bne.n	8006e34 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60bb      	str	r3, [r7, #8]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	db04      	blt.n	8006e52 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	6959      	ldr	r1, [r3, #20]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006e62:	4413      	add	r3, r2
 8006e64:	4299      	cmp	r1, r3
 8006e66:	d101      	bne.n	8006e6c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01c      	beq.n	8006eac <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe f8fa 	bl	8005070 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e80:	4b0e      	ldr	r3, [pc, #56]	@ (8006ebc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d903      	bls.n	8006e90 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8006ebc <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4a06      	ldr	r2, [pc, #24]	@ (8006eb8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006e9e:	441a      	add	r2, r3
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	f7fe f887 	bl	8004fba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eac:	bf00      	nop
 8006eae:	3720      	adds	r7, #32
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000ab4 	.word	0x20000ab4
 8006eb8:	20000ab8 	.word	0x20000ab8
 8006ebc:	20000f90 	.word	0x20000f90

08006ec0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ec4:	4b07      	ldr	r3, [pc, #28]	@ (8006ee4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ed2:	3201      	adds	r2, #1
 8006ed4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	@ (8006ee4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
	}
 8006eda:	4618      	mov	r0, r3
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000ab4 	.word	0x20000ab4

08006ee8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ef2:	4b21      	ldr	r3, [pc, #132]	@ (8006f78 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ef8:	4b20      	ldr	r3, [pc, #128]	@ (8006f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3304      	adds	r3, #4
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe f8b6 	bl	8005070 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d10a      	bne.n	8006f22 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f12:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4819      	ldr	r0, [pc, #100]	@ (8006f80 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f1c:	f7fe f84d 	bl	8004fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f20:	e026      	b.n	8006f70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4413      	add	r3, r2
 8006f28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f2a:	4b14      	ldr	r3, [pc, #80]	@ (8006f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d209      	bcs.n	8006f4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f3a:	4b12      	ldr	r3, [pc, #72]	@ (8006f84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fe f85a 	bl	8005000 <vListInsert>
}
 8006f4c:	e010      	b.n	8006f70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f7fe f850 	bl	8005000 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f60:	4b0a      	ldr	r3, [pc, #40]	@ (8006f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d202      	bcs.n	8006f70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f6a:	4a08      	ldr	r2, [pc, #32]	@ (8006f8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	6013      	str	r3, [r2, #0]
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000f8c 	.word	0x20000f8c
 8006f7c:	20000ab4 	.word	0x20000ab4
 8006f80:	20000f74 	.word	0x20000f74
 8006f84:	20000f44 	.word	0x20000f44
 8006f88:	20000f40 	.word	0x20000f40
 8006f8c:	20000fa8 	.word	0x20000fa8

08006f90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	@ 0x28
 8006f94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f9a:	f000 fad9 	bl	8007550 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007014 <xTimerCreateTimerTask+0x84>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d021      	beq.n	8006fea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fae:	1d3a      	adds	r2, r7, #4
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	f107 030c 	add.w	r3, r7, #12
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fd ffb9 	bl	8004f30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	9202      	str	r2, [sp, #8]
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	2302      	movs	r3, #2
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	460a      	mov	r2, r1
 8006fd0:	4911      	ldr	r1, [pc, #68]	@ (8007018 <xTimerCreateTimerTask+0x88>)
 8006fd2:	4812      	ldr	r0, [pc, #72]	@ (800701c <xTimerCreateTimerTask+0x8c>)
 8006fd4:	f7fe ff8c 	bl	8005ef0 <xTaskCreateStatic>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	4a11      	ldr	r2, [pc, #68]	@ (8007020 <xTimerCreateTimerTask+0x90>)
 8006fdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fde:	4b10      	ldr	r3, [pc, #64]	@ (8007020 <xTimerCreateTimerTask+0x90>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	613b      	str	r3, [r7, #16]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007008:	697b      	ldr	r3, [r7, #20]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000fe4 	.word	0x20000fe4
 8007018:	0800a890 	.word	0x0800a890
 800701c:	08007145 	.word	0x08007145
 8007020:	20000fe8 	.word	0x20000fe8

08007024 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	@ 0x28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007032:	2300      	movs	r3, #0
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <xTimerGenericCommand+0x30>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	623b      	str	r3, [r7, #32]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007054:	4b19      	ldr	r3, [pc, #100]	@ (80070bc <xTimerGenericCommand+0x98>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d02a      	beq.n	80070b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b05      	cmp	r3, #5
 800706c:	dc18      	bgt.n	80070a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800706e:	f7ff fda3 	bl	8006bb8 <xTaskGetSchedulerState>
 8007072:	4603      	mov	r3, r0
 8007074:	2b02      	cmp	r3, #2
 8007076:	d109      	bne.n	800708c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007078:	4b10      	ldr	r3, [pc, #64]	@ (80070bc <xTimerGenericCommand+0x98>)
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	f107 0110 	add.w	r1, r7, #16
 8007080:	2300      	movs	r3, #0
 8007082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007084:	f7fe fa20 	bl	80054c8 <xQueueGenericSend>
 8007088:	6278      	str	r0, [r7, #36]	@ 0x24
 800708a:	e012      	b.n	80070b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800708c:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <xTimerGenericCommand+0x98>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	f107 0110 	add.w	r1, r7, #16
 8007094:	2300      	movs	r3, #0
 8007096:	2200      	movs	r2, #0
 8007098:	f7fe fa16 	bl	80054c8 <xQueueGenericSend>
 800709c:	6278      	str	r0, [r7, #36]	@ 0x24
 800709e:	e008      	b.n	80070b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <xTimerGenericCommand+0x98>)
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	f107 0110 	add.w	r1, r7, #16
 80070a8:	2300      	movs	r3, #0
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	f7fe fb0e 	bl	80056cc <xQueueGenericSendFromISR>
 80070b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3728      	adds	r7, #40	@ 0x28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000fe4 	.word	0x20000fe4

080070c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007140 <prvProcessExpiredTimer+0x80>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fd ffc9 	bl	8005070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d123      	bne.n	800712e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	18d1      	adds	r1, r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	6978      	ldr	r0, [r7, #20]
 80070f4:	f000 f8cc 	bl	8007290 <prvInsertTimerInActiveList>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d017      	beq.n	800712e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070fe:	2300      	movs	r3, #0
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	2100      	movs	r1, #0
 8007108:	6978      	ldr	r0, [r7, #20]
 800710a:	f7ff ff8b 	bl	8007024 <xTimerGenericCommand>
 800710e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10b      	bne.n	800712e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60fb      	str	r3, [r7, #12]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	6978      	ldr	r0, [r7, #20]
 8007134:	4798      	blx	r3
}
 8007136:	bf00      	nop
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20000fdc 	.word	0x20000fdc

08007144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800714c:	f107 0308 	add.w	r3, r7, #8
 8007150:	4618      	mov	r0, r3
 8007152:	f000 f859 	bl	8007208 <prvGetNextExpireTime>
 8007156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4619      	mov	r1, r3
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f805 	bl	800716c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007162:	f000 f8d7 	bl	8007314 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007166:	bf00      	nop
 8007168:	e7f0      	b.n	800714c <prvTimerTask+0x8>
	...

0800716c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007176:	f7ff f915 	bl	80063a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800717a:	f107 0308 	add.w	r3, r7, #8
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f866 	bl	8007250 <prvSampleTimeNow>
 8007184:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d130      	bne.n	80071ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <prvProcessTimerOrBlockTask+0x3c>
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	429a      	cmp	r2, r3
 8007198:	d806      	bhi.n	80071a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800719a:	f7ff f911 	bl	80063c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff ff8d 	bl	80070c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071a6:	e024      	b.n	80071f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071ae:	4b13      	ldr	r3, [pc, #76]	@ (80071fc <prvProcessTimerOrBlockTask+0x90>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf0c      	ite	eq
 80071b8:	2301      	moveq	r3, #1
 80071ba:	2300      	movne	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <prvProcessTimerOrBlockTask+0x94>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4619      	mov	r1, r3
 80071ce:	f7fe fe5b 	bl	8005e88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071d2:	f7ff f8f5 	bl	80063c0 <xTaskResumeAll>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071dc:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <prvProcessTimerOrBlockTask+0x98>)
 80071de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	f3bf 8f6f 	isb	sy
}
 80071ec:	e001      	b.n	80071f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071ee:	f7ff f8e7 	bl	80063c0 <xTaskResumeAll>
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20000fe0 	.word	0x20000fe0
 8007200:	20000fe4 	.word	0x20000fe4
 8007204:	e000ed04 	.word	0xe000ed04

08007208 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007210:	4b0e      	ldr	r3, [pc, #56]	@ (800724c <prvGetNextExpireTime+0x44>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	bf0c      	ite	eq
 800721a:	2301      	moveq	r3, #1
 800721c:	2300      	movne	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d105      	bne.n	800723a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800722e:	4b07      	ldr	r3, [pc, #28]	@ (800724c <prvGetNextExpireTime+0x44>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e001      	b.n	800723e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800723e:	68fb      	ldr	r3, [r7, #12]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	bc80      	pop	{r7}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	20000fdc 	.word	0x20000fdc

08007250 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007258:	f7ff f950 	bl	80064fc <xTaskGetTickCount>
 800725c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800725e:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <prvSampleTimeNow+0x3c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	429a      	cmp	r2, r3
 8007266:	d205      	bcs.n	8007274 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007268:	f000 f910 	bl	800748c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e002      	b.n	800727a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800727a:	4a04      	ldr	r2, [pc, #16]	@ (800728c <prvSampleTimeNow+0x3c>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007280:	68fb      	ldr	r3, [r7, #12]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000fec 	.word	0x20000fec

08007290 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d812      	bhi.n	80072dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d302      	bcc.n	80072ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	e01b      	b.n	8007302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072ca:	4b10      	ldr	r3, [pc, #64]	@ (800730c <prvInsertTimerInActiveList+0x7c>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3304      	adds	r3, #4
 80072d2:	4619      	mov	r1, r3
 80072d4:	4610      	mov	r0, r2
 80072d6:	f7fd fe93 	bl	8005000 <vListInsert>
 80072da:	e012      	b.n	8007302 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d206      	bcs.n	80072f2 <prvInsertTimerInActiveList+0x62>
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d302      	bcc.n	80072f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e007      	b.n	8007302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072f2:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <prvInsertTimerInActiveList+0x80>)
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7fd fe7f 	bl	8005000 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007302:	697b      	ldr	r3, [r7, #20]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20000fe0 	.word	0x20000fe0
 8007310:	20000fdc 	.word	0x20000fdc

08007314 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08e      	sub	sp, #56	@ 0x38
 8007318:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800731a:	e0a5      	b.n	8007468 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	da19      	bge.n	8007356 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007322:	1d3b      	adds	r3, r7, #4
 8007324:	3304      	adds	r3, #4
 8007326:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10b      	bne.n	8007346 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800732e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	61fb      	str	r3, [r7, #28]
}
 8007340:	bf00      	nop
 8007342:	bf00      	nop
 8007344:	e7fd      	b.n	8007342 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800734c:	6850      	ldr	r0, [r2, #4]
 800734e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007350:	6892      	ldr	r2, [r2, #8]
 8007352:	4611      	mov	r1, r2
 8007354:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f2c0 8085 	blt.w	8007468 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	3304      	adds	r3, #4
 800736e:	4618      	mov	r0, r3
 8007370:	f7fd fe7e 	bl	8005070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007374:	463b      	mov	r3, r7
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff ff6a 	bl	8007250 <prvSampleTimeNow>
 800737c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b09      	cmp	r3, #9
 8007382:	d86c      	bhi.n	800745e <prvProcessReceivedCommands+0x14a>
 8007384:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <prvProcessReceivedCommands+0x78>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073b5 	.word	0x080073b5
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073b5 	.word	0x080073b5
 8007398:	0800745f 	.word	0x0800745f
 800739c:	08007413 	.word	0x08007413
 80073a0:	0800744d 	.word	0x0800744d
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073b5 	.word	0x080073b5
 80073ac:	0800745f 	.word	0x0800745f
 80073b0:	08007413 	.word	0x08007413
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	18d1      	adds	r1, r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073c2:	f7ff ff65 	bl	8007290 <prvInsertTimerInActiveList>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d04a      	beq.n	8007462 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d142      	bne.n	8007462 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	441a      	add	r2, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	2300      	movs	r3, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ee:	f7ff fe19 	bl	8007024 <xTimerGenericCommand>
 80073f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d133      	bne.n	8007462 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	61bb      	str	r3, [r7, #24]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007416:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10b      	bne.n	8007438 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	617b      	str	r3, [r7, #20]
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743a:	699a      	ldr	r2, [r3, #24]
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	18d1      	adds	r1, r2, r3
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007446:	f7ff ff23 	bl	8007290 <prvInsertTimerInActiveList>
					break;
 800744a:	e00d      	b.n	8007468 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800744c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8007456:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007458:	f000 fb72 	bl	8007b40 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800745c:	e003      	b.n	8007466 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800745e:	bf00      	nop
 8007460:	e002      	b.n	8007468 <prvProcessReceivedCommands+0x154>
					break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <prvProcessReceivedCommands+0x154>
					break;
 8007466:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007468:	4b07      	ldr	r3, [pc, #28]	@ (8007488 <prvProcessReceivedCommands+0x174>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	1d39      	adds	r1, r7, #4
 800746e:	2200      	movs	r2, #0
 8007470:	4618      	mov	r0, r3
 8007472:	f7fe f9c7 	bl	8005804 <xQueueReceive>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	f47f af4f 	bne.w	800731c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800747e:	bf00      	nop
 8007480:	bf00      	nop
 8007482:	3730      	adds	r7, #48	@ 0x30
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000fe4 	.word	0x20000fe4

0800748c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007492:	e046      	b.n	8007522 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007494:	4b2c      	ldr	r3, [pc, #176]	@ (8007548 <prvSwitchTimerLists+0xbc>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800749e:	4b2a      	ldr	r3, [pc, #168]	@ (8007548 <prvSwitchTimerLists+0xbc>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fd fddf 	bl	8005070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d12f      	bne.n	8007522 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4413      	add	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d90e      	bls.n	80074f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074e0:	4b19      	ldr	r3, [pc, #100]	@ (8007548 <prvSwitchTimerLists+0xbc>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3304      	adds	r3, #4
 80074e8:	4619      	mov	r1, r3
 80074ea:	4610      	mov	r0, r2
 80074ec:	f7fd fd88 	bl	8005000 <vListInsert>
 80074f0:	e017      	b.n	8007522 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074f2:	2300      	movs	r3, #0
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	2100      	movs	r1, #0
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fd91 	bl	8007024 <xTimerGenericCommand>
 8007502:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10b      	bne.n	8007522 <prvSwitchTimerLists+0x96>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	603b      	str	r3, [r7, #0]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007522:	4b09      	ldr	r3, [pc, #36]	@ (8007548 <prvSwitchTimerLists+0xbc>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1b3      	bne.n	8007494 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800752c:	4b06      	ldr	r3, [pc, #24]	@ (8007548 <prvSwitchTimerLists+0xbc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007532:	4b06      	ldr	r3, [pc, #24]	@ (800754c <prvSwitchTimerLists+0xc0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a04      	ldr	r2, [pc, #16]	@ (8007548 <prvSwitchTimerLists+0xbc>)
 8007538:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800753a:	4a04      	ldr	r2, [pc, #16]	@ (800754c <prvSwitchTimerLists+0xc0>)
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	6013      	str	r3, [r2, #0]
}
 8007540:	bf00      	nop
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000fdc 	.word	0x20000fdc
 800754c:	20000fe0 	.word	0x20000fe0

08007550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007556:	f000 f929 	bl	80077ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800755a:	4b15      	ldr	r3, [pc, #84]	@ (80075b0 <prvCheckForValidListAndQueue+0x60>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d120      	bne.n	80075a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007562:	4814      	ldr	r0, [pc, #80]	@ (80075b4 <prvCheckForValidListAndQueue+0x64>)
 8007564:	f7fd fcfe 	bl	8004f64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007568:	4813      	ldr	r0, [pc, #76]	@ (80075b8 <prvCheckForValidListAndQueue+0x68>)
 800756a:	f7fd fcfb 	bl	8004f64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800756e:	4b13      	ldr	r3, [pc, #76]	@ (80075bc <prvCheckForValidListAndQueue+0x6c>)
 8007570:	4a10      	ldr	r2, [pc, #64]	@ (80075b4 <prvCheckForValidListAndQueue+0x64>)
 8007572:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <prvCheckForValidListAndQueue+0x70>)
 8007576:	4a10      	ldr	r2, [pc, #64]	@ (80075b8 <prvCheckForValidListAndQueue+0x68>)
 8007578:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800757a:	2300      	movs	r3, #0
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4b11      	ldr	r3, [pc, #68]	@ (80075c4 <prvCheckForValidListAndQueue+0x74>)
 8007580:	4a11      	ldr	r2, [pc, #68]	@ (80075c8 <prvCheckForValidListAndQueue+0x78>)
 8007582:	2110      	movs	r1, #16
 8007584:	200a      	movs	r0, #10
 8007586:	f7fd fe07 	bl	8005198 <xQueueGenericCreateStatic>
 800758a:	4603      	mov	r3, r0
 800758c:	4a08      	ldr	r2, [pc, #32]	@ (80075b0 <prvCheckForValidListAndQueue+0x60>)
 800758e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007590:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <prvCheckForValidListAndQueue+0x60>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007598:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <prvCheckForValidListAndQueue+0x60>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	490b      	ldr	r1, [pc, #44]	@ (80075cc <prvCheckForValidListAndQueue+0x7c>)
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fc4a 	bl	8005e38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075a4:	f000 f932 	bl	800780c <vPortExitCritical>
}
 80075a8:	bf00      	nop
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000fe4 	.word	0x20000fe4
 80075b4:	20000fb4 	.word	0x20000fb4
 80075b8:	20000fc8 	.word	0x20000fc8
 80075bc:	20000fdc 	.word	0x20000fdc
 80075c0:	20000fe0 	.word	0x20000fe0
 80075c4:	20001090 	.word	0x20001090
 80075c8:	20000ff0 	.word	0x20000ff0
 80075cc:	0800a898 	.word	0x0800a898

080075d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3b04      	subs	r3, #4
 80075e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3b04      	subs	r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f023 0201 	bic.w	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007600:	4a08      	ldr	r2, [pc, #32]	@ (8007624 <pxPortInitialiseStack+0x54>)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3b14      	subs	r3, #20
 800760a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3b20      	subs	r3, #32
 8007616:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007618:	68fb      	ldr	r3, [r7, #12]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	bc80      	pop	{r7}
 8007622:	4770      	bx	lr
 8007624:	08007629 	.word	0x08007629

08007628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800762e:	2300      	movs	r3, #0
 8007630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007632:	4b12      	ldr	r3, [pc, #72]	@ (800767c <prvTaskExitError+0x54>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d00b      	beq.n	8007654 <prvTaskExitError+0x2c>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	60fb      	str	r3, [r7, #12]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <prvTaskExitError+0x28>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60bb      	str	r3, [r7, #8]
}
 8007666:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007668:	bf00      	nop
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0fc      	beq.n	800766a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr
 800767c:	2000000c 	.word	0x2000000c

08007680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007680:	4b07      	ldr	r3, [pc, #28]	@ (80076a0 <pxCurrentTCBConst2>)
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	6808      	ldr	r0, [r1, #0]
 8007686:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800768a:	f380 8809 	msr	PSP, r0
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f04f 0000 	mov.w	r0, #0
 8007696:	f380 8811 	msr	BASEPRI, r0
 800769a:	f04e 0e0d 	orr.w	lr, lr, #13
 800769e:	4770      	bx	lr

080076a0 <pxCurrentTCBConst2>:
 80076a0:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80076a8:	4806      	ldr	r0, [pc, #24]	@ (80076c4 <prvPortStartFirstTask+0x1c>)
 80076aa:	6800      	ldr	r0, [r0, #0]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f380 8808 	msr	MSP, r0
 80076b2:	b662      	cpsie	i
 80076b4:	b661      	cpsie	f
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	df00      	svc	0
 80076c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076c2:	bf00      	nop
 80076c4:	e000ed08 	.word	0xe000ed08

080076c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076ce:	4b32      	ldr	r3, [pc, #200]	@ (8007798 <xPortStartScheduler+0xd0>)
 80076d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	22ff      	movs	r2, #255	@ 0xff
 80076de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	4b2a      	ldr	r3, [pc, #168]	@ (800779c <xPortStartScheduler+0xd4>)
 80076f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076f6:	4b2a      	ldr	r3, [pc, #168]	@ (80077a0 <xPortStartScheduler+0xd8>)
 80076f8:	2207      	movs	r2, #7
 80076fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076fc:	e009      	b.n	8007712 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80076fe:	4b28      	ldr	r3, [pc, #160]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3b01      	subs	r3, #1
 8007704:	4a26      	ldr	r2, [pc, #152]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007706:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	b2db      	uxtb	r3, r3
 8007710:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800771a:	2b80      	cmp	r3, #128	@ 0x80
 800771c:	d0ef      	beq.n	80076fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800771e:	4b20      	ldr	r3, [pc, #128]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f1c3 0307 	rsb	r3, r3, #7
 8007726:	2b04      	cmp	r3, #4
 8007728:	d00b      	beq.n	8007742 <xPortStartScheduler+0x7a>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	bf00      	nop
 8007740:	e7fd      	b.n	800773e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007742:	4b17      	ldr	r3, [pc, #92]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	4a15      	ldr	r2, [pc, #84]	@ (80077a0 <xPortStartScheduler+0xd8>)
 800774a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800774c:	4b14      	ldr	r3, [pc, #80]	@ (80077a0 <xPortStartScheduler+0xd8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007754:	4a12      	ldr	r2, [pc, #72]	@ (80077a0 <xPortStartScheduler+0xd8>)
 8007756:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007760:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <xPortStartScheduler+0xdc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0f      	ldr	r2, [pc, #60]	@ (80077a4 <xPortStartScheduler+0xdc>)
 8007766:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800776a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800776c:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <xPortStartScheduler+0xdc>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a0c      	ldr	r2, [pc, #48]	@ (80077a4 <xPortStartScheduler+0xdc>)
 8007772:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007776:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007778:	f000 f8b8 	bl	80078ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <xPortStartScheduler+0xe0>)
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007782:	f7ff ff91 	bl	80076a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007786:	f7fe ff87 	bl	8006698 <vTaskSwitchContext>
	prvTaskExitError();
 800778a:	f7ff ff4d 	bl	8007628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	e000e400 	.word	0xe000e400
 800779c:	200010e0 	.word	0x200010e0
 80077a0:	200010e4 	.word	0x200010e4
 80077a4:	e000ed20 	.word	0xe000ed20
 80077a8:	2000000c 	.word	0x2000000c

080077ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	607b      	str	r3, [r7, #4]
}
 80077c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <vPortEnterCritical+0x58>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007804 <vPortEnterCritical+0x58>)
 80077ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <vPortEnterCritical+0x58>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d110      	bne.n	80077fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007808 <vPortEnterCritical+0x5c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <vPortEnterCritical+0x4e>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	603b      	str	r3, [r7, #0]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <vPortEnterCritical+0x4a>
	}
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	2000000c 	.word	0x2000000c
 8007808:	e000ed04 	.word	0xe000ed04

0800780c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007812:	4b12      	ldr	r3, [pc, #72]	@ (800785c <vPortExitCritical+0x50>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <vPortExitCritical+0x26>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	607b      	str	r3, [r7, #4]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007832:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <vPortExitCritical+0x50>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3b01      	subs	r3, #1
 8007838:	4a08      	ldr	r2, [pc, #32]	@ (800785c <vPortExitCritical+0x50>)
 800783a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800783c:	4b07      	ldr	r3, [pc, #28]	@ (800785c <vPortExitCritical+0x50>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d105      	bne.n	8007850 <vPortExitCritical+0x44>
 8007844:	2300      	movs	r3, #0
 8007846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	2000000c 	.word	0x2000000c

08007860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007860:	f3ef 8009 	mrs	r0, PSP
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4b0d      	ldr	r3, [pc, #52]	@ (80078a0 <pxCurrentTCBConst>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007870:	6010      	str	r0, [r2, #0]
 8007872:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007876:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800787a:	f380 8811 	msr	BASEPRI, r0
 800787e:	f7fe ff0b 	bl	8006698 <vTaskSwitchContext>
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8811 	msr	BASEPRI, r0
 800788a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800788e:	6819      	ldr	r1, [r3, #0]
 8007890:	6808      	ldr	r0, [r1, #0]
 8007892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007896:	f380 8809 	msr	PSP, r0
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	4770      	bx	lr

080078a0 <pxCurrentTCBConst>:
 80078a0:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078c2:	f7fe fe29 	bl	8006518 <xTaskIncrementTick>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <SysTick_Handler+0x40>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078f0:	4b0a      	ldr	r3, [pc, #40]	@ (800791c <vPortSetupTimerInterrupt+0x30>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007920 <vPortSetupTimerInterrupt+0x34>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078fc:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <vPortSetupTimerInterrupt+0x38>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a09      	ldr	r2, [pc, #36]	@ (8007928 <vPortSetupTimerInterrupt+0x3c>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a08      	ldr	r2, [pc, #32]	@ (800792c <vPortSetupTimerInterrupt+0x40>)
 800790a:	3b01      	subs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800790e:	4b03      	ldr	r3, [pc, #12]	@ (800791c <vPortSetupTimerInterrupt+0x30>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr
 800791c:	e000e010 	.word	0xe000e010
 8007920:	e000e018 	.word	0xe000e018
 8007924:	20000000 	.word	0x20000000
 8007928:	10624dd3 	.word	0x10624dd3
 800792c:	e000e014 	.word	0xe000e014

08007930 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007936:	f3ef 8305 	mrs	r3, IPSR
 800793a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b0f      	cmp	r3, #15
 8007940:	d915      	bls.n	800796e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007942:	4a17      	ldr	r2, [pc, #92]	@ (80079a0 <vPortValidateInterruptPriority+0x70>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800794c:	4b15      	ldr	r3, [pc, #84]	@ (80079a4 <vPortValidateInterruptPriority+0x74>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	7afa      	ldrb	r2, [r7, #11]
 8007952:	429a      	cmp	r2, r3
 8007954:	d20b      	bcs.n	800796e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	607b      	str	r3, [r7, #4]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800796e:	4b0e      	ldr	r3, [pc, #56]	@ (80079a8 <vPortValidateInterruptPriority+0x78>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007976:	4b0d      	ldr	r3, [pc, #52]	@ (80079ac <vPortValidateInterruptPriority+0x7c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d90b      	bls.n	8007996 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	603b      	str	r3, [r7, #0]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <vPortValidateInterruptPriority+0x62>
	}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr
 80079a0:	e000e3f0 	.word	0xe000e3f0
 80079a4:	200010e0 	.word	0x200010e0
 80079a8:	e000ed0c 	.word	0xe000ed0c
 80079ac:	200010e4 	.word	0x200010e4

080079b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	@ 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079bc:	f7fe fcf2 	bl	80063a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079c0:	4b5a      	ldr	r3, [pc, #360]	@ (8007b2c <pvPortMalloc+0x17c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079c8:	f000 f916 	bl	8007bf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079cc:	4b58      	ldr	r3, [pc, #352]	@ (8007b30 <pvPortMalloc+0x180>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f040 8090 	bne.w	8007afa <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80079e0:	2208      	movs	r2, #8
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d015      	beq.n	8007a1e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f023 0307 	bic.w	r3, r3, #7
 80079f8:	3308      	adds	r3, #8
 80079fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <pvPortMalloc+0x6e>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	617b      	str	r3, [r7, #20]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d06a      	beq.n	8007afa <pvPortMalloc+0x14a>
 8007a24:	4b43      	ldr	r3, [pc, #268]	@ (8007b34 <pvPortMalloc+0x184>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d865      	bhi.n	8007afa <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a2e:	4b42      	ldr	r3, [pc, #264]	@ (8007b38 <pvPortMalloc+0x188>)
 8007a30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a32:	4b41      	ldr	r3, [pc, #260]	@ (8007b38 <pvPortMalloc+0x188>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a38:	e004      	b.n	8007a44 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d903      	bls.n	8007a56 <pvPortMalloc+0xa6>
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1f1      	bne.n	8007a3a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a56:	4b35      	ldr	r3, [pc, #212]	@ (8007b2c <pvPortMalloc+0x17c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d04c      	beq.n	8007afa <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2208      	movs	r2, #8
 8007a66:	4413      	add	r3, r2
 8007a68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	1ad2      	subs	r2, r2, r3
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d920      	bls.n	8007ac4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <pvPortMalloc+0xfc>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	1ad2      	subs	r2, r2, r3
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007abe:	69b8      	ldr	r0, [r7, #24]
 8007ac0:	f000 f8fc 	bl	8007cbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b34 <pvPortMalloc+0x184>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	4a19      	ldr	r2, [pc, #100]	@ (8007b34 <pvPortMalloc+0x184>)
 8007ad0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ad2:	4b18      	ldr	r3, [pc, #96]	@ (8007b34 <pvPortMalloc+0x184>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b19      	ldr	r3, [pc, #100]	@ (8007b3c <pvPortMalloc+0x18c>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d203      	bcs.n	8007ae6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ade:	4b15      	ldr	r3, [pc, #84]	@ (8007b34 <pvPortMalloc+0x184>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a16      	ldr	r2, [pc, #88]	@ (8007b3c <pvPortMalloc+0x18c>)
 8007ae4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	4b11      	ldr	r3, [pc, #68]	@ (8007b30 <pvPortMalloc+0x180>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	431a      	orrs	r2, r3
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007afa:	f7fe fc61 	bl	80063c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <pvPortMalloc+0x170>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <pvPortMalloc+0x16c>
	return pvReturn;
 8007b20:	69fb      	ldr	r3, [r7, #28]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3728      	adds	r7, #40	@ 0x28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20001cf0 	.word	0x20001cf0
 8007b30:	20001cfc 	.word	0x20001cfc
 8007b34:	20001cf4 	.word	0x20001cf4
 8007b38:	20001ce8 	.word	0x20001ce8
 8007b3c:	20001cf8 	.word	0x20001cf8

08007b40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d04a      	beq.n	8007be8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b52:	2308      	movs	r3, #8
 8007b54:	425b      	negs	r3, r3
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4413      	add	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	4b22      	ldr	r3, [pc, #136]	@ (8007bf0 <vPortFree+0xb0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <vPortFree+0x46>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	60fb      	str	r3, [r7, #12]
}
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop
 8007b84:	e7fd      	b.n	8007b82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <vPortFree+0x66>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	60bb      	str	r3, [r7, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <vPortFree+0xb0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d019      	beq.n	8007be8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d115      	bne.n	8007be8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf0 <vPortFree+0xb0>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	43db      	mvns	r3, r3
 8007bc6:	401a      	ands	r2, r3
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007bcc:	f7fe fbea 	bl	80063a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	4b07      	ldr	r3, [pc, #28]	@ (8007bf4 <vPortFree+0xb4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4413      	add	r3, r2
 8007bda:	4a06      	ldr	r2, [pc, #24]	@ (8007bf4 <vPortFree+0xb4>)
 8007bdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bde:	6938      	ldr	r0, [r7, #16]
 8007be0:	f000 f86c 	bl	8007cbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007be4:	f7fe fbec 	bl	80063c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007be8:	bf00      	nop
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20001cfc 	.word	0x20001cfc
 8007bf4:	20001cf4 	.word	0x20001cf4

08007bf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bfe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007c02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c04:	4b27      	ldr	r3, [pc, #156]	@ (8007ca4 <prvHeapInit+0xac>)
 8007c06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00c      	beq.n	8007c2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3307      	adds	r3, #7
 8007c16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f023 0307 	bic.w	r3, r3, #7
 8007c1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	4a1f      	ldr	r2, [pc, #124]	@ (8007ca4 <prvHeapInit+0xac>)
 8007c28:	4413      	add	r3, r2
 8007c2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca8 <prvHeapInit+0xb0>)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c36:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca8 <prvHeapInit+0xb0>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c44:	2208      	movs	r2, #8
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 0307 	bic.w	r3, r3, #7
 8007c52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a15      	ldr	r2, [pc, #84]	@ (8007cac <prvHeapInit+0xb4>)
 8007c58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c5a:	4b14      	ldr	r3, [pc, #80]	@ (8007cac <prvHeapInit+0xb4>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c62:	4b12      	ldr	r3, [pc, #72]	@ (8007cac <prvHeapInit+0xb4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	1ad2      	subs	r2, r2, r3
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c78:	4b0c      	ldr	r3, [pc, #48]	@ (8007cac <prvHeapInit+0xb4>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb0 <prvHeapInit+0xb8>)
 8007c86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4a09      	ldr	r2, [pc, #36]	@ (8007cb4 <prvHeapInit+0xbc>)
 8007c8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c90:	4b09      	ldr	r3, [pc, #36]	@ (8007cb8 <prvHeapInit+0xc0>)
 8007c92:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007c96:	601a      	str	r2, [r3, #0]
}
 8007c98:	bf00      	nop
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bc80      	pop	{r7}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	200010e8 	.word	0x200010e8
 8007ca8:	20001ce8 	.word	0x20001ce8
 8007cac:	20001cf0 	.word	0x20001cf0
 8007cb0:	20001cf8 	.word	0x20001cf8
 8007cb4:	20001cf4 	.word	0x20001cf4
 8007cb8:	20001cfc 	.word	0x20001cfc

08007cbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cc4:	4b27      	ldr	r3, [pc, #156]	@ (8007d64 <prvInsertBlockIntoFreeList+0xa8>)
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e002      	b.n	8007cd0 <prvInsertBlockIntoFreeList+0x14>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d8f7      	bhi.n	8007cca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d108      	bne.n	8007cfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	441a      	add	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	441a      	add	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d118      	bne.n	8007d44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	4b14      	ldr	r3, [pc, #80]	@ (8007d68 <prvInsertBlockIntoFreeList+0xac>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d00d      	beq.n	8007d3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	441a      	add	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	e008      	b.n	8007d4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <prvInsertBlockIntoFreeList+0xac>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	e003      	b.n	8007d4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d002      	beq.n	8007d5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d5a:	bf00      	nop
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr
 8007d64:	20001ce8 	.word	0x20001ce8
 8007d68:	20001cf0 	.word	0x20001cf0

08007d6c <__cvt>:
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d72:	461d      	mov	r5, r3
 8007d74:	bfbb      	ittet	lt
 8007d76:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007d7a:	461d      	movlt	r5, r3
 8007d7c:	2300      	movge	r3, #0
 8007d7e:	232d      	movlt	r3, #45	@ 0x2d
 8007d80:	b088      	sub	sp, #32
 8007d82:	4614      	mov	r4, r2
 8007d84:	bfb8      	it	lt
 8007d86:	4614      	movlt	r4, r2
 8007d88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007d8c:	7013      	strb	r3, [r2, #0]
 8007d8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007d90:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007d94:	f023 0820 	bic.w	r8, r3, #32
 8007d98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007d9c:	d005      	beq.n	8007daa <__cvt+0x3e>
 8007d9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007da2:	d100      	bne.n	8007da6 <__cvt+0x3a>
 8007da4:	3601      	adds	r6, #1
 8007da6:	2302      	movs	r3, #2
 8007da8:	e000      	b.n	8007dac <__cvt+0x40>
 8007daa:	2303      	movs	r3, #3
 8007dac:	aa07      	add	r2, sp, #28
 8007dae:	9204      	str	r2, [sp, #16]
 8007db0:	aa06      	add	r2, sp, #24
 8007db2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007db6:	e9cd 3600 	strd	r3, r6, [sp]
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f000 ffb7 	bl	8008d30 <_dtoa_r>
 8007dc2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	d119      	bne.n	8007dfe <__cvt+0x92>
 8007dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dcc:	07db      	lsls	r3, r3, #31
 8007dce:	d50e      	bpl.n	8007dee <__cvt+0x82>
 8007dd0:	eb00 0906 	add.w	r9, r0, r6
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4620      	mov	r0, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	f7f8 fde4 	bl	80009a8 <__aeabi_dcmpeq>
 8007de0:	b108      	cbz	r0, 8007de6 <__cvt+0x7a>
 8007de2:	f8cd 901c 	str.w	r9, [sp, #28]
 8007de6:	2230      	movs	r2, #48	@ 0x30
 8007de8:	9b07      	ldr	r3, [sp, #28]
 8007dea:	454b      	cmp	r3, r9
 8007dec:	d31e      	bcc.n	8007e2c <__cvt+0xc0>
 8007dee:	4638      	mov	r0, r7
 8007df0:	9b07      	ldr	r3, [sp, #28]
 8007df2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007df4:	1bdb      	subs	r3, r3, r7
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	b008      	add	sp, #32
 8007dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e02:	eb00 0906 	add.w	r9, r0, r6
 8007e06:	d1e5      	bne.n	8007dd4 <__cvt+0x68>
 8007e08:	7803      	ldrb	r3, [r0, #0]
 8007e0a:	2b30      	cmp	r3, #48	@ 0x30
 8007e0c:	d10a      	bne.n	8007e24 <__cvt+0xb8>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2300      	movs	r3, #0
 8007e12:	4620      	mov	r0, r4
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7f8 fdc7 	bl	80009a8 <__aeabi_dcmpeq>
 8007e1a:	b918      	cbnz	r0, 8007e24 <__cvt+0xb8>
 8007e1c:	f1c6 0601 	rsb	r6, r6, #1
 8007e20:	f8ca 6000 	str.w	r6, [sl]
 8007e24:	f8da 3000 	ldr.w	r3, [sl]
 8007e28:	4499      	add	r9, r3
 8007e2a:	e7d3      	b.n	8007dd4 <__cvt+0x68>
 8007e2c:	1c59      	adds	r1, r3, #1
 8007e2e:	9107      	str	r1, [sp, #28]
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e7d9      	b.n	8007de8 <__cvt+0x7c>

08007e34 <__exponent>:
 8007e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e36:	2900      	cmp	r1, #0
 8007e38:	bfb6      	itet	lt
 8007e3a:	232d      	movlt	r3, #45	@ 0x2d
 8007e3c:	232b      	movge	r3, #43	@ 0x2b
 8007e3e:	4249      	neglt	r1, r1
 8007e40:	2909      	cmp	r1, #9
 8007e42:	7002      	strb	r2, [r0, #0]
 8007e44:	7043      	strb	r3, [r0, #1]
 8007e46:	dd29      	ble.n	8007e9c <__exponent+0x68>
 8007e48:	f10d 0307 	add.w	r3, sp, #7
 8007e4c:	461d      	mov	r5, r3
 8007e4e:	270a      	movs	r7, #10
 8007e50:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e54:	461a      	mov	r2, r3
 8007e56:	fb07 1416 	mls	r4, r7, r6, r1
 8007e5a:	3430      	adds	r4, #48	@ 0x30
 8007e5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e60:	460c      	mov	r4, r1
 8007e62:	2c63      	cmp	r4, #99	@ 0x63
 8007e64:	4631      	mov	r1, r6
 8007e66:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e6a:	dcf1      	bgt.n	8007e50 <__exponent+0x1c>
 8007e6c:	3130      	adds	r1, #48	@ 0x30
 8007e6e:	1e94      	subs	r4, r2, #2
 8007e70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e74:	4623      	mov	r3, r4
 8007e76:	1c41      	adds	r1, r0, #1
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	d30a      	bcc.n	8007e92 <__exponent+0x5e>
 8007e7c:	f10d 0309 	add.w	r3, sp, #9
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	42ac      	cmp	r4, r5
 8007e84:	bf88      	it	hi
 8007e86:	2300      	movhi	r3, #0
 8007e88:	3302      	adds	r3, #2
 8007e8a:	4403      	add	r3, r0
 8007e8c:	1a18      	subs	r0, r3, r0
 8007e8e:	b003      	add	sp, #12
 8007e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e9a:	e7ed      	b.n	8007e78 <__exponent+0x44>
 8007e9c:	2330      	movs	r3, #48	@ 0x30
 8007e9e:	3130      	adds	r1, #48	@ 0x30
 8007ea0:	7083      	strb	r3, [r0, #2]
 8007ea2:	70c1      	strb	r1, [r0, #3]
 8007ea4:	1d03      	adds	r3, r0, #4
 8007ea6:	e7f1      	b.n	8007e8c <__exponent+0x58>

08007ea8 <_printf_float>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	b091      	sub	sp, #68	@ 0x44
 8007eae:	460c      	mov	r4, r1
 8007eb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	4605      	mov	r5, r0
 8007eba:	f000 fdc5 	bl	8008a48 <_localeconv_r>
 8007ebe:	6803      	ldr	r3, [r0, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	9308      	str	r3, [sp, #32]
 8007ec4:	f7f8 f944 	bl	8000150 <strlen>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed0:	9009      	str	r0, [sp, #36]	@ 0x24
 8007ed2:	3307      	adds	r3, #7
 8007ed4:	f023 0307 	bic.w	r3, r3, #7
 8007ed8:	f103 0208 	add.w	r2, r3, #8
 8007edc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ee0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ee4:	f8c8 2000 	str.w	r2, [r8]
 8007ee8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8007efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007efe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f02:	4b9c      	ldr	r3, [pc, #624]	@ (8008174 <_printf_float+0x2cc>)
 8007f04:	f7f8 fd82 	bl	8000a0c <__aeabi_dcmpun>
 8007f08:	bb70      	cbnz	r0, 8007f68 <_printf_float+0xc0>
 8007f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f12:	4b98      	ldr	r3, [pc, #608]	@ (8008174 <_printf_float+0x2cc>)
 8007f14:	f7f8 fd5c 	bl	80009d0 <__aeabi_dcmple>
 8007f18:	bb30      	cbnz	r0, 8007f68 <_printf_float+0xc0>
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	4640      	mov	r0, r8
 8007f20:	4649      	mov	r1, r9
 8007f22:	f7f8 fd4b 	bl	80009bc <__aeabi_dcmplt>
 8007f26:	b110      	cbz	r0, 8007f2e <_printf_float+0x86>
 8007f28:	232d      	movs	r3, #45	@ 0x2d
 8007f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f2e:	4a92      	ldr	r2, [pc, #584]	@ (8008178 <_printf_float+0x2d0>)
 8007f30:	4b92      	ldr	r3, [pc, #584]	@ (800817c <_printf_float+0x2d4>)
 8007f32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f36:	bf94      	ite	ls
 8007f38:	4690      	movls	r8, r2
 8007f3a:	4698      	movhi	r8, r3
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	f04f 0900 	mov.w	r9, #0
 8007f42:	6123      	str	r3, [r4, #16]
 8007f44:	f02b 0304 	bic.w	r3, fp, #4
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	4633      	mov	r3, r6
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	9700      	str	r7, [sp, #0]
 8007f52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007f54:	f000 f9d4 	bl	8008300 <_printf_common>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	f040 8090 	bne.w	800807e <_printf_float+0x1d6>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	b011      	add	sp, #68	@ 0x44
 8007f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f68:	4642      	mov	r2, r8
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 fd4c 	bl	8000a0c <__aeabi_dcmpun>
 8007f74:	b148      	cbz	r0, 8007f8a <_printf_float+0xe2>
 8007f76:	464b      	mov	r3, r9
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bfb8      	it	lt
 8007f7c:	232d      	movlt	r3, #45	@ 0x2d
 8007f7e:	4a80      	ldr	r2, [pc, #512]	@ (8008180 <_printf_float+0x2d8>)
 8007f80:	bfb8      	it	lt
 8007f82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f86:	4b7f      	ldr	r3, [pc, #508]	@ (8008184 <_printf_float+0x2dc>)
 8007f88:	e7d3      	b.n	8007f32 <_printf_float+0x8a>
 8007f8a:	6863      	ldr	r3, [r4, #4]
 8007f8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	d13f      	bne.n	8008014 <_printf_float+0x16c>
 8007f94:	2306      	movs	r3, #6
 8007f96:	6063      	str	r3, [r4, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	9206      	str	r2, [sp, #24]
 8007fa2:	aa0e      	add	r2, sp, #56	@ 0x38
 8007fa4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007fa8:	aa0d      	add	r2, sp, #52	@ 0x34
 8007faa:	9203      	str	r2, [sp, #12]
 8007fac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007fb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007fb4:	6863      	ldr	r3, [r4, #4]
 8007fb6:	4642      	mov	r2, r8
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4628      	mov	r0, r5
 8007fbc:	464b      	mov	r3, r9
 8007fbe:	910a      	str	r1, [sp, #40]	@ 0x28
 8007fc0:	f7ff fed4 	bl	8007d6c <__cvt>
 8007fc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	2947      	cmp	r1, #71	@ 0x47
 8007fca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007fcc:	d128      	bne.n	8008020 <_printf_float+0x178>
 8007fce:	1cc8      	adds	r0, r1, #3
 8007fd0:	db02      	blt.n	8007fd8 <_printf_float+0x130>
 8007fd2:	6863      	ldr	r3, [r4, #4]
 8007fd4:	4299      	cmp	r1, r3
 8007fd6:	dd40      	ble.n	800805a <_printf_float+0x1b2>
 8007fd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fdc:	fa5f fa8a 	uxtb.w	sl, sl
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	3901      	subs	r1, #1
 8007fe4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fe8:	910d      	str	r1, [sp, #52]	@ 0x34
 8007fea:	f7ff ff23 	bl	8007e34 <__exponent>
 8007fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ff0:	4681      	mov	r9, r0
 8007ff2:	1813      	adds	r3, r2, r0
 8007ff4:	2a01      	cmp	r2, #1
 8007ff6:	6123      	str	r3, [r4, #16]
 8007ff8:	dc02      	bgt.n	8008000 <_printf_float+0x158>
 8007ffa:	6822      	ldr	r2, [r4, #0]
 8007ffc:	07d2      	lsls	r2, r2, #31
 8007ffe:	d501      	bpl.n	8008004 <_printf_float+0x15c>
 8008000:	3301      	adds	r3, #1
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008008:	2b00      	cmp	r3, #0
 800800a:	d09e      	beq.n	8007f4a <_printf_float+0xa2>
 800800c:	232d      	movs	r3, #45	@ 0x2d
 800800e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008012:	e79a      	b.n	8007f4a <_printf_float+0xa2>
 8008014:	2947      	cmp	r1, #71	@ 0x47
 8008016:	d1bf      	bne.n	8007f98 <_printf_float+0xf0>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1bd      	bne.n	8007f98 <_printf_float+0xf0>
 800801c:	2301      	movs	r3, #1
 800801e:	e7ba      	b.n	8007f96 <_printf_float+0xee>
 8008020:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008024:	d9dc      	bls.n	8007fe0 <_printf_float+0x138>
 8008026:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800802a:	d118      	bne.n	800805e <_printf_float+0x1b6>
 800802c:	2900      	cmp	r1, #0
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	dd0b      	ble.n	800804a <_printf_float+0x1a2>
 8008032:	6121      	str	r1, [r4, #16]
 8008034:	b913      	cbnz	r3, 800803c <_printf_float+0x194>
 8008036:	6822      	ldr	r2, [r4, #0]
 8008038:	07d0      	lsls	r0, r2, #31
 800803a:	d502      	bpl.n	8008042 <_printf_float+0x19a>
 800803c:	3301      	adds	r3, #1
 800803e:	440b      	add	r3, r1
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	f04f 0900 	mov.w	r9, #0
 8008046:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008048:	e7dc      	b.n	8008004 <_printf_float+0x15c>
 800804a:	b913      	cbnz	r3, 8008052 <_printf_float+0x1aa>
 800804c:	6822      	ldr	r2, [r4, #0]
 800804e:	07d2      	lsls	r2, r2, #31
 8008050:	d501      	bpl.n	8008056 <_printf_float+0x1ae>
 8008052:	3302      	adds	r3, #2
 8008054:	e7f4      	b.n	8008040 <_printf_float+0x198>
 8008056:	2301      	movs	r3, #1
 8008058:	e7f2      	b.n	8008040 <_printf_float+0x198>
 800805a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800805e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008060:	4299      	cmp	r1, r3
 8008062:	db05      	blt.n	8008070 <_printf_float+0x1c8>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	6121      	str	r1, [r4, #16]
 8008068:	07d8      	lsls	r0, r3, #31
 800806a:	d5ea      	bpl.n	8008042 <_printf_float+0x19a>
 800806c:	1c4b      	adds	r3, r1, #1
 800806e:	e7e7      	b.n	8008040 <_printf_float+0x198>
 8008070:	2900      	cmp	r1, #0
 8008072:	bfcc      	ite	gt
 8008074:	2201      	movgt	r2, #1
 8008076:	f1c1 0202 	rsble	r2, r1, #2
 800807a:	4413      	add	r3, r2
 800807c:	e7e0      	b.n	8008040 <_printf_float+0x198>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	055a      	lsls	r2, r3, #21
 8008082:	d407      	bmi.n	8008094 <_printf_float+0x1ec>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	4642      	mov	r2, r8
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	d12b      	bne.n	80080ea <_printf_float+0x242>
 8008092:	e764      	b.n	8007f5e <_printf_float+0xb6>
 8008094:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008098:	f240 80dc 	bls.w	8008254 <_printf_float+0x3ac>
 800809c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080a0:	2200      	movs	r2, #0
 80080a2:	2300      	movs	r3, #0
 80080a4:	f7f8 fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d033      	beq.n	8008114 <_printf_float+0x26c>
 80080ac:	2301      	movs	r3, #1
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	4a35      	ldr	r2, [pc, #212]	@ (8008188 <_printf_float+0x2e0>)
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f af51 	beq.w	8007f5e <_printf_float+0xb6>
 80080bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80080c0:	4543      	cmp	r3, r8
 80080c2:	db02      	blt.n	80080ca <_printf_float+0x222>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07d8      	lsls	r0, r3, #31
 80080c8:	d50f      	bpl.n	80080ea <_printf_float+0x242>
 80080ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080ce:	4631      	mov	r1, r6
 80080d0:	4628      	mov	r0, r5
 80080d2:	47b8      	blx	r7
 80080d4:	3001      	adds	r0, #1
 80080d6:	f43f af42 	beq.w	8007f5e <_printf_float+0xb6>
 80080da:	f04f 0900 	mov.w	r9, #0
 80080de:	f108 38ff 	add.w	r8, r8, #4294967295
 80080e2:	f104 0a1a 	add.w	sl, r4, #26
 80080e6:	45c8      	cmp	r8, r9
 80080e8:	dc09      	bgt.n	80080fe <_printf_float+0x256>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	079b      	lsls	r3, r3, #30
 80080ee:	f100 8102 	bmi.w	80082f6 <_printf_float+0x44e>
 80080f2:	68e0      	ldr	r0, [r4, #12]
 80080f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080f6:	4298      	cmp	r0, r3
 80080f8:	bfb8      	it	lt
 80080fa:	4618      	movlt	r0, r3
 80080fc:	e731      	b.n	8007f62 <_printf_float+0xba>
 80080fe:	2301      	movs	r3, #1
 8008100:	4652      	mov	r2, sl
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	47b8      	blx	r7
 8008108:	3001      	adds	r0, #1
 800810a:	f43f af28 	beq.w	8007f5e <_printf_float+0xb6>
 800810e:	f109 0901 	add.w	r9, r9, #1
 8008112:	e7e8      	b.n	80080e6 <_printf_float+0x23e>
 8008114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008116:	2b00      	cmp	r3, #0
 8008118:	dc38      	bgt.n	800818c <_printf_float+0x2e4>
 800811a:	2301      	movs	r3, #1
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	4a19      	ldr	r2, [pc, #100]	@ (8008188 <_printf_float+0x2e0>)
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f af1a 	beq.w	8007f5e <_printf_float+0xb6>
 800812a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800812e:	ea59 0303 	orrs.w	r3, r9, r3
 8008132:	d102      	bne.n	800813a <_printf_float+0x292>
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	07d9      	lsls	r1, r3, #31
 8008138:	d5d7      	bpl.n	80080ea <_printf_float+0x242>
 800813a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	f43f af0a 	beq.w	8007f5e <_printf_float+0xb6>
 800814a:	f04f 0a00 	mov.w	sl, #0
 800814e:	f104 0b1a 	add.w	fp, r4, #26
 8008152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008154:	425b      	negs	r3, r3
 8008156:	4553      	cmp	r3, sl
 8008158:	dc01      	bgt.n	800815e <_printf_float+0x2b6>
 800815a:	464b      	mov	r3, r9
 800815c:	e793      	b.n	8008086 <_printf_float+0x1de>
 800815e:	2301      	movs	r3, #1
 8008160:	465a      	mov	r2, fp
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	f43f aef8 	beq.w	8007f5e <_printf_float+0xb6>
 800816e:	f10a 0a01 	add.w	sl, sl, #1
 8008172:	e7ee      	b.n	8008152 <_printf_float+0x2aa>
 8008174:	7fefffff 	.word	0x7fefffff
 8008178:	0800a922 	.word	0x0800a922
 800817c:	0800a926 	.word	0x0800a926
 8008180:	0800a92a 	.word	0x0800a92a
 8008184:	0800a92e 	.word	0x0800a92e
 8008188:	0800a932 	.word	0x0800a932
 800818c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800818e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008192:	4553      	cmp	r3, sl
 8008194:	bfa8      	it	ge
 8008196:	4653      	movge	r3, sl
 8008198:	2b00      	cmp	r3, #0
 800819a:	4699      	mov	r9, r3
 800819c:	dc36      	bgt.n	800820c <_printf_float+0x364>
 800819e:	f04f 0b00 	mov.w	fp, #0
 80081a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081a6:	f104 021a 	add.w	r2, r4, #26
 80081aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ae:	eba3 0309 	sub.w	r3, r3, r9
 80081b2:	455b      	cmp	r3, fp
 80081b4:	dc31      	bgt.n	800821a <_printf_float+0x372>
 80081b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081b8:	459a      	cmp	sl, r3
 80081ba:	dc3a      	bgt.n	8008232 <_printf_float+0x38a>
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	07da      	lsls	r2, r3, #31
 80081c0:	d437      	bmi.n	8008232 <_printf_float+0x38a>
 80081c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081c4:	ebaa 0903 	sub.w	r9, sl, r3
 80081c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ca:	ebaa 0303 	sub.w	r3, sl, r3
 80081ce:	4599      	cmp	r9, r3
 80081d0:	bfa8      	it	ge
 80081d2:	4699      	movge	r9, r3
 80081d4:	f1b9 0f00 	cmp.w	r9, #0
 80081d8:	dc33      	bgt.n	8008242 <_printf_float+0x39a>
 80081da:	f04f 0800 	mov.w	r8, #0
 80081de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081e2:	f104 0b1a 	add.w	fp, r4, #26
 80081e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081e8:	ebaa 0303 	sub.w	r3, sl, r3
 80081ec:	eba3 0309 	sub.w	r3, r3, r9
 80081f0:	4543      	cmp	r3, r8
 80081f2:	f77f af7a 	ble.w	80080ea <_printf_float+0x242>
 80081f6:	2301      	movs	r3, #1
 80081f8:	465a      	mov	r2, fp
 80081fa:	4631      	mov	r1, r6
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b8      	blx	r7
 8008200:	3001      	adds	r0, #1
 8008202:	f43f aeac 	beq.w	8007f5e <_printf_float+0xb6>
 8008206:	f108 0801 	add.w	r8, r8, #1
 800820a:	e7ec      	b.n	80081e6 <_printf_float+0x33e>
 800820c:	4642      	mov	r2, r8
 800820e:	4631      	mov	r1, r6
 8008210:	4628      	mov	r0, r5
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	d1c2      	bne.n	800819e <_printf_float+0x2f6>
 8008218:	e6a1      	b.n	8007f5e <_printf_float+0xb6>
 800821a:	2301      	movs	r3, #1
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	920a      	str	r2, [sp, #40]	@ 0x28
 8008222:	47b8      	blx	r7
 8008224:	3001      	adds	r0, #1
 8008226:	f43f ae9a 	beq.w	8007f5e <_printf_float+0xb6>
 800822a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800822c:	f10b 0b01 	add.w	fp, fp, #1
 8008230:	e7bb      	b.n	80081aa <_printf_float+0x302>
 8008232:	4631      	mov	r1, r6
 8008234:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008238:	4628      	mov	r0, r5
 800823a:	47b8      	blx	r7
 800823c:	3001      	adds	r0, #1
 800823e:	d1c0      	bne.n	80081c2 <_printf_float+0x31a>
 8008240:	e68d      	b.n	8007f5e <_printf_float+0xb6>
 8008242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008244:	464b      	mov	r3, r9
 8008246:	4631      	mov	r1, r6
 8008248:	4628      	mov	r0, r5
 800824a:	4442      	add	r2, r8
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	d1c3      	bne.n	80081da <_printf_float+0x332>
 8008252:	e684      	b.n	8007f5e <_printf_float+0xb6>
 8008254:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008258:	f1ba 0f01 	cmp.w	sl, #1
 800825c:	dc01      	bgt.n	8008262 <_printf_float+0x3ba>
 800825e:	07db      	lsls	r3, r3, #31
 8008260:	d536      	bpl.n	80082d0 <_printf_float+0x428>
 8008262:	2301      	movs	r3, #1
 8008264:	4642      	mov	r2, r8
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	f43f ae76 	beq.w	8007f5e <_printf_float+0xb6>
 8008272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f ae6e 	beq.w	8007f5e <_printf_float+0xb6>
 8008282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008286:	2200      	movs	r2, #0
 8008288:	2300      	movs	r3, #0
 800828a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800828e:	f7f8 fb8b 	bl	80009a8 <__aeabi_dcmpeq>
 8008292:	b9c0      	cbnz	r0, 80082c6 <_printf_float+0x41e>
 8008294:	4653      	mov	r3, sl
 8008296:	f108 0201 	add.w	r2, r8, #1
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	47b8      	blx	r7
 80082a0:	3001      	adds	r0, #1
 80082a2:	d10c      	bne.n	80082be <_printf_float+0x416>
 80082a4:	e65b      	b.n	8007f5e <_printf_float+0xb6>
 80082a6:	2301      	movs	r3, #1
 80082a8:	465a      	mov	r2, fp
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	f43f ae54 	beq.w	8007f5e <_printf_float+0xb6>
 80082b6:	f108 0801 	add.w	r8, r8, #1
 80082ba:	45d0      	cmp	r8, sl
 80082bc:	dbf3      	blt.n	80082a6 <_printf_float+0x3fe>
 80082be:	464b      	mov	r3, r9
 80082c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80082c4:	e6e0      	b.n	8008088 <_printf_float+0x1e0>
 80082c6:	f04f 0800 	mov.w	r8, #0
 80082ca:	f104 0b1a 	add.w	fp, r4, #26
 80082ce:	e7f4      	b.n	80082ba <_printf_float+0x412>
 80082d0:	2301      	movs	r3, #1
 80082d2:	4642      	mov	r2, r8
 80082d4:	e7e1      	b.n	800829a <_printf_float+0x3f2>
 80082d6:	2301      	movs	r3, #1
 80082d8:	464a      	mov	r2, r9
 80082da:	4631      	mov	r1, r6
 80082dc:	4628      	mov	r0, r5
 80082de:	47b8      	blx	r7
 80082e0:	3001      	adds	r0, #1
 80082e2:	f43f ae3c 	beq.w	8007f5e <_printf_float+0xb6>
 80082e6:	f108 0801 	add.w	r8, r8, #1
 80082ea:	68e3      	ldr	r3, [r4, #12]
 80082ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80082ee:	1a5b      	subs	r3, r3, r1
 80082f0:	4543      	cmp	r3, r8
 80082f2:	dcf0      	bgt.n	80082d6 <_printf_float+0x42e>
 80082f4:	e6fd      	b.n	80080f2 <_printf_float+0x24a>
 80082f6:	f04f 0800 	mov.w	r8, #0
 80082fa:	f104 0919 	add.w	r9, r4, #25
 80082fe:	e7f4      	b.n	80082ea <_printf_float+0x442>

08008300 <_printf_common>:
 8008300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008304:	4616      	mov	r6, r2
 8008306:	4698      	mov	r8, r3
 8008308:	688a      	ldr	r2, [r1, #8]
 800830a:	690b      	ldr	r3, [r1, #16]
 800830c:	4607      	mov	r7, r0
 800830e:	4293      	cmp	r3, r2
 8008310:	bfb8      	it	lt
 8008312:	4613      	movlt	r3, r2
 8008314:	6033      	str	r3, [r6, #0]
 8008316:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800831a:	460c      	mov	r4, r1
 800831c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008320:	b10a      	cbz	r2, 8008326 <_printf_common+0x26>
 8008322:	3301      	adds	r3, #1
 8008324:	6033      	str	r3, [r6, #0]
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	0699      	lsls	r1, r3, #26
 800832a:	bf42      	ittt	mi
 800832c:	6833      	ldrmi	r3, [r6, #0]
 800832e:	3302      	addmi	r3, #2
 8008330:	6033      	strmi	r3, [r6, #0]
 8008332:	6825      	ldr	r5, [r4, #0]
 8008334:	f015 0506 	ands.w	r5, r5, #6
 8008338:	d106      	bne.n	8008348 <_printf_common+0x48>
 800833a:	f104 0a19 	add.w	sl, r4, #25
 800833e:	68e3      	ldr	r3, [r4, #12]
 8008340:	6832      	ldr	r2, [r6, #0]
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	42ab      	cmp	r3, r5
 8008346:	dc2b      	bgt.n	80083a0 <_printf_common+0xa0>
 8008348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	3b00      	subs	r3, #0
 8008350:	bf18      	it	ne
 8008352:	2301      	movne	r3, #1
 8008354:	0692      	lsls	r2, r2, #26
 8008356:	d430      	bmi.n	80083ba <_printf_common+0xba>
 8008358:	4641      	mov	r1, r8
 800835a:	4638      	mov	r0, r7
 800835c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008360:	47c8      	blx	r9
 8008362:	3001      	adds	r0, #1
 8008364:	d023      	beq.n	80083ae <_printf_common+0xae>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	6922      	ldr	r2, [r4, #16]
 800836a:	f003 0306 	and.w	r3, r3, #6
 800836e:	2b04      	cmp	r3, #4
 8008370:	bf14      	ite	ne
 8008372:	2500      	movne	r5, #0
 8008374:	6833      	ldreq	r3, [r6, #0]
 8008376:	f04f 0600 	mov.w	r6, #0
 800837a:	bf08      	it	eq
 800837c:	68e5      	ldreq	r5, [r4, #12]
 800837e:	f104 041a 	add.w	r4, r4, #26
 8008382:	bf08      	it	eq
 8008384:	1aed      	subeq	r5, r5, r3
 8008386:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800838a:	bf08      	it	eq
 800838c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008390:	4293      	cmp	r3, r2
 8008392:	bfc4      	itt	gt
 8008394:	1a9b      	subgt	r3, r3, r2
 8008396:	18ed      	addgt	r5, r5, r3
 8008398:	42b5      	cmp	r5, r6
 800839a:	d11a      	bne.n	80083d2 <_printf_common+0xd2>
 800839c:	2000      	movs	r0, #0
 800839e:	e008      	b.n	80083b2 <_printf_common+0xb2>
 80083a0:	2301      	movs	r3, #1
 80083a2:	4652      	mov	r2, sl
 80083a4:	4641      	mov	r1, r8
 80083a6:	4638      	mov	r0, r7
 80083a8:	47c8      	blx	r9
 80083aa:	3001      	adds	r0, #1
 80083ac:	d103      	bne.n	80083b6 <_printf_common+0xb6>
 80083ae:	f04f 30ff 	mov.w	r0, #4294967295
 80083b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b6:	3501      	adds	r5, #1
 80083b8:	e7c1      	b.n	800833e <_printf_common+0x3e>
 80083ba:	2030      	movs	r0, #48	@ 0x30
 80083bc:	18e1      	adds	r1, r4, r3
 80083be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083c8:	4422      	add	r2, r4
 80083ca:	3302      	adds	r3, #2
 80083cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083d0:	e7c2      	b.n	8008358 <_printf_common+0x58>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4622      	mov	r2, r4
 80083d6:	4641      	mov	r1, r8
 80083d8:	4638      	mov	r0, r7
 80083da:	47c8      	blx	r9
 80083dc:	3001      	adds	r0, #1
 80083de:	d0e6      	beq.n	80083ae <_printf_common+0xae>
 80083e0:	3601      	adds	r6, #1
 80083e2:	e7d9      	b.n	8008398 <_printf_common+0x98>

080083e4 <_printf_i>:
 80083e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	7e0f      	ldrb	r7, [r1, #24]
 80083ea:	4691      	mov	r9, r2
 80083ec:	2f78      	cmp	r7, #120	@ 0x78
 80083ee:	4680      	mov	r8, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	469a      	mov	sl, r3
 80083f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083fa:	d807      	bhi.n	800840c <_printf_i+0x28>
 80083fc:	2f62      	cmp	r7, #98	@ 0x62
 80083fe:	d80a      	bhi.n	8008416 <_printf_i+0x32>
 8008400:	2f00      	cmp	r7, #0
 8008402:	f000 80d3 	beq.w	80085ac <_printf_i+0x1c8>
 8008406:	2f58      	cmp	r7, #88	@ 0x58
 8008408:	f000 80ba 	beq.w	8008580 <_printf_i+0x19c>
 800840c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008414:	e03a      	b.n	800848c <_printf_i+0xa8>
 8008416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800841a:	2b15      	cmp	r3, #21
 800841c:	d8f6      	bhi.n	800840c <_printf_i+0x28>
 800841e:	a101      	add	r1, pc, #4	@ (adr r1, 8008424 <_printf_i+0x40>)
 8008420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008424:	0800847d 	.word	0x0800847d
 8008428:	08008491 	.word	0x08008491
 800842c:	0800840d 	.word	0x0800840d
 8008430:	0800840d 	.word	0x0800840d
 8008434:	0800840d 	.word	0x0800840d
 8008438:	0800840d 	.word	0x0800840d
 800843c:	08008491 	.word	0x08008491
 8008440:	0800840d 	.word	0x0800840d
 8008444:	0800840d 	.word	0x0800840d
 8008448:	0800840d 	.word	0x0800840d
 800844c:	0800840d 	.word	0x0800840d
 8008450:	08008593 	.word	0x08008593
 8008454:	080084bb 	.word	0x080084bb
 8008458:	0800854d 	.word	0x0800854d
 800845c:	0800840d 	.word	0x0800840d
 8008460:	0800840d 	.word	0x0800840d
 8008464:	080085b5 	.word	0x080085b5
 8008468:	0800840d 	.word	0x0800840d
 800846c:	080084bb 	.word	0x080084bb
 8008470:	0800840d 	.word	0x0800840d
 8008474:	0800840d 	.word	0x0800840d
 8008478:	08008555 	.word	0x08008555
 800847c:	6833      	ldr	r3, [r6, #0]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6032      	str	r2, [r6, #0]
 8008484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800848c:	2301      	movs	r3, #1
 800848e:	e09e      	b.n	80085ce <_printf_i+0x1ea>
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	6820      	ldr	r0, [r4, #0]
 8008494:	1d19      	adds	r1, r3, #4
 8008496:	6031      	str	r1, [r6, #0]
 8008498:	0606      	lsls	r6, r0, #24
 800849a:	d501      	bpl.n	80084a0 <_printf_i+0xbc>
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	e003      	b.n	80084a8 <_printf_i+0xc4>
 80084a0:	0645      	lsls	r5, r0, #25
 80084a2:	d5fb      	bpl.n	800849c <_printf_i+0xb8>
 80084a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	da03      	bge.n	80084b4 <_printf_i+0xd0>
 80084ac:	232d      	movs	r3, #45	@ 0x2d
 80084ae:	426d      	negs	r5, r5
 80084b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084b4:	230a      	movs	r3, #10
 80084b6:	4859      	ldr	r0, [pc, #356]	@ (800861c <_printf_i+0x238>)
 80084b8:	e011      	b.n	80084de <_printf_i+0xfa>
 80084ba:	6821      	ldr	r1, [r4, #0]
 80084bc:	6833      	ldr	r3, [r6, #0]
 80084be:	0608      	lsls	r0, r1, #24
 80084c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80084c4:	d402      	bmi.n	80084cc <_printf_i+0xe8>
 80084c6:	0649      	lsls	r1, r1, #25
 80084c8:	bf48      	it	mi
 80084ca:	b2ad      	uxthmi	r5, r5
 80084cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80084ce:	6033      	str	r3, [r6, #0]
 80084d0:	bf14      	ite	ne
 80084d2:	230a      	movne	r3, #10
 80084d4:	2308      	moveq	r3, #8
 80084d6:	4851      	ldr	r0, [pc, #324]	@ (800861c <_printf_i+0x238>)
 80084d8:	2100      	movs	r1, #0
 80084da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084de:	6866      	ldr	r6, [r4, #4]
 80084e0:	2e00      	cmp	r6, #0
 80084e2:	bfa8      	it	ge
 80084e4:	6821      	ldrge	r1, [r4, #0]
 80084e6:	60a6      	str	r6, [r4, #8]
 80084e8:	bfa4      	itt	ge
 80084ea:	f021 0104 	bicge.w	r1, r1, #4
 80084ee:	6021      	strge	r1, [r4, #0]
 80084f0:	b90d      	cbnz	r5, 80084f6 <_printf_i+0x112>
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d04b      	beq.n	800858e <_printf_i+0x1aa>
 80084f6:	4616      	mov	r6, r2
 80084f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80084fc:	fb03 5711 	mls	r7, r3, r1, r5
 8008500:	5dc7      	ldrb	r7, [r0, r7]
 8008502:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008506:	462f      	mov	r7, r5
 8008508:	42bb      	cmp	r3, r7
 800850a:	460d      	mov	r5, r1
 800850c:	d9f4      	bls.n	80084f8 <_printf_i+0x114>
 800850e:	2b08      	cmp	r3, #8
 8008510:	d10b      	bne.n	800852a <_printf_i+0x146>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	07df      	lsls	r7, r3, #31
 8008516:	d508      	bpl.n	800852a <_printf_i+0x146>
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	6861      	ldr	r1, [r4, #4]
 800851c:	4299      	cmp	r1, r3
 800851e:	bfde      	ittt	le
 8008520:	2330      	movle	r3, #48	@ 0x30
 8008522:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008526:	f106 36ff 	addle.w	r6, r6, #4294967295
 800852a:	1b92      	subs	r2, r2, r6
 800852c:	6122      	str	r2, [r4, #16]
 800852e:	464b      	mov	r3, r9
 8008530:	4621      	mov	r1, r4
 8008532:	4640      	mov	r0, r8
 8008534:	f8cd a000 	str.w	sl, [sp]
 8008538:	aa03      	add	r2, sp, #12
 800853a:	f7ff fee1 	bl	8008300 <_printf_common>
 800853e:	3001      	adds	r0, #1
 8008540:	d14a      	bne.n	80085d8 <_printf_i+0x1f4>
 8008542:	f04f 30ff 	mov.w	r0, #4294967295
 8008546:	b004      	add	sp, #16
 8008548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	f043 0320 	orr.w	r3, r3, #32
 8008552:	6023      	str	r3, [r4, #0]
 8008554:	2778      	movs	r7, #120	@ 0x78
 8008556:	4832      	ldr	r0, [pc, #200]	@ (8008620 <_printf_i+0x23c>)
 8008558:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	6831      	ldr	r1, [r6, #0]
 8008560:	061f      	lsls	r7, r3, #24
 8008562:	f851 5b04 	ldr.w	r5, [r1], #4
 8008566:	d402      	bmi.n	800856e <_printf_i+0x18a>
 8008568:	065f      	lsls	r7, r3, #25
 800856a:	bf48      	it	mi
 800856c:	b2ad      	uxthmi	r5, r5
 800856e:	6031      	str	r1, [r6, #0]
 8008570:	07d9      	lsls	r1, r3, #31
 8008572:	bf44      	itt	mi
 8008574:	f043 0320 	orrmi.w	r3, r3, #32
 8008578:	6023      	strmi	r3, [r4, #0]
 800857a:	b11d      	cbz	r5, 8008584 <_printf_i+0x1a0>
 800857c:	2310      	movs	r3, #16
 800857e:	e7ab      	b.n	80084d8 <_printf_i+0xf4>
 8008580:	4826      	ldr	r0, [pc, #152]	@ (800861c <_printf_i+0x238>)
 8008582:	e7e9      	b.n	8008558 <_printf_i+0x174>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	f023 0320 	bic.w	r3, r3, #32
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	e7f6      	b.n	800857c <_printf_i+0x198>
 800858e:	4616      	mov	r6, r2
 8008590:	e7bd      	b.n	800850e <_printf_i+0x12a>
 8008592:	6833      	ldr	r3, [r6, #0]
 8008594:	6825      	ldr	r5, [r4, #0]
 8008596:	1d18      	adds	r0, r3, #4
 8008598:	6961      	ldr	r1, [r4, #20]
 800859a:	6030      	str	r0, [r6, #0]
 800859c:	062e      	lsls	r6, r5, #24
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	d501      	bpl.n	80085a6 <_printf_i+0x1c2>
 80085a2:	6019      	str	r1, [r3, #0]
 80085a4:	e002      	b.n	80085ac <_printf_i+0x1c8>
 80085a6:	0668      	lsls	r0, r5, #25
 80085a8:	d5fb      	bpl.n	80085a2 <_printf_i+0x1be>
 80085aa:	8019      	strh	r1, [r3, #0]
 80085ac:	2300      	movs	r3, #0
 80085ae:	4616      	mov	r6, r2
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	e7bc      	b.n	800852e <_printf_i+0x14a>
 80085b4:	6833      	ldr	r3, [r6, #0]
 80085b6:	2100      	movs	r1, #0
 80085b8:	1d1a      	adds	r2, r3, #4
 80085ba:	6032      	str	r2, [r6, #0]
 80085bc:	681e      	ldr	r6, [r3, #0]
 80085be:	6862      	ldr	r2, [r4, #4]
 80085c0:	4630      	mov	r0, r6
 80085c2:	f000 fb0e 	bl	8008be2 <memchr>
 80085c6:	b108      	cbz	r0, 80085cc <_printf_i+0x1e8>
 80085c8:	1b80      	subs	r0, r0, r6
 80085ca:	6060      	str	r0, [r4, #4]
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	6123      	str	r3, [r4, #16]
 80085d0:	2300      	movs	r3, #0
 80085d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d6:	e7aa      	b.n	800852e <_printf_i+0x14a>
 80085d8:	4632      	mov	r2, r6
 80085da:	4649      	mov	r1, r9
 80085dc:	4640      	mov	r0, r8
 80085de:	6923      	ldr	r3, [r4, #16]
 80085e0:	47d0      	blx	sl
 80085e2:	3001      	adds	r0, #1
 80085e4:	d0ad      	beq.n	8008542 <_printf_i+0x15e>
 80085e6:	6823      	ldr	r3, [r4, #0]
 80085e8:	079b      	lsls	r3, r3, #30
 80085ea:	d413      	bmi.n	8008614 <_printf_i+0x230>
 80085ec:	68e0      	ldr	r0, [r4, #12]
 80085ee:	9b03      	ldr	r3, [sp, #12]
 80085f0:	4298      	cmp	r0, r3
 80085f2:	bfb8      	it	lt
 80085f4:	4618      	movlt	r0, r3
 80085f6:	e7a6      	b.n	8008546 <_printf_i+0x162>
 80085f8:	2301      	movs	r3, #1
 80085fa:	4632      	mov	r2, r6
 80085fc:	4649      	mov	r1, r9
 80085fe:	4640      	mov	r0, r8
 8008600:	47d0      	blx	sl
 8008602:	3001      	adds	r0, #1
 8008604:	d09d      	beq.n	8008542 <_printf_i+0x15e>
 8008606:	3501      	adds	r5, #1
 8008608:	68e3      	ldr	r3, [r4, #12]
 800860a:	9903      	ldr	r1, [sp, #12]
 800860c:	1a5b      	subs	r3, r3, r1
 800860e:	42ab      	cmp	r3, r5
 8008610:	dcf2      	bgt.n	80085f8 <_printf_i+0x214>
 8008612:	e7eb      	b.n	80085ec <_printf_i+0x208>
 8008614:	2500      	movs	r5, #0
 8008616:	f104 0619 	add.w	r6, r4, #25
 800861a:	e7f5      	b.n	8008608 <_printf_i+0x224>
 800861c:	0800a934 	.word	0x0800a934
 8008620:	0800a945 	.word	0x0800a945

08008624 <std>:
 8008624:	2300      	movs	r3, #0
 8008626:	b510      	push	{r4, lr}
 8008628:	4604      	mov	r4, r0
 800862a:	e9c0 3300 	strd	r3, r3, [r0]
 800862e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008632:	6083      	str	r3, [r0, #8]
 8008634:	8181      	strh	r1, [r0, #12]
 8008636:	6643      	str	r3, [r0, #100]	@ 0x64
 8008638:	81c2      	strh	r2, [r0, #14]
 800863a:	6183      	str	r3, [r0, #24]
 800863c:	4619      	mov	r1, r3
 800863e:	2208      	movs	r2, #8
 8008640:	305c      	adds	r0, #92	@ 0x5c
 8008642:	f000 f9f9 	bl	8008a38 <memset>
 8008646:	4b0d      	ldr	r3, [pc, #52]	@ (800867c <std+0x58>)
 8008648:	6224      	str	r4, [r4, #32]
 800864a:	6263      	str	r3, [r4, #36]	@ 0x24
 800864c:	4b0c      	ldr	r3, [pc, #48]	@ (8008680 <std+0x5c>)
 800864e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008650:	4b0c      	ldr	r3, [pc, #48]	@ (8008684 <std+0x60>)
 8008652:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008654:	4b0c      	ldr	r3, [pc, #48]	@ (8008688 <std+0x64>)
 8008656:	6323      	str	r3, [r4, #48]	@ 0x30
 8008658:	4b0c      	ldr	r3, [pc, #48]	@ (800868c <std+0x68>)
 800865a:	429c      	cmp	r4, r3
 800865c:	d006      	beq.n	800866c <std+0x48>
 800865e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008662:	4294      	cmp	r4, r2
 8008664:	d002      	beq.n	800866c <std+0x48>
 8008666:	33d0      	adds	r3, #208	@ 0xd0
 8008668:	429c      	cmp	r4, r3
 800866a:	d105      	bne.n	8008678 <std+0x54>
 800866c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008674:	f000 bab2 	b.w	8008bdc <__retarget_lock_init_recursive>
 8008678:	bd10      	pop	{r4, pc}
 800867a:	bf00      	nop
 800867c:	08008889 	.word	0x08008889
 8008680:	080088ab 	.word	0x080088ab
 8008684:	080088e3 	.word	0x080088e3
 8008688:	08008907 	.word	0x08008907
 800868c:	20001d00 	.word	0x20001d00

08008690 <stdio_exit_handler>:
 8008690:	4a02      	ldr	r2, [pc, #8]	@ (800869c <stdio_exit_handler+0xc>)
 8008692:	4903      	ldr	r1, [pc, #12]	@ (80086a0 <stdio_exit_handler+0x10>)
 8008694:	4803      	ldr	r0, [pc, #12]	@ (80086a4 <stdio_exit_handler+0x14>)
 8008696:	f000 b869 	b.w	800876c <_fwalk_sglue>
 800869a:	bf00      	nop
 800869c:	20000010 	.word	0x20000010
 80086a0:	0800a53d 	.word	0x0800a53d
 80086a4:	20000020 	.word	0x20000020

080086a8 <cleanup_stdio>:
 80086a8:	6841      	ldr	r1, [r0, #4]
 80086aa:	4b0c      	ldr	r3, [pc, #48]	@ (80086dc <cleanup_stdio+0x34>)
 80086ac:	b510      	push	{r4, lr}
 80086ae:	4299      	cmp	r1, r3
 80086b0:	4604      	mov	r4, r0
 80086b2:	d001      	beq.n	80086b8 <cleanup_stdio+0x10>
 80086b4:	f001 ff42 	bl	800a53c <_fflush_r>
 80086b8:	68a1      	ldr	r1, [r4, #8]
 80086ba:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <cleanup_stdio+0x38>)
 80086bc:	4299      	cmp	r1, r3
 80086be:	d002      	beq.n	80086c6 <cleanup_stdio+0x1e>
 80086c0:	4620      	mov	r0, r4
 80086c2:	f001 ff3b 	bl	800a53c <_fflush_r>
 80086c6:	68e1      	ldr	r1, [r4, #12]
 80086c8:	4b06      	ldr	r3, [pc, #24]	@ (80086e4 <cleanup_stdio+0x3c>)
 80086ca:	4299      	cmp	r1, r3
 80086cc:	d004      	beq.n	80086d8 <cleanup_stdio+0x30>
 80086ce:	4620      	mov	r0, r4
 80086d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d4:	f001 bf32 	b.w	800a53c <_fflush_r>
 80086d8:	bd10      	pop	{r4, pc}
 80086da:	bf00      	nop
 80086dc:	20001d00 	.word	0x20001d00
 80086e0:	20001d68 	.word	0x20001d68
 80086e4:	20001dd0 	.word	0x20001dd0

080086e8 <global_stdio_init.part.0>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008718 <global_stdio_init.part.0+0x30>)
 80086ec:	4c0b      	ldr	r4, [pc, #44]	@ (800871c <global_stdio_init.part.0+0x34>)
 80086ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008720 <global_stdio_init.part.0+0x38>)
 80086f0:	4620      	mov	r0, r4
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	2104      	movs	r1, #4
 80086f6:	2200      	movs	r2, #0
 80086f8:	f7ff ff94 	bl	8008624 <std>
 80086fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008700:	2201      	movs	r2, #1
 8008702:	2109      	movs	r1, #9
 8008704:	f7ff ff8e 	bl	8008624 <std>
 8008708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800870c:	2202      	movs	r2, #2
 800870e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008712:	2112      	movs	r1, #18
 8008714:	f7ff bf86 	b.w	8008624 <std>
 8008718:	20001e38 	.word	0x20001e38
 800871c:	20001d00 	.word	0x20001d00
 8008720:	08008691 	.word	0x08008691

08008724 <__sfp_lock_acquire>:
 8008724:	4801      	ldr	r0, [pc, #4]	@ (800872c <__sfp_lock_acquire+0x8>)
 8008726:	f000 ba5a 	b.w	8008bde <__retarget_lock_acquire_recursive>
 800872a:	bf00      	nop
 800872c:	20001e41 	.word	0x20001e41

08008730 <__sfp_lock_release>:
 8008730:	4801      	ldr	r0, [pc, #4]	@ (8008738 <__sfp_lock_release+0x8>)
 8008732:	f000 ba55 	b.w	8008be0 <__retarget_lock_release_recursive>
 8008736:	bf00      	nop
 8008738:	20001e41 	.word	0x20001e41

0800873c <__sinit>:
 800873c:	b510      	push	{r4, lr}
 800873e:	4604      	mov	r4, r0
 8008740:	f7ff fff0 	bl	8008724 <__sfp_lock_acquire>
 8008744:	6a23      	ldr	r3, [r4, #32]
 8008746:	b11b      	cbz	r3, 8008750 <__sinit+0x14>
 8008748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800874c:	f7ff bff0 	b.w	8008730 <__sfp_lock_release>
 8008750:	4b04      	ldr	r3, [pc, #16]	@ (8008764 <__sinit+0x28>)
 8008752:	6223      	str	r3, [r4, #32]
 8008754:	4b04      	ldr	r3, [pc, #16]	@ (8008768 <__sinit+0x2c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f5      	bne.n	8008748 <__sinit+0xc>
 800875c:	f7ff ffc4 	bl	80086e8 <global_stdio_init.part.0>
 8008760:	e7f2      	b.n	8008748 <__sinit+0xc>
 8008762:	bf00      	nop
 8008764:	080086a9 	.word	0x080086a9
 8008768:	20001e38 	.word	0x20001e38

0800876c <_fwalk_sglue>:
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	4607      	mov	r7, r0
 8008772:	4688      	mov	r8, r1
 8008774:	4614      	mov	r4, r2
 8008776:	2600      	movs	r6, #0
 8008778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800877c:	f1b9 0901 	subs.w	r9, r9, #1
 8008780:	d505      	bpl.n	800878e <_fwalk_sglue+0x22>
 8008782:	6824      	ldr	r4, [r4, #0]
 8008784:	2c00      	cmp	r4, #0
 8008786:	d1f7      	bne.n	8008778 <_fwalk_sglue+0xc>
 8008788:	4630      	mov	r0, r6
 800878a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d907      	bls.n	80087a4 <_fwalk_sglue+0x38>
 8008794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008798:	3301      	adds	r3, #1
 800879a:	d003      	beq.n	80087a4 <_fwalk_sglue+0x38>
 800879c:	4629      	mov	r1, r5
 800879e:	4638      	mov	r0, r7
 80087a0:	47c0      	blx	r8
 80087a2:	4306      	orrs	r6, r0
 80087a4:	3568      	adds	r5, #104	@ 0x68
 80087a6:	e7e9      	b.n	800877c <_fwalk_sglue+0x10>

080087a8 <iprintf>:
 80087a8:	b40f      	push	{r0, r1, r2, r3}
 80087aa:	b507      	push	{r0, r1, r2, lr}
 80087ac:	4906      	ldr	r1, [pc, #24]	@ (80087c8 <iprintf+0x20>)
 80087ae:	ab04      	add	r3, sp, #16
 80087b0:	6808      	ldr	r0, [r1, #0]
 80087b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b6:	6881      	ldr	r1, [r0, #8]
 80087b8:	9301      	str	r3, [sp, #4]
 80087ba:	f001 fd27 	bl	800a20c <_vfiprintf_r>
 80087be:	b003      	add	sp, #12
 80087c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80087c4:	b004      	add	sp, #16
 80087c6:	4770      	bx	lr
 80087c8:	2000001c 	.word	0x2000001c

080087cc <_puts_r>:
 80087cc:	6a03      	ldr	r3, [r0, #32]
 80087ce:	b570      	push	{r4, r5, r6, lr}
 80087d0:	4605      	mov	r5, r0
 80087d2:	460e      	mov	r6, r1
 80087d4:	6884      	ldr	r4, [r0, #8]
 80087d6:	b90b      	cbnz	r3, 80087dc <_puts_r+0x10>
 80087d8:	f7ff ffb0 	bl	800873c <__sinit>
 80087dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087de:	07db      	lsls	r3, r3, #31
 80087e0:	d405      	bmi.n	80087ee <_puts_r+0x22>
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	0598      	lsls	r0, r3, #22
 80087e6:	d402      	bmi.n	80087ee <_puts_r+0x22>
 80087e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087ea:	f000 f9f8 	bl	8008bde <__retarget_lock_acquire_recursive>
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	0719      	lsls	r1, r3, #28
 80087f2:	d502      	bpl.n	80087fa <_puts_r+0x2e>
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d135      	bne.n	8008866 <_puts_r+0x9a>
 80087fa:	4621      	mov	r1, r4
 80087fc:	4628      	mov	r0, r5
 80087fe:	f000 f8c5 	bl	800898c <__swsetup_r>
 8008802:	b380      	cbz	r0, 8008866 <_puts_r+0x9a>
 8008804:	f04f 35ff 	mov.w	r5, #4294967295
 8008808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800880a:	07da      	lsls	r2, r3, #31
 800880c:	d405      	bmi.n	800881a <_puts_r+0x4e>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	059b      	lsls	r3, r3, #22
 8008812:	d402      	bmi.n	800881a <_puts_r+0x4e>
 8008814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008816:	f000 f9e3 	bl	8008be0 <__retarget_lock_release_recursive>
 800881a:	4628      	mov	r0, r5
 800881c:	bd70      	pop	{r4, r5, r6, pc}
 800881e:	2b00      	cmp	r3, #0
 8008820:	da04      	bge.n	800882c <_puts_r+0x60>
 8008822:	69a2      	ldr	r2, [r4, #24]
 8008824:	429a      	cmp	r2, r3
 8008826:	dc17      	bgt.n	8008858 <_puts_r+0x8c>
 8008828:	290a      	cmp	r1, #10
 800882a:	d015      	beq.n	8008858 <_puts_r+0x8c>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	6022      	str	r2, [r4, #0]
 8008832:	7019      	strb	r1, [r3, #0]
 8008834:	68a3      	ldr	r3, [r4, #8]
 8008836:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800883a:	3b01      	subs	r3, #1
 800883c:	60a3      	str	r3, [r4, #8]
 800883e:	2900      	cmp	r1, #0
 8008840:	d1ed      	bne.n	800881e <_puts_r+0x52>
 8008842:	2b00      	cmp	r3, #0
 8008844:	da11      	bge.n	800886a <_puts_r+0x9e>
 8008846:	4622      	mov	r2, r4
 8008848:	210a      	movs	r1, #10
 800884a:	4628      	mov	r0, r5
 800884c:	f000 f85f 	bl	800890e <__swbuf_r>
 8008850:	3001      	adds	r0, #1
 8008852:	d0d7      	beq.n	8008804 <_puts_r+0x38>
 8008854:	250a      	movs	r5, #10
 8008856:	e7d7      	b.n	8008808 <_puts_r+0x3c>
 8008858:	4622      	mov	r2, r4
 800885a:	4628      	mov	r0, r5
 800885c:	f000 f857 	bl	800890e <__swbuf_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d1e7      	bne.n	8008834 <_puts_r+0x68>
 8008864:	e7ce      	b.n	8008804 <_puts_r+0x38>
 8008866:	3e01      	subs	r6, #1
 8008868:	e7e4      	b.n	8008834 <_puts_r+0x68>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	1c5a      	adds	r2, r3, #1
 800886e:	6022      	str	r2, [r4, #0]
 8008870:	220a      	movs	r2, #10
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	e7ee      	b.n	8008854 <_puts_r+0x88>
	...

08008878 <puts>:
 8008878:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <puts+0xc>)
 800887a:	4601      	mov	r1, r0
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	f7ff bfa5 	b.w	80087cc <_puts_r>
 8008882:	bf00      	nop
 8008884:	2000001c 	.word	0x2000001c

08008888 <__sread>:
 8008888:	b510      	push	{r4, lr}
 800888a:	460c      	mov	r4, r1
 800888c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008890:	f000 f956 	bl	8008b40 <_read_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	bfab      	itete	ge
 8008898:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800889a:	89a3      	ldrhlt	r3, [r4, #12]
 800889c:	181b      	addge	r3, r3, r0
 800889e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088a2:	bfac      	ite	ge
 80088a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088a6:	81a3      	strhlt	r3, [r4, #12]
 80088a8:	bd10      	pop	{r4, pc}

080088aa <__swrite>:
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	461f      	mov	r7, r3
 80088b0:	898b      	ldrh	r3, [r1, #12]
 80088b2:	4605      	mov	r5, r0
 80088b4:	05db      	lsls	r3, r3, #23
 80088b6:	460c      	mov	r4, r1
 80088b8:	4616      	mov	r6, r2
 80088ba:	d505      	bpl.n	80088c8 <__swrite+0x1e>
 80088bc:	2302      	movs	r3, #2
 80088be:	2200      	movs	r2, #0
 80088c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c4:	f000 f92a 	bl	8008b1c <_lseek_r>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	4632      	mov	r2, r6
 80088cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088d0:	81a3      	strh	r3, [r4, #12]
 80088d2:	4628      	mov	r0, r5
 80088d4:	463b      	mov	r3, r7
 80088d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088de:	f000 b941 	b.w	8008b64 <_write_r>

080088e2 <__sseek>:
 80088e2:	b510      	push	{r4, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ea:	f000 f917 	bl	8008b1c <_lseek_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	bf15      	itete	ne
 80088f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088fe:	81a3      	strheq	r3, [r4, #12]
 8008900:	bf18      	it	ne
 8008902:	81a3      	strhne	r3, [r4, #12]
 8008904:	bd10      	pop	{r4, pc}

08008906 <__sclose>:
 8008906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890a:	f000 b8a1 	b.w	8008a50 <_close_r>

0800890e <__swbuf_r>:
 800890e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008910:	460e      	mov	r6, r1
 8008912:	4614      	mov	r4, r2
 8008914:	4605      	mov	r5, r0
 8008916:	b118      	cbz	r0, 8008920 <__swbuf_r+0x12>
 8008918:	6a03      	ldr	r3, [r0, #32]
 800891a:	b90b      	cbnz	r3, 8008920 <__swbuf_r+0x12>
 800891c:	f7ff ff0e 	bl	800873c <__sinit>
 8008920:	69a3      	ldr	r3, [r4, #24]
 8008922:	60a3      	str	r3, [r4, #8]
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	071a      	lsls	r2, r3, #28
 8008928:	d501      	bpl.n	800892e <__swbuf_r+0x20>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	b943      	cbnz	r3, 8008940 <__swbuf_r+0x32>
 800892e:	4621      	mov	r1, r4
 8008930:	4628      	mov	r0, r5
 8008932:	f000 f82b 	bl	800898c <__swsetup_r>
 8008936:	b118      	cbz	r0, 8008940 <__swbuf_r+0x32>
 8008938:	f04f 37ff 	mov.w	r7, #4294967295
 800893c:	4638      	mov	r0, r7
 800893e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	6922      	ldr	r2, [r4, #16]
 8008944:	b2f6      	uxtb	r6, r6
 8008946:	1a98      	subs	r0, r3, r2
 8008948:	6963      	ldr	r3, [r4, #20]
 800894a:	4637      	mov	r7, r6
 800894c:	4283      	cmp	r3, r0
 800894e:	dc05      	bgt.n	800895c <__swbuf_r+0x4e>
 8008950:	4621      	mov	r1, r4
 8008952:	4628      	mov	r0, r5
 8008954:	f001 fdf2 	bl	800a53c <_fflush_r>
 8008958:	2800      	cmp	r0, #0
 800895a:	d1ed      	bne.n	8008938 <__swbuf_r+0x2a>
 800895c:	68a3      	ldr	r3, [r4, #8]
 800895e:	3b01      	subs	r3, #1
 8008960:	60a3      	str	r3, [r4, #8]
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	701e      	strb	r6, [r3, #0]
 800896a:	6962      	ldr	r2, [r4, #20]
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	429a      	cmp	r2, r3
 8008970:	d004      	beq.n	800897c <__swbuf_r+0x6e>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	07db      	lsls	r3, r3, #31
 8008976:	d5e1      	bpl.n	800893c <__swbuf_r+0x2e>
 8008978:	2e0a      	cmp	r6, #10
 800897a:	d1df      	bne.n	800893c <__swbuf_r+0x2e>
 800897c:	4621      	mov	r1, r4
 800897e:	4628      	mov	r0, r5
 8008980:	f001 fddc 	bl	800a53c <_fflush_r>
 8008984:	2800      	cmp	r0, #0
 8008986:	d0d9      	beq.n	800893c <__swbuf_r+0x2e>
 8008988:	e7d6      	b.n	8008938 <__swbuf_r+0x2a>
	...

0800898c <__swsetup_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4b29      	ldr	r3, [pc, #164]	@ (8008a34 <__swsetup_r+0xa8>)
 8008990:	4605      	mov	r5, r0
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	460c      	mov	r4, r1
 8008996:	b118      	cbz	r0, 80089a0 <__swsetup_r+0x14>
 8008998:	6a03      	ldr	r3, [r0, #32]
 800899a:	b90b      	cbnz	r3, 80089a0 <__swsetup_r+0x14>
 800899c:	f7ff fece 	bl	800873c <__sinit>
 80089a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a4:	0719      	lsls	r1, r3, #28
 80089a6:	d422      	bmi.n	80089ee <__swsetup_r+0x62>
 80089a8:	06da      	lsls	r2, r3, #27
 80089aa:	d407      	bmi.n	80089bc <__swsetup_r+0x30>
 80089ac:	2209      	movs	r2, #9
 80089ae:	602a      	str	r2, [r5, #0]
 80089b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089b4:	f04f 30ff 	mov.w	r0, #4294967295
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	e033      	b.n	8008a24 <__swsetup_r+0x98>
 80089bc:	0758      	lsls	r0, r3, #29
 80089be:	d512      	bpl.n	80089e6 <__swsetup_r+0x5a>
 80089c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089c2:	b141      	cbz	r1, 80089d6 <__swsetup_r+0x4a>
 80089c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089c8:	4299      	cmp	r1, r3
 80089ca:	d002      	beq.n	80089d2 <__swsetup_r+0x46>
 80089cc:	4628      	mov	r0, r5
 80089ce:	f000 ff77 	bl	80098c0 <_free_r>
 80089d2:	2300      	movs	r3, #0
 80089d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	2300      	movs	r3, #0
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f043 0308 	orr.w	r3, r3, #8
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	b94b      	cbnz	r3, 8008a06 <__swsetup_r+0x7a>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089fc:	d003      	beq.n	8008a06 <__swsetup_r+0x7a>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	f001 fde8 	bl	800a5d6 <__smakebuf_r>
 8008a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0a:	f013 0201 	ands.w	r2, r3, #1
 8008a0e:	d00a      	beq.n	8008a26 <__swsetup_r+0x9a>
 8008a10:	2200      	movs	r2, #0
 8008a12:	60a2      	str	r2, [r4, #8]
 8008a14:	6962      	ldr	r2, [r4, #20]
 8008a16:	4252      	negs	r2, r2
 8008a18:	61a2      	str	r2, [r4, #24]
 8008a1a:	6922      	ldr	r2, [r4, #16]
 8008a1c:	b942      	cbnz	r2, 8008a30 <__swsetup_r+0xa4>
 8008a1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a22:	d1c5      	bne.n	80089b0 <__swsetup_r+0x24>
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	0799      	lsls	r1, r3, #30
 8008a28:	bf58      	it	pl
 8008a2a:	6962      	ldrpl	r2, [r4, #20]
 8008a2c:	60a2      	str	r2, [r4, #8]
 8008a2e:	e7f4      	b.n	8008a1a <__swsetup_r+0x8e>
 8008a30:	2000      	movs	r0, #0
 8008a32:	e7f7      	b.n	8008a24 <__swsetup_r+0x98>
 8008a34:	2000001c 	.word	0x2000001c

08008a38 <memset>:
 8008a38:	4603      	mov	r3, r0
 8008a3a:	4402      	add	r2, r0
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d100      	bne.n	8008a42 <memset+0xa>
 8008a40:	4770      	bx	lr
 8008a42:	f803 1b01 	strb.w	r1, [r3], #1
 8008a46:	e7f9      	b.n	8008a3c <memset+0x4>

08008a48 <_localeconv_r>:
 8008a48:	4800      	ldr	r0, [pc, #0]	@ (8008a4c <_localeconv_r+0x4>)
 8008a4a:	4770      	bx	lr
 8008a4c:	2000015c 	.word	0x2000015c

08008a50 <_close_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	2300      	movs	r3, #0
 8008a54:	4d05      	ldr	r5, [pc, #20]	@ (8008a6c <_close_r+0x1c>)
 8008a56:	4604      	mov	r4, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	602b      	str	r3, [r5, #0]
 8008a5c:	f7f9 fc2f 	bl	80022be <_close>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_close_r+0x1a>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_close_r+0x1a>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	20001e3c 	.word	0x20001e3c

08008a70 <_reclaim_reent>:
 8008a70:	4b29      	ldr	r3, [pc, #164]	@ (8008b18 <_reclaim_reent+0xa8>)
 8008a72:	b570      	push	{r4, r5, r6, lr}
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4604      	mov	r4, r0
 8008a78:	4283      	cmp	r3, r0
 8008a7a:	d04b      	beq.n	8008b14 <_reclaim_reent+0xa4>
 8008a7c:	69c3      	ldr	r3, [r0, #28]
 8008a7e:	b1ab      	cbz	r3, 8008aac <_reclaim_reent+0x3c>
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	b16b      	cbz	r3, 8008aa0 <_reclaim_reent+0x30>
 8008a84:	2500      	movs	r5, #0
 8008a86:	69e3      	ldr	r3, [r4, #28]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	5959      	ldr	r1, [r3, r5]
 8008a8c:	2900      	cmp	r1, #0
 8008a8e:	d13b      	bne.n	8008b08 <_reclaim_reent+0x98>
 8008a90:	3504      	adds	r5, #4
 8008a92:	2d80      	cmp	r5, #128	@ 0x80
 8008a94:	d1f7      	bne.n	8008a86 <_reclaim_reent+0x16>
 8008a96:	69e3      	ldr	r3, [r4, #28]
 8008a98:	4620      	mov	r0, r4
 8008a9a:	68d9      	ldr	r1, [r3, #12]
 8008a9c:	f000 ff10 	bl	80098c0 <_free_r>
 8008aa0:	69e3      	ldr	r3, [r4, #28]
 8008aa2:	6819      	ldr	r1, [r3, #0]
 8008aa4:	b111      	cbz	r1, 8008aac <_reclaim_reent+0x3c>
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f000 ff0a 	bl	80098c0 <_free_r>
 8008aac:	6961      	ldr	r1, [r4, #20]
 8008aae:	b111      	cbz	r1, 8008ab6 <_reclaim_reent+0x46>
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 ff05 	bl	80098c0 <_free_r>
 8008ab6:	69e1      	ldr	r1, [r4, #28]
 8008ab8:	b111      	cbz	r1, 8008ac0 <_reclaim_reent+0x50>
 8008aba:	4620      	mov	r0, r4
 8008abc:	f000 ff00 	bl	80098c0 <_free_r>
 8008ac0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008ac2:	b111      	cbz	r1, 8008aca <_reclaim_reent+0x5a>
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fefb 	bl	80098c0 <_free_r>
 8008aca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008acc:	b111      	cbz	r1, 8008ad4 <_reclaim_reent+0x64>
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 fef6 	bl	80098c0 <_free_r>
 8008ad4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008ad6:	b111      	cbz	r1, 8008ade <_reclaim_reent+0x6e>
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fef1 	bl	80098c0 <_free_r>
 8008ade:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008ae0:	b111      	cbz	r1, 8008ae8 <_reclaim_reent+0x78>
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 feec 	bl	80098c0 <_free_r>
 8008ae8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008aea:	b111      	cbz	r1, 8008af2 <_reclaim_reent+0x82>
 8008aec:	4620      	mov	r0, r4
 8008aee:	f000 fee7 	bl	80098c0 <_free_r>
 8008af2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008af4:	b111      	cbz	r1, 8008afc <_reclaim_reent+0x8c>
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 fee2 	bl	80098c0 <_free_r>
 8008afc:	6a23      	ldr	r3, [r4, #32]
 8008afe:	b14b      	cbz	r3, 8008b14 <_reclaim_reent+0xa4>
 8008b00:	4620      	mov	r0, r4
 8008b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b06:	4718      	bx	r3
 8008b08:	680e      	ldr	r6, [r1, #0]
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 fed8 	bl	80098c0 <_free_r>
 8008b10:	4631      	mov	r1, r6
 8008b12:	e7bb      	b.n	8008a8c <_reclaim_reent+0x1c>
 8008b14:	bd70      	pop	{r4, r5, r6, pc}
 8008b16:	bf00      	nop
 8008b18:	2000001c 	.word	0x2000001c

08008b1c <_lseek_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	2200      	movs	r2, #0
 8008b26:	4d05      	ldr	r5, [pc, #20]	@ (8008b3c <_lseek_r+0x20>)
 8008b28:	602a      	str	r2, [r5, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f7f9 fbeb 	bl	8002306 <_lseek>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_lseek_r+0x1e>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_lseek_r+0x1e>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	20001e3c 	.word	0x20001e3c

08008b40 <_read_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4d05      	ldr	r5, [pc, #20]	@ (8008b60 <_read_r+0x20>)
 8008b4c:	602a      	str	r2, [r5, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f7f9 fb7c 	bl	800224c <_read>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_read_r+0x1e>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_read_r+0x1e>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	20001e3c 	.word	0x20001e3c

08008b64 <_write_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4d05      	ldr	r5, [pc, #20]	@ (8008b84 <_write_r+0x20>)
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	f7f9 fb87 	bl	8002286 <_write>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_write_r+0x1e>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_write_r+0x1e>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	20001e3c 	.word	0x20001e3c

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	@ (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	2000001c 	.word	0x2000001c

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	2600      	movs	r6, #0
 8008b98:	4d0c      	ldr	r5, [pc, #48]	@ (8008bcc <__libc_init_array+0x38>)
 8008b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8008bd0 <__libc_init_array+0x3c>)
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	10a4      	asrs	r4, r4, #2
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	f001 fe36 	bl	800a814 <_init>
 8008ba8:	2600      	movs	r6, #0
 8008baa:	4d0a      	ldr	r5, [pc, #40]	@ (8008bd4 <__libc_init_array+0x40>)
 8008bac:	4c0a      	ldr	r4, [pc, #40]	@ (8008bd8 <__libc_init_array+0x44>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	0800ac98 	.word	0x0800ac98
 8008bd0:	0800ac98 	.word	0x0800ac98
 8008bd4:	0800ac98 	.word	0x0800ac98
 8008bd8:	0800ac9c 	.word	0x0800ac9c

08008bdc <__retarget_lock_init_recursive>:
 8008bdc:	4770      	bx	lr

08008bde <__retarget_lock_acquire_recursive>:
 8008bde:	4770      	bx	lr

08008be0 <__retarget_lock_release_recursive>:
 8008be0:	4770      	bx	lr

08008be2 <memchr>:
 8008be2:	4603      	mov	r3, r0
 8008be4:	b510      	push	{r4, lr}
 8008be6:	b2c9      	uxtb	r1, r1
 8008be8:	4402      	add	r2, r0
 8008bea:	4293      	cmp	r3, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	d101      	bne.n	8008bf4 <memchr+0x12>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	e003      	b.n	8008bfc <memchr+0x1a>
 8008bf4:	7804      	ldrb	r4, [r0, #0]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	428c      	cmp	r4, r1
 8008bfa:	d1f6      	bne.n	8008bea <memchr+0x8>
 8008bfc:	bd10      	pop	{r4, pc}

08008bfe <memcpy>:
 8008bfe:	440a      	add	r2, r1
 8008c00:	4291      	cmp	r1, r2
 8008c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c06:	d100      	bne.n	8008c0a <memcpy+0xc>
 8008c08:	4770      	bx	lr
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c10:	4291      	cmp	r1, r2
 8008c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c16:	d1f9      	bne.n	8008c0c <memcpy+0xe>
 8008c18:	bd10      	pop	{r4, pc}

08008c1a <quorem>:
 8008c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1e:	6903      	ldr	r3, [r0, #16]
 8008c20:	690c      	ldr	r4, [r1, #16]
 8008c22:	4607      	mov	r7, r0
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	db7e      	blt.n	8008d26 <quorem+0x10c>
 8008c28:	3c01      	subs	r4, #1
 8008c2a:	00a3      	lsls	r3, r4, #2
 8008c2c:	f100 0514 	add.w	r5, r0, #20
 8008c30:	f101 0814 	add.w	r8, r1, #20
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c44:	3301      	adds	r3, #1
 8008c46:	429a      	cmp	r2, r3
 8008c48:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c50:	d32e      	bcc.n	8008cb0 <quorem+0x96>
 8008c52:	f04f 0a00 	mov.w	sl, #0
 8008c56:	46c4      	mov	ip, r8
 8008c58:	46ae      	mov	lr, r5
 8008c5a:	46d3      	mov	fp, sl
 8008c5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c60:	b298      	uxth	r0, r3
 8008c62:	fb06 a000 	mla	r0, r6, r0, sl
 8008c66:	0c1b      	lsrs	r3, r3, #16
 8008c68:	0c02      	lsrs	r2, r0, #16
 8008c6a:	fb06 2303 	mla	r3, r6, r3, r2
 8008c6e:	f8de 2000 	ldr.w	r2, [lr]
 8008c72:	b280      	uxth	r0, r0
 8008c74:	b292      	uxth	r2, r2
 8008c76:	1a12      	subs	r2, r2, r0
 8008c78:	445a      	add	r2, fp
 8008c7a:	f8de 0000 	ldr.w	r0, [lr]
 8008c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c8c:	b292      	uxth	r2, r2
 8008c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c92:	45e1      	cmp	r9, ip
 8008c94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c98:	f84e 2b04 	str.w	r2, [lr], #4
 8008c9c:	d2de      	bcs.n	8008c5c <quorem+0x42>
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	58eb      	ldr	r3, [r5, r3]
 8008ca2:	b92b      	cbnz	r3, 8008cb0 <quorem+0x96>
 8008ca4:	9b01      	ldr	r3, [sp, #4]
 8008ca6:	3b04      	subs	r3, #4
 8008ca8:	429d      	cmp	r5, r3
 8008caa:	461a      	mov	r2, r3
 8008cac:	d32f      	bcc.n	8008d0e <quorem+0xf4>
 8008cae:	613c      	str	r4, [r7, #16]
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f001 f97b 	bl	8009fac <__mcmp>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	db25      	blt.n	8008d06 <quorem+0xec>
 8008cba:	4629      	mov	r1, r5
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cc2:	f8d1 c000 	ldr.w	ip, [r1]
 8008cc6:	fa1f fe82 	uxth.w	lr, r2
 8008cca:	fa1f f38c 	uxth.w	r3, ip
 8008cce:	eba3 030e 	sub.w	r3, r3, lr
 8008cd2:	4403      	add	r3, r0
 8008cd4:	0c12      	lsrs	r2, r2, #16
 8008cd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008cda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ce4:	45c1      	cmp	r9, r8
 8008ce6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cea:	f841 3b04 	str.w	r3, [r1], #4
 8008cee:	d2e6      	bcs.n	8008cbe <quorem+0xa4>
 8008cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cf8:	b922      	cbnz	r2, 8008d04 <quorem+0xea>
 8008cfa:	3b04      	subs	r3, #4
 8008cfc:	429d      	cmp	r5, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	d30b      	bcc.n	8008d1a <quorem+0x100>
 8008d02:	613c      	str	r4, [r7, #16]
 8008d04:	3601      	adds	r6, #1
 8008d06:	4630      	mov	r0, r6
 8008d08:	b003      	add	sp, #12
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d0e:	6812      	ldr	r2, [r2, #0]
 8008d10:	3b04      	subs	r3, #4
 8008d12:	2a00      	cmp	r2, #0
 8008d14:	d1cb      	bne.n	8008cae <quorem+0x94>
 8008d16:	3c01      	subs	r4, #1
 8008d18:	e7c6      	b.n	8008ca8 <quorem+0x8e>
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	3b04      	subs	r3, #4
 8008d1e:	2a00      	cmp	r2, #0
 8008d20:	d1ef      	bne.n	8008d02 <quorem+0xe8>
 8008d22:	3c01      	subs	r4, #1
 8008d24:	e7ea      	b.n	8008cfc <quorem+0xe2>
 8008d26:	2000      	movs	r0, #0
 8008d28:	e7ee      	b.n	8008d08 <quorem+0xee>
 8008d2a:	0000      	movs	r0, r0
 8008d2c:	0000      	movs	r0, r0
	...

08008d30 <_dtoa_r>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	4614      	mov	r4, r2
 8008d36:	461d      	mov	r5, r3
 8008d38:	69c7      	ldr	r7, [r0, #28]
 8008d3a:	b097      	sub	sp, #92	@ 0x5c
 8008d3c:	4683      	mov	fp, r0
 8008d3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008d42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008d44:	b97f      	cbnz	r7, 8008d66 <_dtoa_r+0x36>
 8008d46:	2010      	movs	r0, #16
 8008d48:	f000 fe02 	bl	8009950 <malloc>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d52:	b920      	cbnz	r0, 8008d5e <_dtoa_r+0x2e>
 8008d54:	21ef      	movs	r1, #239	@ 0xef
 8008d56:	4ba8      	ldr	r3, [pc, #672]	@ (8008ff8 <_dtoa_r+0x2c8>)
 8008d58:	48a8      	ldr	r0, [pc, #672]	@ (8008ffc <_dtoa_r+0x2cc>)
 8008d5a:	f001 fcab 	bl	800a6b4 <__assert_func>
 8008d5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d62:	6007      	str	r7, [r0, #0]
 8008d64:	60c7      	str	r7, [r0, #12]
 8008d66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d6a:	6819      	ldr	r1, [r3, #0]
 8008d6c:	b159      	cbz	r1, 8008d86 <_dtoa_r+0x56>
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	2301      	movs	r3, #1
 8008d72:	4093      	lsls	r3, r2
 8008d74:	604a      	str	r2, [r1, #4]
 8008d76:	608b      	str	r3, [r1, #8]
 8008d78:	4658      	mov	r0, fp
 8008d7a:	f000 fedf 	bl	8009b3c <_Bfree>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	1e2b      	subs	r3, r5, #0
 8008d88:	bfaf      	iteee	ge
 8008d8a:	2300      	movge	r3, #0
 8008d8c:	2201      	movlt	r2, #1
 8008d8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d92:	9303      	strlt	r3, [sp, #12]
 8008d94:	bfa8      	it	ge
 8008d96:	6033      	strge	r3, [r6, #0]
 8008d98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d9c:	4b98      	ldr	r3, [pc, #608]	@ (8009000 <_dtoa_r+0x2d0>)
 8008d9e:	bfb8      	it	lt
 8008da0:	6032      	strlt	r2, [r6, #0]
 8008da2:	ea33 0308 	bics.w	r3, r3, r8
 8008da6:	d112      	bne.n	8008dce <_dtoa_r+0x9e>
 8008da8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008db4:	4323      	orrs	r3, r4
 8008db6:	f000 8550 	beq.w	800985a <_dtoa_r+0xb2a>
 8008dba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008dbc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009004 <_dtoa_r+0x2d4>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 8552 	beq.w	800986a <_dtoa_r+0xb3a>
 8008dc6:	f10a 0303 	add.w	r3, sl, #3
 8008dca:	f000 bd4c 	b.w	8009866 <_dtoa_r+0xb36>
 8008dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f7f7 fde3 	bl	80009a8 <__aeabi_dcmpeq>
 8008de2:	4607      	mov	r7, r0
 8008de4:	b158      	cbz	r0, 8008dfe <_dtoa_r+0xce>
 8008de6:	2301      	movs	r3, #1
 8008de8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008dee:	b113      	cbz	r3, 8008df6 <_dtoa_r+0xc6>
 8008df0:	4b85      	ldr	r3, [pc, #532]	@ (8009008 <_dtoa_r+0x2d8>)
 8008df2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800900c <_dtoa_r+0x2dc>
 8008dfa:	f000 bd36 	b.w	800986a <_dtoa_r+0xb3a>
 8008dfe:	ab14      	add	r3, sp, #80	@ 0x50
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	ab15      	add	r3, sp, #84	@ 0x54
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	4658      	mov	r0, fp
 8008e08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e0c:	f001 f97e 	bl	800a10c <__d2b>
 8008e10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008e14:	4681      	mov	r9, r0
 8008e16:	2e00      	cmp	r6, #0
 8008e18:	d077      	beq.n	8008f0a <_dtoa_r+0x1da>
 8008e1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e30:	9712      	str	r7, [sp, #72]	@ 0x48
 8008e32:	4619      	mov	r1, r3
 8008e34:	2200      	movs	r2, #0
 8008e36:	4b76      	ldr	r3, [pc, #472]	@ (8009010 <_dtoa_r+0x2e0>)
 8008e38:	f7f7 f996 	bl	8000168 <__aeabi_dsub>
 8008e3c:	a368      	add	r3, pc, #416	@ (adr r3, 8008fe0 <_dtoa_r+0x2b0>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f7f7 fb49 	bl	80004d8 <__aeabi_dmul>
 8008e46:	a368      	add	r3, pc, #416	@ (adr r3, 8008fe8 <_dtoa_r+0x2b8>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 f98e 	bl	800016c <__adddf3>
 8008e50:	4604      	mov	r4, r0
 8008e52:	4630      	mov	r0, r6
 8008e54:	460d      	mov	r5, r1
 8008e56:	f7f7 fad5 	bl	8000404 <__aeabi_i2d>
 8008e5a:	a365      	add	r3, pc, #404	@ (adr r3, 8008ff0 <_dtoa_r+0x2c0>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fb3a 	bl	80004d8 <__aeabi_dmul>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	f7f7 f97e 	bl	800016c <__adddf3>
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	f7f7 fde0 	bl	8000a38 <__aeabi_d2iz>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4620      	mov	r0, r4
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7f7 fd9b 	bl	80009bc <__aeabi_dcmplt>
 8008e86:	b140      	cbz	r0, 8008e9a <_dtoa_r+0x16a>
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7f7 fabb 	bl	8000404 <__aeabi_i2d>
 8008e8e:	4622      	mov	r2, r4
 8008e90:	462b      	mov	r3, r5
 8008e92:	f7f7 fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8008e96:	b900      	cbnz	r0, 8008e9a <_dtoa_r+0x16a>
 8008e98:	3f01      	subs	r7, #1
 8008e9a:	2f16      	cmp	r7, #22
 8008e9c:	d853      	bhi.n	8008f46 <_dtoa_r+0x216>
 8008e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8009014 <_dtoa_r+0x2e4>)
 8008ea4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 fd86 	bl	80009bc <__aeabi_dcmplt>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d04a      	beq.n	8008f4a <_dtoa_r+0x21a>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	3f01      	subs	r7, #1
 8008eb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008eba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ebc:	1b9b      	subs	r3, r3, r6
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	bf46      	itte	mi
 8008ec2:	f1c3 0801 	rsbmi	r8, r3, #1
 8008ec6:	2300      	movmi	r3, #0
 8008ec8:	f04f 0800 	movpl.w	r8, #0
 8008ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ece:	bf48      	it	mi
 8008ed0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008ed2:	2f00      	cmp	r7, #0
 8008ed4:	db3b      	blt.n	8008f4e <_dtoa_r+0x21e>
 8008ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed8:	970e      	str	r7, [sp, #56]	@ 0x38
 8008eda:	443b      	add	r3, r7
 8008edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ede:	2300      	movs	r3, #0
 8008ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ee2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ee4:	2b09      	cmp	r3, #9
 8008ee6:	d866      	bhi.n	8008fb6 <_dtoa_r+0x286>
 8008ee8:	2b05      	cmp	r3, #5
 8008eea:	bfc4      	itt	gt
 8008eec:	3b04      	subgt	r3, #4
 8008eee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008ef0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ef2:	bfc8      	it	gt
 8008ef4:	2400      	movgt	r4, #0
 8008ef6:	f1a3 0302 	sub.w	r3, r3, #2
 8008efa:	bfd8      	it	le
 8008efc:	2401      	movle	r4, #1
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d864      	bhi.n	8008fcc <_dtoa_r+0x29c>
 8008f02:	e8df f003 	tbb	[pc, r3]
 8008f06:	382b      	.short	0x382b
 8008f08:	5636      	.short	0x5636
 8008f0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008f0e:	441e      	add	r6, r3
 8008f10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	bfc1      	itttt	gt
 8008f18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008f20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f28:	bfd6      	itet	le
 8008f2a:	f1c3 0320 	rsble	r3, r3, #32
 8008f2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008f32:	fa04 f003 	lslle.w	r0, r4, r3
 8008f36:	f7f7 fa55 	bl	80003e4 <__aeabi_ui2d>
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f40:	3e01      	subs	r6, #1
 8008f42:	9212      	str	r2, [sp, #72]	@ 0x48
 8008f44:	e775      	b.n	8008e32 <_dtoa_r+0x102>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e7b6      	b.n	8008eb8 <_dtoa_r+0x188>
 8008f4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008f4c:	e7b5      	b.n	8008eba <_dtoa_r+0x18a>
 8008f4e:	427b      	negs	r3, r7
 8008f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f52:	2300      	movs	r3, #0
 8008f54:	eba8 0807 	sub.w	r8, r8, r7
 8008f58:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f5a:	e7c2      	b.n	8008ee2 <_dtoa_r+0x1b2>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dc35      	bgt.n	8008fd2 <_dtoa_r+0x2a2>
 8008f66:	2301      	movs	r3, #1
 8008f68:	461a      	mov	r2, r3
 8008f6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008f6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008f70:	e00b      	b.n	8008f8a <_dtoa_r+0x25a>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7f3      	b.n	8008f5e <_dtoa_r+0x22e>
 8008f76:	2300      	movs	r3, #0
 8008f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008f7c:	18fb      	adds	r3, r7, r3
 8008f7e:	9308      	str	r3, [sp, #32]
 8008f80:	3301      	adds	r3, #1
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	9307      	str	r3, [sp, #28]
 8008f86:	bfb8      	it	lt
 8008f88:	2301      	movlt	r3, #1
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	2204      	movs	r2, #4
 8008f8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008f92:	f102 0514 	add.w	r5, r2, #20
 8008f96:	429d      	cmp	r5, r3
 8008f98:	d91f      	bls.n	8008fda <_dtoa_r+0x2aa>
 8008f9a:	6041      	str	r1, [r0, #4]
 8008f9c:	4658      	mov	r0, fp
 8008f9e:	f000 fd8d 	bl	8009abc <_Balloc>
 8008fa2:	4682      	mov	sl, r0
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d139      	bne.n	800901c <_dtoa_r+0x2ec>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fae:	4b1a      	ldr	r3, [pc, #104]	@ (8009018 <_dtoa_r+0x2e8>)
 8008fb0:	e6d2      	b.n	8008d58 <_dtoa_r+0x28>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e7e0      	b.n	8008f78 <_dtoa_r+0x248>
 8008fb6:	2401      	movs	r4, #1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8008fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008fc8:	2312      	movs	r3, #18
 8008fca:	e7d0      	b.n	8008f6e <_dtoa_r+0x23e>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fd0:	e7f5      	b.n	8008fbe <_dtoa_r+0x28e>
 8008fd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008fd8:	e7d7      	b.n	8008f8a <_dtoa_r+0x25a>
 8008fda:	3101      	adds	r1, #1
 8008fdc:	0052      	lsls	r2, r2, #1
 8008fde:	e7d8      	b.n	8008f92 <_dtoa_r+0x262>
 8008fe0:	636f4361 	.word	0x636f4361
 8008fe4:	3fd287a7 	.word	0x3fd287a7
 8008fe8:	8b60c8b3 	.word	0x8b60c8b3
 8008fec:	3fc68a28 	.word	0x3fc68a28
 8008ff0:	509f79fb 	.word	0x509f79fb
 8008ff4:	3fd34413 	.word	0x3fd34413
 8008ff8:	0800a963 	.word	0x0800a963
 8008ffc:	0800a97a 	.word	0x0800a97a
 8009000:	7ff00000 	.word	0x7ff00000
 8009004:	0800a95f 	.word	0x0800a95f
 8009008:	0800a933 	.word	0x0800a933
 800900c:	0800a932 	.word	0x0800a932
 8009010:	3ff80000 	.word	0x3ff80000
 8009014:	0800aa70 	.word	0x0800aa70
 8009018:	0800a9d2 	.word	0x0800a9d2
 800901c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009020:	6018      	str	r0, [r3, #0]
 8009022:	9b07      	ldr	r3, [sp, #28]
 8009024:	2b0e      	cmp	r3, #14
 8009026:	f200 80a4 	bhi.w	8009172 <_dtoa_r+0x442>
 800902a:	2c00      	cmp	r4, #0
 800902c:	f000 80a1 	beq.w	8009172 <_dtoa_r+0x442>
 8009030:	2f00      	cmp	r7, #0
 8009032:	dd33      	ble.n	800909c <_dtoa_r+0x36c>
 8009034:	4b86      	ldr	r3, [pc, #536]	@ (8009250 <_dtoa_r+0x520>)
 8009036:	f007 020f 	and.w	r2, r7, #15
 800903a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800903e:	05f8      	lsls	r0, r7, #23
 8009040:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009044:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009048:	ea4f 1427 	mov.w	r4, r7, asr #4
 800904c:	d516      	bpl.n	800907c <_dtoa_r+0x34c>
 800904e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009052:	4b80      	ldr	r3, [pc, #512]	@ (8009254 <_dtoa_r+0x524>)
 8009054:	2603      	movs	r6, #3
 8009056:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800905a:	f7f7 fb67 	bl	800072c <__aeabi_ddiv>
 800905e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009062:	f004 040f 	and.w	r4, r4, #15
 8009066:	4d7b      	ldr	r5, [pc, #492]	@ (8009254 <_dtoa_r+0x524>)
 8009068:	b954      	cbnz	r4, 8009080 <_dtoa_r+0x350>
 800906a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800906e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009072:	f7f7 fb5b 	bl	800072c <__aeabi_ddiv>
 8009076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800907a:	e028      	b.n	80090ce <_dtoa_r+0x39e>
 800907c:	2602      	movs	r6, #2
 800907e:	e7f2      	b.n	8009066 <_dtoa_r+0x336>
 8009080:	07e1      	lsls	r1, r4, #31
 8009082:	d508      	bpl.n	8009096 <_dtoa_r+0x366>
 8009084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009088:	e9d5 2300 	ldrd	r2, r3, [r5]
 800908c:	f7f7 fa24 	bl	80004d8 <__aeabi_dmul>
 8009090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009094:	3601      	adds	r6, #1
 8009096:	1064      	asrs	r4, r4, #1
 8009098:	3508      	adds	r5, #8
 800909a:	e7e5      	b.n	8009068 <_dtoa_r+0x338>
 800909c:	f000 80d2 	beq.w	8009244 <_dtoa_r+0x514>
 80090a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090a4:	427c      	negs	r4, r7
 80090a6:	4b6a      	ldr	r3, [pc, #424]	@ (8009250 <_dtoa_r+0x520>)
 80090a8:	f004 020f 	and.w	r2, r4, #15
 80090ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7f7 fa10 	bl	80004d8 <__aeabi_dmul>
 80090b8:	2602      	movs	r6, #2
 80090ba:	2300      	movs	r3, #0
 80090bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090c0:	4d64      	ldr	r5, [pc, #400]	@ (8009254 <_dtoa_r+0x524>)
 80090c2:	1124      	asrs	r4, r4, #4
 80090c4:	2c00      	cmp	r4, #0
 80090c6:	f040 80b2 	bne.w	800922e <_dtoa_r+0x4fe>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1d3      	bne.n	8009076 <_dtoa_r+0x346>
 80090ce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80090d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 80b7 	beq.w	8009248 <_dtoa_r+0x518>
 80090da:	2200      	movs	r2, #0
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	4b5d      	ldr	r3, [pc, #372]	@ (8009258 <_dtoa_r+0x528>)
 80090e2:	f7f7 fc6b 	bl	80009bc <__aeabi_dcmplt>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f000 80ae 	beq.w	8009248 <_dtoa_r+0x518>
 80090ec:	9b07      	ldr	r3, [sp, #28]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 80aa 	beq.w	8009248 <_dtoa_r+0x518>
 80090f4:	9b08      	ldr	r3, [sp, #32]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd37      	ble.n	800916a <_dtoa_r+0x43a>
 80090fa:	1e7b      	subs	r3, r7, #1
 80090fc:	4620      	mov	r0, r4
 80090fe:	9304      	str	r3, [sp, #16]
 8009100:	2200      	movs	r2, #0
 8009102:	4629      	mov	r1, r5
 8009104:	4b55      	ldr	r3, [pc, #340]	@ (800925c <_dtoa_r+0x52c>)
 8009106:	f7f7 f9e7 	bl	80004d8 <__aeabi_dmul>
 800910a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800910e:	9c08      	ldr	r4, [sp, #32]
 8009110:	3601      	adds	r6, #1
 8009112:	4630      	mov	r0, r6
 8009114:	f7f7 f976 	bl	8000404 <__aeabi_i2d>
 8009118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800911c:	f7f7 f9dc 	bl	80004d8 <__aeabi_dmul>
 8009120:	2200      	movs	r2, #0
 8009122:	4b4f      	ldr	r3, [pc, #316]	@ (8009260 <_dtoa_r+0x530>)
 8009124:	f7f7 f822 	bl	800016c <__adddf3>
 8009128:	4605      	mov	r5, r0
 800912a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800912e:	2c00      	cmp	r4, #0
 8009130:	f040 809a 	bne.w	8009268 <_dtoa_r+0x538>
 8009134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009138:	2200      	movs	r2, #0
 800913a:	4b4a      	ldr	r3, [pc, #296]	@ (8009264 <_dtoa_r+0x534>)
 800913c:	f7f7 f814 	bl	8000168 <__aeabi_dsub>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009148:	462a      	mov	r2, r5
 800914a:	4633      	mov	r3, r6
 800914c:	f7f7 fc54 	bl	80009f8 <__aeabi_dcmpgt>
 8009150:	2800      	cmp	r0, #0
 8009152:	f040 828e 	bne.w	8009672 <_dtoa_r+0x942>
 8009156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800915a:	462a      	mov	r2, r5
 800915c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009160:	f7f7 fc2c 	bl	80009bc <__aeabi_dcmplt>
 8009164:	2800      	cmp	r0, #0
 8009166:	f040 8127 	bne.w	80093b8 <_dtoa_r+0x688>
 800916a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800916e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009172:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009174:	2b00      	cmp	r3, #0
 8009176:	f2c0 8163 	blt.w	8009440 <_dtoa_r+0x710>
 800917a:	2f0e      	cmp	r7, #14
 800917c:	f300 8160 	bgt.w	8009440 <_dtoa_r+0x710>
 8009180:	4b33      	ldr	r3, [pc, #204]	@ (8009250 <_dtoa_r+0x520>)
 8009182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009186:	e9d3 3400 	ldrd	r3, r4, [r3]
 800918a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800918e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009190:	2b00      	cmp	r3, #0
 8009192:	da03      	bge.n	800919c <_dtoa_r+0x46c>
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	2b00      	cmp	r3, #0
 8009198:	f340 8100 	ble.w	800939c <_dtoa_r+0x66c>
 800919c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091a0:	4656      	mov	r6, sl
 80091a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091a6:	4620      	mov	r0, r4
 80091a8:	4629      	mov	r1, r5
 80091aa:	f7f7 fabf 	bl	800072c <__aeabi_ddiv>
 80091ae:	f7f7 fc43 	bl	8000a38 <__aeabi_d2iz>
 80091b2:	4680      	mov	r8, r0
 80091b4:	f7f7 f926 	bl	8000404 <__aeabi_i2d>
 80091b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091bc:	f7f7 f98c 	bl	80004d8 <__aeabi_dmul>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4620      	mov	r0, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	f7f6 ffce 	bl	8000168 <__aeabi_dsub>
 80091cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80091d0:	9d07      	ldr	r5, [sp, #28]
 80091d2:	f806 4b01 	strb.w	r4, [r6], #1
 80091d6:	eba6 040a 	sub.w	r4, r6, sl
 80091da:	42a5      	cmp	r5, r4
 80091dc:	4602      	mov	r2, r0
 80091de:	460b      	mov	r3, r1
 80091e0:	f040 8116 	bne.w	8009410 <_dtoa_r+0x6e0>
 80091e4:	f7f6 ffc2 	bl	800016c <__adddf3>
 80091e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	f7f7 fc02 	bl	80009f8 <__aeabi_dcmpgt>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	f040 80f8 	bne.w	80093ea <_dtoa_r+0x6ba>
 80091fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091fe:	4620      	mov	r0, r4
 8009200:	4629      	mov	r1, r5
 8009202:	f7f7 fbd1 	bl	80009a8 <__aeabi_dcmpeq>
 8009206:	b118      	cbz	r0, 8009210 <_dtoa_r+0x4e0>
 8009208:	f018 0f01 	tst.w	r8, #1
 800920c:	f040 80ed 	bne.w	80093ea <_dtoa_r+0x6ba>
 8009210:	4649      	mov	r1, r9
 8009212:	4658      	mov	r0, fp
 8009214:	f000 fc92 	bl	8009b3c <_Bfree>
 8009218:	2300      	movs	r3, #0
 800921a:	7033      	strb	r3, [r6, #0]
 800921c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800921e:	3701      	adds	r7, #1
 8009220:	601f      	str	r7, [r3, #0]
 8009222:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 8320 	beq.w	800986a <_dtoa_r+0xb3a>
 800922a:	601e      	str	r6, [r3, #0]
 800922c:	e31d      	b.n	800986a <_dtoa_r+0xb3a>
 800922e:	07e2      	lsls	r2, r4, #31
 8009230:	d505      	bpl.n	800923e <_dtoa_r+0x50e>
 8009232:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009236:	f7f7 f94f 	bl	80004d8 <__aeabi_dmul>
 800923a:	2301      	movs	r3, #1
 800923c:	3601      	adds	r6, #1
 800923e:	1064      	asrs	r4, r4, #1
 8009240:	3508      	adds	r5, #8
 8009242:	e73f      	b.n	80090c4 <_dtoa_r+0x394>
 8009244:	2602      	movs	r6, #2
 8009246:	e742      	b.n	80090ce <_dtoa_r+0x39e>
 8009248:	9c07      	ldr	r4, [sp, #28]
 800924a:	9704      	str	r7, [sp, #16]
 800924c:	e761      	b.n	8009112 <_dtoa_r+0x3e2>
 800924e:	bf00      	nop
 8009250:	0800aa70 	.word	0x0800aa70
 8009254:	0800aa48 	.word	0x0800aa48
 8009258:	3ff00000 	.word	0x3ff00000
 800925c:	40240000 	.word	0x40240000
 8009260:	401c0000 	.word	0x401c0000
 8009264:	40140000 	.word	0x40140000
 8009268:	4b70      	ldr	r3, [pc, #448]	@ (800942c <_dtoa_r+0x6fc>)
 800926a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800926c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009274:	4454      	add	r4, sl
 8009276:	2900      	cmp	r1, #0
 8009278:	d045      	beq.n	8009306 <_dtoa_r+0x5d6>
 800927a:	2000      	movs	r0, #0
 800927c:	496c      	ldr	r1, [pc, #432]	@ (8009430 <_dtoa_r+0x700>)
 800927e:	f7f7 fa55 	bl	800072c <__aeabi_ddiv>
 8009282:	4633      	mov	r3, r6
 8009284:	462a      	mov	r2, r5
 8009286:	f7f6 ff6f 	bl	8000168 <__aeabi_dsub>
 800928a:	4656      	mov	r6, sl
 800928c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009294:	f7f7 fbd0 	bl	8000a38 <__aeabi_d2iz>
 8009298:	4605      	mov	r5, r0
 800929a:	f7f7 f8b3 	bl	8000404 <__aeabi_i2d>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a6:	f7f6 ff5f 	bl	8000168 <__aeabi_dsub>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	3530      	adds	r5, #48	@ 0x30
 80092b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092b8:	f806 5b01 	strb.w	r5, [r6], #1
 80092bc:	f7f7 fb7e 	bl	80009bc <__aeabi_dcmplt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d163      	bne.n	800938c <_dtoa_r+0x65c>
 80092c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092c8:	2000      	movs	r0, #0
 80092ca:	495a      	ldr	r1, [pc, #360]	@ (8009434 <_dtoa_r+0x704>)
 80092cc:	f7f6 ff4c 	bl	8000168 <__aeabi_dsub>
 80092d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092d4:	f7f7 fb72 	bl	80009bc <__aeabi_dcmplt>
 80092d8:	2800      	cmp	r0, #0
 80092da:	f040 8087 	bne.w	80093ec <_dtoa_r+0x6bc>
 80092de:	42a6      	cmp	r6, r4
 80092e0:	f43f af43 	beq.w	800916a <_dtoa_r+0x43a>
 80092e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80092e8:	2200      	movs	r2, #0
 80092ea:	4b53      	ldr	r3, [pc, #332]	@ (8009438 <_dtoa_r+0x708>)
 80092ec:	f7f7 f8f4 	bl	80004d8 <__aeabi_dmul>
 80092f0:	2200      	movs	r2, #0
 80092f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092fa:	4b4f      	ldr	r3, [pc, #316]	@ (8009438 <_dtoa_r+0x708>)
 80092fc:	f7f7 f8ec 	bl	80004d8 <__aeabi_dmul>
 8009300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009304:	e7c4      	b.n	8009290 <_dtoa_r+0x560>
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	f7f7 f8e5 	bl	80004d8 <__aeabi_dmul>
 800930e:	4656      	mov	r6, sl
 8009310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009314:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800931a:	f7f7 fb8d 	bl	8000a38 <__aeabi_d2iz>
 800931e:	4605      	mov	r5, r0
 8009320:	f7f7 f870 	bl	8000404 <__aeabi_i2d>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800932c:	f7f6 ff1c 	bl	8000168 <__aeabi_dsub>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	3530      	adds	r5, #48	@ 0x30
 8009336:	f806 5b01 	strb.w	r5, [r6], #1
 800933a:	42a6      	cmp	r6, r4
 800933c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	d124      	bne.n	8009390 <_dtoa_r+0x660>
 8009346:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800934a:	4b39      	ldr	r3, [pc, #228]	@ (8009430 <_dtoa_r+0x700>)
 800934c:	f7f6 ff0e 	bl	800016c <__adddf3>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009358:	f7f7 fb4e 	bl	80009f8 <__aeabi_dcmpgt>
 800935c:	2800      	cmp	r0, #0
 800935e:	d145      	bne.n	80093ec <_dtoa_r+0x6bc>
 8009360:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009364:	2000      	movs	r0, #0
 8009366:	4932      	ldr	r1, [pc, #200]	@ (8009430 <_dtoa_r+0x700>)
 8009368:	f7f6 fefe 	bl	8000168 <__aeabi_dsub>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009374:	f7f7 fb22 	bl	80009bc <__aeabi_dcmplt>
 8009378:	2800      	cmp	r0, #0
 800937a:	f43f aef6 	beq.w	800916a <_dtoa_r+0x43a>
 800937e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009380:	1e73      	subs	r3, r6, #1
 8009382:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009384:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009388:	2b30      	cmp	r3, #48	@ 0x30
 800938a:	d0f8      	beq.n	800937e <_dtoa_r+0x64e>
 800938c:	9f04      	ldr	r7, [sp, #16]
 800938e:	e73f      	b.n	8009210 <_dtoa_r+0x4e0>
 8009390:	4b29      	ldr	r3, [pc, #164]	@ (8009438 <_dtoa_r+0x708>)
 8009392:	f7f7 f8a1 	bl	80004d8 <__aeabi_dmul>
 8009396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800939a:	e7bc      	b.n	8009316 <_dtoa_r+0x5e6>
 800939c:	d10c      	bne.n	80093b8 <_dtoa_r+0x688>
 800939e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b25      	ldr	r3, [pc, #148]	@ (800943c <_dtoa_r+0x70c>)
 80093a6:	f7f7 f897 	bl	80004d8 <__aeabi_dmul>
 80093aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093ae:	f7f7 fb19 	bl	80009e4 <__aeabi_dcmpge>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f000 815b 	beq.w	800966e <_dtoa_r+0x93e>
 80093b8:	2400      	movs	r4, #0
 80093ba:	4625      	mov	r5, r4
 80093bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093be:	4656      	mov	r6, sl
 80093c0:	43db      	mvns	r3, r3
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	2700      	movs	r7, #0
 80093c6:	4621      	mov	r1, r4
 80093c8:	4658      	mov	r0, fp
 80093ca:	f000 fbb7 	bl	8009b3c <_Bfree>
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	d0dc      	beq.n	800938c <_dtoa_r+0x65c>
 80093d2:	b12f      	cbz	r7, 80093e0 <_dtoa_r+0x6b0>
 80093d4:	42af      	cmp	r7, r5
 80093d6:	d003      	beq.n	80093e0 <_dtoa_r+0x6b0>
 80093d8:	4639      	mov	r1, r7
 80093da:	4658      	mov	r0, fp
 80093dc:	f000 fbae 	bl	8009b3c <_Bfree>
 80093e0:	4629      	mov	r1, r5
 80093e2:	4658      	mov	r0, fp
 80093e4:	f000 fbaa 	bl	8009b3c <_Bfree>
 80093e8:	e7d0      	b.n	800938c <_dtoa_r+0x65c>
 80093ea:	9704      	str	r7, [sp, #16]
 80093ec:	4633      	mov	r3, r6
 80093ee:	461e      	mov	r6, r3
 80093f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093f4:	2a39      	cmp	r2, #57	@ 0x39
 80093f6:	d107      	bne.n	8009408 <_dtoa_r+0x6d8>
 80093f8:	459a      	cmp	sl, r3
 80093fa:	d1f8      	bne.n	80093ee <_dtoa_r+0x6be>
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	3201      	adds	r2, #1
 8009400:	9204      	str	r2, [sp, #16]
 8009402:	2230      	movs	r2, #48	@ 0x30
 8009404:	f88a 2000 	strb.w	r2, [sl]
 8009408:	781a      	ldrb	r2, [r3, #0]
 800940a:	3201      	adds	r2, #1
 800940c:	701a      	strb	r2, [r3, #0]
 800940e:	e7bd      	b.n	800938c <_dtoa_r+0x65c>
 8009410:	2200      	movs	r2, #0
 8009412:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <_dtoa_r+0x708>)
 8009414:	f7f7 f860 	bl	80004d8 <__aeabi_dmul>
 8009418:	2200      	movs	r2, #0
 800941a:	2300      	movs	r3, #0
 800941c:	4604      	mov	r4, r0
 800941e:	460d      	mov	r5, r1
 8009420:	f7f7 fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8009424:	2800      	cmp	r0, #0
 8009426:	f43f aebc 	beq.w	80091a2 <_dtoa_r+0x472>
 800942a:	e6f1      	b.n	8009210 <_dtoa_r+0x4e0>
 800942c:	0800aa70 	.word	0x0800aa70
 8009430:	3fe00000 	.word	0x3fe00000
 8009434:	3ff00000 	.word	0x3ff00000
 8009438:	40240000 	.word	0x40240000
 800943c:	40140000 	.word	0x40140000
 8009440:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009442:	2a00      	cmp	r2, #0
 8009444:	f000 80db 	beq.w	80095fe <_dtoa_r+0x8ce>
 8009448:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800944a:	2a01      	cmp	r2, #1
 800944c:	f300 80bf 	bgt.w	80095ce <_dtoa_r+0x89e>
 8009450:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009452:	2a00      	cmp	r2, #0
 8009454:	f000 80b7 	beq.w	80095c6 <_dtoa_r+0x896>
 8009458:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800945c:	4646      	mov	r6, r8
 800945e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009460:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009462:	2101      	movs	r1, #1
 8009464:	441a      	add	r2, r3
 8009466:	4658      	mov	r0, fp
 8009468:	4498      	add	r8, r3
 800946a:	9209      	str	r2, [sp, #36]	@ 0x24
 800946c:	f000 fc1a 	bl	8009ca4 <__i2b>
 8009470:	4605      	mov	r5, r0
 8009472:	b15e      	cbz	r6, 800948c <_dtoa_r+0x75c>
 8009474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	dd08      	ble.n	800948c <_dtoa_r+0x75c>
 800947a:	42b3      	cmp	r3, r6
 800947c:	bfa8      	it	ge
 800947e:	4633      	movge	r3, r6
 8009480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009482:	eba8 0803 	sub.w	r8, r8, r3
 8009486:	1af6      	subs	r6, r6, r3
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	9309      	str	r3, [sp, #36]	@ 0x24
 800948c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800948e:	b1f3      	cbz	r3, 80094ce <_dtoa_r+0x79e>
 8009490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80b7 	beq.w	8009606 <_dtoa_r+0x8d6>
 8009498:	b18c      	cbz	r4, 80094be <_dtoa_r+0x78e>
 800949a:	4629      	mov	r1, r5
 800949c:	4622      	mov	r2, r4
 800949e:	4658      	mov	r0, fp
 80094a0:	f000 fcbe 	bl	8009e20 <__pow5mult>
 80094a4:	464a      	mov	r2, r9
 80094a6:	4601      	mov	r1, r0
 80094a8:	4605      	mov	r5, r0
 80094aa:	4658      	mov	r0, fp
 80094ac:	f000 fc10 	bl	8009cd0 <__multiply>
 80094b0:	4649      	mov	r1, r9
 80094b2:	9004      	str	r0, [sp, #16]
 80094b4:	4658      	mov	r0, fp
 80094b6:	f000 fb41 	bl	8009b3c <_Bfree>
 80094ba:	9b04      	ldr	r3, [sp, #16]
 80094bc:	4699      	mov	r9, r3
 80094be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c0:	1b1a      	subs	r2, r3, r4
 80094c2:	d004      	beq.n	80094ce <_dtoa_r+0x79e>
 80094c4:	4649      	mov	r1, r9
 80094c6:	4658      	mov	r0, fp
 80094c8:	f000 fcaa 	bl	8009e20 <__pow5mult>
 80094cc:	4681      	mov	r9, r0
 80094ce:	2101      	movs	r1, #1
 80094d0:	4658      	mov	r0, fp
 80094d2:	f000 fbe7 	bl	8009ca4 <__i2b>
 80094d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d8:	4604      	mov	r4, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 81c9 	beq.w	8009872 <_dtoa_r+0xb42>
 80094e0:	461a      	mov	r2, r3
 80094e2:	4601      	mov	r1, r0
 80094e4:	4658      	mov	r0, fp
 80094e6:	f000 fc9b 	bl	8009e20 <__pow5mult>
 80094ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094ec:	4604      	mov	r4, r0
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	f300 808f 	bgt.w	8009612 <_dtoa_r+0x8e2>
 80094f4:	9b02      	ldr	r3, [sp, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f040 8087 	bne.w	800960a <_dtoa_r+0x8da>
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009502:	2b00      	cmp	r3, #0
 8009504:	f040 8083 	bne.w	800960e <_dtoa_r+0x8de>
 8009508:	9b03      	ldr	r3, [sp, #12]
 800950a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800950e:	0d1b      	lsrs	r3, r3, #20
 8009510:	051b      	lsls	r3, r3, #20
 8009512:	b12b      	cbz	r3, 8009520 <_dtoa_r+0x7f0>
 8009514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009516:	f108 0801 	add.w	r8, r8, #1
 800951a:	3301      	adds	r3, #1
 800951c:	9309      	str	r3, [sp, #36]	@ 0x24
 800951e:	2301      	movs	r3, #1
 8009520:	930a      	str	r3, [sp, #40]	@ 0x28
 8009522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 81aa 	beq.w	800987e <_dtoa_r+0xb4e>
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009530:	6918      	ldr	r0, [r3, #16]
 8009532:	f000 fb6b 	bl	8009c0c <__hi0bits>
 8009536:	f1c0 0020 	rsb	r0, r0, #32
 800953a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953c:	4418      	add	r0, r3
 800953e:	f010 001f 	ands.w	r0, r0, #31
 8009542:	d071      	beq.n	8009628 <_dtoa_r+0x8f8>
 8009544:	f1c0 0320 	rsb	r3, r0, #32
 8009548:	2b04      	cmp	r3, #4
 800954a:	dd65      	ble.n	8009618 <_dtoa_r+0x8e8>
 800954c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800954e:	f1c0 001c 	rsb	r0, r0, #28
 8009552:	4403      	add	r3, r0
 8009554:	4480      	add	r8, r0
 8009556:	4406      	add	r6, r0
 8009558:	9309      	str	r3, [sp, #36]	@ 0x24
 800955a:	f1b8 0f00 	cmp.w	r8, #0
 800955e:	dd05      	ble.n	800956c <_dtoa_r+0x83c>
 8009560:	4649      	mov	r1, r9
 8009562:	4642      	mov	r2, r8
 8009564:	4658      	mov	r0, fp
 8009566:	f000 fcb5 	bl	8009ed4 <__lshift>
 800956a:	4681      	mov	r9, r0
 800956c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	dd05      	ble.n	800957e <_dtoa_r+0x84e>
 8009572:	4621      	mov	r1, r4
 8009574:	461a      	mov	r2, r3
 8009576:	4658      	mov	r0, fp
 8009578:	f000 fcac 	bl	8009ed4 <__lshift>
 800957c:	4604      	mov	r4, r0
 800957e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d053      	beq.n	800962c <_dtoa_r+0x8fc>
 8009584:	4621      	mov	r1, r4
 8009586:	4648      	mov	r0, r9
 8009588:	f000 fd10 	bl	8009fac <__mcmp>
 800958c:	2800      	cmp	r0, #0
 800958e:	da4d      	bge.n	800962c <_dtoa_r+0x8fc>
 8009590:	1e7b      	subs	r3, r7, #1
 8009592:	4649      	mov	r1, r9
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	220a      	movs	r2, #10
 8009598:	2300      	movs	r3, #0
 800959a:	4658      	mov	r0, fp
 800959c:	f000 faf0 	bl	8009b80 <__multadd>
 80095a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095a2:	4681      	mov	r9, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 816c 	beq.w	8009882 <_dtoa_r+0xb52>
 80095aa:	2300      	movs	r3, #0
 80095ac:	4629      	mov	r1, r5
 80095ae:	220a      	movs	r2, #10
 80095b0:	4658      	mov	r0, fp
 80095b2:	f000 fae5 	bl	8009b80 <__multadd>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	4605      	mov	r5, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dc61      	bgt.n	8009682 <_dtoa_r+0x952>
 80095be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	dc3b      	bgt.n	800963c <_dtoa_r+0x90c>
 80095c4:	e05d      	b.n	8009682 <_dtoa_r+0x952>
 80095c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095cc:	e746      	b.n	800945c <_dtoa_r+0x72c>
 80095ce:	9b07      	ldr	r3, [sp, #28]
 80095d0:	1e5c      	subs	r4, r3, #1
 80095d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	bfbf      	itttt	lt
 80095d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80095da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80095dc:	1ae3      	sublt	r3, r4, r3
 80095de:	18d2      	addlt	r2, r2, r3
 80095e0:	bfa8      	it	ge
 80095e2:	1b1c      	subge	r4, r3, r4
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	bfbe      	ittt	lt
 80095e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80095ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80095ec:	2400      	movlt	r4, #0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfb5      	itete	lt
 80095f2:	eba8 0603 	sublt.w	r6, r8, r3
 80095f6:	4646      	movge	r6, r8
 80095f8:	2300      	movlt	r3, #0
 80095fa:	9b07      	ldrge	r3, [sp, #28]
 80095fc:	e730      	b.n	8009460 <_dtoa_r+0x730>
 80095fe:	4646      	mov	r6, r8
 8009600:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009602:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009604:	e735      	b.n	8009472 <_dtoa_r+0x742>
 8009606:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009608:	e75c      	b.n	80094c4 <_dtoa_r+0x794>
 800960a:	2300      	movs	r3, #0
 800960c:	e788      	b.n	8009520 <_dtoa_r+0x7f0>
 800960e:	9b02      	ldr	r3, [sp, #8]
 8009610:	e786      	b.n	8009520 <_dtoa_r+0x7f0>
 8009612:	2300      	movs	r3, #0
 8009614:	930a      	str	r3, [sp, #40]	@ 0x28
 8009616:	e788      	b.n	800952a <_dtoa_r+0x7fa>
 8009618:	d09f      	beq.n	800955a <_dtoa_r+0x82a>
 800961a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800961c:	331c      	adds	r3, #28
 800961e:	441a      	add	r2, r3
 8009620:	4498      	add	r8, r3
 8009622:	441e      	add	r6, r3
 8009624:	9209      	str	r2, [sp, #36]	@ 0x24
 8009626:	e798      	b.n	800955a <_dtoa_r+0x82a>
 8009628:	4603      	mov	r3, r0
 800962a:	e7f6      	b.n	800961a <_dtoa_r+0x8ea>
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	9704      	str	r7, [sp, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	dc20      	bgt.n	8009676 <_dtoa_r+0x946>
 8009634:	9308      	str	r3, [sp, #32]
 8009636:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009638:	2b02      	cmp	r3, #2
 800963a:	dd1e      	ble.n	800967a <_dtoa_r+0x94a>
 800963c:	9b08      	ldr	r3, [sp, #32]
 800963e:	2b00      	cmp	r3, #0
 8009640:	f47f aebc 	bne.w	80093bc <_dtoa_r+0x68c>
 8009644:	4621      	mov	r1, r4
 8009646:	2205      	movs	r2, #5
 8009648:	4658      	mov	r0, fp
 800964a:	f000 fa99 	bl	8009b80 <__multadd>
 800964e:	4601      	mov	r1, r0
 8009650:	4604      	mov	r4, r0
 8009652:	4648      	mov	r0, r9
 8009654:	f000 fcaa 	bl	8009fac <__mcmp>
 8009658:	2800      	cmp	r0, #0
 800965a:	f77f aeaf 	ble.w	80093bc <_dtoa_r+0x68c>
 800965e:	2331      	movs	r3, #49	@ 0x31
 8009660:	4656      	mov	r6, sl
 8009662:	f806 3b01 	strb.w	r3, [r6], #1
 8009666:	9b04      	ldr	r3, [sp, #16]
 8009668:	3301      	adds	r3, #1
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	e6aa      	b.n	80093c4 <_dtoa_r+0x694>
 800966e:	9c07      	ldr	r4, [sp, #28]
 8009670:	9704      	str	r7, [sp, #16]
 8009672:	4625      	mov	r5, r4
 8009674:	e7f3      	b.n	800965e <_dtoa_r+0x92e>
 8009676:	9b07      	ldr	r3, [sp, #28]
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8104 	beq.w	800988a <_dtoa_r+0xb5a>
 8009682:	2e00      	cmp	r6, #0
 8009684:	dd05      	ble.n	8009692 <_dtoa_r+0x962>
 8009686:	4629      	mov	r1, r5
 8009688:	4632      	mov	r2, r6
 800968a:	4658      	mov	r0, fp
 800968c:	f000 fc22 	bl	8009ed4 <__lshift>
 8009690:	4605      	mov	r5, r0
 8009692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009694:	2b00      	cmp	r3, #0
 8009696:	d05a      	beq.n	800974e <_dtoa_r+0xa1e>
 8009698:	4658      	mov	r0, fp
 800969a:	6869      	ldr	r1, [r5, #4]
 800969c:	f000 fa0e 	bl	8009abc <_Balloc>
 80096a0:	4606      	mov	r6, r0
 80096a2:	b928      	cbnz	r0, 80096b0 <_dtoa_r+0x980>
 80096a4:	4602      	mov	r2, r0
 80096a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096aa:	4b83      	ldr	r3, [pc, #524]	@ (80098b8 <_dtoa_r+0xb88>)
 80096ac:	f7ff bb54 	b.w	8008d58 <_dtoa_r+0x28>
 80096b0:	692a      	ldr	r2, [r5, #16]
 80096b2:	f105 010c 	add.w	r1, r5, #12
 80096b6:	3202      	adds	r2, #2
 80096b8:	0092      	lsls	r2, r2, #2
 80096ba:	300c      	adds	r0, #12
 80096bc:	f7ff fa9f 	bl	8008bfe <memcpy>
 80096c0:	2201      	movs	r2, #1
 80096c2:	4631      	mov	r1, r6
 80096c4:	4658      	mov	r0, fp
 80096c6:	f000 fc05 	bl	8009ed4 <__lshift>
 80096ca:	462f      	mov	r7, r5
 80096cc:	4605      	mov	r5, r0
 80096ce:	f10a 0301 	add.w	r3, sl, #1
 80096d2:	9307      	str	r3, [sp, #28]
 80096d4:	9b08      	ldr	r3, [sp, #32]
 80096d6:	4453      	add	r3, sl
 80096d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096da:	9b02      	ldr	r3, [sp, #8]
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	4621      	mov	r1, r4
 80096e6:	3b01      	subs	r3, #1
 80096e8:	4648      	mov	r0, r9
 80096ea:	9302      	str	r3, [sp, #8]
 80096ec:	f7ff fa95 	bl	8008c1a <quorem>
 80096f0:	4639      	mov	r1, r7
 80096f2:	9008      	str	r0, [sp, #32]
 80096f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80096f8:	4648      	mov	r0, r9
 80096fa:	f000 fc57 	bl	8009fac <__mcmp>
 80096fe:	462a      	mov	r2, r5
 8009700:	9009      	str	r0, [sp, #36]	@ 0x24
 8009702:	4621      	mov	r1, r4
 8009704:	4658      	mov	r0, fp
 8009706:	f000 fc6d 	bl	8009fe4 <__mdiff>
 800970a:	68c2      	ldr	r2, [r0, #12]
 800970c:	4606      	mov	r6, r0
 800970e:	bb02      	cbnz	r2, 8009752 <_dtoa_r+0xa22>
 8009710:	4601      	mov	r1, r0
 8009712:	4648      	mov	r0, r9
 8009714:	f000 fc4a 	bl	8009fac <__mcmp>
 8009718:	4602      	mov	r2, r0
 800971a:	4631      	mov	r1, r6
 800971c:	4658      	mov	r0, fp
 800971e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009720:	f000 fa0c 	bl	8009b3c <_Bfree>
 8009724:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009726:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009728:	9e07      	ldr	r6, [sp, #28]
 800972a:	ea43 0102 	orr.w	r1, r3, r2
 800972e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009730:	4319      	orrs	r1, r3
 8009732:	d110      	bne.n	8009756 <_dtoa_r+0xa26>
 8009734:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009738:	d029      	beq.n	800978e <_dtoa_r+0xa5e>
 800973a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd02      	ble.n	8009746 <_dtoa_r+0xa16>
 8009740:	9b08      	ldr	r3, [sp, #32]
 8009742:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	f883 8000 	strb.w	r8, [r3]
 800974c:	e63b      	b.n	80093c6 <_dtoa_r+0x696>
 800974e:	4628      	mov	r0, r5
 8009750:	e7bb      	b.n	80096ca <_dtoa_r+0x99a>
 8009752:	2201      	movs	r2, #1
 8009754:	e7e1      	b.n	800971a <_dtoa_r+0x9ea>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	db04      	blt.n	8009766 <_dtoa_r+0xa36>
 800975c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800975e:	430b      	orrs	r3, r1
 8009760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009762:	430b      	orrs	r3, r1
 8009764:	d120      	bne.n	80097a8 <_dtoa_r+0xa78>
 8009766:	2a00      	cmp	r2, #0
 8009768:	dded      	ble.n	8009746 <_dtoa_r+0xa16>
 800976a:	4649      	mov	r1, r9
 800976c:	2201      	movs	r2, #1
 800976e:	4658      	mov	r0, fp
 8009770:	f000 fbb0 	bl	8009ed4 <__lshift>
 8009774:	4621      	mov	r1, r4
 8009776:	4681      	mov	r9, r0
 8009778:	f000 fc18 	bl	8009fac <__mcmp>
 800977c:	2800      	cmp	r0, #0
 800977e:	dc03      	bgt.n	8009788 <_dtoa_r+0xa58>
 8009780:	d1e1      	bne.n	8009746 <_dtoa_r+0xa16>
 8009782:	f018 0f01 	tst.w	r8, #1
 8009786:	d0de      	beq.n	8009746 <_dtoa_r+0xa16>
 8009788:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800978c:	d1d8      	bne.n	8009740 <_dtoa_r+0xa10>
 800978e:	2339      	movs	r3, #57	@ 0x39
 8009790:	9a02      	ldr	r2, [sp, #8]
 8009792:	7013      	strb	r3, [r2, #0]
 8009794:	4633      	mov	r3, r6
 8009796:	461e      	mov	r6, r3
 8009798:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800979c:	3b01      	subs	r3, #1
 800979e:	2a39      	cmp	r2, #57	@ 0x39
 80097a0:	d052      	beq.n	8009848 <_dtoa_r+0xb18>
 80097a2:	3201      	adds	r2, #1
 80097a4:	701a      	strb	r2, [r3, #0]
 80097a6:	e60e      	b.n	80093c6 <_dtoa_r+0x696>
 80097a8:	2a00      	cmp	r2, #0
 80097aa:	dd07      	ble.n	80097bc <_dtoa_r+0xa8c>
 80097ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097b0:	d0ed      	beq.n	800978e <_dtoa_r+0xa5e>
 80097b2:	9a02      	ldr	r2, [sp, #8]
 80097b4:	f108 0301 	add.w	r3, r8, #1
 80097b8:	7013      	strb	r3, [r2, #0]
 80097ba:	e604      	b.n	80093c6 <_dtoa_r+0x696>
 80097bc:	9b07      	ldr	r3, [sp, #28]
 80097be:	9a07      	ldr	r2, [sp, #28]
 80097c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80097c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d028      	beq.n	800981c <_dtoa_r+0xaec>
 80097ca:	4649      	mov	r1, r9
 80097cc:	2300      	movs	r3, #0
 80097ce:	220a      	movs	r2, #10
 80097d0:	4658      	mov	r0, fp
 80097d2:	f000 f9d5 	bl	8009b80 <__multadd>
 80097d6:	42af      	cmp	r7, r5
 80097d8:	4681      	mov	r9, r0
 80097da:	f04f 0300 	mov.w	r3, #0
 80097de:	f04f 020a 	mov.w	r2, #10
 80097e2:	4639      	mov	r1, r7
 80097e4:	4658      	mov	r0, fp
 80097e6:	d107      	bne.n	80097f8 <_dtoa_r+0xac8>
 80097e8:	f000 f9ca 	bl	8009b80 <__multadd>
 80097ec:	4607      	mov	r7, r0
 80097ee:	4605      	mov	r5, r0
 80097f0:	9b07      	ldr	r3, [sp, #28]
 80097f2:	3301      	adds	r3, #1
 80097f4:	9307      	str	r3, [sp, #28]
 80097f6:	e774      	b.n	80096e2 <_dtoa_r+0x9b2>
 80097f8:	f000 f9c2 	bl	8009b80 <__multadd>
 80097fc:	4629      	mov	r1, r5
 80097fe:	4607      	mov	r7, r0
 8009800:	2300      	movs	r3, #0
 8009802:	220a      	movs	r2, #10
 8009804:	4658      	mov	r0, fp
 8009806:	f000 f9bb 	bl	8009b80 <__multadd>
 800980a:	4605      	mov	r5, r0
 800980c:	e7f0      	b.n	80097f0 <_dtoa_r+0xac0>
 800980e:	9b08      	ldr	r3, [sp, #32]
 8009810:	2700      	movs	r7, #0
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfcc      	ite	gt
 8009816:	461e      	movgt	r6, r3
 8009818:	2601      	movle	r6, #1
 800981a:	4456      	add	r6, sl
 800981c:	4649      	mov	r1, r9
 800981e:	2201      	movs	r2, #1
 8009820:	4658      	mov	r0, fp
 8009822:	f000 fb57 	bl	8009ed4 <__lshift>
 8009826:	4621      	mov	r1, r4
 8009828:	4681      	mov	r9, r0
 800982a:	f000 fbbf 	bl	8009fac <__mcmp>
 800982e:	2800      	cmp	r0, #0
 8009830:	dcb0      	bgt.n	8009794 <_dtoa_r+0xa64>
 8009832:	d102      	bne.n	800983a <_dtoa_r+0xb0a>
 8009834:	f018 0f01 	tst.w	r8, #1
 8009838:	d1ac      	bne.n	8009794 <_dtoa_r+0xa64>
 800983a:	4633      	mov	r3, r6
 800983c:	461e      	mov	r6, r3
 800983e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009842:	2a30      	cmp	r2, #48	@ 0x30
 8009844:	d0fa      	beq.n	800983c <_dtoa_r+0xb0c>
 8009846:	e5be      	b.n	80093c6 <_dtoa_r+0x696>
 8009848:	459a      	cmp	sl, r3
 800984a:	d1a4      	bne.n	8009796 <_dtoa_r+0xa66>
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	3301      	adds	r3, #1
 8009850:	9304      	str	r3, [sp, #16]
 8009852:	2331      	movs	r3, #49	@ 0x31
 8009854:	f88a 3000 	strb.w	r3, [sl]
 8009858:	e5b5      	b.n	80093c6 <_dtoa_r+0x696>
 800985a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800985c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80098bc <_dtoa_r+0xb8c>
 8009860:	b11b      	cbz	r3, 800986a <_dtoa_r+0xb3a>
 8009862:	f10a 0308 	add.w	r3, sl, #8
 8009866:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	4650      	mov	r0, sl
 800986c:	b017      	add	sp, #92	@ 0x5c
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009872:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009874:	2b01      	cmp	r3, #1
 8009876:	f77f ae3d 	ble.w	80094f4 <_dtoa_r+0x7c4>
 800987a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800987c:	930a      	str	r3, [sp, #40]	@ 0x28
 800987e:	2001      	movs	r0, #1
 8009880:	e65b      	b.n	800953a <_dtoa_r+0x80a>
 8009882:	9b08      	ldr	r3, [sp, #32]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f77f aed6 	ble.w	8009636 <_dtoa_r+0x906>
 800988a:	4656      	mov	r6, sl
 800988c:	4621      	mov	r1, r4
 800988e:	4648      	mov	r0, r9
 8009890:	f7ff f9c3 	bl	8008c1a <quorem>
 8009894:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009898:	9b08      	ldr	r3, [sp, #32]
 800989a:	f806 8b01 	strb.w	r8, [r6], #1
 800989e:	eba6 020a 	sub.w	r2, r6, sl
 80098a2:	4293      	cmp	r3, r2
 80098a4:	ddb3      	ble.n	800980e <_dtoa_r+0xade>
 80098a6:	4649      	mov	r1, r9
 80098a8:	2300      	movs	r3, #0
 80098aa:	220a      	movs	r2, #10
 80098ac:	4658      	mov	r0, fp
 80098ae:	f000 f967 	bl	8009b80 <__multadd>
 80098b2:	4681      	mov	r9, r0
 80098b4:	e7ea      	b.n	800988c <_dtoa_r+0xb5c>
 80098b6:	bf00      	nop
 80098b8:	0800a9d2 	.word	0x0800a9d2
 80098bc:	0800a956 	.word	0x0800a956

080098c0 <_free_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4605      	mov	r5, r0
 80098c4:	2900      	cmp	r1, #0
 80098c6:	d040      	beq.n	800994a <_free_r+0x8a>
 80098c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098cc:	1f0c      	subs	r4, r1, #4
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	bfb8      	it	lt
 80098d2:	18e4      	addlt	r4, r4, r3
 80098d4:	f000 f8e6 	bl	8009aa4 <__malloc_lock>
 80098d8:	4a1c      	ldr	r2, [pc, #112]	@ (800994c <_free_r+0x8c>)
 80098da:	6813      	ldr	r3, [r2, #0]
 80098dc:	b933      	cbnz	r3, 80098ec <_free_r+0x2c>
 80098de:	6063      	str	r3, [r4, #4]
 80098e0:	6014      	str	r4, [r2, #0]
 80098e2:	4628      	mov	r0, r5
 80098e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098e8:	f000 b8e2 	b.w	8009ab0 <__malloc_unlock>
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	d908      	bls.n	8009902 <_free_r+0x42>
 80098f0:	6820      	ldr	r0, [r4, #0]
 80098f2:	1821      	adds	r1, r4, r0
 80098f4:	428b      	cmp	r3, r1
 80098f6:	bf01      	itttt	eq
 80098f8:	6819      	ldreq	r1, [r3, #0]
 80098fa:	685b      	ldreq	r3, [r3, #4]
 80098fc:	1809      	addeq	r1, r1, r0
 80098fe:	6021      	streq	r1, [r4, #0]
 8009900:	e7ed      	b.n	80098de <_free_r+0x1e>
 8009902:	461a      	mov	r2, r3
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	b10b      	cbz	r3, 800990c <_free_r+0x4c>
 8009908:	42a3      	cmp	r3, r4
 800990a:	d9fa      	bls.n	8009902 <_free_r+0x42>
 800990c:	6811      	ldr	r1, [r2, #0]
 800990e:	1850      	adds	r0, r2, r1
 8009910:	42a0      	cmp	r0, r4
 8009912:	d10b      	bne.n	800992c <_free_r+0x6c>
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	4401      	add	r1, r0
 8009918:	1850      	adds	r0, r2, r1
 800991a:	4283      	cmp	r3, r0
 800991c:	6011      	str	r1, [r2, #0]
 800991e:	d1e0      	bne.n	80098e2 <_free_r+0x22>
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	4408      	add	r0, r1
 8009926:	6010      	str	r0, [r2, #0]
 8009928:	6053      	str	r3, [r2, #4]
 800992a:	e7da      	b.n	80098e2 <_free_r+0x22>
 800992c:	d902      	bls.n	8009934 <_free_r+0x74>
 800992e:	230c      	movs	r3, #12
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	e7d6      	b.n	80098e2 <_free_r+0x22>
 8009934:	6820      	ldr	r0, [r4, #0]
 8009936:	1821      	adds	r1, r4, r0
 8009938:	428b      	cmp	r3, r1
 800993a:	bf01      	itttt	eq
 800993c:	6819      	ldreq	r1, [r3, #0]
 800993e:	685b      	ldreq	r3, [r3, #4]
 8009940:	1809      	addeq	r1, r1, r0
 8009942:	6021      	streq	r1, [r4, #0]
 8009944:	6063      	str	r3, [r4, #4]
 8009946:	6054      	str	r4, [r2, #4]
 8009948:	e7cb      	b.n	80098e2 <_free_r+0x22>
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	20001e48 	.word	0x20001e48

08009950 <malloc>:
 8009950:	4b02      	ldr	r3, [pc, #8]	@ (800995c <malloc+0xc>)
 8009952:	4601      	mov	r1, r0
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	f000 b825 	b.w	80099a4 <_malloc_r>
 800995a:	bf00      	nop
 800995c:	2000001c 	.word	0x2000001c

08009960 <sbrk_aligned>:
 8009960:	b570      	push	{r4, r5, r6, lr}
 8009962:	4e0f      	ldr	r6, [pc, #60]	@ (80099a0 <sbrk_aligned+0x40>)
 8009964:	460c      	mov	r4, r1
 8009966:	6831      	ldr	r1, [r6, #0]
 8009968:	4605      	mov	r5, r0
 800996a:	b911      	cbnz	r1, 8009972 <sbrk_aligned+0x12>
 800996c:	f000 fe92 	bl	800a694 <_sbrk_r>
 8009970:	6030      	str	r0, [r6, #0]
 8009972:	4621      	mov	r1, r4
 8009974:	4628      	mov	r0, r5
 8009976:	f000 fe8d 	bl	800a694 <_sbrk_r>
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	d103      	bne.n	8009986 <sbrk_aligned+0x26>
 800997e:	f04f 34ff 	mov.w	r4, #4294967295
 8009982:	4620      	mov	r0, r4
 8009984:	bd70      	pop	{r4, r5, r6, pc}
 8009986:	1cc4      	adds	r4, r0, #3
 8009988:	f024 0403 	bic.w	r4, r4, #3
 800998c:	42a0      	cmp	r0, r4
 800998e:	d0f8      	beq.n	8009982 <sbrk_aligned+0x22>
 8009990:	1a21      	subs	r1, r4, r0
 8009992:	4628      	mov	r0, r5
 8009994:	f000 fe7e 	bl	800a694 <_sbrk_r>
 8009998:	3001      	adds	r0, #1
 800999a:	d1f2      	bne.n	8009982 <sbrk_aligned+0x22>
 800999c:	e7ef      	b.n	800997e <sbrk_aligned+0x1e>
 800999e:	bf00      	nop
 80099a0:	20001e44 	.word	0x20001e44

080099a4 <_malloc_r>:
 80099a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a8:	1ccd      	adds	r5, r1, #3
 80099aa:	f025 0503 	bic.w	r5, r5, #3
 80099ae:	3508      	adds	r5, #8
 80099b0:	2d0c      	cmp	r5, #12
 80099b2:	bf38      	it	cc
 80099b4:	250c      	movcc	r5, #12
 80099b6:	2d00      	cmp	r5, #0
 80099b8:	4606      	mov	r6, r0
 80099ba:	db01      	blt.n	80099c0 <_malloc_r+0x1c>
 80099bc:	42a9      	cmp	r1, r5
 80099be:	d904      	bls.n	80099ca <_malloc_r+0x26>
 80099c0:	230c      	movs	r3, #12
 80099c2:	6033      	str	r3, [r6, #0]
 80099c4:	2000      	movs	r0, #0
 80099c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009aa0 <_malloc_r+0xfc>
 80099ce:	f000 f869 	bl	8009aa4 <__malloc_lock>
 80099d2:	f8d8 3000 	ldr.w	r3, [r8]
 80099d6:	461c      	mov	r4, r3
 80099d8:	bb44      	cbnz	r4, 8009a2c <_malloc_r+0x88>
 80099da:	4629      	mov	r1, r5
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff ffbf 	bl	8009960 <sbrk_aligned>
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	4604      	mov	r4, r0
 80099e6:	d158      	bne.n	8009a9a <_malloc_r+0xf6>
 80099e8:	f8d8 4000 	ldr.w	r4, [r8]
 80099ec:	4627      	mov	r7, r4
 80099ee:	2f00      	cmp	r7, #0
 80099f0:	d143      	bne.n	8009a7a <_malloc_r+0xd6>
 80099f2:	2c00      	cmp	r4, #0
 80099f4:	d04b      	beq.n	8009a8e <_malloc_r+0xea>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	4639      	mov	r1, r7
 80099fa:	4630      	mov	r0, r6
 80099fc:	eb04 0903 	add.w	r9, r4, r3
 8009a00:	f000 fe48 	bl	800a694 <_sbrk_r>
 8009a04:	4581      	cmp	r9, r0
 8009a06:	d142      	bne.n	8009a8e <_malloc_r+0xea>
 8009a08:	6821      	ldr	r1, [r4, #0]
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	1a6d      	subs	r5, r5, r1
 8009a0e:	4629      	mov	r1, r5
 8009a10:	f7ff ffa6 	bl	8009960 <sbrk_aligned>
 8009a14:	3001      	adds	r0, #1
 8009a16:	d03a      	beq.n	8009a8e <_malloc_r+0xea>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	442b      	add	r3, r5
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	bb62      	cbnz	r2, 8009a80 <_malloc_r+0xdc>
 8009a26:	f8c8 7000 	str.w	r7, [r8]
 8009a2a:	e00f      	b.n	8009a4c <_malloc_r+0xa8>
 8009a2c:	6822      	ldr	r2, [r4, #0]
 8009a2e:	1b52      	subs	r2, r2, r5
 8009a30:	d420      	bmi.n	8009a74 <_malloc_r+0xd0>
 8009a32:	2a0b      	cmp	r2, #11
 8009a34:	d917      	bls.n	8009a66 <_malloc_r+0xc2>
 8009a36:	1961      	adds	r1, r4, r5
 8009a38:	42a3      	cmp	r3, r4
 8009a3a:	6025      	str	r5, [r4, #0]
 8009a3c:	bf18      	it	ne
 8009a3e:	6059      	strne	r1, [r3, #4]
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	bf08      	it	eq
 8009a44:	f8c8 1000 	streq.w	r1, [r8]
 8009a48:	5162      	str	r2, [r4, r5]
 8009a4a:	604b      	str	r3, [r1, #4]
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f000 f82f 	bl	8009ab0 <__malloc_unlock>
 8009a52:	f104 000b 	add.w	r0, r4, #11
 8009a56:	1d23      	adds	r3, r4, #4
 8009a58:	f020 0007 	bic.w	r0, r0, #7
 8009a5c:	1ac2      	subs	r2, r0, r3
 8009a5e:	bf1c      	itt	ne
 8009a60:	1a1b      	subne	r3, r3, r0
 8009a62:	50a3      	strne	r3, [r4, r2]
 8009a64:	e7af      	b.n	80099c6 <_malloc_r+0x22>
 8009a66:	6862      	ldr	r2, [r4, #4]
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	bf0c      	ite	eq
 8009a6c:	f8c8 2000 	streq.w	r2, [r8]
 8009a70:	605a      	strne	r2, [r3, #4]
 8009a72:	e7eb      	b.n	8009a4c <_malloc_r+0xa8>
 8009a74:	4623      	mov	r3, r4
 8009a76:	6864      	ldr	r4, [r4, #4]
 8009a78:	e7ae      	b.n	80099d8 <_malloc_r+0x34>
 8009a7a:	463c      	mov	r4, r7
 8009a7c:	687f      	ldr	r7, [r7, #4]
 8009a7e:	e7b6      	b.n	80099ee <_malloc_r+0x4a>
 8009a80:	461a      	mov	r2, r3
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d1fb      	bne.n	8009a80 <_malloc_r+0xdc>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	6053      	str	r3, [r2, #4]
 8009a8c:	e7de      	b.n	8009a4c <_malloc_r+0xa8>
 8009a8e:	230c      	movs	r3, #12
 8009a90:	4630      	mov	r0, r6
 8009a92:	6033      	str	r3, [r6, #0]
 8009a94:	f000 f80c 	bl	8009ab0 <__malloc_unlock>
 8009a98:	e794      	b.n	80099c4 <_malloc_r+0x20>
 8009a9a:	6005      	str	r5, [r0, #0]
 8009a9c:	e7d6      	b.n	8009a4c <_malloc_r+0xa8>
 8009a9e:	bf00      	nop
 8009aa0:	20001e48 	.word	0x20001e48

08009aa4 <__malloc_lock>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	@ (8009aac <__malloc_lock+0x8>)
 8009aa6:	f7ff b89a 	b.w	8008bde <__retarget_lock_acquire_recursive>
 8009aaa:	bf00      	nop
 8009aac:	20001e40 	.word	0x20001e40

08009ab0 <__malloc_unlock>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	@ (8009ab8 <__malloc_unlock+0x8>)
 8009ab2:	f7ff b895 	b.w	8008be0 <__retarget_lock_release_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	20001e40 	.word	0x20001e40

08009abc <_Balloc>:
 8009abc:	b570      	push	{r4, r5, r6, lr}
 8009abe:	69c6      	ldr	r6, [r0, #28]
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	b976      	cbnz	r6, 8009ae4 <_Balloc+0x28>
 8009ac6:	2010      	movs	r0, #16
 8009ac8:	f7ff ff42 	bl	8009950 <malloc>
 8009acc:	4602      	mov	r2, r0
 8009ace:	61e0      	str	r0, [r4, #28]
 8009ad0:	b920      	cbnz	r0, 8009adc <_Balloc+0x20>
 8009ad2:	216b      	movs	r1, #107	@ 0x6b
 8009ad4:	4b17      	ldr	r3, [pc, #92]	@ (8009b34 <_Balloc+0x78>)
 8009ad6:	4818      	ldr	r0, [pc, #96]	@ (8009b38 <_Balloc+0x7c>)
 8009ad8:	f000 fdec 	bl	800a6b4 <__assert_func>
 8009adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ae0:	6006      	str	r6, [r0, #0]
 8009ae2:	60c6      	str	r6, [r0, #12]
 8009ae4:	69e6      	ldr	r6, [r4, #28]
 8009ae6:	68f3      	ldr	r3, [r6, #12]
 8009ae8:	b183      	cbz	r3, 8009b0c <_Balloc+0x50>
 8009aea:	69e3      	ldr	r3, [r4, #28]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009af2:	b9b8      	cbnz	r0, 8009b24 <_Balloc+0x68>
 8009af4:	2101      	movs	r1, #1
 8009af6:	fa01 f605 	lsl.w	r6, r1, r5
 8009afa:	1d72      	adds	r2, r6, #5
 8009afc:	4620      	mov	r0, r4
 8009afe:	0092      	lsls	r2, r2, #2
 8009b00:	f000 fdf6 	bl	800a6f0 <_calloc_r>
 8009b04:	b160      	cbz	r0, 8009b20 <_Balloc+0x64>
 8009b06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b0a:	e00e      	b.n	8009b2a <_Balloc+0x6e>
 8009b0c:	2221      	movs	r2, #33	@ 0x21
 8009b0e:	2104      	movs	r1, #4
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fded 	bl	800a6f0 <_calloc_r>
 8009b16:	69e3      	ldr	r3, [r4, #28]
 8009b18:	60f0      	str	r0, [r6, #12]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e4      	bne.n	8009aea <_Balloc+0x2e>
 8009b20:	2000      	movs	r0, #0
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	6802      	ldr	r2, [r0, #0]
 8009b26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b30:	e7f7      	b.n	8009b22 <_Balloc+0x66>
 8009b32:	bf00      	nop
 8009b34:	0800a963 	.word	0x0800a963
 8009b38:	0800a9e3 	.word	0x0800a9e3

08009b3c <_Bfree>:
 8009b3c:	b570      	push	{r4, r5, r6, lr}
 8009b3e:	69c6      	ldr	r6, [r0, #28]
 8009b40:	4605      	mov	r5, r0
 8009b42:	460c      	mov	r4, r1
 8009b44:	b976      	cbnz	r6, 8009b64 <_Bfree+0x28>
 8009b46:	2010      	movs	r0, #16
 8009b48:	f7ff ff02 	bl	8009950 <malloc>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	61e8      	str	r0, [r5, #28]
 8009b50:	b920      	cbnz	r0, 8009b5c <_Bfree+0x20>
 8009b52:	218f      	movs	r1, #143	@ 0x8f
 8009b54:	4b08      	ldr	r3, [pc, #32]	@ (8009b78 <_Bfree+0x3c>)
 8009b56:	4809      	ldr	r0, [pc, #36]	@ (8009b7c <_Bfree+0x40>)
 8009b58:	f000 fdac 	bl	800a6b4 <__assert_func>
 8009b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b60:	6006      	str	r6, [r0, #0]
 8009b62:	60c6      	str	r6, [r0, #12]
 8009b64:	b13c      	cbz	r4, 8009b76 <_Bfree+0x3a>
 8009b66:	69eb      	ldr	r3, [r5, #28]
 8009b68:	6862      	ldr	r2, [r4, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b70:	6021      	str	r1, [r4, #0]
 8009b72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	0800a963 	.word	0x0800a963
 8009b7c:	0800a9e3 	.word	0x0800a9e3

08009b80 <__multadd>:
 8009b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b84:	4607      	mov	r7, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	461e      	mov	r6, r3
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	690d      	ldr	r5, [r1, #16]
 8009b8e:	f101 0c14 	add.w	ip, r1, #20
 8009b92:	f8dc 3000 	ldr.w	r3, [ip]
 8009b96:	3001      	adds	r0, #1
 8009b98:	b299      	uxth	r1, r3
 8009b9a:	fb02 6101 	mla	r1, r2, r1, r6
 8009b9e:	0c1e      	lsrs	r6, r3, #16
 8009ba0:	0c0b      	lsrs	r3, r1, #16
 8009ba2:	fb02 3306 	mla	r3, r2, r6, r3
 8009ba6:	b289      	uxth	r1, r1
 8009ba8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bac:	4285      	cmp	r5, r0
 8009bae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bb2:	f84c 1b04 	str.w	r1, [ip], #4
 8009bb6:	dcec      	bgt.n	8009b92 <__multadd+0x12>
 8009bb8:	b30e      	cbz	r6, 8009bfe <__multadd+0x7e>
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	42ab      	cmp	r3, r5
 8009bbe:	dc19      	bgt.n	8009bf4 <__multadd+0x74>
 8009bc0:	6861      	ldr	r1, [r4, #4]
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	3101      	adds	r1, #1
 8009bc6:	f7ff ff79 	bl	8009abc <_Balloc>
 8009bca:	4680      	mov	r8, r0
 8009bcc:	b928      	cbnz	r0, 8009bda <__multadd+0x5a>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	21ba      	movs	r1, #186	@ 0xba
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <__multadd+0x84>)
 8009bd4:	480c      	ldr	r0, [pc, #48]	@ (8009c08 <__multadd+0x88>)
 8009bd6:	f000 fd6d 	bl	800a6b4 <__assert_func>
 8009bda:	6922      	ldr	r2, [r4, #16]
 8009bdc:	f104 010c 	add.w	r1, r4, #12
 8009be0:	3202      	adds	r2, #2
 8009be2:	0092      	lsls	r2, r2, #2
 8009be4:	300c      	adds	r0, #12
 8009be6:	f7ff f80a 	bl	8008bfe <memcpy>
 8009bea:	4621      	mov	r1, r4
 8009bec:	4638      	mov	r0, r7
 8009bee:	f7ff ffa5 	bl	8009b3c <_Bfree>
 8009bf2:	4644      	mov	r4, r8
 8009bf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bf8:	3501      	adds	r5, #1
 8009bfa:	615e      	str	r6, [r3, #20]
 8009bfc:	6125      	str	r5, [r4, #16]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c04:	0800a9d2 	.word	0x0800a9d2
 8009c08:	0800a9e3 	.word	0x0800a9e3

08009c0c <__hi0bits>:
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c12:	bf3a      	itte	cc
 8009c14:	0403      	lslcc	r3, r0, #16
 8009c16:	2010      	movcc	r0, #16
 8009c18:	2000      	movcs	r0, #0
 8009c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c1e:	bf3c      	itt	cc
 8009c20:	021b      	lslcc	r3, r3, #8
 8009c22:	3008      	addcc	r0, #8
 8009c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c28:	bf3c      	itt	cc
 8009c2a:	011b      	lslcc	r3, r3, #4
 8009c2c:	3004      	addcc	r0, #4
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c32:	bf3c      	itt	cc
 8009c34:	009b      	lslcc	r3, r3, #2
 8009c36:	3002      	addcc	r0, #2
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	db05      	blt.n	8009c48 <__hi0bits+0x3c>
 8009c3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c40:	f100 0001 	add.w	r0, r0, #1
 8009c44:	bf08      	it	eq
 8009c46:	2020      	moveq	r0, #32
 8009c48:	4770      	bx	lr

08009c4a <__lo0bits>:
 8009c4a:	6803      	ldr	r3, [r0, #0]
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	f013 0007 	ands.w	r0, r3, #7
 8009c52:	d00b      	beq.n	8009c6c <__lo0bits+0x22>
 8009c54:	07d9      	lsls	r1, r3, #31
 8009c56:	d421      	bmi.n	8009c9c <__lo0bits+0x52>
 8009c58:	0798      	lsls	r0, r3, #30
 8009c5a:	bf49      	itett	mi
 8009c5c:	085b      	lsrmi	r3, r3, #1
 8009c5e:	089b      	lsrpl	r3, r3, #2
 8009c60:	2001      	movmi	r0, #1
 8009c62:	6013      	strmi	r3, [r2, #0]
 8009c64:	bf5c      	itt	pl
 8009c66:	2002      	movpl	r0, #2
 8009c68:	6013      	strpl	r3, [r2, #0]
 8009c6a:	4770      	bx	lr
 8009c6c:	b299      	uxth	r1, r3
 8009c6e:	b909      	cbnz	r1, 8009c74 <__lo0bits+0x2a>
 8009c70:	2010      	movs	r0, #16
 8009c72:	0c1b      	lsrs	r3, r3, #16
 8009c74:	b2d9      	uxtb	r1, r3
 8009c76:	b909      	cbnz	r1, 8009c7c <__lo0bits+0x32>
 8009c78:	3008      	adds	r0, #8
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	0719      	lsls	r1, r3, #28
 8009c7e:	bf04      	itt	eq
 8009c80:	091b      	lsreq	r3, r3, #4
 8009c82:	3004      	addeq	r0, #4
 8009c84:	0799      	lsls	r1, r3, #30
 8009c86:	bf04      	itt	eq
 8009c88:	089b      	lsreq	r3, r3, #2
 8009c8a:	3002      	addeq	r0, #2
 8009c8c:	07d9      	lsls	r1, r3, #31
 8009c8e:	d403      	bmi.n	8009c98 <__lo0bits+0x4e>
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	f100 0001 	add.w	r0, r0, #1
 8009c96:	d003      	beq.n	8009ca0 <__lo0bits+0x56>
 8009c98:	6013      	str	r3, [r2, #0]
 8009c9a:	4770      	bx	lr
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	4770      	bx	lr
 8009ca0:	2020      	movs	r0, #32
 8009ca2:	4770      	bx	lr

08009ca4 <__i2b>:
 8009ca4:	b510      	push	{r4, lr}
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	2101      	movs	r1, #1
 8009caa:	f7ff ff07 	bl	8009abc <_Balloc>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	b928      	cbnz	r0, 8009cbe <__i2b+0x1a>
 8009cb2:	f240 1145 	movw	r1, #325	@ 0x145
 8009cb6:	4b04      	ldr	r3, [pc, #16]	@ (8009cc8 <__i2b+0x24>)
 8009cb8:	4804      	ldr	r0, [pc, #16]	@ (8009ccc <__i2b+0x28>)
 8009cba:	f000 fcfb 	bl	800a6b4 <__assert_func>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	6144      	str	r4, [r0, #20]
 8009cc2:	6103      	str	r3, [r0, #16]
 8009cc4:	bd10      	pop	{r4, pc}
 8009cc6:	bf00      	nop
 8009cc8:	0800a9d2 	.word	0x0800a9d2
 8009ccc:	0800a9e3 	.word	0x0800a9e3

08009cd0 <__multiply>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	690a      	ldr	r2, [r1, #16]
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	460f      	mov	r7, r1
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	bfa2      	ittt	ge
 8009ce0:	4623      	movge	r3, r4
 8009ce2:	460c      	movge	r4, r1
 8009ce4:	461f      	movge	r7, r3
 8009ce6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009cea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009cee:	68a3      	ldr	r3, [r4, #8]
 8009cf0:	6861      	ldr	r1, [r4, #4]
 8009cf2:	eb0a 0609 	add.w	r6, sl, r9
 8009cf6:	42b3      	cmp	r3, r6
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	bfb8      	it	lt
 8009cfc:	3101      	addlt	r1, #1
 8009cfe:	f7ff fedd 	bl	8009abc <_Balloc>
 8009d02:	b930      	cbnz	r0, 8009d12 <__multiply+0x42>
 8009d04:	4602      	mov	r2, r0
 8009d06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d0a:	4b43      	ldr	r3, [pc, #268]	@ (8009e18 <__multiply+0x148>)
 8009d0c:	4843      	ldr	r0, [pc, #268]	@ (8009e1c <__multiply+0x14c>)
 8009d0e:	f000 fcd1 	bl	800a6b4 <__assert_func>
 8009d12:	f100 0514 	add.w	r5, r0, #20
 8009d16:	462b      	mov	r3, r5
 8009d18:	2200      	movs	r2, #0
 8009d1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d1e:	4543      	cmp	r3, r8
 8009d20:	d321      	bcc.n	8009d66 <__multiply+0x96>
 8009d22:	f107 0114 	add.w	r1, r7, #20
 8009d26:	f104 0214 	add.w	r2, r4, #20
 8009d2a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009d2e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d32:	9302      	str	r3, [sp, #8]
 8009d34:	1b13      	subs	r3, r2, r4
 8009d36:	3b15      	subs	r3, #21
 8009d38:	f023 0303 	bic.w	r3, r3, #3
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	f104 0715 	add.w	r7, r4, #21
 8009d42:	42ba      	cmp	r2, r7
 8009d44:	bf38      	it	cc
 8009d46:	2304      	movcc	r3, #4
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	9b02      	ldr	r3, [sp, #8]
 8009d4c:	9103      	str	r1, [sp, #12]
 8009d4e:	428b      	cmp	r3, r1
 8009d50:	d80c      	bhi.n	8009d6c <__multiply+0x9c>
 8009d52:	2e00      	cmp	r6, #0
 8009d54:	dd03      	ble.n	8009d5e <__multiply+0x8e>
 8009d56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d05a      	beq.n	8009e14 <__multiply+0x144>
 8009d5e:	6106      	str	r6, [r0, #16]
 8009d60:	b005      	add	sp, #20
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d66:	f843 2b04 	str.w	r2, [r3], #4
 8009d6a:	e7d8      	b.n	8009d1e <__multiply+0x4e>
 8009d6c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d70:	f1ba 0f00 	cmp.w	sl, #0
 8009d74:	d023      	beq.n	8009dbe <__multiply+0xee>
 8009d76:	46a9      	mov	r9, r5
 8009d78:	f04f 0c00 	mov.w	ip, #0
 8009d7c:	f104 0e14 	add.w	lr, r4, #20
 8009d80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d84:	f8d9 3000 	ldr.w	r3, [r9]
 8009d88:	fa1f fb87 	uxth.w	fp, r7
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d92:	4463      	add	r3, ip
 8009d94:	f8d9 c000 	ldr.w	ip, [r9]
 8009d98:	0c3f      	lsrs	r7, r7, #16
 8009d9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009d9e:	fb0a c707 	mla	r7, sl, r7, ip
 8009da2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009dac:	4572      	cmp	r2, lr
 8009dae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009db2:	f849 3b04 	str.w	r3, [r9], #4
 8009db6:	d8e3      	bhi.n	8009d80 <__multiply+0xb0>
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	f845 c003 	str.w	ip, [r5, r3]
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	3104      	adds	r1, #4
 8009dc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009dc6:	f1b9 0f00 	cmp.w	r9, #0
 8009dca:	d021      	beq.n	8009e10 <__multiply+0x140>
 8009dcc:	46ae      	mov	lr, r5
 8009dce:	f04f 0a00 	mov.w	sl, #0
 8009dd2:	682b      	ldr	r3, [r5, #0]
 8009dd4:	f104 0c14 	add.w	ip, r4, #20
 8009dd8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ddc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	fb09 770b 	mla	r7, r9, fp, r7
 8009de6:	4457      	add	r7, sl
 8009de8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009dec:	f84e 3b04 	str.w	r3, [lr], #4
 8009df0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009df4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009df8:	f8be 3000 	ldrh.w	r3, [lr]
 8009dfc:	4562      	cmp	r2, ip
 8009dfe:	fb09 330a 	mla	r3, r9, sl, r3
 8009e02:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e0a:	d8e5      	bhi.n	8009dd8 <__multiply+0x108>
 8009e0c:	9f01      	ldr	r7, [sp, #4]
 8009e0e:	51eb      	str	r3, [r5, r7]
 8009e10:	3504      	adds	r5, #4
 8009e12:	e79a      	b.n	8009d4a <__multiply+0x7a>
 8009e14:	3e01      	subs	r6, #1
 8009e16:	e79c      	b.n	8009d52 <__multiply+0x82>
 8009e18:	0800a9d2 	.word	0x0800a9d2
 8009e1c:	0800a9e3 	.word	0x0800a9e3

08009e20 <__pow5mult>:
 8009e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e24:	4615      	mov	r5, r2
 8009e26:	f012 0203 	ands.w	r2, r2, #3
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	460e      	mov	r6, r1
 8009e2e:	d007      	beq.n	8009e40 <__pow5mult+0x20>
 8009e30:	4c25      	ldr	r4, [pc, #148]	@ (8009ec8 <__pow5mult+0xa8>)
 8009e32:	3a01      	subs	r2, #1
 8009e34:	2300      	movs	r3, #0
 8009e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e3a:	f7ff fea1 	bl	8009b80 <__multadd>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	10ad      	asrs	r5, r5, #2
 8009e42:	d03d      	beq.n	8009ec0 <__pow5mult+0xa0>
 8009e44:	69fc      	ldr	r4, [r7, #28]
 8009e46:	b97c      	cbnz	r4, 8009e68 <__pow5mult+0x48>
 8009e48:	2010      	movs	r0, #16
 8009e4a:	f7ff fd81 	bl	8009950 <malloc>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	61f8      	str	r0, [r7, #28]
 8009e52:	b928      	cbnz	r0, 8009e60 <__pow5mult+0x40>
 8009e54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e58:	4b1c      	ldr	r3, [pc, #112]	@ (8009ecc <__pow5mult+0xac>)
 8009e5a:	481d      	ldr	r0, [pc, #116]	@ (8009ed0 <__pow5mult+0xb0>)
 8009e5c:	f000 fc2a 	bl	800a6b4 <__assert_func>
 8009e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e64:	6004      	str	r4, [r0, #0]
 8009e66:	60c4      	str	r4, [r0, #12]
 8009e68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e70:	b94c      	cbnz	r4, 8009e86 <__pow5mult+0x66>
 8009e72:	f240 2171 	movw	r1, #625	@ 0x271
 8009e76:	4638      	mov	r0, r7
 8009e78:	f7ff ff14 	bl	8009ca4 <__i2b>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	4604      	mov	r4, r0
 8009e80:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	f04f 0900 	mov.w	r9, #0
 8009e8a:	07eb      	lsls	r3, r5, #31
 8009e8c:	d50a      	bpl.n	8009ea4 <__pow5mult+0x84>
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4622      	mov	r2, r4
 8009e92:	4638      	mov	r0, r7
 8009e94:	f7ff ff1c 	bl	8009cd0 <__multiply>
 8009e98:	4680      	mov	r8, r0
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f7ff fe4d 	bl	8009b3c <_Bfree>
 8009ea2:	4646      	mov	r6, r8
 8009ea4:	106d      	asrs	r5, r5, #1
 8009ea6:	d00b      	beq.n	8009ec0 <__pow5mult+0xa0>
 8009ea8:	6820      	ldr	r0, [r4, #0]
 8009eaa:	b938      	cbnz	r0, 8009ebc <__pow5mult+0x9c>
 8009eac:	4622      	mov	r2, r4
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	f7ff ff0d 	bl	8009cd0 <__multiply>
 8009eb6:	6020      	str	r0, [r4, #0]
 8009eb8:	f8c0 9000 	str.w	r9, [r0]
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	e7e4      	b.n	8009e8a <__pow5mult+0x6a>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800aa3c 	.word	0x0800aa3c
 8009ecc:	0800a963 	.word	0x0800a963
 8009ed0:	0800a9e3 	.word	0x0800a9e3

08009ed4 <__lshift>:
 8009ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed8:	460c      	mov	r4, r1
 8009eda:	4607      	mov	r7, r0
 8009edc:	4691      	mov	r9, r2
 8009ede:	6923      	ldr	r3, [r4, #16]
 8009ee0:	6849      	ldr	r1, [r1, #4]
 8009ee2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009eec:	f108 0601 	add.w	r6, r8, #1
 8009ef0:	42b3      	cmp	r3, r6
 8009ef2:	db0b      	blt.n	8009f0c <__lshift+0x38>
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f7ff fde1 	bl	8009abc <_Balloc>
 8009efa:	4605      	mov	r5, r0
 8009efc:	b948      	cbnz	r0, 8009f12 <__lshift+0x3e>
 8009efe:	4602      	mov	r2, r0
 8009f00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f04:	4b27      	ldr	r3, [pc, #156]	@ (8009fa4 <__lshift+0xd0>)
 8009f06:	4828      	ldr	r0, [pc, #160]	@ (8009fa8 <__lshift+0xd4>)
 8009f08:	f000 fbd4 	bl	800a6b4 <__assert_func>
 8009f0c:	3101      	adds	r1, #1
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	e7ee      	b.n	8009ef0 <__lshift+0x1c>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f100 0114 	add.w	r1, r0, #20
 8009f18:	f100 0210 	add.w	r2, r0, #16
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	4553      	cmp	r3, sl
 8009f20:	db33      	blt.n	8009f8a <__lshift+0xb6>
 8009f22:	6920      	ldr	r0, [r4, #16]
 8009f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f28:	f104 0314 	add.w	r3, r4, #20
 8009f2c:	f019 091f 	ands.w	r9, r9, #31
 8009f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f38:	d02b      	beq.n	8009f92 <__lshift+0xbe>
 8009f3a:	468a      	mov	sl, r1
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f1c9 0e20 	rsb	lr, r9, #32
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	fa00 f009 	lsl.w	r0, r0, r9
 8009f48:	4310      	orrs	r0, r2
 8009f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f52:	459c      	cmp	ip, r3
 8009f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f58:	d8f3      	bhi.n	8009f42 <__lshift+0x6e>
 8009f5a:	ebac 0304 	sub.w	r3, ip, r4
 8009f5e:	3b15      	subs	r3, #21
 8009f60:	f023 0303 	bic.w	r3, r3, #3
 8009f64:	3304      	adds	r3, #4
 8009f66:	f104 0015 	add.w	r0, r4, #21
 8009f6a:	4584      	cmp	ip, r0
 8009f6c:	bf38      	it	cc
 8009f6e:	2304      	movcc	r3, #4
 8009f70:	50ca      	str	r2, [r1, r3]
 8009f72:	b10a      	cbz	r2, 8009f78 <__lshift+0xa4>
 8009f74:	f108 0602 	add.w	r6, r8, #2
 8009f78:	3e01      	subs	r6, #1
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	612e      	str	r6, [r5, #16]
 8009f80:	f7ff fddc 	bl	8009b3c <_Bfree>
 8009f84:	4628      	mov	r0, r5
 8009f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f8e:	3301      	adds	r3, #1
 8009f90:	e7c5      	b.n	8009f1e <__lshift+0x4a>
 8009f92:	3904      	subs	r1, #4
 8009f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f98:	459c      	cmp	ip, r3
 8009f9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f9e:	d8f9      	bhi.n	8009f94 <__lshift+0xc0>
 8009fa0:	e7ea      	b.n	8009f78 <__lshift+0xa4>
 8009fa2:	bf00      	nop
 8009fa4:	0800a9d2 	.word	0x0800a9d2
 8009fa8:	0800a9e3 	.word	0x0800a9e3

08009fac <__mcmp>:
 8009fac:	4603      	mov	r3, r0
 8009fae:	690a      	ldr	r2, [r1, #16]
 8009fb0:	6900      	ldr	r0, [r0, #16]
 8009fb2:	b530      	push	{r4, r5, lr}
 8009fb4:	1a80      	subs	r0, r0, r2
 8009fb6:	d10e      	bne.n	8009fd6 <__mcmp+0x2a>
 8009fb8:	3314      	adds	r3, #20
 8009fba:	3114      	adds	r1, #20
 8009fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fcc:	4295      	cmp	r5, r2
 8009fce:	d003      	beq.n	8009fd8 <__mcmp+0x2c>
 8009fd0:	d205      	bcs.n	8009fde <__mcmp+0x32>
 8009fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd6:	bd30      	pop	{r4, r5, pc}
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	d3f3      	bcc.n	8009fc4 <__mcmp+0x18>
 8009fdc:	e7fb      	b.n	8009fd6 <__mcmp+0x2a>
 8009fde:	2001      	movs	r0, #1
 8009fe0:	e7f9      	b.n	8009fd6 <__mcmp+0x2a>
	...

08009fe4 <__mdiff>:
 8009fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	4689      	mov	r9, r1
 8009fea:	4606      	mov	r6, r0
 8009fec:	4611      	mov	r1, r2
 8009fee:	4648      	mov	r0, r9
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	f7ff ffdb 	bl	8009fac <__mcmp>
 8009ff6:	1e05      	subs	r5, r0, #0
 8009ff8:	d112      	bne.n	800a020 <__mdiff+0x3c>
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f7ff fd5d 	bl	8009abc <_Balloc>
 800a002:	4602      	mov	r2, r0
 800a004:	b928      	cbnz	r0, 800a012 <__mdiff+0x2e>
 800a006:	f240 2137 	movw	r1, #567	@ 0x237
 800a00a:	4b3e      	ldr	r3, [pc, #248]	@ (800a104 <__mdiff+0x120>)
 800a00c:	483e      	ldr	r0, [pc, #248]	@ (800a108 <__mdiff+0x124>)
 800a00e:	f000 fb51 	bl	800a6b4 <__assert_func>
 800a012:	2301      	movs	r3, #1
 800a014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a018:	4610      	mov	r0, r2
 800a01a:	b003      	add	sp, #12
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a020:	bfbc      	itt	lt
 800a022:	464b      	movlt	r3, r9
 800a024:	46a1      	movlt	r9, r4
 800a026:	4630      	mov	r0, r6
 800a028:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a02c:	bfba      	itte	lt
 800a02e:	461c      	movlt	r4, r3
 800a030:	2501      	movlt	r5, #1
 800a032:	2500      	movge	r5, #0
 800a034:	f7ff fd42 	bl	8009abc <_Balloc>
 800a038:	4602      	mov	r2, r0
 800a03a:	b918      	cbnz	r0, 800a044 <__mdiff+0x60>
 800a03c:	f240 2145 	movw	r1, #581	@ 0x245
 800a040:	4b30      	ldr	r3, [pc, #192]	@ (800a104 <__mdiff+0x120>)
 800a042:	e7e3      	b.n	800a00c <__mdiff+0x28>
 800a044:	f100 0b14 	add.w	fp, r0, #20
 800a048:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a04c:	f109 0310 	add.w	r3, r9, #16
 800a050:	60c5      	str	r5, [r0, #12]
 800a052:	f04f 0c00 	mov.w	ip, #0
 800a056:	f109 0514 	add.w	r5, r9, #20
 800a05a:	46d9      	mov	r9, fp
 800a05c:	6926      	ldr	r6, [r4, #16]
 800a05e:	f104 0e14 	add.w	lr, r4, #20
 800a062:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a066:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a072:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a076:	b281      	uxth	r1, r0
 800a078:	9301      	str	r3, [sp, #4]
 800a07a:	fa1f f38a 	uxth.w	r3, sl
 800a07e:	1a5b      	subs	r3, r3, r1
 800a080:	0c00      	lsrs	r0, r0, #16
 800a082:	4463      	add	r3, ip
 800a084:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a088:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a092:	4576      	cmp	r6, lr
 800a094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a098:	f849 3b04 	str.w	r3, [r9], #4
 800a09c:	d8e6      	bhi.n	800a06c <__mdiff+0x88>
 800a09e:	1b33      	subs	r3, r6, r4
 800a0a0:	3b15      	subs	r3, #21
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	3415      	adds	r4, #21
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	42a6      	cmp	r6, r4
 800a0ac:	bf38      	it	cc
 800a0ae:	2304      	movcc	r3, #4
 800a0b0:	441d      	add	r5, r3
 800a0b2:	445b      	add	r3, fp
 800a0b4:	461e      	mov	r6, r3
 800a0b6:	462c      	mov	r4, r5
 800a0b8:	4544      	cmp	r4, r8
 800a0ba:	d30e      	bcc.n	800a0da <__mdiff+0xf6>
 800a0bc:	f108 0103 	add.w	r1, r8, #3
 800a0c0:	1b49      	subs	r1, r1, r5
 800a0c2:	f021 0103 	bic.w	r1, r1, #3
 800a0c6:	3d03      	subs	r5, #3
 800a0c8:	45a8      	cmp	r8, r5
 800a0ca:	bf38      	it	cc
 800a0cc:	2100      	movcc	r1, #0
 800a0ce:	440b      	add	r3, r1
 800a0d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0d4:	b199      	cbz	r1, 800a0fe <__mdiff+0x11a>
 800a0d6:	6117      	str	r7, [r2, #16]
 800a0d8:	e79e      	b.n	800a018 <__mdiff+0x34>
 800a0da:	46e6      	mov	lr, ip
 800a0dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a0e0:	fa1f fc81 	uxth.w	ip, r1
 800a0e4:	44f4      	add	ip, lr
 800a0e6:	0c08      	lsrs	r0, r1, #16
 800a0e8:	4471      	add	r1, lr
 800a0ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a0ee:	b289      	uxth	r1, r1
 800a0f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a0f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0f8:	f846 1b04 	str.w	r1, [r6], #4
 800a0fc:	e7dc      	b.n	800a0b8 <__mdiff+0xd4>
 800a0fe:	3f01      	subs	r7, #1
 800a100:	e7e6      	b.n	800a0d0 <__mdiff+0xec>
 800a102:	bf00      	nop
 800a104:	0800a9d2 	.word	0x0800a9d2
 800a108:	0800a9e3 	.word	0x0800a9e3

0800a10c <__d2b>:
 800a10c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a110:	2101      	movs	r1, #1
 800a112:	4690      	mov	r8, r2
 800a114:	4699      	mov	r9, r3
 800a116:	9e08      	ldr	r6, [sp, #32]
 800a118:	f7ff fcd0 	bl	8009abc <_Balloc>
 800a11c:	4604      	mov	r4, r0
 800a11e:	b930      	cbnz	r0, 800a12e <__d2b+0x22>
 800a120:	4602      	mov	r2, r0
 800a122:	f240 310f 	movw	r1, #783	@ 0x30f
 800a126:	4b23      	ldr	r3, [pc, #140]	@ (800a1b4 <__d2b+0xa8>)
 800a128:	4823      	ldr	r0, [pc, #140]	@ (800a1b8 <__d2b+0xac>)
 800a12a:	f000 fac3 	bl	800a6b4 <__assert_func>
 800a12e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a132:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a136:	b10d      	cbz	r5, 800a13c <__d2b+0x30>
 800a138:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	f1b8 0300 	subs.w	r3, r8, #0
 800a142:	d024      	beq.n	800a18e <__d2b+0x82>
 800a144:	4668      	mov	r0, sp
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	f7ff fd7f 	bl	8009c4a <__lo0bits>
 800a14c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a150:	b1d8      	cbz	r0, 800a18a <__d2b+0x7e>
 800a152:	f1c0 0320 	rsb	r3, r0, #32
 800a156:	fa02 f303 	lsl.w	r3, r2, r3
 800a15a:	430b      	orrs	r3, r1
 800a15c:	40c2      	lsrs	r2, r0
 800a15e:	6163      	str	r3, [r4, #20]
 800a160:	9201      	str	r2, [sp, #4]
 800a162:	9b01      	ldr	r3, [sp, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	bf0c      	ite	eq
 800a168:	2201      	moveq	r2, #1
 800a16a:	2202      	movne	r2, #2
 800a16c:	61a3      	str	r3, [r4, #24]
 800a16e:	6122      	str	r2, [r4, #16]
 800a170:	b1ad      	cbz	r5, 800a19e <__d2b+0x92>
 800a172:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a176:	4405      	add	r5, r0
 800a178:	6035      	str	r5, [r6, #0]
 800a17a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a180:	6018      	str	r0, [r3, #0]
 800a182:	4620      	mov	r0, r4
 800a184:	b002      	add	sp, #8
 800a186:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a18a:	6161      	str	r1, [r4, #20]
 800a18c:	e7e9      	b.n	800a162 <__d2b+0x56>
 800a18e:	a801      	add	r0, sp, #4
 800a190:	f7ff fd5b 	bl	8009c4a <__lo0bits>
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	6163      	str	r3, [r4, #20]
 800a19a:	3020      	adds	r0, #32
 800a19c:	e7e7      	b.n	800a16e <__d2b+0x62>
 800a19e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a1a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1a6:	6030      	str	r0, [r6, #0]
 800a1a8:	6918      	ldr	r0, [r3, #16]
 800a1aa:	f7ff fd2f 	bl	8009c0c <__hi0bits>
 800a1ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1b2:	e7e4      	b.n	800a17e <__d2b+0x72>
 800a1b4:	0800a9d2 	.word	0x0800a9d2
 800a1b8:	0800a9e3 	.word	0x0800a9e3

0800a1bc <__sfputc_r>:
 800a1bc:	6893      	ldr	r3, [r2, #8]
 800a1be:	b410      	push	{r4}
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	6093      	str	r3, [r2, #8]
 800a1c6:	da07      	bge.n	800a1d8 <__sfputc_r+0x1c>
 800a1c8:	6994      	ldr	r4, [r2, #24]
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	db01      	blt.n	800a1d2 <__sfputc_r+0x16>
 800a1ce:	290a      	cmp	r1, #10
 800a1d0:	d102      	bne.n	800a1d8 <__sfputc_r+0x1c>
 800a1d2:	bc10      	pop	{r4}
 800a1d4:	f7fe bb9b 	b.w	800890e <__swbuf_r>
 800a1d8:	6813      	ldr	r3, [r2, #0]
 800a1da:	1c58      	adds	r0, r3, #1
 800a1dc:	6010      	str	r0, [r2, #0]
 800a1de:	7019      	strb	r1, [r3, #0]
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	bc10      	pop	{r4}
 800a1e4:	4770      	bx	lr

0800a1e6 <__sfputs_r>:
 800a1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e8:	4606      	mov	r6, r0
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	4614      	mov	r4, r2
 800a1ee:	18d5      	adds	r5, r2, r3
 800a1f0:	42ac      	cmp	r4, r5
 800a1f2:	d101      	bne.n	800a1f8 <__sfputs_r+0x12>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e007      	b.n	800a208 <__sfputs_r+0x22>
 800a1f8:	463a      	mov	r2, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a200:	f7ff ffdc 	bl	800a1bc <__sfputc_r>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d1f3      	bne.n	800a1f0 <__sfputs_r+0xa>
 800a208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a20c <_vfiprintf_r>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	460d      	mov	r5, r1
 800a212:	4614      	mov	r4, r2
 800a214:	4698      	mov	r8, r3
 800a216:	4606      	mov	r6, r0
 800a218:	b09d      	sub	sp, #116	@ 0x74
 800a21a:	b118      	cbz	r0, 800a224 <_vfiprintf_r+0x18>
 800a21c:	6a03      	ldr	r3, [r0, #32]
 800a21e:	b90b      	cbnz	r3, 800a224 <_vfiprintf_r+0x18>
 800a220:	f7fe fa8c 	bl	800873c <__sinit>
 800a224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a226:	07d9      	lsls	r1, r3, #31
 800a228:	d405      	bmi.n	800a236 <_vfiprintf_r+0x2a>
 800a22a:	89ab      	ldrh	r3, [r5, #12]
 800a22c:	059a      	lsls	r2, r3, #22
 800a22e:	d402      	bmi.n	800a236 <_vfiprintf_r+0x2a>
 800a230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a232:	f7fe fcd4 	bl	8008bde <__retarget_lock_acquire_recursive>
 800a236:	89ab      	ldrh	r3, [r5, #12]
 800a238:	071b      	lsls	r3, r3, #28
 800a23a:	d501      	bpl.n	800a240 <_vfiprintf_r+0x34>
 800a23c:	692b      	ldr	r3, [r5, #16]
 800a23e:	b99b      	cbnz	r3, 800a268 <_vfiprintf_r+0x5c>
 800a240:	4629      	mov	r1, r5
 800a242:	4630      	mov	r0, r6
 800a244:	f7fe fba2 	bl	800898c <__swsetup_r>
 800a248:	b170      	cbz	r0, 800a268 <_vfiprintf_r+0x5c>
 800a24a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a24c:	07dc      	lsls	r4, r3, #31
 800a24e:	d504      	bpl.n	800a25a <_vfiprintf_r+0x4e>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b01d      	add	sp, #116	@ 0x74
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	0598      	lsls	r0, r3, #22
 800a25e:	d4f7      	bmi.n	800a250 <_vfiprintf_r+0x44>
 800a260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a262:	f7fe fcbd 	bl	8008be0 <__retarget_lock_release_recursive>
 800a266:	e7f3      	b.n	800a250 <_vfiprintf_r+0x44>
 800a268:	2300      	movs	r3, #0
 800a26a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a26c:	2320      	movs	r3, #32
 800a26e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a272:	2330      	movs	r3, #48	@ 0x30
 800a274:	f04f 0901 	mov.w	r9, #1
 800a278:	f8cd 800c 	str.w	r8, [sp, #12]
 800a27c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a428 <_vfiprintf_r+0x21c>
 800a280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a284:	4623      	mov	r3, r4
 800a286:	469a      	mov	sl, r3
 800a288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a28c:	b10a      	cbz	r2, 800a292 <_vfiprintf_r+0x86>
 800a28e:	2a25      	cmp	r2, #37	@ 0x25
 800a290:	d1f9      	bne.n	800a286 <_vfiprintf_r+0x7a>
 800a292:	ebba 0b04 	subs.w	fp, sl, r4
 800a296:	d00b      	beq.n	800a2b0 <_vfiprintf_r+0xa4>
 800a298:	465b      	mov	r3, fp
 800a29a:	4622      	mov	r2, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ffa1 	bl	800a1e6 <__sfputs_r>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f000 80a7 	beq.w	800a3f8 <_vfiprintf_r+0x1ec>
 800a2aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2ac:	445a      	add	r2, fp
 800a2ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 809f 	beq.w	800a3f8 <_vfiprintf_r+0x1ec>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c4:	f10a 0a01 	add.w	sl, sl, #1
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	9307      	str	r3, [sp, #28]
 800a2cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2d2:	4654      	mov	r4, sl
 800a2d4:	2205      	movs	r2, #5
 800a2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2da:	4853      	ldr	r0, [pc, #332]	@ (800a428 <_vfiprintf_r+0x21c>)
 800a2dc:	f7fe fc81 	bl	8008be2 <memchr>
 800a2e0:	9a04      	ldr	r2, [sp, #16]
 800a2e2:	b9d8      	cbnz	r0, 800a31c <_vfiprintf_r+0x110>
 800a2e4:	06d1      	lsls	r1, r2, #27
 800a2e6:	bf44      	itt	mi
 800a2e8:	2320      	movmi	r3, #32
 800a2ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ee:	0713      	lsls	r3, r2, #28
 800a2f0:	bf44      	itt	mi
 800a2f2:	232b      	movmi	r3, #43	@ 0x2b
 800a2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2fe:	d015      	beq.n	800a32c <_vfiprintf_r+0x120>
 800a300:	4654      	mov	r4, sl
 800a302:	2000      	movs	r0, #0
 800a304:	f04f 0c0a 	mov.w	ip, #10
 800a308:	9a07      	ldr	r2, [sp, #28]
 800a30a:	4621      	mov	r1, r4
 800a30c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a310:	3b30      	subs	r3, #48	@ 0x30
 800a312:	2b09      	cmp	r3, #9
 800a314:	d94b      	bls.n	800a3ae <_vfiprintf_r+0x1a2>
 800a316:	b1b0      	cbz	r0, 800a346 <_vfiprintf_r+0x13a>
 800a318:	9207      	str	r2, [sp, #28]
 800a31a:	e014      	b.n	800a346 <_vfiprintf_r+0x13a>
 800a31c:	eba0 0308 	sub.w	r3, r0, r8
 800a320:	fa09 f303 	lsl.w	r3, r9, r3
 800a324:	4313      	orrs	r3, r2
 800a326:	46a2      	mov	sl, r4
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	e7d2      	b.n	800a2d2 <_vfiprintf_r+0xc6>
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	1d19      	adds	r1, r3, #4
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	9103      	str	r1, [sp, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	bfbb      	ittet	lt
 800a338:	425b      	neglt	r3, r3
 800a33a:	f042 0202 	orrlt.w	r2, r2, #2
 800a33e:	9307      	strge	r3, [sp, #28]
 800a340:	9307      	strlt	r3, [sp, #28]
 800a342:	bfb8      	it	lt
 800a344:	9204      	strlt	r2, [sp, #16]
 800a346:	7823      	ldrb	r3, [r4, #0]
 800a348:	2b2e      	cmp	r3, #46	@ 0x2e
 800a34a:	d10a      	bne.n	800a362 <_vfiprintf_r+0x156>
 800a34c:	7863      	ldrb	r3, [r4, #1]
 800a34e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a350:	d132      	bne.n	800a3b8 <_vfiprintf_r+0x1ac>
 800a352:	9b03      	ldr	r3, [sp, #12]
 800a354:	3402      	adds	r4, #2
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	9203      	str	r2, [sp, #12]
 800a35c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a360:	9305      	str	r3, [sp, #20]
 800a362:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a42c <_vfiprintf_r+0x220>
 800a366:	2203      	movs	r2, #3
 800a368:	4650      	mov	r0, sl
 800a36a:	7821      	ldrb	r1, [r4, #0]
 800a36c:	f7fe fc39 	bl	8008be2 <memchr>
 800a370:	b138      	cbz	r0, 800a382 <_vfiprintf_r+0x176>
 800a372:	2240      	movs	r2, #64	@ 0x40
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	eba0 000a 	sub.w	r0, r0, sl
 800a37a:	4082      	lsls	r2, r0
 800a37c:	4313      	orrs	r3, r2
 800a37e:	3401      	adds	r4, #1
 800a380:	9304      	str	r3, [sp, #16]
 800a382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a386:	2206      	movs	r2, #6
 800a388:	4829      	ldr	r0, [pc, #164]	@ (800a430 <_vfiprintf_r+0x224>)
 800a38a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a38e:	f7fe fc28 	bl	8008be2 <memchr>
 800a392:	2800      	cmp	r0, #0
 800a394:	d03f      	beq.n	800a416 <_vfiprintf_r+0x20a>
 800a396:	4b27      	ldr	r3, [pc, #156]	@ (800a434 <_vfiprintf_r+0x228>)
 800a398:	bb1b      	cbnz	r3, 800a3e2 <_vfiprintf_r+0x1d6>
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	3307      	adds	r3, #7
 800a39e:	f023 0307 	bic.w	r3, r3, #7
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a8:	443b      	add	r3, r7
 800a3aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ac:	e76a      	b.n	800a284 <_vfiprintf_r+0x78>
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	2001      	movs	r0, #1
 800a3b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b6:	e7a8      	b.n	800a30a <_vfiprintf_r+0xfe>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f04f 0c0a 	mov.w	ip, #10
 800a3be:	4619      	mov	r1, r3
 800a3c0:	3401      	adds	r4, #1
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ca:	3a30      	subs	r2, #48	@ 0x30
 800a3cc:	2a09      	cmp	r2, #9
 800a3ce:	d903      	bls.n	800a3d8 <_vfiprintf_r+0x1cc>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d0c6      	beq.n	800a362 <_vfiprintf_r+0x156>
 800a3d4:	9105      	str	r1, [sp, #20]
 800a3d6:	e7c4      	b.n	800a362 <_vfiprintf_r+0x156>
 800a3d8:	4604      	mov	r4, r0
 800a3da:	2301      	movs	r3, #1
 800a3dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e0:	e7f0      	b.n	800a3c4 <_vfiprintf_r+0x1b8>
 800a3e2:	ab03      	add	r3, sp, #12
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	462a      	mov	r2, r5
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4b13      	ldr	r3, [pc, #76]	@ (800a438 <_vfiprintf_r+0x22c>)
 800a3ec:	a904      	add	r1, sp, #16
 800a3ee:	f7fd fd5b 	bl	8007ea8 <_printf_float>
 800a3f2:	4607      	mov	r7, r0
 800a3f4:	1c78      	adds	r0, r7, #1
 800a3f6:	d1d6      	bne.n	800a3a6 <_vfiprintf_r+0x19a>
 800a3f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3fa:	07d9      	lsls	r1, r3, #31
 800a3fc:	d405      	bmi.n	800a40a <_vfiprintf_r+0x1fe>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	059a      	lsls	r2, r3, #22
 800a402:	d402      	bmi.n	800a40a <_vfiprintf_r+0x1fe>
 800a404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a406:	f7fe fbeb 	bl	8008be0 <__retarget_lock_release_recursive>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	065b      	lsls	r3, r3, #25
 800a40e:	f53f af1f 	bmi.w	800a250 <_vfiprintf_r+0x44>
 800a412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a414:	e71e      	b.n	800a254 <_vfiprintf_r+0x48>
 800a416:	ab03      	add	r3, sp, #12
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	462a      	mov	r2, r5
 800a41c:	4630      	mov	r0, r6
 800a41e:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <_vfiprintf_r+0x22c>)
 800a420:	a904      	add	r1, sp, #16
 800a422:	f7fd ffdf 	bl	80083e4 <_printf_i>
 800a426:	e7e4      	b.n	800a3f2 <_vfiprintf_r+0x1e6>
 800a428:	0800ab38 	.word	0x0800ab38
 800a42c:	0800ab3e 	.word	0x0800ab3e
 800a430:	0800ab42 	.word	0x0800ab42
 800a434:	08007ea9 	.word	0x08007ea9
 800a438:	0800a1e7 	.word	0x0800a1e7

0800a43c <__sflush_r>:
 800a43c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	0716      	lsls	r6, r2, #28
 800a444:	4605      	mov	r5, r0
 800a446:	460c      	mov	r4, r1
 800a448:	d454      	bmi.n	800a4f4 <__sflush_r+0xb8>
 800a44a:	684b      	ldr	r3, [r1, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	dc02      	bgt.n	800a456 <__sflush_r+0x1a>
 800a450:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	dd48      	ble.n	800a4e8 <__sflush_r+0xac>
 800a456:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a458:	2e00      	cmp	r6, #0
 800a45a:	d045      	beq.n	800a4e8 <__sflush_r+0xac>
 800a45c:	2300      	movs	r3, #0
 800a45e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a462:	682f      	ldr	r7, [r5, #0]
 800a464:	6a21      	ldr	r1, [r4, #32]
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	d030      	beq.n	800a4cc <__sflush_r+0x90>
 800a46a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	0759      	lsls	r1, r3, #29
 800a470:	d505      	bpl.n	800a47e <__sflush_r+0x42>
 800a472:	6863      	ldr	r3, [r4, #4]
 800a474:	1ad2      	subs	r2, r2, r3
 800a476:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a478:	b10b      	cbz	r3, 800a47e <__sflush_r+0x42>
 800a47a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a47c:	1ad2      	subs	r2, r2, r3
 800a47e:	2300      	movs	r3, #0
 800a480:	4628      	mov	r0, r5
 800a482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a484:	6a21      	ldr	r1, [r4, #32]
 800a486:	47b0      	blx	r6
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	d106      	bne.n	800a49c <__sflush_r+0x60>
 800a48e:	6829      	ldr	r1, [r5, #0]
 800a490:	291d      	cmp	r1, #29
 800a492:	d82b      	bhi.n	800a4ec <__sflush_r+0xb0>
 800a494:	4a28      	ldr	r2, [pc, #160]	@ (800a538 <__sflush_r+0xfc>)
 800a496:	410a      	asrs	r2, r1
 800a498:	07d6      	lsls	r6, r2, #31
 800a49a:	d427      	bmi.n	800a4ec <__sflush_r+0xb0>
 800a49c:	2200      	movs	r2, #0
 800a49e:	6062      	str	r2, [r4, #4]
 800a4a0:	6922      	ldr	r2, [r4, #16]
 800a4a2:	04d9      	lsls	r1, r3, #19
 800a4a4:	6022      	str	r2, [r4, #0]
 800a4a6:	d504      	bpl.n	800a4b2 <__sflush_r+0x76>
 800a4a8:	1c42      	adds	r2, r0, #1
 800a4aa:	d101      	bne.n	800a4b0 <__sflush_r+0x74>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b903      	cbnz	r3, 800a4b2 <__sflush_r+0x76>
 800a4b0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4b4:	602f      	str	r7, [r5, #0]
 800a4b6:	b1b9      	cbz	r1, 800a4e8 <__sflush_r+0xac>
 800a4b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4bc:	4299      	cmp	r1, r3
 800a4be:	d002      	beq.n	800a4c6 <__sflush_r+0x8a>
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f7ff f9fd 	bl	80098c0 <_free_r>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4ca:	e00d      	b.n	800a4e8 <__sflush_r+0xac>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b0      	blx	r6
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	1c50      	adds	r0, r2, #1
 800a4d6:	d1c9      	bne.n	800a46c <__sflush_r+0x30>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0c6      	beq.n	800a46c <__sflush_r+0x30>
 800a4de:	2b1d      	cmp	r3, #29
 800a4e0:	d001      	beq.n	800a4e6 <__sflush_r+0xaa>
 800a4e2:	2b16      	cmp	r3, #22
 800a4e4:	d11d      	bne.n	800a522 <__sflush_r+0xe6>
 800a4e6:	602f      	str	r7, [r5, #0]
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e021      	b.n	800a530 <__sflush_r+0xf4>
 800a4ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4f0:	b21b      	sxth	r3, r3
 800a4f2:	e01a      	b.n	800a52a <__sflush_r+0xee>
 800a4f4:	690f      	ldr	r7, [r1, #16]
 800a4f6:	2f00      	cmp	r7, #0
 800a4f8:	d0f6      	beq.n	800a4e8 <__sflush_r+0xac>
 800a4fa:	0793      	lsls	r3, r2, #30
 800a4fc:	bf18      	it	ne
 800a4fe:	2300      	movne	r3, #0
 800a500:	680e      	ldr	r6, [r1, #0]
 800a502:	bf08      	it	eq
 800a504:	694b      	ldreq	r3, [r1, #20]
 800a506:	1bf6      	subs	r6, r6, r7
 800a508:	600f      	str	r7, [r1, #0]
 800a50a:	608b      	str	r3, [r1, #8]
 800a50c:	2e00      	cmp	r6, #0
 800a50e:	ddeb      	ble.n	800a4e8 <__sflush_r+0xac>
 800a510:	4633      	mov	r3, r6
 800a512:	463a      	mov	r2, r7
 800a514:	4628      	mov	r0, r5
 800a516:	6a21      	ldr	r1, [r4, #32]
 800a518:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a51c:	47e0      	blx	ip
 800a51e:	2800      	cmp	r0, #0
 800a520:	dc07      	bgt.n	800a532 <__sflush_r+0xf6>
 800a522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a52a:	f04f 30ff 	mov.w	r0, #4294967295
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a532:	4407      	add	r7, r0
 800a534:	1a36      	subs	r6, r6, r0
 800a536:	e7e9      	b.n	800a50c <__sflush_r+0xd0>
 800a538:	dfbffffe 	.word	0xdfbffffe

0800a53c <_fflush_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	690b      	ldr	r3, [r1, #16]
 800a540:	4605      	mov	r5, r0
 800a542:	460c      	mov	r4, r1
 800a544:	b913      	cbnz	r3, 800a54c <_fflush_r+0x10>
 800a546:	2500      	movs	r5, #0
 800a548:	4628      	mov	r0, r5
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	b118      	cbz	r0, 800a556 <_fflush_r+0x1a>
 800a54e:	6a03      	ldr	r3, [r0, #32]
 800a550:	b90b      	cbnz	r3, 800a556 <_fflush_r+0x1a>
 800a552:	f7fe f8f3 	bl	800873c <__sinit>
 800a556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0f3      	beq.n	800a546 <_fflush_r+0xa>
 800a55e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a560:	07d0      	lsls	r0, r2, #31
 800a562:	d404      	bmi.n	800a56e <_fflush_r+0x32>
 800a564:	0599      	lsls	r1, r3, #22
 800a566:	d402      	bmi.n	800a56e <_fflush_r+0x32>
 800a568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a56a:	f7fe fb38 	bl	8008bde <__retarget_lock_acquire_recursive>
 800a56e:	4628      	mov	r0, r5
 800a570:	4621      	mov	r1, r4
 800a572:	f7ff ff63 	bl	800a43c <__sflush_r>
 800a576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a578:	4605      	mov	r5, r0
 800a57a:	07da      	lsls	r2, r3, #31
 800a57c:	d4e4      	bmi.n	800a548 <_fflush_r+0xc>
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	059b      	lsls	r3, r3, #22
 800a582:	d4e1      	bmi.n	800a548 <_fflush_r+0xc>
 800a584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a586:	f7fe fb2b 	bl	8008be0 <__retarget_lock_release_recursive>
 800a58a:	e7dd      	b.n	800a548 <_fflush_r+0xc>

0800a58c <__swhatbuf_r>:
 800a58c:	b570      	push	{r4, r5, r6, lr}
 800a58e:	460c      	mov	r4, r1
 800a590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a594:	4615      	mov	r5, r2
 800a596:	2900      	cmp	r1, #0
 800a598:	461e      	mov	r6, r3
 800a59a:	b096      	sub	sp, #88	@ 0x58
 800a59c:	da0c      	bge.n	800a5b8 <__swhatbuf_r+0x2c>
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5a6:	bf14      	ite	ne
 800a5a8:	2340      	movne	r3, #64	@ 0x40
 800a5aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	6031      	str	r1, [r6, #0]
 800a5b2:	602b      	str	r3, [r5, #0]
 800a5b4:	b016      	add	sp, #88	@ 0x58
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	466a      	mov	r2, sp
 800a5ba:	f000 f849 	bl	800a650 <_fstat_r>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	dbed      	blt.n	800a59e <__swhatbuf_r+0x12>
 800a5c2:	9901      	ldr	r1, [sp, #4]
 800a5c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5cc:	4259      	negs	r1, r3
 800a5ce:	4159      	adcs	r1, r3
 800a5d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5d4:	e7eb      	b.n	800a5ae <__swhatbuf_r+0x22>

0800a5d6 <__smakebuf_r>:
 800a5d6:	898b      	ldrh	r3, [r1, #12]
 800a5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5da:	079d      	lsls	r5, r3, #30
 800a5dc:	4606      	mov	r6, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	d507      	bpl.n	800a5f2 <__smakebuf_r+0x1c>
 800a5e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5e6:	6023      	str	r3, [r4, #0]
 800a5e8:	6123      	str	r3, [r4, #16]
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	6163      	str	r3, [r4, #20]
 800a5ee:	b003      	add	sp, #12
 800a5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5f2:	466a      	mov	r2, sp
 800a5f4:	ab01      	add	r3, sp, #4
 800a5f6:	f7ff ffc9 	bl	800a58c <__swhatbuf_r>
 800a5fa:	9f00      	ldr	r7, [sp, #0]
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	4639      	mov	r1, r7
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff f9cf 	bl	80099a4 <_malloc_r>
 800a606:	b948      	cbnz	r0, 800a61c <__smakebuf_r+0x46>
 800a608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a60c:	059a      	lsls	r2, r3, #22
 800a60e:	d4ee      	bmi.n	800a5ee <__smakebuf_r+0x18>
 800a610:	f023 0303 	bic.w	r3, r3, #3
 800a614:	f043 0302 	orr.w	r3, r3, #2
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	e7e2      	b.n	800a5e2 <__smakebuf_r+0xc>
 800a61c:	89a3      	ldrh	r3, [r4, #12]
 800a61e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a626:	81a3      	strh	r3, [r4, #12]
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	6020      	str	r0, [r4, #0]
 800a62c:	b15b      	cbz	r3, 800a646 <__smakebuf_r+0x70>
 800a62e:	4630      	mov	r0, r6
 800a630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a634:	f000 f81e 	bl	800a674 <_isatty_r>
 800a638:	b128      	cbz	r0, 800a646 <__smakebuf_r+0x70>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f023 0303 	bic.w	r3, r3, #3
 800a640:	f043 0301 	orr.w	r3, r3, #1
 800a644:	81a3      	strh	r3, [r4, #12]
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	431d      	orrs	r5, r3
 800a64a:	81a5      	strh	r5, [r4, #12]
 800a64c:	e7cf      	b.n	800a5ee <__smakebuf_r+0x18>
	...

0800a650 <_fstat_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	2300      	movs	r3, #0
 800a654:	4d06      	ldr	r5, [pc, #24]	@ (800a670 <_fstat_r+0x20>)
 800a656:	4604      	mov	r4, r0
 800a658:	4608      	mov	r0, r1
 800a65a:	4611      	mov	r1, r2
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	f7f7 fe39 	bl	80022d4 <_fstat>
 800a662:	1c43      	adds	r3, r0, #1
 800a664:	d102      	bne.n	800a66c <_fstat_r+0x1c>
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	b103      	cbz	r3, 800a66c <_fstat_r+0x1c>
 800a66a:	6023      	str	r3, [r4, #0]
 800a66c:	bd38      	pop	{r3, r4, r5, pc}
 800a66e:	bf00      	nop
 800a670:	20001e3c 	.word	0x20001e3c

0800a674 <_isatty_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	2300      	movs	r3, #0
 800a678:	4d05      	ldr	r5, [pc, #20]	@ (800a690 <_isatty_r+0x1c>)
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	602b      	str	r3, [r5, #0]
 800a680:	f7f7 fe37 	bl	80022f2 <_isatty>
 800a684:	1c43      	adds	r3, r0, #1
 800a686:	d102      	bne.n	800a68e <_isatty_r+0x1a>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	b103      	cbz	r3, 800a68e <_isatty_r+0x1a>
 800a68c:	6023      	str	r3, [r4, #0]
 800a68e:	bd38      	pop	{r3, r4, r5, pc}
 800a690:	20001e3c 	.word	0x20001e3c

0800a694 <_sbrk_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	2300      	movs	r3, #0
 800a698:	4d05      	ldr	r5, [pc, #20]	@ (800a6b0 <_sbrk_r+0x1c>)
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	f7f7 fe3e 	bl	8002320 <_sbrk>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_sbrk_r+0x1a>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_sbrk_r+0x1a>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20001e3c 	.word	0x20001e3c

0800a6b4 <__assert_func>:
 800a6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4b09      	ldr	r3, [pc, #36]	@ (800a6e0 <__assert_func+0x2c>)
 800a6bc:	4605      	mov	r5, r0
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68d8      	ldr	r0, [r3, #12]
 800a6c2:	b954      	cbnz	r4, 800a6da <__assert_func+0x26>
 800a6c4:	4b07      	ldr	r3, [pc, #28]	@ (800a6e4 <__assert_func+0x30>)
 800a6c6:	461c      	mov	r4, r3
 800a6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6cc:	9100      	str	r1, [sp, #0]
 800a6ce:	462b      	mov	r3, r5
 800a6d0:	4905      	ldr	r1, [pc, #20]	@ (800a6e8 <__assert_func+0x34>)
 800a6d2:	f000 f841 	bl	800a758 <fiprintf>
 800a6d6:	f000 f851 	bl	800a77c <abort>
 800a6da:	4b04      	ldr	r3, [pc, #16]	@ (800a6ec <__assert_func+0x38>)
 800a6dc:	e7f4      	b.n	800a6c8 <__assert_func+0x14>
 800a6de:	bf00      	nop
 800a6e0:	2000001c 	.word	0x2000001c
 800a6e4:	0800ab8e 	.word	0x0800ab8e
 800a6e8:	0800ab60 	.word	0x0800ab60
 800a6ec:	0800ab53 	.word	0x0800ab53

0800a6f0 <_calloc_r>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	fba1 5402 	umull	r5, r4, r1, r2
 800a6f6:	b93c      	cbnz	r4, 800a708 <_calloc_r+0x18>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	f7ff f953 	bl	80099a4 <_malloc_r>
 800a6fe:	4606      	mov	r6, r0
 800a700:	b928      	cbnz	r0, 800a70e <_calloc_r+0x1e>
 800a702:	2600      	movs	r6, #0
 800a704:	4630      	mov	r0, r6
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	220c      	movs	r2, #12
 800a70a:	6002      	str	r2, [r0, #0]
 800a70c:	e7f9      	b.n	800a702 <_calloc_r+0x12>
 800a70e:	462a      	mov	r2, r5
 800a710:	4621      	mov	r1, r4
 800a712:	f7fe f991 	bl	8008a38 <memset>
 800a716:	e7f5      	b.n	800a704 <_calloc_r+0x14>

0800a718 <__ascii_mbtowc>:
 800a718:	b082      	sub	sp, #8
 800a71a:	b901      	cbnz	r1, 800a71e <__ascii_mbtowc+0x6>
 800a71c:	a901      	add	r1, sp, #4
 800a71e:	b142      	cbz	r2, 800a732 <__ascii_mbtowc+0x1a>
 800a720:	b14b      	cbz	r3, 800a736 <__ascii_mbtowc+0x1e>
 800a722:	7813      	ldrb	r3, [r2, #0]
 800a724:	600b      	str	r3, [r1, #0]
 800a726:	7812      	ldrb	r2, [r2, #0]
 800a728:	1e10      	subs	r0, r2, #0
 800a72a:	bf18      	it	ne
 800a72c:	2001      	movne	r0, #1
 800a72e:	b002      	add	sp, #8
 800a730:	4770      	bx	lr
 800a732:	4610      	mov	r0, r2
 800a734:	e7fb      	b.n	800a72e <__ascii_mbtowc+0x16>
 800a736:	f06f 0001 	mvn.w	r0, #1
 800a73a:	e7f8      	b.n	800a72e <__ascii_mbtowc+0x16>

0800a73c <__ascii_wctomb>:
 800a73c:	4603      	mov	r3, r0
 800a73e:	4608      	mov	r0, r1
 800a740:	b141      	cbz	r1, 800a754 <__ascii_wctomb+0x18>
 800a742:	2aff      	cmp	r2, #255	@ 0xff
 800a744:	d904      	bls.n	800a750 <__ascii_wctomb+0x14>
 800a746:	228a      	movs	r2, #138	@ 0x8a
 800a748:	f04f 30ff 	mov.w	r0, #4294967295
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	4770      	bx	lr
 800a750:	2001      	movs	r0, #1
 800a752:	700a      	strb	r2, [r1, #0]
 800a754:	4770      	bx	lr
	...

0800a758 <fiprintf>:
 800a758:	b40e      	push	{r1, r2, r3}
 800a75a:	b503      	push	{r0, r1, lr}
 800a75c:	4601      	mov	r1, r0
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	4805      	ldr	r0, [pc, #20]	@ (800a778 <fiprintf+0x20>)
 800a762:	f853 2b04 	ldr.w	r2, [r3], #4
 800a766:	6800      	ldr	r0, [r0, #0]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	f7ff fd4f 	bl	800a20c <_vfiprintf_r>
 800a76e:	b002      	add	sp, #8
 800a770:	f85d eb04 	ldr.w	lr, [sp], #4
 800a774:	b003      	add	sp, #12
 800a776:	4770      	bx	lr
 800a778:	2000001c 	.word	0x2000001c

0800a77c <abort>:
 800a77c:	2006      	movs	r0, #6
 800a77e:	b508      	push	{r3, lr}
 800a780:	f000 f82c 	bl	800a7dc <raise>
 800a784:	2001      	movs	r0, #1
 800a786:	f7f7 fd56 	bl	8002236 <_exit>

0800a78a <_raise_r>:
 800a78a:	291f      	cmp	r1, #31
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4605      	mov	r5, r0
 800a790:	460c      	mov	r4, r1
 800a792:	d904      	bls.n	800a79e <_raise_r+0x14>
 800a794:	2316      	movs	r3, #22
 800a796:	6003      	str	r3, [r0, #0]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	bd38      	pop	{r3, r4, r5, pc}
 800a79e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7a0:	b112      	cbz	r2, 800a7a8 <_raise_r+0x1e>
 800a7a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7a6:	b94b      	cbnz	r3, 800a7bc <_raise_r+0x32>
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f000 f831 	bl	800a810 <_getpid_r>
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	4601      	mov	r1, r0
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7b8:	f000 b818 	b.w	800a7ec <_kill_r>
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d00a      	beq.n	800a7d6 <_raise_r+0x4c>
 800a7c0:	1c59      	adds	r1, r3, #1
 800a7c2:	d103      	bne.n	800a7cc <_raise_r+0x42>
 800a7c4:	2316      	movs	r3, #22
 800a7c6:	6003      	str	r3, [r0, #0]
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	e7e7      	b.n	800a79c <_raise_r+0x12>
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a7d4:	4798      	blx	r3
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	e7e0      	b.n	800a79c <_raise_r+0x12>
	...

0800a7dc <raise>:
 800a7dc:	4b02      	ldr	r3, [pc, #8]	@ (800a7e8 <raise+0xc>)
 800a7de:	4601      	mov	r1, r0
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	f7ff bfd2 	b.w	800a78a <_raise_r>
 800a7e6:	bf00      	nop
 800a7e8:	2000001c 	.word	0x2000001c

0800a7ec <_kill_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	4d06      	ldr	r5, [pc, #24]	@ (800a80c <_kill_r+0x20>)
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	602b      	str	r3, [r5, #0]
 800a7fa:	f7f7 fd0c 	bl	8002216 <_kill>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	d102      	bne.n	800a808 <_kill_r+0x1c>
 800a802:	682b      	ldr	r3, [r5, #0]
 800a804:	b103      	cbz	r3, 800a808 <_kill_r+0x1c>
 800a806:	6023      	str	r3, [r4, #0]
 800a808:	bd38      	pop	{r3, r4, r5, pc}
 800a80a:	bf00      	nop
 800a80c:	20001e3c 	.word	0x20001e3c

0800a810 <_getpid_r>:
 800a810:	f7f7 bcfa 	b.w	8002208 <_getpid>

0800a814 <_init>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr

0800a820 <_fini>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr
