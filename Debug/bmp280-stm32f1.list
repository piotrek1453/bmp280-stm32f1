
bmp280-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002834  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002940  08002940  00003940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002974  08002974  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002974  08002974  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002974  08002974  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002974  08002974  00003974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002978  08002978  00003978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800297c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000068  080029e4  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  080029e4  000042bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9e4  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a3  00000000  00000000  00012a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00014e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfa  00000000  00000000  00015d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001862d  00000000  00000000  00016952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d8a  00000000  00000000  0002ef7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e567  00000000  00000000  00041d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f0  00000000  00000000  000d02b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d48a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002928 	.word	0x08002928

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002928 	.word	0x08002928

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b38      	ldr	r3, [pc, #224]	@ (8000244 <MX_GPIO_Init+0xf8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a37      	ldr	r2, [pc, #220]	@ (8000244 <MX_GPIO_Init+0xf8>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b35      	ldr	r3, [pc, #212]	@ (8000244 <MX_GPIO_Init+0xf8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b32      	ldr	r3, [pc, #200]	@ (8000244 <MX_GPIO_Init+0xf8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a31      	ldr	r2, [pc, #196]	@ (8000244 <MX_GPIO_Init+0xf8>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2f      	ldr	r3, [pc, #188]	@ (8000244 <MX_GPIO_Init+0xf8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b2c      	ldr	r3, [pc, #176]	@ (8000244 <MX_GPIO_Init+0xf8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a2b      	ldr	r2, [pc, #172]	@ (8000244 <MX_GPIO_Init+0xf8>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b29      	ldr	r3, [pc, #164]	@ (8000244 <MX_GPIO_Init+0xf8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b26      	ldr	r3, [pc, #152]	@ (8000244 <MX_GPIO_Init+0xf8>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a25      	ldr	r2, [pc, #148]	@ (8000244 <MX_GPIO_Init+0xf8>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b23      	ldr	r3, [pc, #140]	@ (8000244 <MX_GPIO_Init+0xf8>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c6:	4820      	ldr	r0, [pc, #128]	@ (8000248 <MX_GPIO_Init+0xfc>)
 80001c8:	f000 fe2a 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2104      	movs	r1, #4
 80001d0:	481e      	ldr	r0, [pc, #120]	@ (800024c <MX_GPIO_Init+0x100>)
 80001d2:	f000 fe25 	bl	8000e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_2_Pin;
 80001d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_2_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4816      	ldr	r0, [pc, #88]	@ (8000248 <MX_GPIO_Init+0xfc>)
 80001f0:	f000 fc92 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80001f4:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80001f8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001fa:	2303      	movs	r3, #3
 80001fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001fe:	f107 0310 	add.w	r3, r7, #16
 8000202:	4619      	mov	r1, r3
 8000204:	4812      	ldr	r0, [pc, #72]	@ (8000250 <MX_GPIO_Init+0x104>)
 8000206:	f000 fc87 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800020a:	f64f 733b 	movw	r3, #65339	@ 0xff3b
 800020e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000210:	2303      	movs	r3, #3
 8000212:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4619      	mov	r1, r3
 800021a:	480c      	ldr	r0, [pc, #48]	@ (800024c <MX_GPIO_Init+0x100>)
 800021c:	f000 fc7c 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_1_Pin;
 8000220:	2304      	movs	r3, #4
 8000222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000224:	2301      	movs	r3, #1
 8000226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000228:	2300      	movs	r3, #0
 800022a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022c:	2302      	movs	r3, #2
 800022e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_1_GPIO_Port, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_GPIO_Init+0x100>)
 8000238:	f000 fc6e 	bl	8000b18 <HAL_GPIO_Init>

}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40021000 	.word	0x40021000
 8000248:	40011000 	.word	0x40011000
 800024c:	40010c00 	.word	0x40010c00
 8000250:	40010800 	.word	0x40010800

08000254 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <MX_I2C1_Init+0x50>)
 800025a:	4a13      	ldr	r2, [pc, #76]	@ (80002a8 <MX_I2C1_Init+0x54>)
 800025c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800025e:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <MX_I2C1_Init+0x50>)
 8000260:	4a12      	ldr	r2, [pc, #72]	@ (80002ac <MX_I2C1_Init+0x58>)
 8000262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000264:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <MX_I2C1_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <MX_I2C1_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <MX_I2C1_Init+0x50>)
 8000272:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000278:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <MX_I2C1_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800027e:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <MX_I2C1_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <MX_I2C1_Init+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <MX_I2C1_Init+0x50>)
 800028c:	2200      	movs	r2, #0
 800028e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000290:	4804      	ldr	r0, [pc, #16]	@ (80002a4 <MX_I2C1_Init+0x50>)
 8000292:	f000 fdf7 	bl	8000e84 <HAL_I2C_Init>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800029c:	f000 f8da 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000084 	.word	0x20000084
 80002a8:	40005400 	.word	0x40005400
 80002ac:	000186a0 	.word	0x000186a0

080002b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b8:	f107 0310 	add.w	r3, r7, #16
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a15      	ldr	r2, [pc, #84]	@ (8000320 <HAL_I2C_MspInit+0x70>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d123      	bne.n	8000318 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <HAL_I2C_MspInit+0x74>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a13      	ldr	r2, [pc, #76]	@ (8000324 <HAL_I2C_MspInit+0x74>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <HAL_I2C_MspInit+0x74>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0308 	and.w	r3, r3, #8
 80002e4:	60fb      	str	r3, [r7, #12]
 80002e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002e8:	23c0      	movs	r3, #192	@ 0xc0
 80002ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002ec:	2312      	movs	r3, #18
 80002ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002f0:	2303      	movs	r3, #3
 80002f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f4:	f107 0310 	add.w	r3, r7, #16
 80002f8:	4619      	mov	r1, r3
 80002fa:	480b      	ldr	r0, [pc, #44]	@ (8000328 <HAL_I2C_MspInit+0x78>)
 80002fc:	f000 fc0c 	bl	8000b18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000300:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <HAL_I2C_MspInit+0x74>)
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	4a07      	ldr	r2, [pc, #28]	@ (8000324 <HAL_I2C_MspInit+0x74>)
 8000306:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800030a:	61d3      	str	r3, [r2, #28]
 800030c:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <HAL_I2C_MspInit+0x74>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000318:	bf00      	nop
 800031a:	3720      	adds	r7, #32
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40005400 	.word	0x40005400
 8000324:	40021000 	.word	0x40021000
 8000328:	40010c00 	.word	0x40010c00

0800032c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000330:	f000 fabc 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000334:	f000 f81e 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000338:	f7ff ff08 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 800033c:	f7ff ff8a 	bl	8000254 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000340:	f000 fa1a 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000344:	2104      	movs	r1, #4
 8000346:	4808      	ldr	r0, [pc, #32]	@ (8000368 <main+0x3c>)
 8000348:	f000 fd82 	bl	8000e50 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
 800034c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000350:	4806      	ldr	r0, [pc, #24]	@ (800036c <main+0x40>)
 8000352:	f000 fd7d 	bl	8000e50 <HAL_GPIO_TogglePin>
    printf("test\r\n");
 8000356:	4806      	ldr	r0, [pc, #24]	@ (8000370 <main+0x44>)
 8000358:	f001 ff58 	bl	800220c <puts>
    HAL_Delay(1000);
 800035c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000360:	f000 fad6 	bl	8000910 <HAL_Delay>
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000364:	bf00      	nop
 8000366:	e7ed      	b.n	8000344 <main+0x18>
 8000368:	40010c00 	.word	0x40010c00
 800036c:	40011000 	.word	0x40011000
 8000370:	08002940 	.word	0x08002940

08000374 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b090      	sub	sp, #64	@ 0x40
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	2228      	movs	r2, #40	@ 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f002 f822 	bl	80023cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000396:	2301      	movs	r3, #1
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a4:	2301      	movs	r3, #1
 80003a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	2302      	movs	r3, #2
 80003aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003b8:	f107 0318 	add.w	r3, r7, #24
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 fea5 	bl	800110c <HAL_RCC_OscConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0x58>
    Error_Handler();
 80003c8:	f000 f844 	bl	8000454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80003cc:	230f      	movs	r3, #15
 80003ce:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 f912 	bl	8001610 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x82>
    Error_Handler();
 80003f2:	f000 f82f 	bl	8000454 <Error_Handler>
  }
}
 80003f6:	bf00      	nop
 80003f8:	3740      	adds	r7, #64	@ 0x40
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <__io_putchar>:
/* USER CODE BEGIN 4 */

/**
 * @brief putchar() override - redirect printf to USART2
 */
int __io_putchar(int ch) {
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 8000408:	e000      	b.n	800040c <__io_putchar+0xc>
    asm("nop");
 800040a:	bf00      	nop
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 800040c:	4b07      	ldr	r3, [pc, #28]	@ (800042c <__io_putchar+0x2c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <__io_putchar+0xa>
  }
  USART2->DR = (ch & 0xFF); // write data to TX register
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a04      	ldr	r2, [pc, #16]	@ (800042c <__io_putchar+0x2c>)
 800041c:	b2db      	uxtb	r3, r3
 800041e:	6053      	str	r3, [r2, #4]
  return ch;
 8000420:	687b      	ldr	r3, [r7, #4]
}
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40004400 	.word	0x40004400

08000430 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a04      	ldr	r2, [pc, #16]	@ (8000450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d101      	bne.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000442:	f000 fa49 	bl	80008d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40000800 	.word	0x40000800

08000454 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
}
 800045a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <Error_Handler+0x8>

08000460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <HAL_MspInit+0x5c>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a14      	ldr	r2, [pc, #80]	@ (80004bc <HAL_MspInit+0x5c>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x5c>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <HAL_MspInit+0x5c>)
 8000484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000488:	61d3      	str	r3, [r2, #28]
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <HAL_MspInit+0x60>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <HAL_MspInit+0x60>)
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b2:	bf00      	nop
 80004b4:	3714      	adds	r7, #20
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40010000 	.word	0x40010000

080004c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08e      	sub	sp, #56	@ 0x38
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004cc:	2300      	movs	r3, #0
 80004ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004d0:	2300      	movs	r3, #0
 80004d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004d4:	2300      	movs	r3, #0
 80004d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004da:	4b34      	ldr	r3, [pc, #208]	@ (80005ac <HAL_InitTick+0xe8>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a33      	ldr	r2, [pc, #204]	@ (80005ac <HAL_InitTick+0xe8>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b31      	ldr	r3, [pc, #196]	@ (80005ac <HAL_InitTick+0xe8>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004f2:	f107 0210 	add.w	r2, r7, #16
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 f9f7 	bl	80018f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000502:	6a3b      	ldr	r3, [r7, #32]
 8000504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000508:	2b00      	cmp	r3, #0
 800050a:	d103      	bne.n	8000514 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800050c:	f001 f9c8 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8000510:	6378      	str	r0, [r7, #52]	@ 0x34
 8000512:	e004      	b.n	800051e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000514:	f001 f9c4 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8000518:	4603      	mov	r3, r0
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800051e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000520:	4a23      	ldr	r2, [pc, #140]	@ (80005b0 <HAL_InitTick+0xec>)
 8000522:	fba2 2303 	umull	r2, r3, r2, r3
 8000526:	0c9b      	lsrs	r3, r3, #18
 8000528:	3b01      	subs	r3, #1
 800052a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800052c:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <HAL_InitTick+0xf0>)
 800052e:	4a22      	ldr	r2, [pc, #136]	@ (80005b8 <HAL_InitTick+0xf4>)
 8000530:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000532:	4b20      	ldr	r3, [pc, #128]	@ (80005b4 <HAL_InitTick+0xf0>)
 8000534:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000538:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800053a:	4a1e      	ldr	r2, [pc, #120]	@ (80005b4 <HAL_InitTick+0xf0>)
 800053c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800053e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000540:	4b1c      	ldr	r3, [pc, #112]	@ (80005b4 <HAL_InitTick+0xf0>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000546:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <HAL_InitTick+0xf0>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054c:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <HAL_InitTick+0xf0>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000552:	4818      	ldr	r0, [pc, #96]	@ (80005b4 <HAL_InitTick+0xf0>)
 8000554:	f001 fa1a 	bl	800198c <HAL_TIM_Base_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800055e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000562:	2b00      	cmp	r3, #0
 8000564:	d11b      	bne.n	800059e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000566:	4813      	ldr	r0, [pc, #76]	@ (80005b4 <HAL_InitTick+0xf0>)
 8000568:	f001 fa68 	bl	8001a3c <HAL_TIM_Base_Start_IT>
 800056c:	4603      	mov	r3, r0
 800056e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000572:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000576:	2b00      	cmp	r3, #0
 8000578:	d111      	bne.n	800059e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800057a:	201e      	movs	r0, #30
 800057c:	f000 fabd 	bl	8000afa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b0f      	cmp	r3, #15
 8000584:	d808      	bhi.n	8000598 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000586:	2200      	movs	r2, #0
 8000588:	6879      	ldr	r1, [r7, #4]
 800058a:	201e      	movs	r0, #30
 800058c:	f000 fa99 	bl	8000ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000590:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <HAL_InitTick+0xf8>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	e002      	b.n	800059e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800059e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3738      	adds	r7, #56	@ 0x38
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	431bde83 	.word	0x431bde83
 80005b4:	200000d8 	.word	0x200000d8
 80005b8:	40000800 	.word	0x40000800
 80005bc:	20000004 	.word	0x20000004

080005c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <NMI_Handler+0x4>

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <HardFault_Handler+0x4>

080005d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <MemManage_Handler+0x4>

080005d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <BusFault_Handler+0x4>

080005e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <UsageFault_Handler+0x4>

080005e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <TIM4_IRQHandler+0x10>)
 800061e:	f001 fa5f 	bl	8001ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000d8 	.word	0x200000d8

0800062c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e00a      	b.n	8000654 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800063e:	f3af 8000 	nop.w
 8000642:	4601      	mov	r1, r0
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	b2ca      	uxtb	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf0      	blt.n	800063e <_read+0x12>
  }

  return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e009      	b.n	800068c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff febd 	bl	8000400 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf1      	blt.n	8000678 <_write+0x12>
  }
  return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_close>:

int _close(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006c4:	605a      	str	r2, [r3, #4]
  return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <_isatty>:

int _isatty(int file)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
	...

08000700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000708:	4a14      	ldr	r2, [pc, #80]	@ (800075c <_sbrk+0x5c>)
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <_sbrk+0x60>)
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <_sbrk+0x64>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <_sbrk+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	429a      	cmp	r2, r3
 800072e:	d207      	bcs.n	8000740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000730:	f001 fe9a 	bl	8002468 <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	e009      	b.n	8000754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000746:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <_sbrk+0x64>)
 8000750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20005000 	.word	0x20005000
 8000760:	00000400 	.word	0x00000400
 8000764:	20000120 	.word	0x20000120
 8000768:	200002c0 	.word	0x200002c0

0800076c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f001 fb36 	bl	8001e20 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f7ff fe4b 	bl	8000454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000124 	.word	0x20000124
 80007c8:	40004400 	.word	0x40004400

080007cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <HAL_UART_MspInit+0x88>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d12f      	bne.n	800084c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	4a19      	ldr	r2, [pc, #100]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 80007f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f6:	61d3      	str	r3, [r2, #28]
 80007f8:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a13      	ldr	r2, [pc, #76]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_UART_MspInit+0x8c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800081c:	2304      	movs	r3, #4
 800081e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	480b      	ldr	r0, [pc, #44]	@ (800085c <HAL_UART_MspInit+0x90>)
 8000830:	f000 f972 	bl	8000b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000834:	2308      	movs	r3, #8
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <HAL_UART_MspInit+0x90>)
 8000848:	f000 f966 	bl	8000b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40004400 	.word	0x40004400
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000860:	f7ff ff84 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000866:	490c      	ldr	r1, [pc, #48]	@ (8000898 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000868:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <LoopFillZerobss+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800087c:	4c09      	ldr	r4, [pc, #36]	@ (80008a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088a:	f001 fdf3 	bl	8002474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fd4d 	bl	800032c <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800089c:	0800297c 	.word	0x0800297c
  ldr r2, =_sbss
 80008a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008a4:	200002bc 	.word	0x200002bc

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f8f5 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	200f      	movs	r0, #15
 80008c4:	f7ff fdfe 	bl	80004c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fdca 	bl	8000460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	@ (80008f8 <HAL_IncTick+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000008 	.word	0x20000008
 80008f8:	2000016c 	.word	0x2000016c

080008fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	2000016c 	.word	0x2000016c

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff fff0 	bl	80008fc <HAL_GetTick>
 800091c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000936:	bf00      	nop
 8000938:	f7ff ffe0 	bl	80008fc <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	@ (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4906      	ldr	r1, [pc, #24]	@ (80009f0 <__NVIC_EnableIRQ+0x34>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	@ (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	@ (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	@ 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	@ 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff4f 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff64 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ffb2 	bl	8000a48 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff81 	bl	80009f4 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff57 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b08b      	sub	sp, #44	@ 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	e169      	b.n	8000e00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 8158 	bne.w	8000dfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	4a9a      	ldr	r2, [pc, #616]	@ (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d05e      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b54:	4a98      	ldr	r2, [pc, #608]	@ (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d875      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b5a:	4a98      	ldr	r2, [pc, #608]	@ (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d058      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b60:	4a96      	ldr	r2, [pc, #600]	@ (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d86f      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b66:	4a96      	ldr	r2, [pc, #600]	@ (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d052      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a94      	ldr	r2, [pc, #592]	@ (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d869      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b72:	4a94      	ldr	r2, [pc, #592]	@ (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d04c      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b78:	4a92      	ldr	r2, [pc, #584]	@ (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d863      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b7e:	4a92      	ldr	r2, [pc, #584]	@ (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d046      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
 8000b84:	4a90      	ldr	r2, [pc, #576]	@ (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d85d      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d82a      	bhi.n	8000be4 <HAL_GPIO_Init+0xcc>
 8000b8e:	2b12      	cmp	r3, #18
 8000b90:	d859      	bhi.n	8000c46 <HAL_GPIO_Init+0x12e>
 8000b92:	a201      	add	r2, pc, #4	@ (adr r2, 8000b98 <HAL_GPIO_Init+0x80>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000bed 	.word	0x08000bed
 8000ba0:	08000bff 	.word	0x08000bff
 8000ba4:	08000c41 	.word	0x08000c41
 8000ba8:	08000c47 	.word	0x08000c47
 8000bac:	08000c47 	.word	0x08000c47
 8000bb0:	08000c47 	.word	0x08000c47
 8000bb4:	08000c47 	.word	0x08000c47
 8000bb8:	08000c47 	.word	0x08000c47
 8000bbc:	08000c47 	.word	0x08000c47
 8000bc0:	08000c47 	.word	0x08000c47
 8000bc4:	08000c47 	.word	0x08000c47
 8000bc8:	08000c47 	.word	0x08000c47
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000c47 	.word	0x08000c47
 8000bd4:	08000c47 	.word	0x08000c47
 8000bd8:	08000c47 	.word	0x08000c47
 8000bdc:	08000bf5 	.word	0x08000bf5
 8000be0:	08000c09 	.word	0x08000c09
 8000be4:	4a79      	ldr	r2, [pc, #484]	@ (8000dcc <HAL_GPIO_Init+0x2b4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d013      	beq.n	8000c12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bea:	e02c      	b.n	8000c46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e029      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e024      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	3308      	adds	r3, #8
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e01f      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	330c      	adds	r3, #12
 8000c0e:	623b      	str	r3, [r7, #32]
          break;
 8000c10:	e01a      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d102      	bne.n	8000c20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e013      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d105      	bne.n	8000c34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	611a      	str	r2, [r3, #16]
          break;
 8000c32:	e009      	b.n	8000c48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	615a      	str	r2, [r3, #20]
          break;
 8000c3e:	e003      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e000      	b.n	8000c48 <HAL_GPIO_Init+0x130>
          break;
 8000c46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	2bff      	cmp	r3, #255	@ 0xff
 8000c4c:	d801      	bhi.n	8000c52 <HAL_GPIO_Init+0x13a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	e001      	b.n	8000c56 <HAL_GPIO_Init+0x13e>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3304      	adds	r3, #4
 8000c56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2bff      	cmp	r3, #255	@ 0xff
 8000c5c:	d802      	bhi.n	8000c64 <HAL_GPIO_Init+0x14c>
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x152>
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	3b08      	subs	r3, #8
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	210f      	movs	r1, #15
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	6a39      	ldr	r1, [r7, #32]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	431a      	orrs	r2, r3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80b1 	beq.w	8000dfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c98:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd0 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cb0:	4a48      	ldr	r2, [pc, #288]	@ (8000dd4 <HAL_GPIO_Init+0x2bc>)
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a40      	ldr	r2, [pc, #256]	@ (8000dd8 <HAL_GPIO_Init+0x2c0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d013      	beq.n	8000d04 <HAL_GPIO_Init+0x1ec>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a3f      	ldr	r2, [pc, #252]	@ (8000ddc <HAL_GPIO_Init+0x2c4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d00d      	beq.n	8000d00 <HAL_GPIO_Init+0x1e8>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3e      	ldr	r2, [pc, #248]	@ (8000de0 <HAL_GPIO_Init+0x2c8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d007      	beq.n	8000cfc <HAL_GPIO_Init+0x1e4>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a3d      	ldr	r2, [pc, #244]	@ (8000de4 <HAL_GPIO_Init+0x2cc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d101      	bne.n	8000cf8 <HAL_GPIO_Init+0x1e0>
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e006      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	e004      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e002      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <HAL_GPIO_Init+0x1ee>
 8000d04:	2300      	movs	r3, #0
 8000d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d08:	f002 0203 	and.w	r2, r2, #3
 8000d0c:	0092      	lsls	r2, r2, #2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d16:	492f      	ldr	r1, [pc, #188]	@ (8000dd4 <HAL_GPIO_Init+0x2bc>)
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	492c      	ldr	r1, [pc, #176]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	608b      	str	r3, [r1, #8]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4928      	ldr	r1, [pc, #160]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d58:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	68da      	ldr	r2, [r3, #12]
 8000d5c:	4922      	ldr	r1, [pc, #136]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	60cb      	str	r3, [r1, #12]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d66:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	491e      	ldr	r1, [pc, #120]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d80:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4918      	ldr	r1, [pc, #96]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d8e:	4b16      	ldr	r3, [pc, #88]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	4914      	ldr	r1, [pc, #80]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d021      	beq.n	8000dec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	490e      	ldr	r1, [pc, #56]	@ (8000de8 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e021      	b.n	8000dfa <HAL_GPIO_Init+0x2e2>
 8000db6:	bf00      	nop
 8000db8:	10320000 	.word	0x10320000
 8000dbc:	10310000 	.word	0x10310000
 8000dc0:	10220000 	.word	0x10220000
 8000dc4:	10210000 	.word	0x10210000
 8000dc8:	10120000 	.word	0x10120000
 8000dcc:	10110000 	.word	0x10110000
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40011000 	.word	0x40011000
 8000de4:	40011400 	.word	0x40011400
 8000de8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_GPIO_Init+0x304>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4909      	ldr	r1, [pc, #36]	@ (8000e1c <HAL_GPIO_Init+0x304>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f47f ae8e 	bne.w	8000b2c <HAL_GPIO_Init+0x14>
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	372c      	adds	r7, #44	@ 0x2c
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	40010400 	.word	0x40010400

08000e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e30:	787b      	ldrb	r3, [r7, #1]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e3c:	e003      	b.n	8000e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	041a      	lsls	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	611a      	str	r2, [r3, #16]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4013      	ands	r3, r2
 8000e68:	041a      	lsls	r2, r3, #16
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	43d9      	mvns	r1, r3
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	400b      	ands	r3, r1
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	611a      	str	r2, [r3, #16]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
	...

08000e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e12b      	b.n	80010ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d106      	bne.n	8000eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fa00 	bl	80002b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2224      	movs	r2, #36	@ 0x24
 8000eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0201 	bic.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ee8:	f000 fcda 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8000eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a81      	ldr	r2, [pc, #516]	@ (80010f8 <HAL_I2C_Init+0x274>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d807      	bhi.n	8000f08 <HAL_I2C_Init+0x84>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4a80      	ldr	r2, [pc, #512]	@ (80010fc <HAL_I2C_Init+0x278>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	bf94      	ite	ls
 8000f00:	2301      	movls	r3, #1
 8000f02:	2300      	movhi	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	e006      	b.n	8000f16 <HAL_I2C_Init+0x92>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001100 <HAL_I2C_Init+0x27c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	bf94      	ite	ls
 8000f10:	2301      	movls	r3, #1
 8000f12:	2300      	movhi	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e0e7      	b.n	80010ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4a78      	ldr	r2, [pc, #480]	@ (8001104 <HAL_I2C_Init+0x280>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80010f8 <HAL_I2C_Init+0x274>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d802      	bhi.n	8000f58 <HAL_I2C_Init+0xd4>
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	3301      	adds	r3, #1
 8000f56:	e009      	b.n	8000f6c <HAL_I2C_Init+0xe8>
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	4a69      	ldr	r2, [pc, #420]	@ (8001108 <HAL_I2C_Init+0x284>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	099b      	lsrs	r3, r3, #6
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	495c      	ldr	r1, [pc, #368]	@ (80010f8 <HAL_I2C_Init+0x274>)
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d819      	bhi.n	8000fc0 <HAL_I2C_Init+0x13c>
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	1e59      	subs	r1, r3, #1
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f9a:	1c59      	adds	r1, r3, #1
 8000f9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000fa0:	400b      	ands	r3, r1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00a      	beq.n	8000fbc <HAL_I2C_Init+0x138>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	1e59      	subs	r1, r3, #1
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fba:	e051      	b.n	8001060 <HAL_I2C_Init+0x1dc>
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	e04f      	b.n	8001060 <HAL_I2C_Init+0x1dc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d111      	bne.n	8000fec <HAL_I2C_Init+0x168>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1e58      	subs	r0, r3, #1
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	440b      	add	r3, r1
 8000fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fda:	3301      	adds	r3, #1
 8000fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	bf0c      	ite	eq
 8000fe4:	2301      	moveq	r3, #1
 8000fe6:	2300      	movne	r3, #0
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	e012      	b.n	8001012 <HAL_I2C_Init+0x18e>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	1e58      	subs	r0, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6859      	ldr	r1, [r3, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	0099      	lsls	r1, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001002:	3301      	adds	r3, #1
 8001004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2C_Init+0x196>
 8001016:	2301      	movs	r3, #1
 8001018:	e022      	b.n	8001060 <HAL_I2C_Init+0x1dc>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10e      	bne.n	8001040 <HAL_I2C_Init+0x1bc>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	1e58      	subs	r0, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6859      	ldr	r1, [r3, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	440b      	add	r3, r1
 8001030:	fbb0 f3f3 	udiv	r3, r0, r3
 8001034:	3301      	adds	r3, #1
 8001036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800103e:	e00f      	b.n	8001060 <HAL_I2C_Init+0x1dc>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	1e58      	subs	r0, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	0099      	lsls	r1, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	fbb0 f3f3 	udiv	r3, r0, r3
 8001056:	3301      	adds	r3, #1
 8001058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	6809      	ldr	r1, [r1, #0]
 8001064:	4313      	orrs	r3, r2
 8001066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69da      	ldr	r2, [r3, #28]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	431a      	orrs	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800108e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6911      	ldr	r1, [r2, #16]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68d2      	ldr	r2, [r2, #12]
 800109a:	4311      	orrs	r1, r2
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	430b      	orrs	r3, r1
 80010a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2220      	movs	r2, #32
 80010da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	000186a0 	.word	0x000186a0
 80010fc:	001e847f 	.word	0x001e847f
 8001100:	003d08ff 	.word	0x003d08ff
 8001104:	431bde83 	.word	0x431bde83
 8001108:	10624dd3 	.word	0x10624dd3

0800110c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e272      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800112c:	4b92      	ldr	r3, [pc, #584]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b04      	cmp	r3, #4
 8001136:	d00c      	beq.n	8001152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001138:	4b8f      	ldr	r3, [pc, #572]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d112      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
 8001144:	4b8c      	ldr	r3, [pc, #560]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001150:	d10b      	bne.n	800116a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	4b89      	ldr	r3, [pc, #548]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d06c      	beq.n	8001238 <HAL_RCC_OscConfig+0x12c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d168      	bne.n	8001238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e24c      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x76>
 8001174:	4b80      	ldr	r3, [pc, #512]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a7f      	ldr	r2, [pc, #508]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e02e      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x98>
 800118a:	4b7b      	ldr	r3, [pc, #492]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7a      	ldr	r2, [pc, #488]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b78      	ldr	r3, [pc, #480]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a77      	ldr	r2, [pc, #476]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0xbc>
 80011ae:	4b72      	ldr	r3, [pc, #456]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a71      	ldr	r2, [pc, #452]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a6e      	ldr	r2, [pc, #440]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0xd4>
 80011c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b68      	ldr	r3, [pc, #416]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a67      	ldr	r2, [pc, #412]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb88 	bl	80008fc <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fb84 	bl	80008fc <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	@ 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e200      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe4>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fb74 	bl	80008fc <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fb70 	bl	80008fc <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e1ec      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x10c>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d063      	beq.n	800130e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001246:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001252:	4b49      	ldr	r3, [pc, #292]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b08      	cmp	r3, #8
 800125c:	d11c      	bne.n	8001298 <HAL_RCC_OscConfig+0x18c>
 800125e:	4b46      	ldr	r3, [pc, #280]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d116      	bne.n	8001298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	4b43      	ldr	r3, [pc, #268]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_RCC_OscConfig+0x176>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e1c0      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b3d      	ldr	r3, [pc, #244]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4939      	ldr	r1, [pc, #228]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	e03a      	b.n	800130e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d020      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a0:	4b36      	ldr	r3, [pc, #216]	@ (800137c <HAL_RCC_OscConfig+0x270>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb29 	bl	80008fc <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb25 	bl	80008fc <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1a1      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4927      	ldr	r1, [pc, #156]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e015      	b.n	800130e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <HAL_RCC_OscConfig+0x270>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb08 	bl	80008fc <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb04 	bl	80008fc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e180      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1f0      	bne.n	80012f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d03a      	beq.n	8001390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d019      	beq.n	8001356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_RCC_OscConfig+0x274>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001328:	f7ff fae8 	bl	80008fc <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff fae4 	bl	80008fc <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e160      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <HAL_RCC_OscConfig+0x26c>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f000 fafe 	bl	8001950 <RCC_Delay>
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_RCC_OscConfig+0x274>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff face 	bl	80008fc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001362:	e00f      	b.n	8001384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff faca 	bl	80008fc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d908      	bls.n	8001384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e146      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000
 800137c:	42420000 	.word	0x42420000
 8001380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	4b92      	ldr	r3, [pc, #584]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e9      	bne.n	8001364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80a6 	beq.w	80014ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b8b      	ldr	r3, [pc, #556]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10d      	bne.n	80013ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	4b88      	ldr	r3, [pc, #544]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a87      	ldr	r2, [pc, #540]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b85      	ldr	r3, [pc, #532]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b82      	ldr	r3, [pc, #520]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d6:	4b7f      	ldr	r3, [pc, #508]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7e      	ldr	r2, [pc, #504]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fa8b 	bl	80008fc <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ea:	f7ff fa87 	bl	80008fc <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b64      	cmp	r3, #100	@ 0x64
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e103      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	4b75      	ldr	r3, [pc, #468]	@ (80015d4 <HAL_RCC_OscConfig+0x4c8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0f0      	beq.n	80013ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x312>
 8001410:	4b6f      	ldr	r3, [pc, #444]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4a6e      	ldr	r2, [pc, #440]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	e02d      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x334>
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a69      	ldr	r2, [pc, #420]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	4b67      	ldr	r3, [pc, #412]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a66      	ldr	r2, [pc, #408]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0304 	bic.w	r3, r3, #4
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	e01c      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b05      	cmp	r3, #5
 8001446:	d10c      	bne.n	8001462 <HAL_RCC_OscConfig+0x356>
 8001448:	4b61      	ldr	r3, [pc, #388]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a60      	ldr	r2, [pc, #384]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800144e:	f043 0304 	orr.w	r3, r3, #4
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a5d      	ldr	r2, [pc, #372]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0x36e>
 8001462:	4b5b      	ldr	r3, [pc, #364]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4a5a      	ldr	r2, [pc, #360]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	6213      	str	r3, [r2, #32]
 800146e:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a57      	ldr	r2, [pc, #348]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f023 0304 	bic.w	r3, r3, #4
 8001478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d015      	beq.n	80014ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fa3b 	bl	80008fc <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fa37 	bl	80008fc <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0b1      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a0:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0ee      	beq.n	800148a <HAL_RCC_OscConfig+0x37e>
 80014ac:	e014      	b.n	80014d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fa25 	bl	80008fc <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b4:	e00a      	b.n	80014cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b6:	f7ff fa21 	bl	80008fc <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e09b      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	4b40      	ldr	r3, [pc, #256]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ee      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d105      	bne.n	80014ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014de:	4b3c      	ldr	r3, [pc, #240]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a3b      	ldr	r2, [pc, #236]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8087 	beq.w	8001602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f4:	4b36      	ldr	r3, [pc, #216]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d061      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d146      	bne.n	8001596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001508:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff f9f5 	bl	80008fc <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff f9f1 	bl	80008fc <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e06d      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001528:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800153c:	d108      	bne.n	8001550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4921      	ldr	r1, [pc, #132]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a19      	ldr	r1, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	430b      	orrs	r3, r1
 8001562:	491b      	ldr	r1, [pc, #108]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff f9c5 	bl	80008fc <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff f9c1 	bl	80008fc <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x46a>
 8001594:	e035      	b.n	8001602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_RCC_OscConfig+0x4cc>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff f9ae 	bl	80008fc <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff f9aa 	bl	80008fc <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e026      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x498>
 80015c2:	e01e      	b.n	8001602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e019      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40007000 	.word	0x40007000
 80015d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_RCC_OscConfig+0x500>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0d0      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b6a      	ldr	r3, [pc, #424]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b67      	ldr	r3, [pc, #412]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4965      	ldr	r1, [pc, #404]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0b8      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800166c:	4b59      	ldr	r3, [pc, #356]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a58      	ldr	r2, [pc, #352]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001684:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a52      	ldr	r2, [pc, #328]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800168e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	494d      	ldr	r1, [pc, #308]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d040      	beq.n	8001730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d115      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e07f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ce:	4b41      	ldr	r3, [pc, #260]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e073      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016de:	4b3d      	ldr	r3, [pc, #244]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e06b      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f023 0203 	bic.w	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4936      	ldr	r1, [pc, #216]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001700:	f7ff f8fc 	bl	80008fc <HAL_GetTick>
 8001704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	e00a      	b.n	800171e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f7ff f8f8 	bl	80008fc <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e053      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 020c 	and.w	r2, r3, #12
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	429a      	cmp	r2, r3
 800172e:	d1eb      	bne.n	8001708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d210      	bcs.n	8001760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b24      	ldr	r3, [pc, #144]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4922      	ldr	r1, [pc, #136]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e032      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4916      	ldr	r1, [pc, #88]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	490e      	ldr	r1, [pc, #56]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179e:	f000 f821 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	490a      	ldr	r1, [pc, #40]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c8>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <HAL_RCC_ClockConfig+0x1cc>)
 80017b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_RCC_ClockConfig+0x1d0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe80 	bl	80004c4 <HAL_InitTick>

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	08002948 	.word	0x08002948
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x94>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b04      	cmp	r3, #4
 800180c:	d002      	beq.n	8001814 <HAL_RCC_GetSysClockFreq+0x30>
 800180e:	2b08      	cmp	r3, #8
 8001810:	d003      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x36>
 8001812:	e027      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001816:	613b      	str	r3, [r7, #16]
      break;
 8001818:	e027      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001824:	5cd3      	ldrb	r3, [r2, r3]
 8001826:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d010      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001832:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <HAL_RCC_GetSysClockFreq+0x94>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	0c5b      	lsrs	r3, r3, #17
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	4a11      	ldr	r2, [pc, #68]	@ (8001884 <HAL_RCC_GetSysClockFreq+0xa0>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e004      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	613b      	str	r3, [r7, #16]
      break;
 8001862:	e002      	b.n	800186a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_RCC_GetSysClockFreq+0x98>)
 8001866:	613b      	str	r3, [r7, #16]
      break;
 8001868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186a:	693b      	ldr	r3, [r7, #16]
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	007a1200 	.word	0x007a1200
 8001880:	08002960 	.word	0x08002960
 8001884:	08002970 	.word	0x08002970
 8001888:	003d0900 	.word	0x003d0900

0800188c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b02      	ldr	r3, [pc, #8]	@ (800189c <HAL_RCC_GetHCLKFreq+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018a4:	f7ff fff2 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	4903      	ldr	r1, [pc, #12]	@ (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	08002958 	.word	0x08002958

080018c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018cc:	f7ff ffde 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0adb      	lsrs	r3, r3, #11
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	4903      	ldr	r1, [pc, #12]	@ (80018ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	08002958 	.word	0x08002958

080018f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	220f      	movs	r2, #15
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001900:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <HAL_RCC_GetClockConfig+0x58>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800190c:	4b0e      	ldr	r3, [pc, #56]	@ (8001948 <HAL_RCC_GetClockConfig+0x58>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_RCC_GetClockConfig+0x58>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001924:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <HAL_RCC_GetClockConfig+0x58>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_RCC_GetClockConfig+0x5c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0207 	and.w	r2, r3, #7
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	40021000 	.word	0x40021000
 800194c:	40022000 	.word	0x40022000

08001950 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <RCC_Delay+0x34>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <RCC_Delay+0x38>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0a5b      	lsrs	r3, r3, #9
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800196c:	bf00      	nop
  }
  while (Delay --);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	60fa      	str	r2, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f9      	bne.n	800196c <RCC_Delay+0x1c>
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000
 8001988:	10624dd3 	.word	0x10624dd3

0800198c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e041      	b.n	8001a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f839 	bl	8001a2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f000 f9b4 	bl	8001d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d001      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e03a      	b.n	8001aca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a18      	ldr	r2, [pc, #96]	@ (8001ad4 <HAL_TIM_Base_Start_IT+0x98>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00e      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a7e:	d009      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <HAL_TIM_Base_Start_IT+0xa0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d010      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab6:	e007      	b.n	8001ac8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40000800 	.word	0x40000800

08001ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d122      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d11b      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0202 	mvn.w	r2, #2
 8001b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f8ed 	bl	8001d02 <HAL_TIM_IC_CaptureCallback>
 8001b28:	e005      	b.n	8001b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f8e0 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f8ef 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d122      	bne.n	8001b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d11b      	bne.n	8001b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0204 	mvn.w	r2, #4
 8001b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2202      	movs	r2, #2
 8001b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f8c3 	bl	8001d02 <HAL_TIM_IC_CaptureCallback>
 8001b7c:	e005      	b.n	8001b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f8b6 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8c5 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d122      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d11b      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0208 	mvn.w	r2, #8
 8001bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f899 	bl	8001d02 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f88c 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f89b 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0210 	mvn.w	r2, #16
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f86f 	bl	8001d02 <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f862 	bl	8001cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f871 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10e      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0201 	mvn.w	r2, #1
 8001c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fbe6 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b80      	cmp	r3, #128	@ 0x80
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7c:	2b80      	cmp	r3, #128	@ 0x80
 8001c7e:	d107      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8bf 	bl	8001e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9a:	2b40      	cmp	r3, #64	@ 0x40
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca8:	2b40      	cmp	r3, #64	@ 0x40
 8001caa:	d107      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f835 	bl	8001d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d107      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0220 	mvn.w	r2, #32
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f88a 	bl	8001dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <TIM_Base_SetConfig+0xb8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d00b      	beq.n	8001d68 <TIM_Base_SetConfig+0x30>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d56:	d007      	beq.n	8001d68 <TIM_Base_SetConfig+0x30>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a26      	ldr	r2, [pc, #152]	@ (8001df4 <TIM_Base_SetConfig+0xbc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d003      	beq.n	8001d68 <TIM_Base_SetConfig+0x30>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a25      	ldr	r2, [pc, #148]	@ (8001df8 <TIM_Base_SetConfig+0xc0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d108      	bne.n	8001d7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <TIM_Base_SetConfig+0xb8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00b      	beq.n	8001d9a <TIM_Base_SetConfig+0x62>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d88:	d007      	beq.n	8001d9a <TIM_Base_SetConfig+0x62>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <TIM_Base_SetConfig+0xbc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d003      	beq.n	8001d9a <TIM_Base_SetConfig+0x62>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <TIM_Base_SetConfig+0xc0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d108      	bne.n	8001dac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <TIM_Base_SetConfig+0xb8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	615a      	str	r2, [r3, #20]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800

08001dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e042      	b.n	8001eb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fcc0 	bl	80007cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	@ 0x24
 8001e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f82b 	bl	8001ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001efa:	f023 030c 	bic.w	r3, r3, #12
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd4 <UART_SetConfig+0x114>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d103      	bne.n	8001f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f28:	f7ff fcce 	bl	80018c8 <HAL_RCC_GetPCLK2Freq>
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	e002      	b.n	8001f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f30:	f7ff fcb6 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8001f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009a      	lsls	r2, r3, #2
 8001f40:	441a      	add	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	4a22      	ldr	r2, [pc, #136]	@ (8001fd8 <UART_SetConfig+0x118>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	0119      	lsls	r1, r3, #4
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009a      	lsls	r2, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <UART_SetConfig+0x118>)
 8001f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2064      	movs	r0, #100	@ 0x64
 8001f76:	fb00 f303 	mul.w	r3, r0, r3
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	3332      	adds	r3, #50	@ 0x32
 8001f80:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <UART_SetConfig+0x118>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f8c:	4419      	add	r1, r3
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	009a      	lsls	r2, r3, #2
 8001f98:	441a      	add	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <UART_SetConfig+0x118>)
 8001fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2064      	movs	r0, #100	@ 0x64
 8001fae:	fb00 f303 	mul.w	r3, r0, r3
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	3332      	adds	r3, #50	@ 0x32
 8001fb8:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <UART_SetConfig+0x118>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	440a      	add	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	51eb851f 	.word	0x51eb851f

08001fdc <std>:
 8001fdc:	2300      	movs	r3, #0
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8001fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fea:	6083      	str	r3, [r0, #8]
 8001fec:	8181      	strh	r1, [r0, #12]
 8001fee:	6643      	str	r3, [r0, #100]	@ 0x64
 8001ff0:	81c2      	strh	r2, [r0, #14]
 8001ff2:	6183      	str	r3, [r0, #24]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	305c      	adds	r0, #92	@ 0x5c
 8001ffa:	f000 f9e7 	bl	80023cc <memset>
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8002034 <std+0x58>)
 8002000:	6224      	str	r4, [r4, #32]
 8002002:	6263      	str	r3, [r4, #36]	@ 0x24
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <std+0x5c>)
 8002006:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <std+0x60>)
 800200a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <std+0x64>)
 800200e:	6323      	str	r3, [r4, #48]	@ 0x30
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <std+0x68>)
 8002012:	429c      	cmp	r4, r3
 8002014:	d006      	beq.n	8002024 <std+0x48>
 8002016:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800201a:	4294      	cmp	r4, r2
 800201c:	d002      	beq.n	8002024 <std+0x48>
 800201e:	33d0      	adds	r3, #208	@ 0xd0
 8002020:	429c      	cmp	r4, r3
 8002022:	d105      	bne.n	8002030 <std+0x54>
 8002024:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800202c:	f000 ba46 	b.w	80024bc <__retarget_lock_init_recursive>
 8002030:	bd10      	pop	{r4, pc}
 8002032:	bf00      	nop
 8002034:	0800221d 	.word	0x0800221d
 8002038:	0800223f 	.word	0x0800223f
 800203c:	08002277 	.word	0x08002277
 8002040:	0800229b 	.word	0x0800229b
 8002044:	20000170 	.word	0x20000170

08002048 <stdio_exit_handler>:
 8002048:	4a02      	ldr	r2, [pc, #8]	@ (8002054 <stdio_exit_handler+0xc>)
 800204a:	4903      	ldr	r1, [pc, #12]	@ (8002058 <stdio_exit_handler+0x10>)
 800204c:	4803      	ldr	r0, [pc, #12]	@ (800205c <stdio_exit_handler+0x14>)
 800204e:	f000 b869 	b.w	8002124 <_fwalk_sglue>
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c
 8002058:	080027b1 	.word	0x080027b1
 800205c:	2000001c 	.word	0x2000001c

08002060 <cleanup_stdio>:
 8002060:	6841      	ldr	r1, [r0, #4]
 8002062:	4b0c      	ldr	r3, [pc, #48]	@ (8002094 <cleanup_stdio+0x34>)
 8002064:	b510      	push	{r4, lr}
 8002066:	4299      	cmp	r1, r3
 8002068:	4604      	mov	r4, r0
 800206a:	d001      	beq.n	8002070 <cleanup_stdio+0x10>
 800206c:	f000 fba0 	bl	80027b0 <_fflush_r>
 8002070:	68a1      	ldr	r1, [r4, #8]
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <cleanup_stdio+0x38>)
 8002074:	4299      	cmp	r1, r3
 8002076:	d002      	beq.n	800207e <cleanup_stdio+0x1e>
 8002078:	4620      	mov	r0, r4
 800207a:	f000 fb99 	bl	80027b0 <_fflush_r>
 800207e:	68e1      	ldr	r1, [r4, #12]
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <cleanup_stdio+0x3c>)
 8002082:	4299      	cmp	r1, r3
 8002084:	d004      	beq.n	8002090 <cleanup_stdio+0x30>
 8002086:	4620      	mov	r0, r4
 8002088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800208c:	f000 bb90 	b.w	80027b0 <_fflush_r>
 8002090:	bd10      	pop	{r4, pc}
 8002092:	bf00      	nop
 8002094:	20000170 	.word	0x20000170
 8002098:	200001d8 	.word	0x200001d8
 800209c:	20000240 	.word	0x20000240

080020a0 <global_stdio_init.part.0>:
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <global_stdio_init.part.0+0x30>)
 80020a4:	4c0b      	ldr	r4, [pc, #44]	@ (80020d4 <global_stdio_init.part.0+0x34>)
 80020a6:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <global_stdio_init.part.0+0x38>)
 80020a8:	4620      	mov	r0, r4
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	2104      	movs	r1, #4
 80020ae:	2200      	movs	r2, #0
 80020b0:	f7ff ff94 	bl	8001fdc <std>
 80020b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80020b8:	2201      	movs	r2, #1
 80020ba:	2109      	movs	r1, #9
 80020bc:	f7ff ff8e 	bl	8001fdc <std>
 80020c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80020c4:	2202      	movs	r2, #2
 80020c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ca:	2112      	movs	r1, #18
 80020cc:	f7ff bf86 	b.w	8001fdc <std>
 80020d0:	200002a8 	.word	0x200002a8
 80020d4:	20000170 	.word	0x20000170
 80020d8:	08002049 	.word	0x08002049

080020dc <__sfp_lock_acquire>:
 80020dc:	4801      	ldr	r0, [pc, #4]	@ (80020e4 <__sfp_lock_acquire+0x8>)
 80020de:	f000 b9ee 	b.w	80024be <__retarget_lock_acquire_recursive>
 80020e2:	bf00      	nop
 80020e4:	200002b1 	.word	0x200002b1

080020e8 <__sfp_lock_release>:
 80020e8:	4801      	ldr	r0, [pc, #4]	@ (80020f0 <__sfp_lock_release+0x8>)
 80020ea:	f000 b9e9 	b.w	80024c0 <__retarget_lock_release_recursive>
 80020ee:	bf00      	nop
 80020f0:	200002b1 	.word	0x200002b1

080020f4 <__sinit>:
 80020f4:	b510      	push	{r4, lr}
 80020f6:	4604      	mov	r4, r0
 80020f8:	f7ff fff0 	bl	80020dc <__sfp_lock_acquire>
 80020fc:	6a23      	ldr	r3, [r4, #32]
 80020fe:	b11b      	cbz	r3, 8002108 <__sinit+0x14>
 8002100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002104:	f7ff bff0 	b.w	80020e8 <__sfp_lock_release>
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <__sinit+0x28>)
 800210a:	6223      	str	r3, [r4, #32]
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__sinit+0x2c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f5      	bne.n	8002100 <__sinit+0xc>
 8002114:	f7ff ffc4 	bl	80020a0 <global_stdio_init.part.0>
 8002118:	e7f2      	b.n	8002100 <__sinit+0xc>
 800211a:	bf00      	nop
 800211c:	08002061 	.word	0x08002061
 8002120:	200002a8 	.word	0x200002a8

08002124 <_fwalk_sglue>:
 8002124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002128:	4607      	mov	r7, r0
 800212a:	4688      	mov	r8, r1
 800212c:	4614      	mov	r4, r2
 800212e:	2600      	movs	r6, #0
 8002130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002134:	f1b9 0901 	subs.w	r9, r9, #1
 8002138:	d505      	bpl.n	8002146 <_fwalk_sglue+0x22>
 800213a:	6824      	ldr	r4, [r4, #0]
 800213c:	2c00      	cmp	r4, #0
 800213e:	d1f7      	bne.n	8002130 <_fwalk_sglue+0xc>
 8002140:	4630      	mov	r0, r6
 8002142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002146:	89ab      	ldrh	r3, [r5, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d907      	bls.n	800215c <_fwalk_sglue+0x38>
 800214c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002150:	3301      	adds	r3, #1
 8002152:	d003      	beq.n	800215c <_fwalk_sglue+0x38>
 8002154:	4629      	mov	r1, r5
 8002156:	4638      	mov	r0, r7
 8002158:	47c0      	blx	r8
 800215a:	4306      	orrs	r6, r0
 800215c:	3568      	adds	r5, #104	@ 0x68
 800215e:	e7e9      	b.n	8002134 <_fwalk_sglue+0x10>

08002160 <_puts_r>:
 8002160:	6a03      	ldr	r3, [r0, #32]
 8002162:	b570      	push	{r4, r5, r6, lr}
 8002164:	4605      	mov	r5, r0
 8002166:	460e      	mov	r6, r1
 8002168:	6884      	ldr	r4, [r0, #8]
 800216a:	b90b      	cbnz	r3, 8002170 <_puts_r+0x10>
 800216c:	f7ff ffc2 	bl	80020f4 <__sinit>
 8002170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002172:	07db      	lsls	r3, r3, #31
 8002174:	d405      	bmi.n	8002182 <_puts_r+0x22>
 8002176:	89a3      	ldrh	r3, [r4, #12]
 8002178:	0598      	lsls	r0, r3, #22
 800217a:	d402      	bmi.n	8002182 <_puts_r+0x22>
 800217c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800217e:	f000 f99e 	bl	80024be <__retarget_lock_acquire_recursive>
 8002182:	89a3      	ldrh	r3, [r4, #12]
 8002184:	0719      	lsls	r1, r3, #28
 8002186:	d502      	bpl.n	800218e <_puts_r+0x2e>
 8002188:	6923      	ldr	r3, [r4, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d135      	bne.n	80021fa <_puts_r+0x9a>
 800218e:	4621      	mov	r1, r4
 8002190:	4628      	mov	r0, r5
 8002192:	f000 f8c5 	bl	8002320 <__swsetup_r>
 8002196:	b380      	cbz	r0, 80021fa <_puts_r+0x9a>
 8002198:	f04f 35ff 	mov.w	r5, #4294967295
 800219c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800219e:	07da      	lsls	r2, r3, #31
 80021a0:	d405      	bmi.n	80021ae <_puts_r+0x4e>
 80021a2:	89a3      	ldrh	r3, [r4, #12]
 80021a4:	059b      	lsls	r3, r3, #22
 80021a6:	d402      	bmi.n	80021ae <_puts_r+0x4e>
 80021a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021aa:	f000 f989 	bl	80024c0 <__retarget_lock_release_recursive>
 80021ae:	4628      	mov	r0, r5
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	da04      	bge.n	80021c0 <_puts_r+0x60>
 80021b6:	69a2      	ldr	r2, [r4, #24]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dc17      	bgt.n	80021ec <_puts_r+0x8c>
 80021bc:	290a      	cmp	r1, #10
 80021be:	d015      	beq.n	80021ec <_puts_r+0x8c>
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	6022      	str	r2, [r4, #0]
 80021c6:	7019      	strb	r1, [r3, #0]
 80021c8:	68a3      	ldr	r3, [r4, #8]
 80021ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021ce:	3b01      	subs	r3, #1
 80021d0:	60a3      	str	r3, [r4, #8]
 80021d2:	2900      	cmp	r1, #0
 80021d4:	d1ed      	bne.n	80021b2 <_puts_r+0x52>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da11      	bge.n	80021fe <_puts_r+0x9e>
 80021da:	4622      	mov	r2, r4
 80021dc:	210a      	movs	r1, #10
 80021de:	4628      	mov	r0, r5
 80021e0:	f000 f85f 	bl	80022a2 <__swbuf_r>
 80021e4:	3001      	adds	r0, #1
 80021e6:	d0d7      	beq.n	8002198 <_puts_r+0x38>
 80021e8:	250a      	movs	r5, #10
 80021ea:	e7d7      	b.n	800219c <_puts_r+0x3c>
 80021ec:	4622      	mov	r2, r4
 80021ee:	4628      	mov	r0, r5
 80021f0:	f000 f857 	bl	80022a2 <__swbuf_r>
 80021f4:	3001      	adds	r0, #1
 80021f6:	d1e7      	bne.n	80021c8 <_puts_r+0x68>
 80021f8:	e7ce      	b.n	8002198 <_puts_r+0x38>
 80021fa:	3e01      	subs	r6, #1
 80021fc:	e7e4      	b.n	80021c8 <_puts_r+0x68>
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	6022      	str	r2, [r4, #0]
 8002204:	220a      	movs	r2, #10
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	e7ee      	b.n	80021e8 <_puts_r+0x88>
	...

0800220c <puts>:
 800220c:	4b02      	ldr	r3, [pc, #8]	@ (8002218 <puts+0xc>)
 800220e:	4601      	mov	r1, r0
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	f7ff bfa5 	b.w	8002160 <_puts_r>
 8002216:	bf00      	nop
 8002218:	20000018 	.word	0x20000018

0800221c <__sread>:
 800221c:	b510      	push	{r4, lr}
 800221e:	460c      	mov	r4, r1
 8002220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002224:	f000 f8fc 	bl	8002420 <_read_r>
 8002228:	2800      	cmp	r0, #0
 800222a:	bfab      	itete	ge
 800222c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800222e:	89a3      	ldrhlt	r3, [r4, #12]
 8002230:	181b      	addge	r3, r3, r0
 8002232:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002236:	bfac      	ite	ge
 8002238:	6563      	strge	r3, [r4, #84]	@ 0x54
 800223a:	81a3      	strhlt	r3, [r4, #12]
 800223c:	bd10      	pop	{r4, pc}

0800223e <__swrite>:
 800223e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002242:	461f      	mov	r7, r3
 8002244:	898b      	ldrh	r3, [r1, #12]
 8002246:	4605      	mov	r5, r0
 8002248:	05db      	lsls	r3, r3, #23
 800224a:	460c      	mov	r4, r1
 800224c:	4616      	mov	r6, r2
 800224e:	d505      	bpl.n	800225c <__swrite+0x1e>
 8002250:	2302      	movs	r3, #2
 8002252:	2200      	movs	r2, #0
 8002254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002258:	f000 f8d0 	bl	80023fc <_lseek_r>
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	4632      	mov	r2, r6
 8002260:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002264:	81a3      	strh	r3, [r4, #12]
 8002266:	4628      	mov	r0, r5
 8002268:	463b      	mov	r3, r7
 800226a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800226e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002272:	f000 b8e7 	b.w	8002444 <_write_r>

08002276 <__sseek>:
 8002276:	b510      	push	{r4, lr}
 8002278:	460c      	mov	r4, r1
 800227a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800227e:	f000 f8bd 	bl	80023fc <_lseek_r>
 8002282:	1c43      	adds	r3, r0, #1
 8002284:	89a3      	ldrh	r3, [r4, #12]
 8002286:	bf15      	itete	ne
 8002288:	6560      	strne	r0, [r4, #84]	@ 0x54
 800228a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800228e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002292:	81a3      	strheq	r3, [r4, #12]
 8002294:	bf18      	it	ne
 8002296:	81a3      	strhne	r3, [r4, #12]
 8002298:	bd10      	pop	{r4, pc}

0800229a <__sclose>:
 800229a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800229e:	f000 b89d 	b.w	80023dc <_close_r>

080022a2 <__swbuf_r>:
 80022a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a4:	460e      	mov	r6, r1
 80022a6:	4614      	mov	r4, r2
 80022a8:	4605      	mov	r5, r0
 80022aa:	b118      	cbz	r0, 80022b4 <__swbuf_r+0x12>
 80022ac:	6a03      	ldr	r3, [r0, #32]
 80022ae:	b90b      	cbnz	r3, 80022b4 <__swbuf_r+0x12>
 80022b0:	f7ff ff20 	bl	80020f4 <__sinit>
 80022b4:	69a3      	ldr	r3, [r4, #24]
 80022b6:	60a3      	str	r3, [r4, #8]
 80022b8:	89a3      	ldrh	r3, [r4, #12]
 80022ba:	071a      	lsls	r2, r3, #28
 80022bc:	d501      	bpl.n	80022c2 <__swbuf_r+0x20>
 80022be:	6923      	ldr	r3, [r4, #16]
 80022c0:	b943      	cbnz	r3, 80022d4 <__swbuf_r+0x32>
 80022c2:	4621      	mov	r1, r4
 80022c4:	4628      	mov	r0, r5
 80022c6:	f000 f82b 	bl	8002320 <__swsetup_r>
 80022ca:	b118      	cbz	r0, 80022d4 <__swbuf_r+0x32>
 80022cc:	f04f 37ff 	mov.w	r7, #4294967295
 80022d0:	4638      	mov	r0, r7
 80022d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	6922      	ldr	r2, [r4, #16]
 80022d8:	b2f6      	uxtb	r6, r6
 80022da:	1a98      	subs	r0, r3, r2
 80022dc:	6963      	ldr	r3, [r4, #20]
 80022de:	4637      	mov	r7, r6
 80022e0:	4283      	cmp	r3, r0
 80022e2:	dc05      	bgt.n	80022f0 <__swbuf_r+0x4e>
 80022e4:	4621      	mov	r1, r4
 80022e6:	4628      	mov	r0, r5
 80022e8:	f000 fa62 	bl	80027b0 <_fflush_r>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1ed      	bne.n	80022cc <__swbuf_r+0x2a>
 80022f0:	68a3      	ldr	r3, [r4, #8]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60a3      	str	r3, [r4, #8]
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	6022      	str	r2, [r4, #0]
 80022fc:	701e      	strb	r6, [r3, #0]
 80022fe:	6962      	ldr	r2, [r4, #20]
 8002300:	1c43      	adds	r3, r0, #1
 8002302:	429a      	cmp	r2, r3
 8002304:	d004      	beq.n	8002310 <__swbuf_r+0x6e>
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	07db      	lsls	r3, r3, #31
 800230a:	d5e1      	bpl.n	80022d0 <__swbuf_r+0x2e>
 800230c:	2e0a      	cmp	r6, #10
 800230e:	d1df      	bne.n	80022d0 <__swbuf_r+0x2e>
 8002310:	4621      	mov	r1, r4
 8002312:	4628      	mov	r0, r5
 8002314:	f000 fa4c 	bl	80027b0 <_fflush_r>
 8002318:	2800      	cmp	r0, #0
 800231a:	d0d9      	beq.n	80022d0 <__swbuf_r+0x2e>
 800231c:	e7d6      	b.n	80022cc <__swbuf_r+0x2a>
	...

08002320 <__swsetup_r>:
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <__swsetup_r+0xa8>)
 8002324:	4605      	mov	r5, r0
 8002326:	6818      	ldr	r0, [r3, #0]
 8002328:	460c      	mov	r4, r1
 800232a:	b118      	cbz	r0, 8002334 <__swsetup_r+0x14>
 800232c:	6a03      	ldr	r3, [r0, #32]
 800232e:	b90b      	cbnz	r3, 8002334 <__swsetup_r+0x14>
 8002330:	f7ff fee0 	bl	80020f4 <__sinit>
 8002334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002338:	0719      	lsls	r1, r3, #28
 800233a:	d422      	bmi.n	8002382 <__swsetup_r+0x62>
 800233c:	06da      	lsls	r2, r3, #27
 800233e:	d407      	bmi.n	8002350 <__swsetup_r+0x30>
 8002340:	2209      	movs	r2, #9
 8002342:	602a      	str	r2, [r5, #0]
 8002344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	81a3      	strh	r3, [r4, #12]
 800234e:	e033      	b.n	80023b8 <__swsetup_r+0x98>
 8002350:	0758      	lsls	r0, r3, #29
 8002352:	d512      	bpl.n	800237a <__swsetup_r+0x5a>
 8002354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002356:	b141      	cbz	r1, 800236a <__swsetup_r+0x4a>
 8002358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800235c:	4299      	cmp	r1, r3
 800235e:	d002      	beq.n	8002366 <__swsetup_r+0x46>
 8002360:	4628      	mov	r0, r5
 8002362:	f000 f8af 	bl	80024c4 <_free_r>
 8002366:	2300      	movs	r3, #0
 8002368:	6363      	str	r3, [r4, #52]	@ 0x34
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002370:	81a3      	strh	r3, [r4, #12]
 8002372:	2300      	movs	r3, #0
 8002374:	6063      	str	r3, [r4, #4]
 8002376:	6923      	ldr	r3, [r4, #16]
 8002378:	6023      	str	r3, [r4, #0]
 800237a:	89a3      	ldrh	r3, [r4, #12]
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	81a3      	strh	r3, [r4, #12]
 8002382:	6923      	ldr	r3, [r4, #16]
 8002384:	b94b      	cbnz	r3, 800239a <__swsetup_r+0x7a>
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800238c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002390:	d003      	beq.n	800239a <__swsetup_r+0x7a>
 8002392:	4621      	mov	r1, r4
 8002394:	4628      	mov	r0, r5
 8002396:	f000 fa58 	bl	800284a <__smakebuf_r>
 800239a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800239e:	f013 0201 	ands.w	r2, r3, #1
 80023a2:	d00a      	beq.n	80023ba <__swsetup_r+0x9a>
 80023a4:	2200      	movs	r2, #0
 80023a6:	60a2      	str	r2, [r4, #8]
 80023a8:	6962      	ldr	r2, [r4, #20]
 80023aa:	4252      	negs	r2, r2
 80023ac:	61a2      	str	r2, [r4, #24]
 80023ae:	6922      	ldr	r2, [r4, #16]
 80023b0:	b942      	cbnz	r2, 80023c4 <__swsetup_r+0xa4>
 80023b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80023b6:	d1c5      	bne.n	8002344 <__swsetup_r+0x24>
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	0799      	lsls	r1, r3, #30
 80023bc:	bf58      	it	pl
 80023be:	6962      	ldrpl	r2, [r4, #20]
 80023c0:	60a2      	str	r2, [r4, #8]
 80023c2:	e7f4      	b.n	80023ae <__swsetup_r+0x8e>
 80023c4:	2000      	movs	r0, #0
 80023c6:	e7f7      	b.n	80023b8 <__swsetup_r+0x98>
 80023c8:	20000018 	.word	0x20000018

080023cc <memset>:
 80023cc:	4603      	mov	r3, r0
 80023ce:	4402      	add	r2, r0
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d100      	bne.n	80023d6 <memset+0xa>
 80023d4:	4770      	bx	lr
 80023d6:	f803 1b01 	strb.w	r1, [r3], #1
 80023da:	e7f9      	b.n	80023d0 <memset+0x4>

080023dc <_close_r>:
 80023dc:	b538      	push	{r3, r4, r5, lr}
 80023de:	2300      	movs	r3, #0
 80023e0:	4d05      	ldr	r5, [pc, #20]	@ (80023f8 <_close_r+0x1c>)
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	602b      	str	r3, [r5, #0]
 80023e8:	f7fe f959 	bl	800069e <_close>
 80023ec:	1c43      	adds	r3, r0, #1
 80023ee:	d102      	bne.n	80023f6 <_close_r+0x1a>
 80023f0:	682b      	ldr	r3, [r5, #0]
 80023f2:	b103      	cbz	r3, 80023f6 <_close_r+0x1a>
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	bd38      	pop	{r3, r4, r5, pc}
 80023f8:	200002ac 	.word	0x200002ac

080023fc <_lseek_r>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	2200      	movs	r2, #0
 8002406:	4d05      	ldr	r5, [pc, #20]	@ (800241c <_lseek_r+0x20>)
 8002408:	602a      	str	r2, [r5, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	f7fe f96b 	bl	80006e6 <_lseek>
 8002410:	1c43      	adds	r3, r0, #1
 8002412:	d102      	bne.n	800241a <_lseek_r+0x1e>
 8002414:	682b      	ldr	r3, [r5, #0]
 8002416:	b103      	cbz	r3, 800241a <_lseek_r+0x1e>
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	200002ac 	.word	0x200002ac

08002420 <_read_r>:
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4604      	mov	r4, r0
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	2200      	movs	r2, #0
 800242a:	4d05      	ldr	r5, [pc, #20]	@ (8002440 <_read_r+0x20>)
 800242c:	602a      	str	r2, [r5, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	f7fe f8fc 	bl	800062c <_read>
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	d102      	bne.n	800243e <_read_r+0x1e>
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	b103      	cbz	r3, 800243e <_read_r+0x1e>
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	bd38      	pop	{r3, r4, r5, pc}
 8002440:	200002ac 	.word	0x200002ac

08002444 <_write_r>:
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	2200      	movs	r2, #0
 800244e:	4d05      	ldr	r5, [pc, #20]	@ (8002464 <_write_r+0x20>)
 8002450:	602a      	str	r2, [r5, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	f7fe f907 	bl	8000666 <_write>
 8002458:	1c43      	adds	r3, r0, #1
 800245a:	d102      	bne.n	8002462 <_write_r+0x1e>
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	b103      	cbz	r3, 8002462 <_write_r+0x1e>
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	200002ac 	.word	0x200002ac

08002468 <__errno>:
 8002468:	4b01      	ldr	r3, [pc, #4]	@ (8002470 <__errno+0x8>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000018 	.word	0x20000018

08002474 <__libc_init_array>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	2600      	movs	r6, #0
 8002478:	4d0c      	ldr	r5, [pc, #48]	@ (80024ac <__libc_init_array+0x38>)
 800247a:	4c0d      	ldr	r4, [pc, #52]	@ (80024b0 <__libc_init_array+0x3c>)
 800247c:	1b64      	subs	r4, r4, r5
 800247e:	10a4      	asrs	r4, r4, #2
 8002480:	42a6      	cmp	r6, r4
 8002482:	d109      	bne.n	8002498 <__libc_init_array+0x24>
 8002484:	f000 fa50 	bl	8002928 <_init>
 8002488:	2600      	movs	r6, #0
 800248a:	4d0a      	ldr	r5, [pc, #40]	@ (80024b4 <__libc_init_array+0x40>)
 800248c:	4c0a      	ldr	r4, [pc, #40]	@ (80024b8 <__libc_init_array+0x44>)
 800248e:	1b64      	subs	r4, r4, r5
 8002490:	10a4      	asrs	r4, r4, #2
 8002492:	42a6      	cmp	r6, r4
 8002494:	d105      	bne.n	80024a2 <__libc_init_array+0x2e>
 8002496:	bd70      	pop	{r4, r5, r6, pc}
 8002498:	f855 3b04 	ldr.w	r3, [r5], #4
 800249c:	4798      	blx	r3
 800249e:	3601      	adds	r6, #1
 80024a0:	e7ee      	b.n	8002480 <__libc_init_array+0xc>
 80024a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a6:	4798      	blx	r3
 80024a8:	3601      	adds	r6, #1
 80024aa:	e7f2      	b.n	8002492 <__libc_init_array+0x1e>
 80024ac:	08002974 	.word	0x08002974
 80024b0:	08002974 	.word	0x08002974
 80024b4:	08002974 	.word	0x08002974
 80024b8:	08002978 	.word	0x08002978

080024bc <__retarget_lock_init_recursive>:
 80024bc:	4770      	bx	lr

080024be <__retarget_lock_acquire_recursive>:
 80024be:	4770      	bx	lr

080024c0 <__retarget_lock_release_recursive>:
 80024c0:	4770      	bx	lr
	...

080024c4 <_free_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4605      	mov	r5, r0
 80024c8:	2900      	cmp	r1, #0
 80024ca:	d040      	beq.n	800254e <_free_r+0x8a>
 80024cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024d0:	1f0c      	subs	r4, r1, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bfb8      	it	lt
 80024d6:	18e4      	addlt	r4, r4, r3
 80024d8:	f000 f8de 	bl	8002698 <__malloc_lock>
 80024dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002550 <_free_r+0x8c>)
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	b933      	cbnz	r3, 80024f0 <_free_r+0x2c>
 80024e2:	6063      	str	r3, [r4, #4]
 80024e4:	6014      	str	r4, [r2, #0]
 80024e6:	4628      	mov	r0, r5
 80024e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024ec:	f000 b8da 	b.w	80026a4 <__malloc_unlock>
 80024f0:	42a3      	cmp	r3, r4
 80024f2:	d908      	bls.n	8002506 <_free_r+0x42>
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	1821      	adds	r1, r4, r0
 80024f8:	428b      	cmp	r3, r1
 80024fa:	bf01      	itttt	eq
 80024fc:	6819      	ldreq	r1, [r3, #0]
 80024fe:	685b      	ldreq	r3, [r3, #4]
 8002500:	1809      	addeq	r1, r1, r0
 8002502:	6021      	streq	r1, [r4, #0]
 8002504:	e7ed      	b.n	80024e2 <_free_r+0x1e>
 8002506:	461a      	mov	r2, r3
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	b10b      	cbz	r3, 8002510 <_free_r+0x4c>
 800250c:	42a3      	cmp	r3, r4
 800250e:	d9fa      	bls.n	8002506 <_free_r+0x42>
 8002510:	6811      	ldr	r1, [r2, #0]
 8002512:	1850      	adds	r0, r2, r1
 8002514:	42a0      	cmp	r0, r4
 8002516:	d10b      	bne.n	8002530 <_free_r+0x6c>
 8002518:	6820      	ldr	r0, [r4, #0]
 800251a:	4401      	add	r1, r0
 800251c:	1850      	adds	r0, r2, r1
 800251e:	4283      	cmp	r3, r0
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	d1e0      	bne.n	80024e6 <_free_r+0x22>
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4408      	add	r0, r1
 800252a:	6010      	str	r0, [r2, #0]
 800252c:	6053      	str	r3, [r2, #4]
 800252e:	e7da      	b.n	80024e6 <_free_r+0x22>
 8002530:	d902      	bls.n	8002538 <_free_r+0x74>
 8002532:	230c      	movs	r3, #12
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	e7d6      	b.n	80024e6 <_free_r+0x22>
 8002538:	6820      	ldr	r0, [r4, #0]
 800253a:	1821      	adds	r1, r4, r0
 800253c:	428b      	cmp	r3, r1
 800253e:	bf01      	itttt	eq
 8002540:	6819      	ldreq	r1, [r3, #0]
 8002542:	685b      	ldreq	r3, [r3, #4]
 8002544:	1809      	addeq	r1, r1, r0
 8002546:	6021      	streq	r1, [r4, #0]
 8002548:	6063      	str	r3, [r4, #4]
 800254a:	6054      	str	r4, [r2, #4]
 800254c:	e7cb      	b.n	80024e6 <_free_r+0x22>
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	200002b8 	.word	0x200002b8

08002554 <sbrk_aligned>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	4e0f      	ldr	r6, [pc, #60]	@ (8002594 <sbrk_aligned+0x40>)
 8002558:	460c      	mov	r4, r1
 800255a:	6831      	ldr	r1, [r6, #0]
 800255c:	4605      	mov	r5, r0
 800255e:	b911      	cbnz	r1, 8002566 <sbrk_aligned+0x12>
 8002560:	f000 f9d2 	bl	8002908 <_sbrk_r>
 8002564:	6030      	str	r0, [r6, #0]
 8002566:	4621      	mov	r1, r4
 8002568:	4628      	mov	r0, r5
 800256a:	f000 f9cd 	bl	8002908 <_sbrk_r>
 800256e:	1c43      	adds	r3, r0, #1
 8002570:	d103      	bne.n	800257a <sbrk_aligned+0x26>
 8002572:	f04f 34ff 	mov.w	r4, #4294967295
 8002576:	4620      	mov	r0, r4
 8002578:	bd70      	pop	{r4, r5, r6, pc}
 800257a:	1cc4      	adds	r4, r0, #3
 800257c:	f024 0403 	bic.w	r4, r4, #3
 8002580:	42a0      	cmp	r0, r4
 8002582:	d0f8      	beq.n	8002576 <sbrk_aligned+0x22>
 8002584:	1a21      	subs	r1, r4, r0
 8002586:	4628      	mov	r0, r5
 8002588:	f000 f9be 	bl	8002908 <_sbrk_r>
 800258c:	3001      	adds	r0, #1
 800258e:	d1f2      	bne.n	8002576 <sbrk_aligned+0x22>
 8002590:	e7ef      	b.n	8002572 <sbrk_aligned+0x1e>
 8002592:	bf00      	nop
 8002594:	200002b4 	.word	0x200002b4

08002598 <_malloc_r>:
 8002598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800259c:	1ccd      	adds	r5, r1, #3
 800259e:	f025 0503 	bic.w	r5, r5, #3
 80025a2:	3508      	adds	r5, #8
 80025a4:	2d0c      	cmp	r5, #12
 80025a6:	bf38      	it	cc
 80025a8:	250c      	movcc	r5, #12
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	4606      	mov	r6, r0
 80025ae:	db01      	blt.n	80025b4 <_malloc_r+0x1c>
 80025b0:	42a9      	cmp	r1, r5
 80025b2:	d904      	bls.n	80025be <_malloc_r+0x26>
 80025b4:	230c      	movs	r3, #12
 80025b6:	6033      	str	r3, [r6, #0]
 80025b8:	2000      	movs	r0, #0
 80025ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002694 <_malloc_r+0xfc>
 80025c2:	f000 f869 	bl	8002698 <__malloc_lock>
 80025c6:	f8d8 3000 	ldr.w	r3, [r8]
 80025ca:	461c      	mov	r4, r3
 80025cc:	bb44      	cbnz	r4, 8002620 <_malloc_r+0x88>
 80025ce:	4629      	mov	r1, r5
 80025d0:	4630      	mov	r0, r6
 80025d2:	f7ff ffbf 	bl	8002554 <sbrk_aligned>
 80025d6:	1c43      	adds	r3, r0, #1
 80025d8:	4604      	mov	r4, r0
 80025da:	d158      	bne.n	800268e <_malloc_r+0xf6>
 80025dc:	f8d8 4000 	ldr.w	r4, [r8]
 80025e0:	4627      	mov	r7, r4
 80025e2:	2f00      	cmp	r7, #0
 80025e4:	d143      	bne.n	800266e <_malloc_r+0xd6>
 80025e6:	2c00      	cmp	r4, #0
 80025e8:	d04b      	beq.n	8002682 <_malloc_r+0xea>
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	4639      	mov	r1, r7
 80025ee:	4630      	mov	r0, r6
 80025f0:	eb04 0903 	add.w	r9, r4, r3
 80025f4:	f000 f988 	bl	8002908 <_sbrk_r>
 80025f8:	4581      	cmp	r9, r0
 80025fa:	d142      	bne.n	8002682 <_malloc_r+0xea>
 80025fc:	6821      	ldr	r1, [r4, #0]
 80025fe:	4630      	mov	r0, r6
 8002600:	1a6d      	subs	r5, r5, r1
 8002602:	4629      	mov	r1, r5
 8002604:	f7ff ffa6 	bl	8002554 <sbrk_aligned>
 8002608:	3001      	adds	r0, #1
 800260a:	d03a      	beq.n	8002682 <_malloc_r+0xea>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	442b      	add	r3, r5
 8002610:	6023      	str	r3, [r4, #0]
 8002612:	f8d8 3000 	ldr.w	r3, [r8]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	bb62      	cbnz	r2, 8002674 <_malloc_r+0xdc>
 800261a:	f8c8 7000 	str.w	r7, [r8]
 800261e:	e00f      	b.n	8002640 <_malloc_r+0xa8>
 8002620:	6822      	ldr	r2, [r4, #0]
 8002622:	1b52      	subs	r2, r2, r5
 8002624:	d420      	bmi.n	8002668 <_malloc_r+0xd0>
 8002626:	2a0b      	cmp	r2, #11
 8002628:	d917      	bls.n	800265a <_malloc_r+0xc2>
 800262a:	1961      	adds	r1, r4, r5
 800262c:	42a3      	cmp	r3, r4
 800262e:	6025      	str	r5, [r4, #0]
 8002630:	bf18      	it	ne
 8002632:	6059      	strne	r1, [r3, #4]
 8002634:	6863      	ldr	r3, [r4, #4]
 8002636:	bf08      	it	eq
 8002638:	f8c8 1000 	streq.w	r1, [r8]
 800263c:	5162      	str	r2, [r4, r5]
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	4630      	mov	r0, r6
 8002642:	f000 f82f 	bl	80026a4 <__malloc_unlock>
 8002646:	f104 000b 	add.w	r0, r4, #11
 800264a:	1d23      	adds	r3, r4, #4
 800264c:	f020 0007 	bic.w	r0, r0, #7
 8002650:	1ac2      	subs	r2, r0, r3
 8002652:	bf1c      	itt	ne
 8002654:	1a1b      	subne	r3, r3, r0
 8002656:	50a3      	strne	r3, [r4, r2]
 8002658:	e7af      	b.n	80025ba <_malloc_r+0x22>
 800265a:	6862      	ldr	r2, [r4, #4]
 800265c:	42a3      	cmp	r3, r4
 800265e:	bf0c      	ite	eq
 8002660:	f8c8 2000 	streq.w	r2, [r8]
 8002664:	605a      	strne	r2, [r3, #4]
 8002666:	e7eb      	b.n	8002640 <_malloc_r+0xa8>
 8002668:	4623      	mov	r3, r4
 800266a:	6864      	ldr	r4, [r4, #4]
 800266c:	e7ae      	b.n	80025cc <_malloc_r+0x34>
 800266e:	463c      	mov	r4, r7
 8002670:	687f      	ldr	r7, [r7, #4]
 8002672:	e7b6      	b.n	80025e2 <_malloc_r+0x4a>
 8002674:	461a      	mov	r2, r3
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	42a3      	cmp	r3, r4
 800267a:	d1fb      	bne.n	8002674 <_malloc_r+0xdc>
 800267c:	2300      	movs	r3, #0
 800267e:	6053      	str	r3, [r2, #4]
 8002680:	e7de      	b.n	8002640 <_malloc_r+0xa8>
 8002682:	230c      	movs	r3, #12
 8002684:	4630      	mov	r0, r6
 8002686:	6033      	str	r3, [r6, #0]
 8002688:	f000 f80c 	bl	80026a4 <__malloc_unlock>
 800268c:	e794      	b.n	80025b8 <_malloc_r+0x20>
 800268e:	6005      	str	r5, [r0, #0]
 8002690:	e7d6      	b.n	8002640 <_malloc_r+0xa8>
 8002692:	bf00      	nop
 8002694:	200002b8 	.word	0x200002b8

08002698 <__malloc_lock>:
 8002698:	4801      	ldr	r0, [pc, #4]	@ (80026a0 <__malloc_lock+0x8>)
 800269a:	f7ff bf10 	b.w	80024be <__retarget_lock_acquire_recursive>
 800269e:	bf00      	nop
 80026a0:	200002b0 	.word	0x200002b0

080026a4 <__malloc_unlock>:
 80026a4:	4801      	ldr	r0, [pc, #4]	@ (80026ac <__malloc_unlock+0x8>)
 80026a6:	f7ff bf0b 	b.w	80024c0 <__retarget_lock_release_recursive>
 80026aa:	bf00      	nop
 80026ac:	200002b0 	.word	0x200002b0

080026b0 <__sflush_r>:
 80026b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	0716      	lsls	r6, r2, #28
 80026b8:	4605      	mov	r5, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	d454      	bmi.n	8002768 <__sflush_r+0xb8>
 80026be:	684b      	ldr	r3, [r1, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	dc02      	bgt.n	80026ca <__sflush_r+0x1a>
 80026c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	dd48      	ble.n	800275c <__sflush_r+0xac>
 80026ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026cc:	2e00      	cmp	r6, #0
 80026ce:	d045      	beq.n	800275c <__sflush_r+0xac>
 80026d0:	2300      	movs	r3, #0
 80026d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80026d6:	682f      	ldr	r7, [r5, #0]
 80026d8:	6a21      	ldr	r1, [r4, #32]
 80026da:	602b      	str	r3, [r5, #0]
 80026dc:	d030      	beq.n	8002740 <__sflush_r+0x90>
 80026de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	0759      	lsls	r1, r3, #29
 80026e4:	d505      	bpl.n	80026f2 <__sflush_r+0x42>
 80026e6:	6863      	ldr	r3, [r4, #4]
 80026e8:	1ad2      	subs	r2, r2, r3
 80026ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80026ec:	b10b      	cbz	r3, 80026f2 <__sflush_r+0x42>
 80026ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026f0:	1ad2      	subs	r2, r2, r3
 80026f2:	2300      	movs	r3, #0
 80026f4:	4628      	mov	r0, r5
 80026f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80026f8:	6a21      	ldr	r1, [r4, #32]
 80026fa:	47b0      	blx	r6
 80026fc:	1c43      	adds	r3, r0, #1
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	d106      	bne.n	8002710 <__sflush_r+0x60>
 8002702:	6829      	ldr	r1, [r5, #0]
 8002704:	291d      	cmp	r1, #29
 8002706:	d82b      	bhi.n	8002760 <__sflush_r+0xb0>
 8002708:	4a28      	ldr	r2, [pc, #160]	@ (80027ac <__sflush_r+0xfc>)
 800270a:	410a      	asrs	r2, r1
 800270c:	07d6      	lsls	r6, r2, #31
 800270e:	d427      	bmi.n	8002760 <__sflush_r+0xb0>
 8002710:	2200      	movs	r2, #0
 8002712:	6062      	str	r2, [r4, #4]
 8002714:	6922      	ldr	r2, [r4, #16]
 8002716:	04d9      	lsls	r1, r3, #19
 8002718:	6022      	str	r2, [r4, #0]
 800271a:	d504      	bpl.n	8002726 <__sflush_r+0x76>
 800271c:	1c42      	adds	r2, r0, #1
 800271e:	d101      	bne.n	8002724 <__sflush_r+0x74>
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	b903      	cbnz	r3, 8002726 <__sflush_r+0x76>
 8002724:	6560      	str	r0, [r4, #84]	@ 0x54
 8002726:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002728:	602f      	str	r7, [r5, #0]
 800272a:	b1b9      	cbz	r1, 800275c <__sflush_r+0xac>
 800272c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002730:	4299      	cmp	r1, r3
 8002732:	d002      	beq.n	800273a <__sflush_r+0x8a>
 8002734:	4628      	mov	r0, r5
 8002736:	f7ff fec5 	bl	80024c4 <_free_r>
 800273a:	2300      	movs	r3, #0
 800273c:	6363      	str	r3, [r4, #52]	@ 0x34
 800273e:	e00d      	b.n	800275c <__sflush_r+0xac>
 8002740:	2301      	movs	r3, #1
 8002742:	4628      	mov	r0, r5
 8002744:	47b0      	blx	r6
 8002746:	4602      	mov	r2, r0
 8002748:	1c50      	adds	r0, r2, #1
 800274a:	d1c9      	bne.n	80026e0 <__sflush_r+0x30>
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0c6      	beq.n	80026e0 <__sflush_r+0x30>
 8002752:	2b1d      	cmp	r3, #29
 8002754:	d001      	beq.n	800275a <__sflush_r+0xaa>
 8002756:	2b16      	cmp	r3, #22
 8002758:	d11d      	bne.n	8002796 <__sflush_r+0xe6>
 800275a:	602f      	str	r7, [r5, #0]
 800275c:	2000      	movs	r0, #0
 800275e:	e021      	b.n	80027a4 <__sflush_r+0xf4>
 8002760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002764:	b21b      	sxth	r3, r3
 8002766:	e01a      	b.n	800279e <__sflush_r+0xee>
 8002768:	690f      	ldr	r7, [r1, #16]
 800276a:	2f00      	cmp	r7, #0
 800276c:	d0f6      	beq.n	800275c <__sflush_r+0xac>
 800276e:	0793      	lsls	r3, r2, #30
 8002770:	bf18      	it	ne
 8002772:	2300      	movne	r3, #0
 8002774:	680e      	ldr	r6, [r1, #0]
 8002776:	bf08      	it	eq
 8002778:	694b      	ldreq	r3, [r1, #20]
 800277a:	1bf6      	subs	r6, r6, r7
 800277c:	600f      	str	r7, [r1, #0]
 800277e:	608b      	str	r3, [r1, #8]
 8002780:	2e00      	cmp	r6, #0
 8002782:	ddeb      	ble.n	800275c <__sflush_r+0xac>
 8002784:	4633      	mov	r3, r6
 8002786:	463a      	mov	r2, r7
 8002788:	4628      	mov	r0, r5
 800278a:	6a21      	ldr	r1, [r4, #32]
 800278c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002790:	47e0      	blx	ip
 8002792:	2800      	cmp	r0, #0
 8002794:	dc07      	bgt.n	80027a6 <__sflush_r+0xf6>
 8002796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800279a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800279e:	f04f 30ff 	mov.w	r0, #4294967295
 80027a2:	81a3      	strh	r3, [r4, #12]
 80027a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a6:	4407      	add	r7, r0
 80027a8:	1a36      	subs	r6, r6, r0
 80027aa:	e7e9      	b.n	8002780 <__sflush_r+0xd0>
 80027ac:	dfbffffe 	.word	0xdfbffffe

080027b0 <_fflush_r>:
 80027b0:	b538      	push	{r3, r4, r5, lr}
 80027b2:	690b      	ldr	r3, [r1, #16]
 80027b4:	4605      	mov	r5, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	b913      	cbnz	r3, 80027c0 <_fflush_r+0x10>
 80027ba:	2500      	movs	r5, #0
 80027bc:	4628      	mov	r0, r5
 80027be:	bd38      	pop	{r3, r4, r5, pc}
 80027c0:	b118      	cbz	r0, 80027ca <_fflush_r+0x1a>
 80027c2:	6a03      	ldr	r3, [r0, #32]
 80027c4:	b90b      	cbnz	r3, 80027ca <_fflush_r+0x1a>
 80027c6:	f7ff fc95 	bl	80020f4 <__sinit>
 80027ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f3      	beq.n	80027ba <_fflush_r+0xa>
 80027d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80027d4:	07d0      	lsls	r0, r2, #31
 80027d6:	d404      	bmi.n	80027e2 <_fflush_r+0x32>
 80027d8:	0599      	lsls	r1, r3, #22
 80027da:	d402      	bmi.n	80027e2 <_fflush_r+0x32>
 80027dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027de:	f7ff fe6e 	bl	80024be <__retarget_lock_acquire_recursive>
 80027e2:	4628      	mov	r0, r5
 80027e4:	4621      	mov	r1, r4
 80027e6:	f7ff ff63 	bl	80026b0 <__sflush_r>
 80027ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80027ec:	4605      	mov	r5, r0
 80027ee:	07da      	lsls	r2, r3, #31
 80027f0:	d4e4      	bmi.n	80027bc <_fflush_r+0xc>
 80027f2:	89a3      	ldrh	r3, [r4, #12]
 80027f4:	059b      	lsls	r3, r3, #22
 80027f6:	d4e1      	bmi.n	80027bc <_fflush_r+0xc>
 80027f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80027fa:	f7ff fe61 	bl	80024c0 <__retarget_lock_release_recursive>
 80027fe:	e7dd      	b.n	80027bc <_fflush_r+0xc>

08002800 <__swhatbuf_r>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	460c      	mov	r4, r1
 8002804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002808:	4615      	mov	r5, r2
 800280a:	2900      	cmp	r1, #0
 800280c:	461e      	mov	r6, r3
 800280e:	b096      	sub	sp, #88	@ 0x58
 8002810:	da0c      	bge.n	800282c <__swhatbuf_r+0x2c>
 8002812:	89a3      	ldrh	r3, [r4, #12]
 8002814:	2100      	movs	r1, #0
 8002816:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800281a:	bf14      	ite	ne
 800281c:	2340      	movne	r3, #64	@ 0x40
 800281e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002822:	2000      	movs	r0, #0
 8002824:	6031      	str	r1, [r6, #0]
 8002826:	602b      	str	r3, [r5, #0]
 8002828:	b016      	add	sp, #88	@ 0x58
 800282a:	bd70      	pop	{r4, r5, r6, pc}
 800282c:	466a      	mov	r2, sp
 800282e:	f000 f849 	bl	80028c4 <_fstat_r>
 8002832:	2800      	cmp	r0, #0
 8002834:	dbed      	blt.n	8002812 <__swhatbuf_r+0x12>
 8002836:	9901      	ldr	r1, [sp, #4]
 8002838:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800283c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002840:	4259      	negs	r1, r3
 8002842:	4159      	adcs	r1, r3
 8002844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002848:	e7eb      	b.n	8002822 <__swhatbuf_r+0x22>

0800284a <__smakebuf_r>:
 800284a:	898b      	ldrh	r3, [r1, #12]
 800284c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800284e:	079d      	lsls	r5, r3, #30
 8002850:	4606      	mov	r6, r0
 8002852:	460c      	mov	r4, r1
 8002854:	d507      	bpl.n	8002866 <__smakebuf_r+0x1c>
 8002856:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800285a:	6023      	str	r3, [r4, #0]
 800285c:	6123      	str	r3, [r4, #16]
 800285e:	2301      	movs	r3, #1
 8002860:	6163      	str	r3, [r4, #20]
 8002862:	b003      	add	sp, #12
 8002864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002866:	466a      	mov	r2, sp
 8002868:	ab01      	add	r3, sp, #4
 800286a:	f7ff ffc9 	bl	8002800 <__swhatbuf_r>
 800286e:	9f00      	ldr	r7, [sp, #0]
 8002870:	4605      	mov	r5, r0
 8002872:	4639      	mov	r1, r7
 8002874:	4630      	mov	r0, r6
 8002876:	f7ff fe8f 	bl	8002598 <_malloc_r>
 800287a:	b948      	cbnz	r0, 8002890 <__smakebuf_r+0x46>
 800287c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002880:	059a      	lsls	r2, r3, #22
 8002882:	d4ee      	bmi.n	8002862 <__smakebuf_r+0x18>
 8002884:	f023 0303 	bic.w	r3, r3, #3
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	81a3      	strh	r3, [r4, #12]
 800288e:	e7e2      	b.n	8002856 <__smakebuf_r+0xc>
 8002890:	89a3      	ldrh	r3, [r4, #12]
 8002892:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289a:	81a3      	strh	r3, [r4, #12]
 800289c:	9b01      	ldr	r3, [sp, #4]
 800289e:	6020      	str	r0, [r4, #0]
 80028a0:	b15b      	cbz	r3, 80028ba <__smakebuf_r+0x70>
 80028a2:	4630      	mov	r0, r6
 80028a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028a8:	f000 f81e 	bl	80028e8 <_isatty_r>
 80028ac:	b128      	cbz	r0, 80028ba <__smakebuf_r+0x70>
 80028ae:	89a3      	ldrh	r3, [r4, #12]
 80028b0:	f023 0303 	bic.w	r3, r3, #3
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	81a3      	strh	r3, [r4, #12]
 80028ba:	89a3      	ldrh	r3, [r4, #12]
 80028bc:	431d      	orrs	r5, r3
 80028be:	81a5      	strh	r5, [r4, #12]
 80028c0:	e7cf      	b.n	8002862 <__smakebuf_r+0x18>
	...

080028c4 <_fstat_r>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	2300      	movs	r3, #0
 80028c8:	4d06      	ldr	r5, [pc, #24]	@ (80028e4 <_fstat_r+0x20>)
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	602b      	str	r3, [r5, #0]
 80028d2:	f7fd feef 	bl	80006b4 <_fstat>
 80028d6:	1c43      	adds	r3, r0, #1
 80028d8:	d102      	bne.n	80028e0 <_fstat_r+0x1c>
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	b103      	cbz	r3, 80028e0 <_fstat_r+0x1c>
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	bd38      	pop	{r3, r4, r5, pc}
 80028e2:	bf00      	nop
 80028e4:	200002ac 	.word	0x200002ac

080028e8 <_isatty_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	2300      	movs	r3, #0
 80028ec:	4d05      	ldr	r5, [pc, #20]	@ (8002904 <_isatty_r+0x1c>)
 80028ee:	4604      	mov	r4, r0
 80028f0:	4608      	mov	r0, r1
 80028f2:	602b      	str	r3, [r5, #0]
 80028f4:	f7fd feed 	bl	80006d2 <_isatty>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d102      	bne.n	8002902 <_isatty_r+0x1a>
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	b103      	cbz	r3, 8002902 <_isatty_r+0x1a>
 8002900:	6023      	str	r3, [r4, #0]
 8002902:	bd38      	pop	{r3, r4, r5, pc}
 8002904:	200002ac 	.word	0x200002ac

08002908 <_sbrk_r>:
 8002908:	b538      	push	{r3, r4, r5, lr}
 800290a:	2300      	movs	r3, #0
 800290c:	4d05      	ldr	r5, [pc, #20]	@ (8002924 <_sbrk_r+0x1c>)
 800290e:	4604      	mov	r4, r0
 8002910:	4608      	mov	r0, r1
 8002912:	602b      	str	r3, [r5, #0]
 8002914:	f7fd fef4 	bl	8000700 <_sbrk>
 8002918:	1c43      	adds	r3, r0, #1
 800291a:	d102      	bne.n	8002922 <_sbrk_r+0x1a>
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	b103      	cbz	r3, 8002922 <_sbrk_r+0x1a>
 8002920:	6023      	str	r3, [r4, #0]
 8002922:	bd38      	pop	{r3, r4, r5, pc}
 8002924:	200002ac 	.word	0x200002ac

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
