
bmp280-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005308  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005418  08005418  00006418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005488  08005488  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005488  08005488  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005488  08005488  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005488  08005488  00006488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800548c  0800548c  0000648c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005490  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c38  2000006c  080054fc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  080054fc  00007ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197a4  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a93  00000000  00000000  00020839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  000242d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c6  00000000  00000000  00025990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005c4d  00000000  00000000  00026b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c141  00000000  00000000  0002c7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098528  00000000  00000000  000488e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0e0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006580  00000000  00000000  000e0e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e73d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005400 	.word	0x08005400

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005400 	.word	0x08005400

08000150 <vApplicationIdleHook>:

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  memory allocated by the kernel to any task that has since been deleted. */
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
  // printf("idle task\r\n");
  //  vTaskDelay(pdMS_TO_TICKS(1000));
}
 8000154:	bf00      	nop
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr

0800015c <vStatusTask>:

void vStatusTask(void *pvParameters) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  while (true) {
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000164:	2104      	movs	r1, #4
 8000166:	4808      	ldr	r0, [pc, #32]	@ (8000188 <vStatusTask+0x2c>)
 8000168:	f000 fe6c 	bl	8000e44 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
 800016c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000170:	4806      	ldr	r0, [pc, #24]	@ (800018c <vStatusTask+0x30>)
 8000172:	f000 fe67 	bl	8000e44 <HAL_GPIO_TogglePin>
    printf("test\r\n");
 8000176:	4806      	ldr	r0, [pc, #24]	@ (8000190 <vStatusTask+0x34>)
 8000178:	f004 fd50 	bl	8004c1c <puts>
    vTaskDelay(pdMS_TO_TICKS(1000));
 800017c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000180:	f002 ffc2 	bl	8003108 <vTaskDelay>
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000184:	bf00      	nop
 8000186:	e7ed      	b.n	8000164 <vStatusTask+0x8>
 8000188:	40010c00 	.word	0x40010c00
 800018c:	40011000 	.word	0x40011000
 8000190:	08005424 	.word	0x08005424

08000194 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  vStatusTaskHandle = osThreadNew(vStatusTask, NULL, NULL);
 8000198:	2200      	movs	r2, #0
 800019a:	2100      	movs	r1, #0
 800019c:	4803      	ldr	r0, [pc, #12]	@ (80001ac <MX_FREERTOS_Init+0x18>)
 800019e:	f001 ff7d 	bl	800209c <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a02      	ldr	r2, [pc, #8]	@ (80001b0 <MX_FREERTOS_Init+0x1c>)
 80001a6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	0800015d 	.word	0x0800015d
 80001b0:	20000088 	.word	0x20000088

080001b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b088      	sub	sp, #32
 80001b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ba:	f107 0310 	add.w	r3, r7, #16
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c8:	4b38      	ldr	r3, [pc, #224]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	4a37      	ldr	r2, [pc, #220]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6193      	str	r3, [r2, #24]
 80001d4:	4b35      	ldr	r3, [pc, #212]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	f003 0310 	and.w	r3, r3, #16
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001e0:	4b32      	ldr	r3, [pc, #200]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a31      	ldr	r2, [pc, #196]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001e6:	f043 0320 	orr.w	r3, r3, #32
 80001ea:	6193      	str	r3, [r2, #24]
 80001ec:	4b2f      	ldr	r3, [pc, #188]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001ee:	699b      	ldr	r3, [r3, #24]
 80001f0:	f003 0320 	and.w	r3, r3, #32
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f8:	4b2c      	ldr	r3, [pc, #176]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	4a2b      	ldr	r2, [pc, #172]	@ (80002ac <MX_GPIO_Init+0xf8>)
 80001fe:	f043 0304 	orr.w	r3, r3, #4
 8000202:	6193      	str	r3, [r2, #24]
 8000204:	4b29      	ldr	r3, [pc, #164]	@ (80002ac <MX_GPIO_Init+0xf8>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	f003 0304 	and.w	r3, r3, #4
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000210:	4b26      	ldr	r3, [pc, #152]	@ (80002ac <MX_GPIO_Init+0xf8>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a25      	ldr	r2, [pc, #148]	@ (80002ac <MX_GPIO_Init+0xf8>)
 8000216:	f043 0308 	orr.w	r3, r3, #8
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	4b23      	ldr	r3, [pc, #140]	@ (80002ac <MX_GPIO_Init+0xf8>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	f003 0308 	and.w	r3, r3, #8
 8000224:	603b      	str	r3, [r7, #0]
 8000226:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800022e:	4820      	ldr	r0, [pc, #128]	@ (80002b0 <MX_GPIO_Init+0xfc>)
 8000230:	f000 fdf0 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	2104      	movs	r1, #4
 8000238:	481e      	ldr	r0, [pc, #120]	@ (80002b4 <MX_GPIO_Init+0x100>)
 800023a:	f000 fdeb 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_2_Pin;
 800023e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000244:	2301      	movs	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	2302      	movs	r3, #2
 800024e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_2_GPIO_Port, &GPIO_InitStruct);
 8000250:	f107 0310 	add.w	r3, r7, #16
 8000254:	4619      	mov	r1, r3
 8000256:	4816      	ldr	r0, [pc, #88]	@ (80002b0 <MX_GPIO_Init+0xfc>)
 8000258:	f000 fc58 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800025c:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 8000260:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000262:	2303      	movs	r3, #3
 8000264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000266:	f107 0310 	add.w	r3, r7, #16
 800026a:	4619      	mov	r1, r3
 800026c:	4812      	ldr	r0, [pc, #72]	@ (80002b8 <MX_GPIO_Init+0x104>)
 800026e:	f000 fc4d 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000272:	f64f 733b 	movw	r3, #65339	@ 0xff3b
 8000276:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000278:	2303      	movs	r3, #3
 800027a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	4619      	mov	r1, r3
 8000282:	480c      	ldr	r0, [pc, #48]	@ (80002b4 <MX_GPIO_Init+0x100>)
 8000284:	f000 fc42 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_1_Pin;
 8000288:	2304      	movs	r3, #4
 800028a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2302      	movs	r3, #2
 8000296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_1_GPIO_Port, &GPIO_InitStruct);
 8000298:	f107 0310 	add.w	r3, r7, #16
 800029c:	4619      	mov	r1, r3
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <MX_GPIO_Init+0x100>)
 80002a0:	f000 fc34 	bl	8000b0c <HAL_GPIO_Init>

}
 80002a4:	bf00      	nop
 80002a6:	3720      	adds	r7, #32
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40011000 	.word	0x40011000
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	40010800 	.word	0x40010800

080002bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <MX_I2C1_Init+0x50>)
 80002c2:	4a13      	ldr	r2, [pc, #76]	@ (8000310 <MX_I2C1_Init+0x54>)
 80002c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002c6:	4b11      	ldr	r3, [pc, #68]	@ (800030c <MX_I2C1_Init+0x50>)
 80002c8:	4a12      	ldr	r2, [pc, #72]	@ (8000314 <MX_I2C1_Init+0x58>)
 80002ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <MX_I2C1_Init+0x50>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002d2:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <MX_I2C1_Init+0x50>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d8:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <MX_I2C1_Init+0x50>)
 80002da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002e6:	4b09      	ldr	r3, [pc, #36]	@ (800030c <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002ec:	4b07      	ldr	r3, [pc, #28]	@ (800030c <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f2:	4b06      	ldr	r3, [pc, #24]	@ (800030c <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f8:	4804      	ldr	r0, [pc, #16]	@ (800030c <MX_I2C1_Init+0x50>)
 80002fa:	f000 fdbd 	bl	8000e78 <HAL_I2C_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000304:	f000 f8d0 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	2000008c 	.word	0x2000008c
 8000310:	40005400 	.word	0x40005400
 8000314:	000186a0 	.word	0x000186a0

08000318 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a15      	ldr	r2, [pc, #84]	@ (8000388 <HAL_I2C_MspInit+0x70>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d123      	bne.n	8000380 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	4b14      	ldr	r3, [pc, #80]	@ (800038c <HAL_I2C_MspInit+0x74>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a13      	ldr	r2, [pc, #76]	@ (800038c <HAL_I2C_MspInit+0x74>)
 800033e:	f043 0308 	orr.w	r3, r3, #8
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b11      	ldr	r3, [pc, #68]	@ (800038c <HAL_I2C_MspInit+0x74>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0308 	and.w	r3, r3, #8
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000350:	23c0      	movs	r3, #192	@ 0xc0
 8000352:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000354:	2312      	movs	r3, #18
 8000356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000358:	2303      	movs	r3, #3
 800035a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4619      	mov	r1, r3
 8000362:	480b      	ldr	r0, [pc, #44]	@ (8000390 <HAL_I2C_MspInit+0x78>)
 8000364:	f000 fbd2 	bl	8000b0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000368:	4b08      	ldr	r3, [pc, #32]	@ (800038c <HAL_I2C_MspInit+0x74>)
 800036a:	69db      	ldr	r3, [r3, #28]
 800036c:	4a07      	ldr	r2, [pc, #28]	@ (800038c <HAL_I2C_MspInit+0x74>)
 800036e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000372:	61d3      	str	r3, [r2, #28]
 8000374:	4b05      	ldr	r3, [pc, #20]	@ (800038c <HAL_I2C_MspInit+0x74>)
 8000376:	69db      	ldr	r3, [r3, #28]
 8000378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000380:	bf00      	nop
 8000382:	3720      	adds	r7, #32
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40005400 	.word	0x40005400
 800038c:	40021000 	.word	0x40021000
 8000390:	40010c00 	.word	0x40010c00

08000394 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 8000398:	f000 faa6 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039c:	f000 f814 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a0:	f7ff ff08 	bl	80001b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003a4:	f7ff ff8a 	bl	80002bc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80003a8:	f000 fa04 	bl	80007b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("System initializing\r\n");
 80003ac:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <main+0x30>)
 80003ae:	f004 fc35 	bl	8004c1c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003b2:	f001 fe0d 	bl	8001fd0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80003b6:	f7ff feed 	bl	8000194 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003ba:	f001 fe3b 	bl	8002034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true) {
 80003be:	bf00      	nop
 80003c0:	e7fd      	b.n	80003be <main+0x2a>
 80003c2:	bf00      	nop
 80003c4:	0800542c 	.word	0x0800542c

080003c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b090      	sub	sp, #64	@ 0x40
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	2228      	movs	r2, #40	@ 0x28
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f004 fd00 	bl	8004ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ea:	2301      	movs	r3, #1
 80003ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f8:	2301      	movs	r3, #1
 80003fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fc:	2302      	movs	r3, #2
 80003fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000400:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000404:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000406:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800040a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800040c:	f107 0318 	add.w	r3, r7, #24
 8000410:	4618      	mov	r0, r3
 8000412:	f000 fe75 	bl	8001100 <HAL_RCC_OscConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x58>
    Error_Handler();
 800041c:	f000 f844 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000420:	230f      	movs	r3, #15
 8000422:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000424:	2302      	movs	r3, #2
 8000426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2102      	movs	r1, #2
 800043a:	4618      	mov	r0, r3
 800043c:	f001 f8e2 	bl	8001604 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x82>
    Error_Handler();
 8000446:	f000 f82f 	bl	80004a8 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3740      	adds	r7, #64	@ 0x40
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <__io_putchar>:
 */

/**
 * @brief putchar() override - redirect printf to USART2
 */
int __io_putchar(int ch) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 800045c:	e000      	b.n	8000460 <__io_putchar+0xc>
    asm("nop");
 800045e:	bf00      	nop
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 8000460:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <__io_putchar+0x2c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f8      	beq.n	800045e <__io_putchar+0xa>
  }
  USART2->DR = (ch & 0xFF); // write data to TX register
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <__io_putchar+0x2c>)
 8000470:	b2db      	uxtb	r3, r3
 8000472:	6053      	str	r3, [r2, #4]
  return ch;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40004400 	.word	0x40004400

08000484 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d101      	bne.n	800049a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000496:	f000 fa3d 	bl	8000914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40000800 	.word	0x40000800

080004a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b18      	ldr	r3, [pc, #96]	@ (800051c <HAL_MspInit+0x68>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a17      	ldr	r2, [pc, #92]	@ (800051c <HAL_MspInit+0x68>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <HAL_MspInit+0x68>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_MspInit+0x68>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a11      	ldr	r2, [pc, #68]	@ (800051c <HAL_MspInit+0x68>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <HAL_MspInit+0x68>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	210f      	movs	r1, #15
 80004ee:	f06f 0001 	mvn.w	r0, #1
 80004f2:	f000 fae0 	bl	8000ab6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000520 <HAL_MspInit+0x6c>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <HAL_MspInit+0x6c>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40010000 	.word	0x40010000

08000524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08e      	sub	sp, #56	@ 0x38
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800052c:	2300      	movs	r3, #0
 800052e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000530:	2300      	movs	r3, #0
 8000532:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000534:	2300      	movs	r3, #0
 8000536:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800053a:	4b34      	ldr	r3, [pc, #208]	@ (800060c <HAL_InitTick+0xe8>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a33      	ldr	r2, [pc, #204]	@ (800060c <HAL_InitTick+0xe8>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b31      	ldr	r3, [pc, #196]	@ (800060c <HAL_InitTick+0xe8>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000552:	f107 0210 	add.w	r2, r7, #16
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f001 f9c1 	bl	80018e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800056c:	f001 f992 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8000570:	6378      	str	r0, [r7, #52]	@ 0x34
 8000572:	e004      	b.n	800057e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000574:	f001 f98e 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8000578:	4603      	mov	r3, r0
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800057e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000580:	4a23      	ldr	r2, [pc, #140]	@ (8000610 <HAL_InitTick+0xec>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	0c9b      	lsrs	r3, r3, #18
 8000588:	3b01      	subs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800058c:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <HAL_InitTick+0xf0>)
 800058e:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <HAL_InitTick+0xf4>)
 8000590:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000592:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <HAL_InitTick+0xf0>)
 8000594:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000598:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800059a:	4a1e      	ldr	r2, [pc, #120]	@ (8000614 <HAL_InitTick+0xf0>)
 800059c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800059e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <HAL_InitTick+0xf0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <HAL_InitTick+0xf0>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <HAL_InitTick+0xf0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005b2:	4818      	ldr	r0, [pc, #96]	@ (8000614 <HAL_InitTick+0xf0>)
 80005b4:	f001 f9e4 	bl	8001980 <HAL_TIM_Base_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d11b      	bne.n	80005fe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005c6:	4813      	ldr	r0, [pc, #76]	@ (8000614 <HAL_InitTick+0xf0>)
 80005c8:	f001 fa32 	bl	8001a30 <HAL_TIM_Base_Start_IT>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d111      	bne.n	80005fe <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005da:	201e      	movs	r0, #30
 80005dc:	f000 fa87 	bl	8000aee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b0f      	cmp	r3, #15
 80005e4:	d808      	bhi.n	80005f8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005e6:	2200      	movs	r2, #0
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	201e      	movs	r0, #30
 80005ec:	f000 fa63 	bl	8000ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f0:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <HAL_InitTick+0xf8>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e002      	b.n	80005fe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000602:	4618      	mov	r0, r3
 8000604:	3738      	adds	r7, #56	@ 0x38
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	431bde83 	.word	0x431bde83
 8000614:	200000e0 	.word	0x200000e0
 8000618:	40000800 	.word	0x40000800
 800061c:	20000004 	.word	0x20000004

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <NMI_Handler+0x4>

08000628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <MemManage_Handler+0x4>

08000638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <UsageFault_Handler+0x4>

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000658:	4802      	ldr	r0, [pc, #8]	@ (8000664 <TIM4_IRQHandler+0x10>)
 800065a:	f001 fa3b 	bl	8001ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000e0 	.word	0x200000e0

08000668 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00a      	b.n	8000690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800067a:	f3af 8000 	nop.w
 800067e:	4601      	mov	r1, r0
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	60ba      	str	r2, [r7, #8]
 8000686:	b2ca      	uxtb	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3301      	adds	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	dbf0      	blt.n	800067a <_read+0x12>
  }

  return len;
 8000698:	687b      	ldr	r3, [r7, #4]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e009      	b.n	80006c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	60ba      	str	r2, [r7, #8]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fec9 	bl	8000454 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf1      	blt.n	80006b4 <_write+0x12>
  }
  return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_close>:

int _close(int file)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000700:	605a      	str	r2, [r3, #4]
  return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <_isatty>:

int _isatty(int file)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr

08000722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000722:	b480      	push	{r7}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
	...

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f004 fbda 	bl	8004f24 <__errno>
 8000770:	4603      	mov	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <_sbrk+0x64>)
 800078c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20005000 	.word	0x20005000
 800079c:	00000400 	.word	0x00000400
 80007a0:	20000128 	.word	0x20000128
 80007a4:	20001ca8 	.word	0x20001ca8

080007a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_USART2_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ec:	f001 fb12 	bl	8001e14 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f7ff fe57 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000012c 	.word	0x2000012c
 8000804:	40004400 	.word	0x40004400

08000808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <HAL_UART_MspInit+0x88>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d12f      	bne.n	8000888 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	4a19      	ldr	r2, [pc, #100]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000832:	61d3      	str	r3, [r2, #28]
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <HAL_UART_MspInit+0x8c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000858:	2304      	movs	r3, #4
 800085a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480b      	ldr	r0, [pc, #44]	@ (8000898 <HAL_UART_MspInit+0x90>)
 800086c:	f000 f94e 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000870:	2308      	movs	r3, #8
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <HAL_UART_MspInit+0x90>)
 8000884:	f000 f942 	bl	8000b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff ff84 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008a2:	490c      	ldr	r1, [pc, #48]	@ (80008d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a09      	ldr	r2, [pc, #36]	@ (80008dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b8:	4c09      	ldr	r4, [pc, #36]	@ (80008e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f004 fb33 	bl	8004f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fd63 	bl	8000394 <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008d8:	08005490 	.word	0x08005490
  ldr r2, =_sbss
 80008dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008e0:	20001ca4 	.word	0x20001ca4

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f8d1 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	200f      	movs	r0, #15
 8000900:	f7ff fe10 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fdd6 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_IncTick+0x1c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <HAL_IncTick+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a03      	ldr	r2, [pc, #12]	@ (8000934 <HAL_IncTick+0x20>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000008 	.word	0x20000008
 8000934:	20000174 	.word	0x20000174

08000938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b02      	ldr	r3, [pc, #8]	@ (8000948 <HAL_GetTick+0x10>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000174 	.word	0x20000174

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	@ (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	@ (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	@ 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff4f 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff64 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ffb2 	bl	8000a3c <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff81 	bl	80009e8 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff57 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b08b      	sub	sp, #44	@ 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e169      	b.n	8000df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8158 	bne.w	8000dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a9a      	ldr	r2, [pc, #616]	@ (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d05e      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b48:	4a98      	ldr	r2, [pc, #608]	@ (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d875      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b4e:	4a98      	ldr	r2, [pc, #608]	@ (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d058      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b54:	4a96      	ldr	r2, [pc, #600]	@ (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d86f      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b5a:	4a96      	ldr	r2, [pc, #600]	@ (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d052      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b60:	4a94      	ldr	r2, [pc, #592]	@ (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d869      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b66:	4a94      	ldr	r2, [pc, #592]	@ (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d04c      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a92      	ldr	r2, [pc, #584]	@ (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d863      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b72:	4a92      	ldr	r2, [pc, #584]	@ (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d046      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b78:	4a90      	ldr	r2, [pc, #576]	@ (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d85d      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d82a      	bhi.n	8000bd8 <HAL_GPIO_Init+0xcc>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d859      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b86:	a201      	add	r2, pc, #4	@ (adr r2, 8000b8c <HAL_GPIO_Init+0x80>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	08000bf3 	.word	0x08000bf3
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c3b 	.word	0x08000c3b
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c3b 	.word	0x08000c3b
 8000ba8:	08000c3b 	.word	0x08000c3b
 8000bac:	08000c3b 	.word	0x08000c3b
 8000bb0:	08000c3b 	.word	0x08000c3b
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c3b 	.word	0x08000c3b
 8000bc8:	08000c3b 	.word	0x08000c3b
 8000bcc:	08000c3b 	.word	0x08000c3b
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	4a79      	ldr	r2, [pc, #484]	@ (8000dc0 <HAL_GPIO_Init+0x2b4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bde:	e02c      	b.n	8000c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e029      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e024      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e01f      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	330c      	adds	r3, #12
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e01a      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e013      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	611a      	str	r2, [r3, #16]
          break;
 8000c26:	e009      	b.n	8000c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	615a      	str	r2, [r3, #20]
          break;
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          break;
 8000c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2bff      	cmp	r3, #255	@ 0xff
 8000c40:	d801      	bhi.n	8000c46 <HAL_GPIO_Init+0x13a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_Init+0x13e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	@ 0xff
 8000c50:	d802      	bhi.n	8000c58 <HAL_GPIO_Init+0x14c>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x152>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	210f      	movs	r1, #15
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80b1 	beq.w	8000dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a4c      	ldr	r2, [pc, #304]	@ (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	4a48      	ldr	r2, [pc, #288]	@ (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a40      	ldr	r2, [pc, #256]	@ (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d013      	beq.n	8000cf8 <HAL_GPIO_Init+0x1ec>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3e      	ldr	r2, [pc, #248]	@ (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1e0>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e004      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cfc:	f002 0203 	and.w	r2, r2, #3
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	4093      	lsls	r3, r2
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0a:	492f      	ldr	r1, [pc, #188]	@ (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d24:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	492c      	ldr	r1, [pc, #176]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	608b      	str	r3, [r1, #8]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d32:	4b2a      	ldr	r3, [pc, #168]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4928      	ldr	r1, [pc, #160]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	4922      	ldr	r1, [pc, #136]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	60cb      	str	r3, [r1, #12]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	491e      	ldr	r1, [pc, #120]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	4918      	ldr	r1, [pc, #96]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4914      	ldr	r1, [pc, #80]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d021      	beq.n	8000de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	490e      	ldr	r1, [pc, #56]	@ (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	e021      	b.n	8000dee <HAL_GPIO_Init+0x2e2>
 8000daa:	bf00      	nop
 8000dac:	10320000 	.word	0x10320000
 8000db0:	10310000 	.word	0x10310000
 8000db4:	10220000 	.word	0x10220000
 8000db8:	10210000 	.word	0x10210000
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	10110000 	.word	0x10110000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40011400 	.word	0x40011400
 8000ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	4909      	ldr	r1, [pc, #36]	@ (8000e10 <HAL_GPIO_Init+0x304>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df0:	3301      	adds	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f47f ae8e 	bne.w	8000b20 <HAL_GPIO_Init+0x14>
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	372c      	adds	r7, #44	@ 0x2c
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e30:	e003      	b.n	8000e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	041a      	lsls	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	041a      	lsls	r2, r3, #16
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43d9      	mvns	r1, r3
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	400b      	ands	r3, r1
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e12b      	b.n	80010e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d106      	bne.n	8000ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fa3a 	bl	8000318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2224      	movs	r2, #36	@ 0x24
 8000ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000edc:	f000 fcda 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8000ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	4a81      	ldr	r2, [pc, #516]	@ (80010ec <HAL_I2C_Init+0x274>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d807      	bhi.n	8000efc <HAL_I2C_Init+0x84>
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4a80      	ldr	r2, [pc, #512]	@ (80010f0 <HAL_I2C_Init+0x278>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	bf94      	ite	ls
 8000ef4:	2301      	movls	r3, #1
 8000ef6:	2300      	movhi	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	e006      	b.n	8000f0a <HAL_I2C_Init+0x92>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4a7d      	ldr	r2, [pc, #500]	@ (80010f4 <HAL_I2C_Init+0x27c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	bf94      	ite	ls
 8000f04:	2301      	movls	r3, #1
 8000f06:	2300      	movhi	r3, #0
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e0e7      	b.n	80010e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4a78      	ldr	r2, [pc, #480]	@ (80010f8 <HAL_I2C_Init+0x280>)
 8000f16:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1a:	0c9b      	lsrs	r3, r3, #18
 8000f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	4a6a      	ldr	r2, [pc, #424]	@ (80010ec <HAL_I2C_Init+0x274>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d802      	bhi.n	8000f4c <HAL_I2C_Init+0xd4>
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	e009      	b.n	8000f60 <HAL_I2C_Init+0xe8>
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	4a69      	ldr	r2, [pc, #420]	@ (80010fc <HAL_I2C_Init+0x284>)
 8000f58:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5c:	099b      	lsrs	r3, r3, #6
 8000f5e:	3301      	adds	r3, #1
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	495c      	ldr	r1, [pc, #368]	@ (80010ec <HAL_I2C_Init+0x274>)
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d819      	bhi.n	8000fb4 <HAL_I2C_Init+0x13c>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	1e59      	subs	r1, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f8e:	1c59      	adds	r1, r3, #1
 8000f90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f94:	400b      	ands	r3, r1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00a      	beq.n	8000fb0 <HAL_I2C_Init+0x138>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1e59      	subs	r1, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fae:	e051      	b.n	8001054 <HAL_I2C_Init+0x1dc>
 8000fb0:	2304      	movs	r3, #4
 8000fb2:	e04f      	b.n	8001054 <HAL_I2C_Init+0x1dc>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d111      	bne.n	8000fe0 <HAL_I2C_Init+0x168>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1e58      	subs	r0, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6859      	ldr	r1, [r3, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	440b      	add	r3, r1
 8000fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	e012      	b.n	8001006 <HAL_I2C_Init+0x18e>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	1e58      	subs	r0, r3, #1
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6859      	ldr	r1, [r3, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	0099      	lsls	r1, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_I2C_Init+0x196>
 800100a:	2301      	movs	r3, #1
 800100c:	e022      	b.n	8001054 <HAL_I2C_Init+0x1dc>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10e      	bne.n	8001034 <HAL_I2C_Init+0x1bc>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1e58      	subs	r0, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6859      	ldr	r1, [r3, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	440b      	add	r3, r1
 8001024:	fbb0 f3f3 	udiv	r3, r0, r3
 8001028:	3301      	adds	r3, #1
 800102a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800102e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001032:	e00f      	b.n	8001054 <HAL_I2C_Init+0x1dc>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1e58      	subs	r0, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6859      	ldr	r1, [r3, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	0099      	lsls	r1, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	fbb0 f3f3 	udiv	r3, r0, r3
 800104a:	3301      	adds	r3, #1
 800104c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	6809      	ldr	r1, [r1, #0]
 8001058:	4313      	orrs	r3, r2
 800105a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69da      	ldr	r2, [r3, #28]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001082:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6911      	ldr	r1, [r2, #16]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68d2      	ldr	r2, [r2, #12]
 800108e:	4311      	orrs	r1, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	430b      	orrs	r3, r1
 8001096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695a      	ldr	r2, [r3, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2220      	movs	r2, #32
 80010ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	000186a0 	.word	0x000186a0
 80010f0:	001e847f 	.word	0x001e847f
 80010f4:	003d08ff 	.word	0x003d08ff
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	10624dd3 	.word	0x10624dd3

08001100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e272      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8087 	beq.w	800122e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001120:	4b92      	ldr	r3, [pc, #584]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b04      	cmp	r3, #4
 800112a:	d00c      	beq.n	8001146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800112c:	4b8f      	ldr	r3, [pc, #572]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d112      	bne.n	800115e <HAL_RCC_OscConfig+0x5e>
 8001138:	4b8c      	ldr	r3, [pc, #560]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001144:	d10b      	bne.n	800115e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001146:	4b89      	ldr	r3, [pc, #548]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d06c      	beq.n	800122c <HAL_RCC_OscConfig+0x12c>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d168      	bne.n	800122c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e24c      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001166:	d106      	bne.n	8001176 <HAL_RCC_OscConfig+0x76>
 8001168:	4b80      	ldr	r3, [pc, #512]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a7f      	ldr	r2, [pc, #508]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e02e      	b.n	80011d4 <HAL_RCC_OscConfig+0xd4>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0x98>
 800117e:	4b7b      	ldr	r3, [pc, #492]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a7a      	ldr	r2, [pc, #488]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b78      	ldr	r3, [pc, #480]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a77      	ldr	r2, [pc, #476]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0xd4>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0xbc>
 80011a2:	4b72      	ldr	r3, [pc, #456]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a71      	ldr	r2, [pc, #452]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4b6f      	ldr	r3, [pc, #444]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a6e      	ldr	r2, [pc, #440]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e00b      	b.n	80011d4 <HAL_RCC_OscConfig+0xd4>
 80011bc:	4b6b      	ldr	r3, [pc, #428]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a6a      	ldr	r2, [pc, #424]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b68      	ldr	r3, [pc, #416]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a67      	ldr	r2, [pc, #412]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fbac 	bl	8000938 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fba8 	bl	8000938 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	@ 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e200      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b5d      	ldr	r3, [pc, #372]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe4>
 8001202:	e014      	b.n	800122e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb98 	bl	8000938 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fb94 	bl	8000938 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	@ 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e1ec      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	4b53      	ldr	r3, [pc, #332]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x10c>
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d063      	beq.n	8001302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800123a:	4b4c      	ldr	r3, [pc, #304]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00b      	beq.n	800125e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001246:	4b49      	ldr	r3, [pc, #292]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b08      	cmp	r3, #8
 8001250:	d11c      	bne.n	800128c <HAL_RCC_OscConfig+0x18c>
 8001252:	4b46      	ldr	r3, [pc, #280]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d116      	bne.n	800128c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125e:	4b43      	ldr	r3, [pc, #268]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x176>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d001      	beq.n	8001276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e1c0      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b3d      	ldr	r3, [pc, #244]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4939      	ldr	r1, [pc, #228]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	e03a      	b.n	8001302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d020      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001294:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <HAL_RCC_OscConfig+0x270>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb4d 	bl	8000938 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fb49 	bl	8000938 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1a1      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4927      	ldr	r1, [pc, #156]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d6:	4b26      	ldr	r3, [pc, #152]	@ (8001370 <HAL_RCC_OscConfig+0x270>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb2c 	bl	8000938 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fb28 	bl	8000938 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e180      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d03a      	beq.n	8001384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d019      	beq.n	800134a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_RCC_OscConfig+0x274>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fb0c 	bl	8000938 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001324:	f7ff fb08 	bl	8000938 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e160      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_RCC_OscConfig+0x26c>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001342:	2001      	movs	r0, #1
 8001344:	f000 fafe 	bl	8001944 <RCC_Delay>
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_RCC_OscConfig+0x274>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7ff faf2 	bl	8000938 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001356:	e00f      	b.n	8001378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff faee 	bl	8000938 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d908      	bls.n	8001378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e146      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	42420000 	.word	0x42420000
 8001374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001378:	4b92      	ldr	r3, [pc, #584]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e9      	bne.n	8001358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80a6 	beq.w	80014de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001396:	4b8b      	ldr	r3, [pc, #556]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10d      	bne.n	80013be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b88      	ldr	r3, [pc, #544]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a87      	ldr	r2, [pc, #540]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b85      	ldr	r3, [pc, #532]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b82      	ldr	r3, [pc, #520]	@ (80015c8 <HAL_RCC_OscConfig+0x4c8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d118      	bne.n	80013fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ca:	4b7f      	ldr	r3, [pc, #508]	@ (80015c8 <HAL_RCC_OscConfig+0x4c8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a7e      	ldr	r2, [pc, #504]	@ (80015c8 <HAL_RCC_OscConfig+0x4c8>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d6:	f7ff faaf 	bl	8000938 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff faab 	bl	8000938 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	@ 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e103      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	4b75      	ldr	r3, [pc, #468]	@ (80015c8 <HAL_RCC_OscConfig+0x4c8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x312>
 8001404:	4b6f      	ldr	r3, [pc, #444]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a6e      	ldr	r2, [pc, #440]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	e02d      	b.n	800146e <HAL_RCC_OscConfig+0x36e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x334>
 800141a:	4b6a      	ldr	r3, [pc, #424]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4a69      	ldr	r2, [pc, #420]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	f023 0301 	bic.w	r3, r3, #1
 8001424:	6213      	str	r3, [r2, #32]
 8001426:	4b67      	ldr	r3, [pc, #412]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4a66      	ldr	r2, [pc, #408]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f023 0304 	bic.w	r3, r3, #4
 8001430:	6213      	str	r3, [r2, #32]
 8001432:	e01c      	b.n	800146e <HAL_RCC_OscConfig+0x36e>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b05      	cmp	r3, #5
 800143a:	d10c      	bne.n	8001456 <HAL_RCC_OscConfig+0x356>
 800143c:	4b61      	ldr	r3, [pc, #388]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a60      	ldr	r2, [pc, #384]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	4b5e      	ldr	r3, [pc, #376]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a5d      	ldr	r2, [pc, #372]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	e00b      	b.n	800146e <HAL_RCC_OscConfig+0x36e>
 8001456:	4b5b      	ldr	r3, [pc, #364]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4a5a      	ldr	r2, [pc, #360]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	6213      	str	r3, [r2, #32]
 8001462:	4b58      	ldr	r3, [pc, #352]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4a57      	ldr	r2, [pc, #348]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d015      	beq.n	80014a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fa5f 	bl	8000938 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	e00a      	b.n	8001494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147e:	f7ff fa5b 	bl	8000938 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0b1      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	4b4b      	ldr	r3, [pc, #300]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0ee      	beq.n	800147e <HAL_RCC_OscConfig+0x37e>
 80014a0:	e014      	b.n	80014cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa49 	bl	8000938 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fa45 	bl	8000938 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e09b      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c0:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ee      	bne.n	80014aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d105      	bne.n	80014de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a3b      	ldr	r2, [pc, #236]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8087 	beq.w	80015f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e8:	4b36      	ldr	r3, [pc, #216]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d061      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d146      	bne.n	800158a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fc:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <HAL_RCC_OscConfig+0x4cc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fa19 	bl	8000938 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fa15 	bl	8000938 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e06d      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151c:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001530:	d108      	bne.n	8001544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001532:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4921      	ldr	r1, [pc, #132]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001544:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a19      	ldr	r1, [r3, #32]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001554:	430b      	orrs	r3, r1
 8001556:	491b      	ldr	r1, [pc, #108]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_RCC_OscConfig+0x4cc>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff f9e9 	bl	8000938 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff f9e5 	bl	8000938 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e03d      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x46a>
 8001588:	e035      	b.n	80015f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_RCC_OscConfig+0x4cc>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff f9d2 	bl	8000938 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff f9ce 	bl	8000938 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e026      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x498>
 80015b6:	e01e      	b.n	80015f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e019      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40007000 	.word	0x40007000
 80015cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <HAL_RCC_OscConfig+0x500>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0d0      	b.n	80017ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001618:	4b6a      	ldr	r3, [pc, #424]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d910      	bls.n	8001648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b67      	ldr	r3, [pc, #412]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 0207 	bic.w	r2, r3, #7
 800162e:	4965      	ldr	r1, [pc, #404]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b63      	ldr	r3, [pc, #396]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0b8      	b.n	80017ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d020      	beq.n	8001696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001660:	4b59      	ldr	r3, [pc, #356]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a58      	ldr	r2, [pc, #352]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001666:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800166a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001678:	4b53      	ldr	r3, [pc, #332]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a52      	ldr	r2, [pc, #328]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001684:	4b50      	ldr	r3, [pc, #320]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	494d      	ldr	r1, [pc, #308]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d040      	beq.n	8001724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d115      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e07f      	b.n	80017ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c2:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e073      	b.n	80017ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06b      	b.n	80017ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4936      	ldr	r1, [pc, #216]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f4:	f7ff f920 	bl	8000938 <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff f91c 	bl	8000938 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e053      	b.n	80017ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d210      	bcs.n	8001754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	4922      	ldr	r1, [pc, #136]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e032      	b.n	80017ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4916      	ldr	r1, [pc, #88]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d009      	beq.n	8001792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800177e:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	490e      	ldr	r1, [pc, #56]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001792:	f000 f821 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 8001796:	4602      	mov	r2, r0
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	490a      	ldr	r1, [pc, #40]	@ (80017cc <HAL_RCC_ClockConfig+0x1c8>)
 80017a4:	5ccb      	ldrb	r3, [r1, r3]
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	4a09      	ldr	r2, [pc, #36]	@ (80017d0 <HAL_RCC_ClockConfig+0x1cc>)
 80017ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_RCC_ClockConfig+0x1d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe feb6 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000
 80017c8:	40021000 	.word	0x40021000
 80017cc:	0800545c 	.word	0x0800545c
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017f2:	4b1e      	ldr	r3, [pc, #120]	@ (800186c <HAL_RCC_GetSysClockFreq+0x94>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d002      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x30>
 8001802:	2b08      	cmp	r3, #8
 8001804:	d003      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x36>
 8001806:	e027      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x98>)
 800180a:	613b      	str	r3, [r7, #16]
      break;
 800180c:	e027      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	0c9b      	lsrs	r3, r3, #18
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d010      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <HAL_RCC_GetSysClockFreq+0x94>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	0c5b      	lsrs	r3, r3, #17
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	4a11      	ldr	r2, [pc, #68]	@ (8001878 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x98>)
 800183a:	fb03 f202 	mul.w	r2, r3, r2
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e004      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a0c      	ldr	r2, [pc, #48]	@ (800187c <HAL_RCC_GetSysClockFreq+0xa4>)
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	613b      	str	r3, [r7, #16]
      break;
 8001856:	e002      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x98>)
 800185a:	613b      	str	r3, [r7, #16]
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	693b      	ldr	r3, [r7, #16]
}
 8001860:	4618      	mov	r0, r3
 8001862:	371c      	adds	r7, #28
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	007a1200 	.word	0x007a1200
 8001874:	08005474 	.word	0x08005474
 8001878:	08005484 	.word	0x08005484
 800187c:	003d0900 	.word	0x003d0900

08001880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001884:	4b02      	ldr	r3, [pc, #8]	@ (8001890 <HAL_RCC_GetHCLKFreq+0x10>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001898:	f7ff fff2 	bl	8001880 <HAL_RCC_GetHCLKFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	4903      	ldr	r1, [pc, #12]	@ (80018b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000
 80018b8:	0800546c 	.word	0x0800546c

080018bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018c0:	f7ff ffde 	bl	8001880 <HAL_RCC_GetHCLKFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	0adb      	lsrs	r3, r3, #11
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	4903      	ldr	r1, [pc, #12]	@ (80018e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40021000 	.word	0x40021000
 80018e0:	0800546c 	.word	0x0800546c

080018e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	220f      	movs	r2, #15
 80018f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_RCC_GetClockConfig+0x58>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_RCC_GetClockConfig+0x58>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_GetClockConfig+0x58>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_RCC_GetClockConfig+0x58>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0207 	and.w	r2, r3, #7
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40021000 	.word	0x40021000
 8001940:	40022000 	.word	0x40022000

08001944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <RCC_Delay+0x34>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <RCC_Delay+0x38>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0a5b      	lsrs	r3, r3, #9
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001960:	bf00      	nop
  }
  while (Delay --);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	60fa      	str	r2, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <RCC_Delay+0x1c>
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000000 	.word	0x20000000
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e041      	b.n	8001a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f839 	bl	8001a1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f9b4 	bl	8001d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d001      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e03a      	b.n	8001abe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a18      	ldr	r2, [pc, #96]	@ (8001ac8 <HAL_TIM_Base_Start_IT+0x98>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00e      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x58>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a72:	d009      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x58>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <HAL_TIM_Base_Start_IT+0x9c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d004      	beq.n	8001a88 <HAL_TIM_Base_Start_IT+0x58>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d111      	bne.n	8001aac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d010      	beq.n	8001abc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aaa:	e007      	b.n	8001abc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40000800 	.word	0x40000800

08001ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d122      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d11b      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0202 	mvn.w	r2, #2
 8001b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8ed 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 8001b1c:	e005      	b.n	8001b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8e0 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f8ef 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0204 	mvn.w	r2, #4
 8001b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f8c3 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8b6 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f8c5 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d122      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0208 	mvn.w	r2, #8
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2204      	movs	r2, #4
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f899 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f88c 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f89b 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d122      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	d11b      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0210 	mvn.w	r2, #16
 8001bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2208      	movs	r2, #8
 8001c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f86f 	bl	8001cf6 <HAL_TIM_IC_CaptureCallback>
 8001c18:	e005      	b.n	8001c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f862 	bl	8001ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f871 	bl	8001d08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0201 	mvn.w	r2, #1
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe fc16 	bl	8000484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c62:	2b80      	cmp	r3, #128	@ 0x80
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c70:	2b80      	cmp	r3, #128	@ 0x80
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8bf 	bl	8001e02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8e:	2b40      	cmp	r3, #64	@ 0x40
 8001c90:	d10e      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9c:	2b40      	cmp	r3, #64	@ 0x40
 8001c9e:	d107      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f835 	bl	8001d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d10e      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d107      	bne.n	8001cdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0220 	mvn.w	r2, #32
 8001cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f88a 	bl	8001df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a29      	ldr	r2, [pc, #164]	@ (8001de4 <TIM_Base_SetConfig+0xb8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00b      	beq.n	8001d5c <TIM_Base_SetConfig+0x30>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4a:	d007      	beq.n	8001d5c <TIM_Base_SetConfig+0x30>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a26      	ldr	r2, [pc, #152]	@ (8001de8 <TIM_Base_SetConfig+0xbc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d003      	beq.n	8001d5c <TIM_Base_SetConfig+0x30>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a25      	ldr	r2, [pc, #148]	@ (8001dec <TIM_Base_SetConfig+0xc0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <TIM_Base_SetConfig+0xb8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0x62>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a19      	ldr	r2, [pc, #100]	@ (8001de8 <TIM_Base_SetConfig+0xbc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0x62>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a18      	ldr	r2, [pc, #96]	@ (8001dec <TIM_Base_SetConfig+0xc0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <TIM_Base_SetConfig+0xb8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	615a      	str	r2, [r3, #20]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40012c00 	.word	0x40012c00
 8001de8:	40000400 	.word	0x40000400
 8001dec:	40000800 	.word	0x40000800

08001df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e042      	b.n	8001eac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fce4 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2224      	movs	r2, #36	@ 0x24
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f82b 	bl	8001eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001eee:	f023 030c 	bic.w	r3, r3, #12
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a2c      	ldr	r2, [pc, #176]	@ (8001fc8 <UART_SetConfig+0x114>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d103      	bne.n	8001f24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f1c:	f7ff fcce 	bl	80018bc <HAL_RCC_GetPCLK2Freq>
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	e002      	b.n	8001f2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f24:	f7ff fcb6 	bl	8001894 <HAL_RCC_GetPCLK1Freq>
 8001f28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	009a      	lsls	r2, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	4a22      	ldr	r2, [pc, #136]	@ (8001fcc <UART_SetConfig+0x118>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	0119      	lsls	r1, r3, #4
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009a      	lsls	r2, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <UART_SetConfig+0x118>)
 8001f62:	fba3 0302 	umull	r0, r3, r3, r2
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2064      	movs	r0, #100	@ 0x64
 8001f6a:	fb00 f303 	mul.w	r3, r0, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	3332      	adds	r3, #50	@ 0x32
 8001f74:	4a15      	ldr	r2, [pc, #84]	@ (8001fcc <UART_SetConfig+0x118>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f80:	4419      	add	r1, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009a      	lsls	r2, r3, #2
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <UART_SetConfig+0x118>)
 8001f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2064      	movs	r0, #100	@ 0x64
 8001fa2:	fb00 f303 	mul.w	r3, r0, r3
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	3332      	adds	r3, #50	@ 0x32
 8001fac:	4a07      	ldr	r2, [pc, #28]	@ (8001fcc <UART_SetConfig+0x118>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	440a      	add	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	51eb851f 	.word	0x51eb851f

08001fd0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fd6:	f3ef 8305 	mrs	r3, IPSR
 8001fda:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe6:	607b      	str	r3, [r7, #4]
  return(result);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <osKernelInitialize+0x32>
 8001fee:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <osKernelInitialize+0x60>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d109      	bne.n	800200a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8001ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002002:	f06f 0305 	mvn.w	r3, #5
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e00c      	b.n	8002024 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <osKernelInitialize+0x60>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <osKernelInitialize+0x60>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e002      	b.n	8002024 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000178 	.word	0x20000178

08002034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800203a:	f3ef 8305 	mrs	r3, IPSR
 800203e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002040:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10f      	bne.n	8002066 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002046:	f3ef 8310 	mrs	r3, PRIMASK
 800204a:	607b      	str	r3, [r7, #4]
  return(result);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <osKernelStart+0x32>
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <osKernelStart+0x64>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d109      	bne.n	800206e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800205a:	f3ef 8311 	mrs	r3, BASEPRI
 800205e:	603b      	str	r3, [r7, #0]
  return(result);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002066:	f06f 0305 	mvn.w	r3, #5
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e00e      	b.n	800208c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <osKernelStart+0x64>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <osKernelStart+0x64>)
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800207c:	f001 f87a 	bl	8003174 <vTaskStartScheduler>
      stat = osOK;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e002      	b.n	800208c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000178 	.word	0x20000178

0800209c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b092      	sub	sp, #72	@ 0x48
 80020a0:	af04      	add	r7, sp, #16
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ac:	f3ef 8305 	mrs	r3, IPSR
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 8094 	bne.w	80021e2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020ba:	f3ef 8310 	mrs	r3, PRIMASK
 80020be:	623b      	str	r3, [r7, #32]
  return(result);
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 808d 	bne.w	80021e2 <osThreadNew+0x146>
 80020c8:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <osThreadNew+0x150>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d106      	bne.n	80020de <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020d0:	f3ef 8311 	mrs	r3, BASEPRI
 80020d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f040 8082 	bne.w	80021e2 <osThreadNew+0x146>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d07e      	beq.n	80021e2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80020e8:	2318      	movs	r3, #24
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80020ec:	2300      	movs	r3, #0
 80020ee:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80020f0:	f107 031b 	add.w	r3, r7, #27
 80020f4:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d045      	beq.n	800218e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <osThreadNew+0x74>
        name = attr->name;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800211e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <osThreadNew+0x9a>
 8002124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002126:	2b38      	cmp	r3, #56	@ 0x38
 8002128:	d805      	bhi.n	8002136 <osThreadNew+0x9a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <osThreadNew+0x9e>
        return (NULL);
 8002136:	2300      	movs	r3, #0
 8002138:	e054      	b.n	80021e4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00e      	beq.n	8002170 <osThreadNew+0xd4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2ba7      	cmp	r3, #167	@ 0xa7
 8002158:	d90a      	bls.n	8002170 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <osThreadNew+0xd4>
        mem = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800216e:	e010      	b.n	8002192 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10c      	bne.n	8002192 <osThreadNew+0xf6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <osThreadNew+0xf6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <osThreadNew+0xf6>
          mem = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800218c:	e001      	b.n	8002192 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8002192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002194:	2b01      	cmp	r3, #1
 8002196:	d110      	bne.n	80021ba <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021a0:	9202      	str	r2, [sp, #8]
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 fdf6 	bl	8002da0 <xTaskCreateStatic>
 80021b4:	4603      	mov	r3, r0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e013      	b.n	80021e2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80021ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d110      	bne.n	80021e2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fe43 	bl	8002e5e <xTaskCreate>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <osThreadNew+0x146>
          hTask = NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80021e2:	697b      	ldr	r3, [r7, #20]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3738      	adds	r7, #56	@ 0x38
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000178 	.word	0x20000178

080021f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <vApplicationGetIdleTaskMemory+0x28>)
 8002200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4a05      	ldr	r2, [pc, #20]	@ (800221c <vApplicationGetIdleTaskMemory+0x2c>)
 8002206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	@ 0x80
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	2000017c 	.word	0x2000017c
 800221c:	20000224 	.word	0x20000224

08002220 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a07      	ldr	r2, [pc, #28]	@ (800224c <vApplicationGetTimerTaskMemory+0x2c>)
 8002230:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4a06      	ldr	r2, [pc, #24]	@ (8002250 <vApplicationGetTimerTaskMemory+0x30>)
 8002236:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000424 	.word	0x20000424
 8002250:	200004cc 	.word	0x200004cc

08002254 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f103 0208 	add.w	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 0208 	add.w	r2, r3, #8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0208 	add.w	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002306:	d103      	bne.n	8002310 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e00c      	b.n	800232a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3308      	adds	r3, #8
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e002      	b.n	800231e <vListInsert+0x2e>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d2f6      	bcs.n	8002318 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6892      	ldr	r2, [r2, #8]
 8002376:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6852      	ldr	r2, [r2, #4]
 8002380:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	d103      	bne.n	8002394 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
	...

080023b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023e0:	f002 f824 	bl	800442c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	441a      	add	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002410:	3b01      	subs	r3, #1
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	441a      	add	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	22ff      	movs	r2, #255	@ 0xff
 8002424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	22ff      	movs	r2, #255	@ 0xff
 800242c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d114      	bne.n	8002460 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01a      	beq.n	8002474 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3310      	adds	r3, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f001 f936 	bl	80036b4 <xTaskRemoveFromEventList>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800244e:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <xQueueGenericReset+0xd0>)
 8002450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	e009      	b.n	8002474 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3310      	adds	r3, #16
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fef5 	bl	8002254 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3324      	adds	r3, #36	@ 0x24
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fef0 	bl	8002254 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002474:	f002 f80a 	bl	800448c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	@ 0x38
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	e7fd      	b.n	80024ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <xQueueGenericCreateStatic+0x56>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <xQueueGenericCreateStatic+0x5a>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <xQueueGenericCreateStatic+0x5c>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	623b      	str	r3, [r7, #32]
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <xQueueGenericCreateStatic+0x84>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <xQueueGenericCreateStatic+0x88>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <xQueueGenericCreateStatic+0x8a>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	61fb      	str	r3, [r7, #28]
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	e7fd      	b.n	800252a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800252e:	2350      	movs	r3, #80	@ 0x50
 8002530:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b50      	cmp	r3, #80	@ 0x50
 8002536:	d00b      	beq.n	8002550 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	61bb      	str	r3, [r7, #24]
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800255a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002562:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f805 	bl	8002580 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002578:	4618      	mov	r0, r3
 800257a:	3730      	adds	r7, #48	@ 0x30
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e002      	b.n	80025a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025ae:	2101      	movs	r1, #1
 80025b0:	69b8      	ldr	r0, [r7, #24]
 80025b2:	f7ff feff 	bl	80023b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	@ 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80025de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <xQueueGenericSend+0x34>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <xQueueGenericSend+0x42>
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <xQueueGenericSend+0x46>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueGenericSend+0x48>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <xQueueGenericSend+0x64>
	__asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d103      	bne.n	800263a <xQueueGenericSend+0x72>
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <xQueueGenericSend+0x76>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueGenericSend+0x78>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <xQueueGenericSend+0x94>
	__asm volatile
 8002644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	623b      	str	r3, [r7, #32]
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800265c:	f001 f9f6 	bl	8003a4c <xTaskGetSchedulerState>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <xQueueGenericSend+0xa4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <xQueueGenericSend+0xa8>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <xQueueGenericSend+0xaa>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <xQueueGenericSend+0xc6>
	__asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	61fb      	str	r3, [r7, #28]
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800268e:	f001 fecd 	bl	800442c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <xQueueGenericSend+0xdc>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d129      	bne.n	80026f8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026aa:	f000 fa0d 	bl	8002ac8 <prvCopyDataToQueue>
 80026ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d010      	beq.n	80026da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	3324      	adds	r3, #36	@ 0x24
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fff9 	bl	80036b4 <xTaskRemoveFromEventList>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026c8:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <xQueueGenericSend+0x200>)
 80026ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	e00a      	b.n	80026f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026e0:	4b39      	ldr	r3, [pc, #228]	@ (80027c8 <xQueueGenericSend+0x200>)
 80026e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026f0:	f001 fecc 	bl	800448c <vPortExitCritical>
				return pdPASS;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e063      	b.n	80027c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026fe:	f001 fec5 	bl	800448c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002702:	2300      	movs	r3, #0
 8002704:	e05c      	b.n	80027c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002708:	2b00      	cmp	r3, #0
 800270a:	d106      	bne.n	800271a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4618      	mov	r0, r3
 8002712:	f001 f833 	bl	800377c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002716:	2301      	movs	r3, #1
 8002718:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800271a:	f001 feb7 	bl	800448c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800271e:	f000 fd99 	bl	8003254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002722:	f001 fe83 	bl	800442c <vPortEnterCritical>
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800272c:	b25b      	sxtb	r3, r3
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002732:	d103      	bne.n	800273c <xQueueGenericSend+0x174>
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002742:	b25b      	sxtb	r3, r3
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d103      	bne.n	8002752 <xQueueGenericSend+0x18a>
 800274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002752:	f001 fe9b 	bl	800448c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002756:	1d3a      	adds	r2, r7, #4
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f001 f822 	bl	80037a8 <xTaskCheckForTimeOut>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d124      	bne.n	80027b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800276a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800276c:	f000 faa4 	bl	8002cb8 <prvIsQueueFull>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002778:	3310      	adds	r3, #16
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f000 ff46 	bl	8003610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002786:	f000 fa2f 	bl	8002be8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800278a:	f000 fd71 	bl	8003270 <xTaskResumeAll>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	f47f af7c 	bne.w	800268e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002796:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <xQueueGenericSend+0x200>)
 8002798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	e772      	b.n	800268e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027aa:	f000 fa1d 	bl	8002be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027ae:	f000 fd5f 	bl	8003270 <xTaskResumeAll>
 80027b2:	e76c      	b.n	800268e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027b6:	f000 fa17 	bl	8002be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027ba:	f000 fd59 	bl	8003270 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027be:	2300      	movs	r3, #0
		}
	}
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3738      	adds	r7, #56	@ 0x38
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	@ 0x38
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80027e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <xQueueGenericSendFromISR+0x3e>
 8002802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <xQueueGenericSendFromISR+0x42>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericSendFromISR+0x44>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10b      	bne.n	800282c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	623b      	str	r3, [r7, #32]
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d103      	bne.n	800283a <xQueueGenericSendFromISR+0x6e>
 8002832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <xQueueGenericSendFromISR+0x72>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueGenericSendFromISR+0x74>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	61fb      	str	r3, [r7, #28]
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800285c:	f001 fea8 	bl	80045b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002860:	f3ef 8211 	mrs	r2, BASEPRI
 8002864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	61ba      	str	r2, [r7, #24]
 8002876:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002878:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800287c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <xQueueGenericSendFromISR+0xc2>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d12c      	bne.n	80028e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800288e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800289e:	f000 f913 	bl	8002ac8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028a2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d112      	bne.n	80028d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d016      	beq.n	80028e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b6:	3324      	adds	r3, #36	@ 0x24
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fefb 	bl	80036b4 <xTaskRemoveFromEventList>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80028d6:	3301      	adds	r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	b25a      	sxtb	r2, r3
 80028dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80028e2:	2301      	movs	r3, #1
 80028e4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80028e6:	e001      	b.n	80028ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3738      	adds	r7, #56	@ 0x38
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	@ 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10b      	bne.n	8002936 <xQueueReceive+0x32>
	__asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	623b      	str	r3, [r7, #32]
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	e7fd      	b.n	8002932 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <xQueueReceive+0x40>
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <xQueueReceive+0x44>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <xQueueReceive+0x46>
 8002948:	2300      	movs	r3, #0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10b      	bne.n	8002966 <xQueueReceive+0x62>
	__asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	61fb      	str	r3, [r7, #28]
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	e7fd      	b.n	8002962 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002966:	f001 f871 	bl	8003a4c <xTaskGetSchedulerState>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <xQueueReceive+0x72>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <xQueueReceive+0x76>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <xQueueReceive+0x78>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <xQueueReceive+0x94>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	61bb      	str	r3, [r7, #24]
}
 8002992:	bf00      	nop
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002998:	f001 fd48 	bl	800442c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01f      	beq.n	80029e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029ac:	f000 f8f6 	bl	8002b9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	1e5a      	subs	r2, r3, #1
 80029b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00f      	beq.n	80029e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c2:	3310      	adds	r3, #16
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fe75 	bl	80036b4 <xTaskRemoveFromEventList>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029d0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ac4 <xQueueReceive+0x1c0>)
 80029d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029e0:	f001 fd54 	bl	800448c <vPortExitCritical>
				return pdPASS;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e069      	b.n	8002abc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029ee:	f001 fd4d 	bl	800448c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e062      	b.n	8002abc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 febb 	bl	800377c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a0a:	f001 fd3f 	bl	800448c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a0e:	f000 fc21 	bl	8003254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a12:	f001 fd0b 	bl	800442c <vPortEnterCritical>
 8002a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d103      	bne.n	8002a2c <xQueueReceive+0x128>
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a32:	b25b      	sxtb	r3, r3
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d103      	bne.n	8002a42 <xQueueReceive+0x13e>
 8002a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a42:	f001 fd23 	bl	800448c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a46:	1d3a      	adds	r2, r7, #4
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 feaa 	bl	80037a8 <xTaskCheckForTimeOut>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d123      	bne.n	8002aa2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a5c:	f000 f916 	bl	8002c8c <prvIsQueueEmpty>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d017      	beq.n	8002a96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	3324      	adds	r3, #36	@ 0x24
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fdce 	bl	8003610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a76:	f000 f8b7 	bl	8002be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a7a:	f000 fbf9 	bl	8003270 <xTaskResumeAll>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d189      	bne.n	8002998 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002a84:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac4 <xQueueReceive+0x1c0>)
 8002a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	e780      	b.n	8002998 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a98:	f000 f8a6 	bl	8002be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a9c:	f000 fbe8 	bl	8003270 <xTaskResumeAll>
 8002aa0:	e77a      	b.n	8002998 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aa4:	f000 f8a0 	bl	8002be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aa8:	f000 fbe2 	bl	8003270 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aae:	f000 f8ed 	bl	8002c8c <prvIsQueueEmpty>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f43f af6f 	beq.w	8002998 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002aba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3730      	adds	r7, #48	@ 0x30
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d14d      	bne.n	8002b8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ffc8 	bl	8003a88 <xTaskPriorityDisinherit>
 8002af8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	e043      	b.n	8002b8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d119      	bne.n	8002b3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6898      	ldr	r0, [r3, #8]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	461a      	mov	r2, r3
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	f002 fa33 	bl	8004f7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	441a      	add	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d32b      	bcc.n	8002b8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	e026      	b.n	8002b8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68d8      	ldr	r0, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	461a      	mov	r2, r3
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	f002 fa19 	bl	8004f7e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	425b      	negs	r3, r3
 8002b56:	441a      	add	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d207      	bcs.n	8002b78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	425b      	negs	r3, r3
 8002b72:	441a      	add	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d105      	bne.n	8002b8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002b92:	697b      	ldr	r3, [r7, #20]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d018      	beq.n	8002be0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	441a      	add	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d303      	bcc.n	8002bd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68d9      	ldr	r1, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f002 f9cf 	bl	8004f7e <memcpy>
	}
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bf0:	f001 fc1c 	bl	800442c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bfc:	e011      	b.n	8002c22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3324      	adds	r3, #36	@ 0x24
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fd52 	bl	80036b4 <xTaskRemoveFromEventList>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c16:	f000 fe2b 	bl	8003870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	dce9      	bgt.n	8002bfe <prvUnlockQueue+0x16>
 8002c2a:	e000      	b.n	8002c2e <prvUnlockQueue+0x46>
					break;
 8002c2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	22ff      	movs	r2, #255	@ 0xff
 8002c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002c36:	f001 fc29 	bl	800448c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c3a:	f001 fbf7 	bl	800442c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c46:	e011      	b.n	8002c6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d012      	beq.n	8002c76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3310      	adds	r3, #16
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fd2d 	bl	80036b4 <xTaskRemoveFromEventList>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c60:	f000 fe06 	bl	8003870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c64:	7bbb      	ldrb	r3, [r7, #14]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	dce9      	bgt.n	8002c48 <prvUnlockQueue+0x60>
 8002c74:	e000      	b.n	8002c78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	22ff      	movs	r2, #255	@ 0xff
 8002c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002c80:	f001 fc04 	bl	800448c <vPortExitCritical>
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c94:	f001 fbca 	bl	800442c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e001      	b.n	8002caa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002caa:	f001 fbef 	bl	800448c <vPortExitCritical>

	return xReturn;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cc0:	f001 fbb4 	bl	800442c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d102      	bne.n	8002cd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e001      	b.n	8002cda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cda:	f001 fbd7 	bl	800448c <vPortExitCritical>

	return xReturn;
 8002cde:	68fb      	ldr	r3, [r7, #12]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e014      	b.n	8002d22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8002d34 <vQueueAddToRegistry+0x4c>)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d04:	490b      	ldr	r1, [pc, #44]	@ (8002d34 <vQueueAddToRegistry+0x4c>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d0e:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <vQueueAddToRegistry+0x4c>)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d1a:	e006      	b.n	8002d2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b07      	cmp	r3, #7
 8002d26:	d9e7      	bls.n	8002cf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	200008cc 	.word	0x200008cc

08002d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d48:	f001 fb70 	bl	800442c <vPortEnterCritical>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d103      	bne.n	8002d62 <vQueueWaitForMessageRestricted+0x2a>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6e:	d103      	bne.n	8002d78 <vQueueWaitForMessageRestricted+0x40>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d78:	f001 fb88 	bl	800448c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3324      	adds	r3, #36	@ 0x24
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	68b9      	ldr	r1, [r7, #8]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fc65 	bl	800365c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff28 	bl	8002be8 <prvUnlockQueue>
	}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08e      	sub	sp, #56	@ 0x38
 8002da4:	af04      	add	r7, sp, #16
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <xTaskCreateStatic+0x2c>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <xTaskCreateStatic+0x4a>
	__asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	61fb      	str	r3, [r7, #28]
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	e7fd      	b.n	8002de6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dea:	23a8      	movs	r3, #168	@ 0xa8
 8002dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2ba8      	cmp	r3, #168	@ 0xa8
 8002df2:	d00b      	beq.n	8002e0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	61bb      	str	r3, [r7, #24]
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01e      	beq.n	8002e50 <xTaskCreateStatic+0xb0>
 8002e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01b      	beq.n	8002e50 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	9303      	str	r3, [sp, #12]
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	9302      	str	r3, [sp, #8]
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f850 	bl	8002ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e4a:	f000 f8ed 	bl	8003028 <prvAddNewTaskToReadyList>
 8002e4e:	e001      	b.n	8002e54 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e54:	697b      	ldr	r3, [r7, #20]
	}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3728      	adds	r7, #40	@ 0x28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b08c      	sub	sp, #48	@ 0x30
 8002e62:	af04      	add	r7, sp, #16
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e6e:	88fb      	ldrh	r3, [r7, #6]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fbdc 	bl	8004630 <pvPortMalloc>
 8002e78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e80:	20a8      	movs	r0, #168	@ 0xa8
 8002e82:	f001 fbd5 	bl	8004630 <pvPortMalloc>
 8002e86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e94:	e005      	b.n	8002ea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f001 fc92 	bl	80047c0 <vPortFree>
 8002e9c:	e001      	b.n	8002ea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9303      	str	r3, [sp, #12]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f80e 	bl	8002ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ecc:	69f8      	ldr	r0, [r7, #28]
 8002ece:	f000 f8ab 	bl	8003028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	e002      	b.n	8002ede <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ede:	69bb      	ldr	r3, [r7, #24]
	}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	21a5      	movs	r1, #165	@ 0xa5
 8002f02:	f001 ff6b 	bl	8004ddc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f10:	3b01      	subs	r3, #1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f023 0307 	bic.w	r3, r3, #7
 8002f1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	617b      	str	r3, [r7, #20]
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	e7fd      	b.n	8002f3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e012      	b.n	8002f6e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	7819      	ldrb	r1, [r3, #0]
 8002f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	3334      	adds	r3, #52	@ 0x34
 8002f58:	460a      	mov	r2, r1
 8002f5a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	2b0f      	cmp	r3, #15
 8002f72:	d9e9      	bls.n	8002f48 <prvInitialiseNewTask+0x60>
 8002f74:	e000      	b.n	8002f78 <prvInitialiseNewTask+0x90>
		{
			break;
 8002f76:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	2b37      	cmp	r3, #55	@ 0x37
 8002f84:	d901      	bls.n	8002f8a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f86:	2337      	movs	r3, #55	@ 0x37
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	2200      	movs	r2, #0
 8002f9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff f976 	bl	8002292 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	3318      	adds	r3, #24
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f971 	bl	8002292 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	3354      	adds	r3, #84	@ 0x54
 8002fda:	224c      	movs	r2, #76	@ 0x4c
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 fefc 	bl	8004ddc <memset>
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	4a0d      	ldr	r2, [pc, #52]	@ (800301c <prvInitialiseNewTask+0x134>)
 8002fe8:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	4a0c      	ldr	r2, [pc, #48]	@ (8003020 <prvInitialiseNewTask+0x138>)
 8002fee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8003024 <prvInitialiseNewTask+0x13c>)
 8002ff4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	69b8      	ldr	r0, [r7, #24]
 8002ffc:	f001 f928 	bl	8004250 <pxPortInitialiseStack>
 8003000:	4602      	mov	r2, r0
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800300c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003012:	bf00      	nop
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20001b58 	.word	0x20001b58
 8003020:	20001bc0 	.word	0x20001bc0
 8003024:	20001c28 	.word	0x20001c28

08003028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003030:	f001 f9fc 	bl	800442c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003034:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <prvAddNewTaskToReadyList+0xc4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	4a2c      	ldr	r2, [pc, #176]	@ (80030ec <prvAddNewTaskToReadyList+0xc4>)
 800303c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800303e:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <prvAddNewTaskToReadyList+0xc8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003046:	4a2a      	ldr	r2, [pc, #168]	@ (80030f0 <prvAddNewTaskToReadyList+0xc8>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800304c:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <prvAddNewTaskToReadyList+0xc4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d110      	bne.n	8003076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003054:	f000 fc32 	bl	80038bc <prvInitialiseTaskLists>
 8003058:	e00d      	b.n	8003076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800305a:	4b26      	ldr	r3, [pc, #152]	@ (80030f4 <prvAddNewTaskToReadyList+0xcc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003062:	4b23      	ldr	r3, [pc, #140]	@ (80030f0 <prvAddNewTaskToReadyList+0xc8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	429a      	cmp	r2, r3
 800306e:	d802      	bhi.n	8003076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003070:	4a1f      	ldr	r2, [pc, #124]	@ (80030f0 <prvAddNewTaskToReadyList+0xc8>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <prvAddNewTaskToReadyList+0xd0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	4a1e      	ldr	r2, [pc, #120]	@ (80030f8 <prvAddNewTaskToReadyList+0xd0>)
 800307e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003080:	4b1d      	ldr	r3, [pc, #116]	@ (80030f8 <prvAddNewTaskToReadyList+0xd0>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308c:	4b1b      	ldr	r3, [pc, #108]	@ (80030fc <prvAddNewTaskToReadyList+0xd4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d903      	bls.n	800309c <prvAddNewTaskToReadyList+0x74>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <prvAddNewTaskToReadyList+0xd4>)
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4a15      	ldr	r2, [pc, #84]	@ (8003100 <prvAddNewTaskToReadyList+0xd8>)
 80030aa:	441a      	add	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3304      	adds	r3, #4
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f7ff f8f9 	bl	80022aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030b8:	f001 f9e8 	bl	800448c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030bc:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <prvAddNewTaskToReadyList+0xcc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030c4:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <prvAddNewTaskToReadyList+0xc8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d207      	bcs.n	80030e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <prvAddNewTaskToReadyList+0xdc>)
 80030d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000de0 	.word	0x20000de0
 80030f0:	2000090c 	.word	0x2000090c
 80030f4:	20000dec 	.word	0x20000dec
 80030f8:	20000dfc 	.word	0x20000dfc
 80030fc:	20000de8 	.word	0x20000de8
 8003100:	20000910 	.word	0x20000910
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d018      	beq.n	800314c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800311a:	4b14      	ldr	r3, [pc, #80]	@ (800316c <vTaskDelay+0x64>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <vTaskDelay+0x32>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	60bb      	str	r3, [r7, #8]
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800313a:	f000 f88b 	bl	8003254 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800313e:	2100      	movs	r1, #0
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fd11 	bl	8003b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003146:	f000 f893 	bl	8003270 <xTaskResumeAll>
 800314a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003152:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <vTaskDelay+0x68>)
 8003154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000e08 	.word	0x20000e08
 8003170:	e000ed04 	.word	0xe000ed04

08003174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003182:	463a      	mov	r2, r7
 8003184:	1d39      	adds	r1, r7, #4
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f830 	bl	80021f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003190:	6839      	ldr	r1, [r7, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	9202      	str	r2, [sp, #8]
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	2300      	movs	r3, #0
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	460a      	mov	r2, r1
 80031a2:	4924      	ldr	r1, [pc, #144]	@ (8003234 <vTaskStartScheduler+0xc0>)
 80031a4:	4824      	ldr	r0, [pc, #144]	@ (8003238 <vTaskStartScheduler+0xc4>)
 80031a6:	f7ff fdfb 	bl	8002da0 <xTaskCreateStatic>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4a23      	ldr	r2, [pc, #140]	@ (800323c <vTaskStartScheduler+0xc8>)
 80031ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031b0:	4b22      	ldr	r3, [pc, #136]	@ (800323c <vTaskStartScheduler+0xc8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031b8:	2301      	movs	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e001      	b.n	80031c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d102      	bne.n	80031ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80031c8:	f000 fd22 	bl	8003c10 <xTimerCreateTimerTask>
 80031cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d11b      	bne.n	800320c <vTaskStartScheduler+0x98>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	613b      	str	r3, [r7, #16]
}
 80031e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80031e8:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <vTaskStartScheduler+0xcc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3354      	adds	r3, #84	@ 0x54
 80031ee:	4a15      	ldr	r2, [pc, #84]	@ (8003244 <vTaskStartScheduler+0xd0>)
 80031f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <vTaskStartScheduler+0xd4>)
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031fa:	4b14      	ldr	r3, [pc, #80]	@ (800324c <vTaskStartScheduler+0xd8>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003200:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <vTaskStartScheduler+0xdc>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003206:	f001 f89f 	bl	8004348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800320a:	e00f      	b.n	800322c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d10b      	bne.n	800322c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	60fb      	str	r3, [r7, #12]
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <vTaskStartScheduler+0xb4>
}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	08005444 	.word	0x08005444
 8003238:	08003889 	.word	0x08003889
 800323c:	20000e04 	.word	0x20000e04
 8003240:	2000090c 	.word	0x2000090c
 8003244:	2000001c 	.word	0x2000001c
 8003248:	20000e00 	.word	0x20000e00
 800324c:	20000dec 	.word	0x20000dec
 8003250:	20000de4 	.word	0x20000de4

08003254 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003258:	4b04      	ldr	r3, [pc, #16]	@ (800326c <vTaskSuspendAll+0x18>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	4a03      	ldr	r2, [pc, #12]	@ (800326c <vTaskSuspendAll+0x18>)
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000e08 	.word	0x20000e08

08003270 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800327e:	4b42      	ldr	r3, [pc, #264]	@ (8003388 <xTaskResumeAll+0x118>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10b      	bne.n	800329e <xTaskResumeAll+0x2e>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	603b      	str	r3, [r7, #0]
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	e7fd      	b.n	800329a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800329e:	f001 f8c5 	bl	800442c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032a2:	4b39      	ldr	r3, [pc, #228]	@ (8003388 <xTaskResumeAll+0x118>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	4a37      	ldr	r2, [pc, #220]	@ (8003388 <xTaskResumeAll+0x118>)
 80032aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ac:	4b36      	ldr	r3, [pc, #216]	@ (8003388 <xTaskResumeAll+0x118>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d162      	bne.n	800337a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032b4:	4b35      	ldr	r3, [pc, #212]	@ (800338c <xTaskResumeAll+0x11c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d05e      	beq.n	800337a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032bc:	e02f      	b.n	800331e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80032be:	4b34      	ldr	r3, [pc, #208]	@ (8003390 <xTaskResumeAll+0x120>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3318      	adds	r3, #24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f848 	bl	8002360 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f843 	bl	8002360 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032de:	4b2d      	ldr	r3, [pc, #180]	@ (8003394 <xTaskResumeAll+0x124>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d903      	bls.n	80032ee <xTaskResumeAll+0x7e>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003394 <xTaskResumeAll+0x124>)
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4a27      	ldr	r2, [pc, #156]	@ (8003398 <xTaskResumeAll+0x128>)
 80032fc:	441a      	add	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3304      	adds	r3, #4
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f7fe ffd0 	bl	80022aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330e:	4b23      	ldr	r3, [pc, #140]	@ (800339c <xTaskResumeAll+0x12c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <xTaskResumeAll+0x130>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800331e:	4b1c      	ldr	r3, [pc, #112]	@ (8003390 <xTaskResumeAll+0x120>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1cb      	bne.n	80032be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800332c:	f000 fb6a 	bl	8003a04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003330:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <xTaskResumeAll+0x134>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d010      	beq.n	800335e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800333c:	f000 f844 	bl	80033c8 <xTaskIncrementTick>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003346:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <xTaskResumeAll+0x130>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f1      	bne.n	800333c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003358:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <xTaskResumeAll+0x134>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <xTaskResumeAll+0x130>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003366:	2301      	movs	r3, #1
 8003368:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800336a:	4b0f      	ldr	r3, [pc, #60]	@ (80033a8 <xTaskResumeAll+0x138>)
 800336c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800337a:	f001 f887 	bl	800448c <vPortExitCritical>

	return xAlreadyYielded;
 800337e:	68bb      	ldr	r3, [r7, #8]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000e08 	.word	0x20000e08
 800338c:	20000de0 	.word	0x20000de0
 8003390:	20000da0 	.word	0x20000da0
 8003394:	20000de8 	.word	0x20000de8
 8003398:	20000910 	.word	0x20000910
 800339c:	2000090c 	.word	0x2000090c
 80033a0:	20000df4 	.word	0x20000df4
 80033a4:	20000df0 	.word	0x20000df0
 80033a8:	e000ed04 	.word	0xe000ed04

080033ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80033b2:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <xTaskGetTickCount+0x18>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80033b8:	687b      	ldr	r3, [r7, #4]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	20000de4 	.word	0x20000de4

080033c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033d2:	4b52      	ldr	r3, [pc, #328]	@ (800351c <xTaskIncrementTick+0x154>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 808f 	bne.w	80034fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033dc:	4b50      	ldr	r3, [pc, #320]	@ (8003520 <xTaskIncrementTick+0x158>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003520 <xTaskIncrementTick+0x158>)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d121      	bne.n	8003434 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80033f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003524 <xTaskIncrementTick+0x15c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <xTaskIncrementTick+0x4a>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	603b      	str	r3, [r7, #0]
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	e7fd      	b.n	800340e <xTaskIncrementTick+0x46>
 8003412:	4b44      	ldr	r3, [pc, #272]	@ (8003524 <xTaskIncrementTick+0x15c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	4b43      	ldr	r3, [pc, #268]	@ (8003528 <xTaskIncrementTick+0x160>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a41      	ldr	r2, [pc, #260]	@ (8003524 <xTaskIncrementTick+0x15c>)
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4a41      	ldr	r2, [pc, #260]	@ (8003528 <xTaskIncrementTick+0x160>)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b41      	ldr	r3, [pc, #260]	@ (800352c <xTaskIncrementTick+0x164>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	4a3f      	ldr	r2, [pc, #252]	@ (800352c <xTaskIncrementTick+0x164>)
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	f000 fae8 	bl	8003a04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003434:	4b3e      	ldr	r3, [pc, #248]	@ (8003530 <xTaskIncrementTick+0x168>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	429a      	cmp	r2, r3
 800343c:	d34e      	bcc.n	80034dc <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800343e:	4b39      	ldr	r3, [pc, #228]	@ (8003524 <xTaskIncrementTick+0x15c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <xTaskIncrementTick+0x84>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <xTaskIncrementTick+0x86>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003452:	4b37      	ldr	r3, [pc, #220]	@ (8003530 <xTaskIncrementTick+0x168>)
 8003454:	f04f 32ff 	mov.w	r2, #4294967295
 8003458:	601a      	str	r2, [r3, #0]
					break;
 800345a:	e03f      	b.n	80034dc <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800345c:	4b31      	ldr	r3, [pc, #196]	@ (8003524 <xTaskIncrementTick+0x15c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d203      	bcs.n	800347c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003474:	4a2e      	ldr	r2, [pc, #184]	@ (8003530 <xTaskIncrementTick+0x168>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6013      	str	r3, [r2, #0]
						break;
 800347a:	e02f      	b.n	80034dc <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	3304      	adds	r3, #4
 8003480:	4618      	mov	r0, r3
 8003482:	f7fe ff6d 	bl	8002360 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	3318      	adds	r3, #24
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe ff64 	bl	8002360 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349c:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <xTaskIncrementTick+0x16c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d903      	bls.n	80034ac <xTaskIncrementTick+0xe4>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	4a22      	ldr	r2, [pc, #136]	@ (8003534 <xTaskIncrementTick+0x16c>)
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <xTaskIncrementTick+0x170>)
 80034ba:	441a      	add	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3304      	adds	r3, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4610      	mov	r0, r2
 80034c4:	f7fe fef1 	bl	80022aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034cc:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <xTaskIncrementTick+0x174>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d3b3      	bcc.n	800343e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034da:	e7b0      	b.n	800343e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034dc:	4b17      	ldr	r3, [pc, #92]	@ (800353c <xTaskIncrementTick+0x174>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e2:	4915      	ldr	r1, [pc, #84]	@ (8003538 <xTaskIncrementTick+0x170>)
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d907      	bls.n	8003504 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	e004      	b.n	8003504 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80034fa:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <xTaskIncrementTick+0x178>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3301      	adds	r3, #1
 8003500:	4a0f      	ldr	r2, [pc, #60]	@ (8003540 <xTaskIncrementTick+0x178>)
 8003502:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003504:	4b0f      	ldr	r3, [pc, #60]	@ (8003544 <xTaskIncrementTick+0x17c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800350c:	2301      	movs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003510:	697b      	ldr	r3, [r7, #20]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000e08 	.word	0x20000e08
 8003520:	20000de4 	.word	0x20000de4
 8003524:	20000d98 	.word	0x20000d98
 8003528:	20000d9c 	.word	0x20000d9c
 800352c:	20000df8 	.word	0x20000df8
 8003530:	20000e00 	.word	0x20000e00
 8003534:	20000de8 	.word	0x20000de8
 8003538:	20000910 	.word	0x20000910
 800353c:	2000090c 	.word	0x2000090c
 8003540:	20000df0 	.word	0x20000df0
 8003544:	20000df4 	.word	0x20000df4

08003548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800354e:	4b2a      	ldr	r3, [pc, #168]	@ (80035f8 <vTaskSwitchContext+0xb0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003556:	4b29      	ldr	r3, [pc, #164]	@ (80035fc <vTaskSwitchContext+0xb4>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800355c:	e047      	b.n	80035ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800355e:	4b27      	ldr	r3, [pc, #156]	@ (80035fc <vTaskSwitchContext+0xb4>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003564:	4b26      	ldr	r3, [pc, #152]	@ (8003600 <vTaskSwitchContext+0xb8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e011      	b.n	8003590 <vTaskSwitchContext+0x48>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10b      	bne.n	800358a <vTaskSwitchContext+0x42>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	607b      	str	r3, [r7, #4]
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	e7fd      	b.n	8003586 <vTaskSwitchContext+0x3e>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3b01      	subs	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	491c      	ldr	r1, [pc, #112]	@ (8003604 <vTaskSwitchContext+0xbc>)
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0e3      	beq.n	800356c <vTaskSwitchContext+0x24>
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4a15      	ldr	r2, [pc, #84]	@ (8003604 <vTaskSwitchContext+0xbc>)
 80035b0:	4413      	add	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	3308      	adds	r3, #8
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d104      	bne.n	80035d4 <vTaskSwitchContext+0x8c>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4a0b      	ldr	r2, [pc, #44]	@ (8003608 <vTaskSwitchContext+0xc0>)
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4a08      	ldr	r2, [pc, #32]	@ (8003600 <vTaskSwitchContext+0xb8>)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80035e4:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <vTaskSwitchContext+0xc0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3354      	adds	r3, #84	@ 0x54
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <vTaskSwitchContext+0xc4>)
 80035ec:	6013      	str	r3, [r2, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	20000e08 	.word	0x20000e08
 80035fc:	20000df4 	.word	0x20000df4
 8003600:	20000de8 	.word	0x20000de8
 8003604:	20000910 	.word	0x20000910
 8003608:	2000090c 	.word	0x2000090c
 800360c:	2000001c 	.word	0x2000001c

08003610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60fb      	str	r3, [r7, #12]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003638:	4b07      	ldr	r3, [pc, #28]	@ (8003658 <vTaskPlaceOnEventList+0x48>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3318      	adds	r3, #24
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fe fe55 	bl	80022f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003646:	2101      	movs	r1, #1
 8003648:	6838      	ldr	r0, [r7, #0]
 800364a:	f000 fa8d 	bl	8003b68 <prvAddCurrentTaskToDelayedList>
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	2000090c 	.word	0x2000090c

0800365c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	617b      	str	r3, [r7, #20]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003686:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3318      	adds	r3, #24
 800368c:	4619      	mov	r1, r3
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7fe fe0b 	bl	80022aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	68b8      	ldr	r0, [r7, #8]
 80036a4:	f000 fa60 	bl	8003b68 <prvAddCurrentTaskToDelayedList>
	}
 80036a8:	bf00      	nop
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000090c 	.word	0x2000090c

080036b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10b      	bne.n	80036e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60fb      	str	r3, [r7, #12]
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	3318      	adds	r3, #24
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fe3a 	bl	8002360 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <xTaskRemoveFromEventList+0xb0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe fe31 	bl	8002360 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003702:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <xTaskRemoveFromEventList+0xb4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d903      	bls.n	8003712 <xTaskRemoveFromEventList+0x5e>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	4a16      	ldr	r2, [pc, #88]	@ (8003768 <xTaskRemoveFromEventList+0xb4>)
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a13      	ldr	r2, [pc, #76]	@ (800376c <xTaskRemoveFromEventList+0xb8>)
 8003720:	441a      	add	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fe fdbe 	bl	80022aa <vListInsertEnd>
 800372e:	e005      	b.n	800373c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3318      	adds	r3, #24
 8003734:	4619      	mov	r1, r3
 8003736:	480e      	ldr	r0, [pc, #56]	@ (8003770 <xTaskRemoveFromEventList+0xbc>)
 8003738:	f7fe fdb7 	bl	80022aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003740:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <xTaskRemoveFromEventList+0xc0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	429a      	cmp	r2, r3
 8003748:	d905      	bls.n	8003756 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800374a:	2301      	movs	r3, #1
 800374c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800374e:	4b0a      	ldr	r3, [pc, #40]	@ (8003778 <xTaskRemoveFromEventList+0xc4>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e001      	b.n	800375a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800375a:	697b      	ldr	r3, [r7, #20]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000e08 	.word	0x20000e08
 8003768:	20000de8 	.word	0x20000de8
 800376c:	20000910 	.word	0x20000910
 8003770:	20000da0 	.word	0x20000da0
 8003774:	2000090c 	.word	0x2000090c
 8003778:	20000df4 	.word	0x20000df4

0800377c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <vTaskInternalSetTimeOutState+0x24>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <vTaskInternalSetTimeOutState+0x28>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	605a      	str	r2, [r3, #4]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000df8 	.word	0x20000df8
 80037a4:	20000de4 	.word	0x20000de4

080037a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	613b      	str	r3, [r7, #16]
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	60fb      	str	r3, [r7, #12]
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	e7fd      	b.n	80037ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80037ee:	f000 fe1d 	bl	800442c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003868 <xTaskCheckForTimeOut+0xc0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d102      	bne.n	8003812 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e023      	b.n	800385a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b15      	ldr	r3, [pc, #84]	@ (800386c <xTaskCheckForTimeOut+0xc4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d007      	beq.n	800382e <xTaskCheckForTimeOut+0x86>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	e015      	b.n	800385a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	d20b      	bcs.n	8003850 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad2      	subs	r2, r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff99 	bl	800377c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e004      	b.n	800385a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003856:	2301      	movs	r3, #1
 8003858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800385a:	f000 fe17 	bl	800448c <vPortExitCritical>

	return xReturn;
 800385e:	69fb      	ldr	r3, [r7, #28]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000de4 	.word	0x20000de4
 800386c:	20000df8 	.word	0x20000df8

08003870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003874:	4b03      	ldr	r3, [pc, #12]	@ (8003884 <vTaskMissedYield+0x14>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000df4 	.word	0x20000df4

08003888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003890:	f000 f854 	bl	800393c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003894:	4b07      	ldr	r3, [pc, #28]	@ (80038b4 <prvIdleTask+0x2c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d907      	bls.n	80038ac <prvIdleTask+0x24>
			{
				taskYIELD();
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <prvIdleTask+0x30>)
 800389e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80038ac:	f7fc fc50 	bl	8000150 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80038b0:	e7ee      	b.n	8003890 <prvIdleTask+0x8>
 80038b2:	bf00      	nop
 80038b4:	20000910 	.word	0x20000910
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	e00c      	b.n	80038e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <prvInitialiseTaskLists+0x60>)
 80038d4:	4413      	add	r3, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fcbc 	bl	8002254 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b37      	cmp	r3, #55	@ 0x37
 80038e6:	d9ef      	bls.n	80038c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038e8:	480d      	ldr	r0, [pc, #52]	@ (8003920 <prvInitialiseTaskLists+0x64>)
 80038ea:	f7fe fcb3 	bl	8002254 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038ee:	480d      	ldr	r0, [pc, #52]	@ (8003924 <prvInitialiseTaskLists+0x68>)
 80038f0:	f7fe fcb0 	bl	8002254 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038f4:	480c      	ldr	r0, [pc, #48]	@ (8003928 <prvInitialiseTaskLists+0x6c>)
 80038f6:	f7fe fcad 	bl	8002254 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038fa:	480c      	ldr	r0, [pc, #48]	@ (800392c <prvInitialiseTaskLists+0x70>)
 80038fc:	f7fe fcaa 	bl	8002254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003900:	480b      	ldr	r0, [pc, #44]	@ (8003930 <prvInitialiseTaskLists+0x74>)
 8003902:	f7fe fca7 	bl	8002254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003906:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <prvInitialiseTaskLists+0x78>)
 8003908:	4a05      	ldr	r2, [pc, #20]	@ (8003920 <prvInitialiseTaskLists+0x64>)
 800390a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800390c:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <prvInitialiseTaskLists+0x7c>)
 800390e:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <prvInitialiseTaskLists+0x68>)
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000910 	.word	0x20000910
 8003920:	20000d70 	.word	0x20000d70
 8003924:	20000d84 	.word	0x20000d84
 8003928:	20000da0 	.word	0x20000da0
 800392c:	20000db4 	.word	0x20000db4
 8003930:	20000dcc 	.word	0x20000dcc
 8003934:	20000d98 	.word	0x20000d98
 8003938:	20000d9c 	.word	0x20000d9c

0800393c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003942:	e019      	b.n	8003978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003944:	f000 fd72 	bl	800442c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003948:	4b10      	ldr	r3, [pc, #64]	@ (800398c <prvCheckTasksWaitingTermination+0x50>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fd03 	bl	8002360 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <prvCheckTasksWaitingTermination+0x54>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3b01      	subs	r3, #1
 8003960:	4a0b      	ldr	r2, [pc, #44]	@ (8003990 <prvCheckTasksWaitingTermination+0x54>)
 8003962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <prvCheckTasksWaitingTermination+0x58>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	4a0a      	ldr	r2, [pc, #40]	@ (8003994 <prvCheckTasksWaitingTermination+0x58>)
 800396c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800396e:	f000 fd8d 	bl	800448c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f810 	bl	8003998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003978:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <prvCheckTasksWaitingTermination+0x58>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e1      	bne.n	8003944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000db4 	.word	0x20000db4
 8003990:	20000de0 	.word	0x20000de0
 8003994:	20000dc8 	.word	0x20000dc8

08003998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3354      	adds	r3, #84	@ 0x54
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fa31 	bl	8004e0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d108      	bne.n	80039c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 ff01 	bl	80047c0 <vPortFree>
				vPortFree( pxTCB );
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fefe 	bl	80047c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039c4:	e019      	b.n	80039fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d103      	bne.n	80039d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fef5 	bl	80047c0 <vPortFree>
	}
 80039d6:	e010      	b.n	80039fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d00b      	beq.n	80039fa <prvDeleteTCB+0x62>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60fb      	str	r3, [r7, #12]
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	e7fd      	b.n	80039f6 <prvDeleteTCB+0x5e>
	}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <prvResetNextTaskUnblockTime+0x40>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <prvResetNextTaskUnblockTime+0x14>
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <prvResetNextTaskUnblockTime+0x16>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <prvResetNextTaskUnblockTime+0x44>)
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a26:	e008      	b.n	8003a3a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a28:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <prvResetNextTaskUnblockTime+0x40>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4a04      	ldr	r2, [pc, #16]	@ (8003a48 <prvResetNextTaskUnblockTime+0x44>)
 8003a38:	6013      	str	r3, [r2, #0]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	20000d98 	.word	0x20000d98
 8003a48:	20000e00 	.word	0x20000e00

08003a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <xTaskGetSchedulerState+0x34>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	e008      	b.n	8003a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a60:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <xTaskGetSchedulerState+0x38>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	e001      	b.n	8003a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a72:	687b      	ldr	r3, [r7, #4]
	}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000dec 	.word	0x20000dec
 8003a84:	20000e08 	.word	0x20000e08

08003a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d058      	beq.n	8003b50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b5c <xTaskPriorityDisinherit+0xd4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d00b      	beq.n	8003ac0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	60bb      	str	r3, [r7, #8]
}
 8003ada:	bf00      	nop
 8003adc:	bf00      	nop
 8003ade:	e7fd      	b.n	8003adc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	1e5a      	subs	r2, r3, #1
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d02c      	beq.n	8003b50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d128      	bne.n	8003b50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fc2c 	bl	8002360 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b20:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <xTaskPriorityDisinherit+0xd8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d903      	bls.n	8003b30 <xTaskPriorityDisinherit+0xa8>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b60 <xTaskPriorityDisinherit+0xd8>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <xTaskPriorityDisinherit+0xdc>)
 8003b3e:	441a      	add	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	4610      	mov	r0, r2
 8003b48:	f7fe fbaf 	bl	80022aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b50:	697b      	ldr	r3, [r7, #20]
	}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000090c 	.word	0x2000090c
 8003b60:	20000de8 	.word	0x20000de8
 8003b64:	20000910 	.word	0x20000910

08003b68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b72:	4b21      	ldr	r3, [pc, #132]	@ (8003bf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b78:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fbee 	bl	8002360 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d10a      	bne.n	8003ba2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b92:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4819      	ldr	r0, [pc, #100]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b9c:	f7fe fb85 	bl	80022aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ba0:	e026      	b.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003baa:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d209      	bcs.n	8003bce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bba:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fe fb92 	bl	80022f0 <vListInsert>
}
 8003bcc:	e010      	b.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bce:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f7fe fb88 	bl	80022f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003be0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d202      	bcs.n	8003bf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003bea:	4a08      	ldr	r2, [pc, #32]	@ (8003c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000de4 	.word	0x20000de4
 8003bfc:	2000090c 	.word	0x2000090c
 8003c00:	20000dcc 	.word	0x20000dcc
 8003c04:	20000d9c 	.word	0x20000d9c
 8003c08:	20000d98 	.word	0x20000d98
 8003c0c:	20000e00 	.word	0x20000e00

08003c10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
 8003c14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c1a:	f000 fad9 	bl	80041d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c94 <xTimerCreateTimerTask+0x84>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c2e:	1d3a      	adds	r2, r7, #4
 8003c30:	f107 0108 	add.w	r1, r7, #8
 8003c34:	f107 030c 	add.w	r3, r7, #12
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe faf1 	bl	8002220 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	9202      	str	r2, [sp, #8]
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	2302      	movs	r3, #2
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	460a      	mov	r2, r1
 8003c50:	4911      	ldr	r1, [pc, #68]	@ (8003c98 <xTimerCreateTimerTask+0x88>)
 8003c52:	4812      	ldr	r0, [pc, #72]	@ (8003c9c <xTimerCreateTimerTask+0x8c>)
 8003c54:	f7ff f8a4 	bl	8002da0 <xTaskCreateStatic>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a11      	ldr	r2, [pc, #68]	@ (8003ca0 <xTimerCreateTimerTask+0x90>)
 8003c5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <xTimerCreateTimerTask+0x90>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c66:	2301      	movs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	613b      	str	r3, [r7, #16]
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c88:	697b      	ldr	r3, [r7, #20]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000e3c 	.word	0x20000e3c
 8003c98:	0800544c 	.word	0x0800544c
 8003c9c:	08003dc5 	.word	0x08003dc5
 8003ca0:	20000e40 	.word	0x20000e40

08003ca4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <xTimerGenericCommand+0x30>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	623b      	str	r3, [r7, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003cd4:	4b19      	ldr	r3, [pc, #100]	@ (8003d3c <xTimerGenericCommand+0x98>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d02a      	beq.n	8003d32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	dc18      	bgt.n	8003d20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cee:	f7ff fead 	bl	8003a4c <xTaskGetSchedulerState>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d109      	bne.n	8003d0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <xTimerGenericCommand+0x98>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	f107 0110 	add.w	r1, r7, #16
 8003d00:	2300      	movs	r3, #0
 8003d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d04:	f7fe fc60 	bl	80025c8 <xQueueGenericSend>
 8003d08:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d0a:	e012      	b.n	8003d32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <xTimerGenericCommand+0x98>)
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	f107 0110 	add.w	r1, r7, #16
 8003d14:	2300      	movs	r3, #0
 8003d16:	2200      	movs	r2, #0
 8003d18:	f7fe fc56 	bl	80025c8 <xQueueGenericSend>
 8003d1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003d1e:	e008      	b.n	8003d32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d20:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <xTimerGenericCommand+0x98>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	f107 0110 	add.w	r1, r7, #16
 8003d28:	2300      	movs	r3, #0
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	f7fe fd4e 	bl	80027cc <xQueueGenericSendFromISR>
 8003d30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	@ 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000e3c 	.word	0x20000e3c

08003d40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc0 <prvProcessExpiredTimer+0x80>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fb01 	bl	8002360 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d123      	bne.n	8003dae <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	18d1      	adds	r1, r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f000 f8cc 	bl	8003f10 <prvInsertTimerInActiveList>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d017      	beq.n	8003dae <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	2100      	movs	r1, #0
 8003d88:	6978      	ldr	r0, [r7, #20]
 8003d8a:	f7ff ff8b 	bl	8003ca4 <xTimerGenericCommand>
 8003d8e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	60fb      	str	r3, [r7, #12]
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	4798      	blx	r3
}
 8003db6:	bf00      	nop
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000e34 	.word	0x20000e34

08003dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f859 	bl	8003e88 <prvGetNextExpireTime>
 8003dd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f805 	bl	8003dec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003de2:	f000 f8d7 	bl	8003f94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003de6:	bf00      	nop
 8003de8:	e7f0      	b.n	8003dcc <prvTimerTask+0x8>
	...

08003dec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003df6:	f7ff fa2d 	bl	8003254 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f866 	bl	8003ed0 <prvSampleTimeNow>
 8003e04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d130      	bne.n	8003e6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <prvProcessTimerOrBlockTask+0x3c>
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d806      	bhi.n	8003e28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e1a:	f7ff fa29 	bl	8003270 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff8d 	bl	8003d40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e26:	e024      	b.n	8003e72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e2e:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <prvProcessTimerOrBlockTask+0x90>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf0c      	ite	eq
 8003e38:	2301      	moveq	r3, #1
 8003e3a:	2300      	movne	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e40:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <prvProcessTimerOrBlockTask+0x94>)
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7fe ff73 	bl	8002d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e52:	f7ff fa0d 	bl	8003270 <xTaskResumeAll>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e5c:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <prvProcessTimerOrBlockTask+0x98>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
}
 8003e6c:	e001      	b.n	8003e72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e6e:	f7ff f9ff 	bl	8003270 <xTaskResumeAll>
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000e38 	.word	0x20000e38
 8003e80:	20000e3c 	.word	0x20000e3c
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ecc <prvGetNextExpireTime+0x44>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d105      	bne.n	8003eba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003eae:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <prvGetNextExpireTime+0x44>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e001      	b.n	8003ebe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000e34 	.word	0x20000e34

08003ed0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ed8:	f7ff fa68 	bl	80033ac <xTaskGetTickCount>
 8003edc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ede:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <prvSampleTimeNow+0x3c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d205      	bcs.n	8003ef4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ee8:	f000 f910 	bl	800410c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e002      	b.n	8003efa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003efa:	4a04      	ldr	r2, [pc, #16]	@ (8003f0c <prvSampleTimeNow+0x3c>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f00:	68fb      	ldr	r3, [r7, #12]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000e44 	.word	0x20000e44

08003f10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d812      	bhi.n	8003f5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d302      	bcc.n	8003f4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e01b      	b.n	8003f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f4a:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <prvInsertTimerInActiveList+0x7c>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fe f9cb 	bl	80022f0 <vListInsert>
 8003f5a:	e012      	b.n	8003f82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d206      	bcs.n	8003f72 <prvInsertTimerInActiveList+0x62>
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d302      	bcc.n	8003f72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e007      	b.n	8003f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f72:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <prvInsertTimerInActiveList+0x80>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7fe f9b7 	bl	80022f0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f82:	697b      	ldr	r3, [r7, #20]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000e38 	.word	0x20000e38
 8003f90:	20000e34 	.word	0x20000e34

08003f94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08e      	sub	sp, #56	@ 0x38
 8003f98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f9a:	e0a5      	b.n	80040e8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da19      	bge.n	8003fd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	61fb      	str	r3, [r7, #28]
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	e7fd      	b.n	8003fc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fcc:	6850      	ldr	r0, [r2, #4]
 8003fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd0:	6892      	ldr	r2, [r2, #8]
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f2c0 8085 	blt.w	80040e8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d004      	beq.n	8003ff4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	3304      	adds	r3, #4
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fe f9b6 	bl	8002360 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff6a 	bl	8003ed0 <prvSampleTimeNow>
 8003ffc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b09      	cmp	r3, #9
 8004002:	d86c      	bhi.n	80040de <prvProcessReceivedCommands+0x14a>
 8004004:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <prvProcessReceivedCommands+0x78>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	08004035 	.word	0x08004035
 8004010:	08004035 	.word	0x08004035
 8004014:	08004035 	.word	0x08004035
 8004018:	080040df 	.word	0x080040df
 800401c:	08004093 	.word	0x08004093
 8004020:	080040cd 	.word	0x080040cd
 8004024:	08004035 	.word	0x08004035
 8004028:	08004035 	.word	0x08004035
 800402c:	080040df 	.word	0x080040df
 8004030:	08004093 	.word	0x08004093
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	18d1      	adds	r1, r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004042:	f7ff ff65 	bl	8003f10 <prvInsertTimerInActiveList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d04a      	beq.n	80040e2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004052:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d142      	bne.n	80040e2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800405c:	68ba      	ldr	r2, [r7, #8]
 800405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	441a      	add	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	2100      	movs	r1, #0
 800406c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800406e:	f7ff fe19 	bl	8003ca4 <xTimerGenericCommand>
 8004072:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d133      	bne.n	80040e2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	61bb      	str	r3, [r7, #24]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004096:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	617b      	str	r3, [r7, #20]
}
 80040b2:	bf00      	nop
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	18d1      	adds	r1, r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040c6:	f7ff ff23 	bl	8003f10 <prvInsertTimerInActiveList>
					break;
 80040ca:	e00d      	b.n	80040e8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d107      	bne.n	80040e6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80040d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040d8:	f000 fb72 	bl	80047c0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040dc:	e003      	b.n	80040e6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80040de:	bf00      	nop
 80040e0:	e002      	b.n	80040e8 <prvProcessReceivedCommands+0x154>
					break;
 80040e2:	bf00      	nop
 80040e4:	e000      	b.n	80040e8 <prvProcessReceivedCommands+0x154>
					break;
 80040e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040e8:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <prvProcessReceivedCommands+0x174>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1d39      	adds	r1, r7, #4
 80040ee:	2200      	movs	r2, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe fc07 	bl	8002904 <xQueueReceive>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f47f af4f 	bne.w	8003f9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	3730      	adds	r7, #48	@ 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20000e3c 	.word	0x20000e3c

0800410c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004112:	e046      	b.n	80041a2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004114:	4b2c      	ldr	r3, [pc, #176]	@ (80041c8 <prvSwitchTimerLists+0xbc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800411e:	4b2a      	ldr	r3, [pc, #168]	@ (80041c8 <prvSwitchTimerLists+0xbc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3304      	adds	r3, #4
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe f917 	bl	8002360 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d12f      	bne.n	80041a2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4413      	add	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	429a      	cmp	r2, r3
 8004152:	d90e      	bls.n	8004172 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <prvSwitchTimerLists+0xbc>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe f8c0 	bl	80022f0 <vListInsert>
 8004170:	e017      	b.n	80041a2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004172:	2300      	movs	r3, #0
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	2300      	movs	r3, #0
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	2100      	movs	r1, #0
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff fd91 	bl	8003ca4 <xTimerGenericCommand>
 8004182:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <prvSwitchTimerLists+0x96>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	603b      	str	r3, [r7, #0]
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	e7fd      	b.n	800419e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041a2:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <prvSwitchTimerLists+0xbc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1b3      	bne.n	8004114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <prvSwitchTimerLists+0xbc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80041b2:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <prvSwitchTimerLists+0xc0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <prvSwitchTimerLists+0xbc>)
 80041b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80041ba:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <prvSwitchTimerLists+0xc0>)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	6013      	str	r3, [r2, #0]
}
 80041c0:	bf00      	nop
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	20000e34 	.word	0x20000e34
 80041cc:	20000e38 	.word	0x20000e38

080041d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041d6:	f000 f929 	bl	800442c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041da:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <prvCheckForValidListAndQueue+0x60>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d120      	bne.n	8004224 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041e2:	4814      	ldr	r0, [pc, #80]	@ (8004234 <prvCheckForValidListAndQueue+0x64>)
 80041e4:	f7fe f836 	bl	8002254 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041e8:	4813      	ldr	r0, [pc, #76]	@ (8004238 <prvCheckForValidListAndQueue+0x68>)
 80041ea:	f7fe f833 	bl	8002254 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041ee:	4b13      	ldr	r3, [pc, #76]	@ (800423c <prvCheckForValidListAndQueue+0x6c>)
 80041f0:	4a10      	ldr	r2, [pc, #64]	@ (8004234 <prvCheckForValidListAndQueue+0x64>)
 80041f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041f4:	4b12      	ldr	r3, [pc, #72]	@ (8004240 <prvCheckForValidListAndQueue+0x70>)
 80041f6:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <prvCheckForValidListAndQueue+0x68>)
 80041f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <prvCheckForValidListAndQueue+0x74>)
 8004200:	4a11      	ldr	r2, [pc, #68]	@ (8004248 <prvCheckForValidListAndQueue+0x78>)
 8004202:	2110      	movs	r1, #16
 8004204:	200a      	movs	r0, #10
 8004206:	f7fe f93f 	bl	8002488 <xQueueGenericCreateStatic>
 800420a:	4603      	mov	r3, r0
 800420c:	4a08      	ldr	r2, [pc, #32]	@ (8004230 <prvCheckForValidListAndQueue+0x60>)
 800420e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004210:	4b07      	ldr	r3, [pc, #28]	@ (8004230 <prvCheckForValidListAndQueue+0x60>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004218:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <prvCheckForValidListAndQueue+0x60>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	490b      	ldr	r1, [pc, #44]	@ (800424c <prvCheckForValidListAndQueue+0x7c>)
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fd62 	bl	8002ce8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004224:	f000 f932 	bl	800448c <vPortExitCritical>
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000e3c 	.word	0x20000e3c
 8004234:	20000e0c 	.word	0x20000e0c
 8004238:	20000e20 	.word	0x20000e20
 800423c:	20000e34 	.word	0x20000e34
 8004240:	20000e38 	.word	0x20000e38
 8004244:	20000ee8 	.word	0x20000ee8
 8004248:	20000e48 	.word	0x20000e48
 800424c:	08005454 	.word	0x08005454

08004250 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b04      	subs	r3, #4
 8004260:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b04      	subs	r3, #4
 800426e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f023 0201 	bic.w	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3b04      	subs	r3, #4
 800427e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004280:	4a08      	ldr	r2, [pc, #32]	@ (80042a4 <pxPortInitialiseStack+0x54>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b14      	subs	r3, #20
 800428a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b20      	subs	r3, #32
 8004296:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	080042a9 	.word	0x080042a9

080042a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80042b2:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <prvTaskExitError+0x54>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d00b      	beq.n	80042d4 <prvTaskExitError+0x2c>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60fb      	str	r3, [r7, #12]
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <prvTaskExitError+0x28>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	60bb      	str	r3, [r7, #8]
}
 80042e6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042e8:	bf00      	nop
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0fc      	beq.n	80042ea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	2000000c 	.word	0x2000000c

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	f04e 0e0d 	orr.w	lr, lr, #13
 800431e:	4770      	bx	lr

08004320 <pxCurrentTCBConst2>:
 8004320:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004328:	4806      	ldr	r0, [pc, #24]	@ (8004344 <prvPortStartFirstTask+0x1c>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	b662      	cpsie	i
 8004334:	b661      	cpsie	f
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	df00      	svc	0
 8004340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004342:	bf00      	nop
 8004344:	e000ed08 	.word	0xe000ed08

08004348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800434e:	4b32      	ldr	r3, [pc, #200]	@ (8004418 <xPortStartScheduler+0xd0>)
 8004350:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	22ff      	movs	r2, #255	@ 0xff
 800435e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b2a      	ldr	r3, [pc, #168]	@ (800441c <xPortStartScheduler+0xd4>)
 8004374:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004376:	4b2a      	ldr	r3, [pc, #168]	@ (8004420 <xPortStartScheduler+0xd8>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800437c:	e009      	b.n	8004392 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800437e:	4b28      	ldr	r3, [pc, #160]	@ (8004420 <xPortStartScheduler+0xd8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3b01      	subs	r3, #1
 8004384:	4a26      	ldr	r2, [pc, #152]	@ (8004420 <xPortStartScheduler+0xd8>)
 8004386:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	b2db      	uxtb	r3, r3
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439a:	2b80      	cmp	r3, #128	@ 0x80
 800439c:	d0ef      	beq.n	800437e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800439e:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <xPortStartScheduler+0xd8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f1c3 0307 	rsb	r3, r3, #7
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d00b      	beq.n	80043c2 <xPortStartScheduler+0x7a>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60bb      	str	r3, [r7, #8]
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	e7fd      	b.n	80043be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043c2:	4b17      	ldr	r3, [pc, #92]	@ (8004420 <xPortStartScheduler+0xd8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	4a15      	ldr	r2, [pc, #84]	@ (8004420 <xPortStartScheduler+0xd8>)
 80043ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043cc:	4b14      	ldr	r3, [pc, #80]	@ (8004420 <xPortStartScheduler+0xd8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043d4:	4a12      	ldr	r2, [pc, #72]	@ (8004420 <xPortStartScheduler+0xd8>)
 80043d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043e0:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <xPortStartScheduler+0xdc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004424 <xPortStartScheduler+0xdc>)
 80043e6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <xPortStartScheduler+0xdc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004424 <xPortStartScheduler+0xdc>)
 80043f2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80043f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043f8:	f000 f8b8 	bl	800456c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <xPortStartScheduler+0xe0>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004402:	f7ff ff91 	bl	8004328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004406:	f7ff f89f 	bl	8003548 <vTaskSwitchContext>
	prvTaskExitError();
 800440a:	f7ff ff4d 	bl	80042a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	e000e400 	.word	0xe000e400
 800441c:	20000f38 	.word	0x20000f38
 8004420:	20000f3c 	.word	0x20000f3c
 8004424:	e000ed20 	.word	0xe000ed20
 8004428:	2000000c 	.word	0x2000000c

0800442c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	607b      	str	r3, [r7, #4]
}
 8004444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004446:	4b0f      	ldr	r3, [pc, #60]	@ (8004484 <vPortEnterCritical+0x58>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3301      	adds	r3, #1
 800444c:	4a0d      	ldr	r2, [pc, #52]	@ (8004484 <vPortEnterCritical+0x58>)
 800444e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <vPortEnterCritical+0x58>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d110      	bne.n	800447a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <vPortEnterCritical+0x5c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <vPortEnterCritical+0x4e>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	603b      	str	r3, [r7, #0]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <vPortEnterCritical+0x4a>
	}
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	2000000c 	.word	0x2000000c
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004492:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <vPortExitCritical+0x50>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <vPortExitCritical+0x26>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	607b      	str	r3, [r7, #4]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	@ (80044dc <vPortExitCritical+0x50>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <vPortExitCritical+0x50>)
 80044ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044bc:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <vPortExitCritical+0x50>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <vPortExitCritical+0x44>
 80044c4:	2300      	movs	r3, #0
 80044c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f383 8811 	msr	BASEPRI, r3
}
 80044ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044e0:	f3ef 8009 	mrs	r0, PSP
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <pxCurrentTCBConst>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044f0:	6010      	str	r0, [r2, #0]
 80044f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044f6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80044fa:	f380 8811 	msr	BASEPRI, r0
 80044fe:	f7ff f823 	bl	8003548 <vTaskSwitchContext>
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	6808      	ldr	r0, [r1, #0]
 8004512:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004516:	f380 8809 	msr	PSP, r0
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	4770      	bx	lr

08004520 <pxCurrentTCBConst>:
 8004520:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop

08004528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
}
 8004540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004542:	f7fe ff41 	bl	80033c8 <xTaskIncrementTick>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <SysTick_Handler+0x40>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	2300      	movs	r3, #0
 8004556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f383 8811 	msr	BASEPRI, r3
}
 800455e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004570:	4b0a      	ldr	r3, [pc, #40]	@ (800459c <vPortSetupTimerInterrupt+0x30>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004576:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800457c:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <vPortSetupTimerInterrupt+0x38>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a09      	ldr	r2, [pc, #36]	@ (80045a8 <vPortSetupTimerInterrupt+0x3c>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	4a08      	ldr	r2, [pc, #32]	@ (80045ac <vPortSetupTimerInterrupt+0x40>)
 800458a:	3b01      	subs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800458e:	4b03      	ldr	r3, [pc, #12]	@ (800459c <vPortSetupTimerInterrupt+0x30>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	e000e010 	.word	0xe000e010
 80045a0:	e000e018 	.word	0xe000e018
 80045a4:	20000000 	.word	0x20000000
 80045a8:	10624dd3 	.word	0x10624dd3
 80045ac:	e000e014 	.word	0xe000e014

080045b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80045b6:	f3ef 8305 	mrs	r3, IPSR
 80045ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	d915      	bls.n	80045ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045c2:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <vPortValidateInterruptPriority+0x70>)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045cc:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <vPortValidateInterruptPriority+0x74>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	7afa      	ldrb	r2, [r7, #11]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d20b      	bcs.n	80045ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	607b      	str	r3, [r7, #4]
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004628 <vPortValidateInterruptPriority+0x78>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <vPortValidateInterruptPriority+0x7c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d90b      	bls.n	8004616 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	603b      	str	r3, [r7, #0]
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	e7fd      	b.n	8004612 <vPortValidateInterruptPriority+0x62>
	}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	e000e3f0 	.word	0xe000e3f0
 8004624:	20000f38 	.word	0x20000f38
 8004628:	e000ed0c 	.word	0xe000ed0c
 800462c:	20000f3c 	.word	0x20000f3c

08004630 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004638:	2300      	movs	r3, #0
 800463a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800463c:	f7fe fe0a 	bl	8003254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004640:	4b5a      	ldr	r3, [pc, #360]	@ (80047ac <pvPortMalloc+0x17c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004648:	f000 f916 	bl	8004878 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800464c:	4b58      	ldr	r3, [pc, #352]	@ (80047b0 <pvPortMalloc+0x180>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 8090 	bne.w	800477a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01e      	beq.n	800469e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004660:	2208      	movs	r2, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f023 0307 	bic.w	r3, r3, #7
 8004678:	3308      	adds	r3, #8
 800467a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <pvPortMalloc+0x6e>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	617b      	str	r3, [r7, #20]
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d06a      	beq.n	800477a <pvPortMalloc+0x14a>
 80046a4:	4b43      	ldr	r3, [pc, #268]	@ (80047b4 <pvPortMalloc+0x184>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d865      	bhi.n	800477a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046ae:	4b42      	ldr	r3, [pc, #264]	@ (80047b8 <pvPortMalloc+0x188>)
 80046b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046b2:	4b41      	ldr	r3, [pc, #260]	@ (80047b8 <pvPortMalloc+0x188>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046b8:	e004      	b.n	80046c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d903      	bls.n	80046d6 <pvPortMalloc+0xa6>
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f1      	bne.n	80046ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046d6:	4b35      	ldr	r3, [pc, #212]	@ (80047ac <pvPortMalloc+0x17c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046dc:	429a      	cmp	r2, r3
 80046de:	d04c      	beq.n	800477a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2208      	movs	r2, #8
 80046e6:	4413      	add	r3, r2
 80046e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	1ad2      	subs	r2, r2, r3
 80046fa:	2308      	movs	r3, #8
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	429a      	cmp	r2, r3
 8004700:	d920      	bls.n	8004744 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <pvPortMalloc+0xfc>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	613b      	str	r3, [r7, #16]
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad2      	subs	r2, r2, r3
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800473e:	69b8      	ldr	r0, [r7, #24]
 8004740:	f000 f8fc 	bl	800493c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004744:	4b1b      	ldr	r3, [pc, #108]	@ (80047b4 <pvPortMalloc+0x184>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	4a19      	ldr	r2, [pc, #100]	@ (80047b4 <pvPortMalloc+0x184>)
 8004750:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <pvPortMalloc+0x184>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <pvPortMalloc+0x18c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d203      	bcs.n	8004766 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800475e:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <pvPortMalloc+0x184>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <pvPortMalloc+0x18c>)
 8004764:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <pvPortMalloc+0x180>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	431a      	orrs	r2, r3
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800477a:	f7fe fd79 	bl	8003270 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00b      	beq.n	80047a0 <pvPortMalloc+0x170>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
}
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	e7fd      	b.n	800479c <pvPortMalloc+0x16c>
	return pvReturn;
 80047a0:	69fb      	ldr	r3, [r7, #28]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3728      	adds	r7, #40	@ 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20001b48 	.word	0x20001b48
 80047b0:	20001b54 	.word	0x20001b54
 80047b4:	20001b4c 	.word	0x20001b4c
 80047b8:	20001b40 	.word	0x20001b40
 80047bc:	20001b50 	.word	0x20001b50

080047c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04a      	beq.n	8004868 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047d2:	2308      	movs	r3, #8
 80047d4:	425b      	negs	r3, r3
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4413      	add	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	4b22      	ldr	r3, [pc, #136]	@ (8004870 <vPortFree+0xb0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <vPortFree+0x46>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60fb      	str	r3, [r7, #12]
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <vPortFree+0x66>
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004812:	f383 8811 	msr	BASEPRI, r3
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	f3bf 8f4f 	dsb	sy
 800481e:	60bb      	str	r3, [r7, #8]
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <vPortFree+0xb0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d019      	beq.n	8004868 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d115      	bne.n	8004868 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <vPortFree+0xb0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	43db      	mvns	r3, r3
 8004846:	401a      	ands	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800484c:	f7fe fd02 	bl	8003254 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4b07      	ldr	r3, [pc, #28]	@ (8004874 <vPortFree+0xb4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4413      	add	r3, r2
 800485a:	4a06      	ldr	r2, [pc, #24]	@ (8004874 <vPortFree+0xb4>)
 800485c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800485e:	6938      	ldr	r0, [r7, #16]
 8004860:	f000 f86c 	bl	800493c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004864:	f7fe fd04 	bl	8003270 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004868:	bf00      	nop
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20001b54 	.word	0x20001b54
 8004874:	20001b4c 	.word	0x20001b4c

08004878 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800487e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004882:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004884:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <prvHeapInit+0xac>)
 8004886:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3307      	adds	r3, #7
 8004896:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004924 <prvHeapInit+0xac>)
 80048a8:	4413      	add	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004928 <prvHeapInit+0xb0>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004928 <prvHeapInit+0xb0>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048c4:	2208      	movs	r2, #8
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0307 	bic.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <prvHeapInit+0xb4>)
 80048d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048da:	4b14      	ldr	r3, [pc, #80]	@ (800492c <prvHeapInit+0xb4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <prvHeapInit+0xb4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048f8:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <prvHeapInit+0xb4>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a0a      	ldr	r2, [pc, #40]	@ (8004930 <prvHeapInit+0xb8>)
 8004906:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	4a09      	ldr	r2, [pc, #36]	@ (8004934 <prvHeapInit+0xbc>)
 800490e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <prvHeapInit+0xc0>)
 8004912:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000f40 	.word	0x20000f40
 8004928:	20001b40 	.word	0x20001b40
 800492c:	20001b48 	.word	0x20001b48
 8004930:	20001b50 	.word	0x20001b50
 8004934:	20001b4c 	.word	0x20001b4c
 8004938:	20001b54 	.word	0x20001b54

0800493c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004944:	4b27      	ldr	r3, [pc, #156]	@ (80049e4 <prvInsertBlockIntoFreeList+0xa8>)
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	e002      	b.n	8004950 <prvInsertBlockIntoFreeList+0x14>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	429a      	cmp	r2, r3
 8004958:	d8f7      	bhi.n	800494a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	4413      	add	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d108      	bne.n	800497e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	441a      	add	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	441a      	add	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d118      	bne.n	80049c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b14      	ldr	r3, [pc, #80]	@ (80049e8 <prvInsertBlockIntoFreeList+0xac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d00d      	beq.n	80049ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	441a      	add	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e008      	b.n	80049cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049ba:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <prvInsertBlockIntoFreeList+0xac>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	e003      	b.n	80049cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d002      	beq.n	80049da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	20001b40 	.word	0x20001b40
 80049e8:	20001b48 	.word	0x20001b48

080049ec <std>:
 80049ec:	2300      	movs	r3, #0
 80049ee:	b510      	push	{r4, lr}
 80049f0:	4604      	mov	r4, r0
 80049f2:	e9c0 3300 	strd	r3, r3, [r0]
 80049f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049fa:	6083      	str	r3, [r0, #8]
 80049fc:	8181      	strh	r1, [r0, #12]
 80049fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a00:	81c2      	strh	r2, [r0, #14]
 8004a02:	6183      	str	r3, [r0, #24]
 8004a04:	4619      	mov	r1, r3
 8004a06:	2208      	movs	r2, #8
 8004a08:	305c      	adds	r0, #92	@ 0x5c
 8004a0a:	f000 f9e7 	bl	8004ddc <memset>
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <std+0x58>)
 8004a10:	6224      	str	r4, [r4, #32]
 8004a12:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <std+0x5c>)
 8004a16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a18:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <std+0x60>)
 8004a1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <std+0x64>)
 8004a1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a20:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <std+0x68>)
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d006      	beq.n	8004a34 <std+0x48>
 8004a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a2a:	4294      	cmp	r4, r2
 8004a2c:	d002      	beq.n	8004a34 <std+0x48>
 8004a2e:	33d0      	adds	r3, #208	@ 0xd0
 8004a30:	429c      	cmp	r4, r3
 8004a32:	d105      	bne.n	8004a40 <std+0x54>
 8004a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3c:	f000 ba9c 	b.w	8004f78 <__retarget_lock_init_recursive>
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	08004c2d 	.word	0x08004c2d
 8004a48:	08004c4f 	.word	0x08004c4f
 8004a4c:	08004c87 	.word	0x08004c87
 8004a50:	08004cab 	.word	0x08004cab
 8004a54:	20001b58 	.word	0x20001b58

08004a58 <stdio_exit_handler>:
 8004a58:	4a02      	ldr	r2, [pc, #8]	@ (8004a64 <stdio_exit_handler+0xc>)
 8004a5a:	4903      	ldr	r1, [pc, #12]	@ (8004a68 <stdio_exit_handler+0x10>)
 8004a5c:	4803      	ldr	r0, [pc, #12]	@ (8004a6c <stdio_exit_handler+0x14>)
 8004a5e:	f000 b869 	b.w	8004b34 <_fwalk_sglue>
 8004a62:	bf00      	nop
 8004a64:	20000010 	.word	0x20000010
 8004a68:	08005289 	.word	0x08005289
 8004a6c:	20000020 	.word	0x20000020

08004a70 <cleanup_stdio>:
 8004a70:	6841      	ldr	r1, [r0, #4]
 8004a72:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <cleanup_stdio+0x34>)
 8004a74:	b510      	push	{r4, lr}
 8004a76:	4299      	cmp	r1, r3
 8004a78:	4604      	mov	r4, r0
 8004a7a:	d001      	beq.n	8004a80 <cleanup_stdio+0x10>
 8004a7c:	f000 fc04 	bl	8005288 <_fflush_r>
 8004a80:	68a1      	ldr	r1, [r4, #8]
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <cleanup_stdio+0x38>)
 8004a84:	4299      	cmp	r1, r3
 8004a86:	d002      	beq.n	8004a8e <cleanup_stdio+0x1e>
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 fbfd 	bl	8005288 <_fflush_r>
 8004a8e:	68e1      	ldr	r1, [r4, #12]
 8004a90:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <cleanup_stdio+0x3c>)
 8004a92:	4299      	cmp	r1, r3
 8004a94:	d004      	beq.n	8004aa0 <cleanup_stdio+0x30>
 8004a96:	4620      	mov	r0, r4
 8004a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a9c:	f000 bbf4 	b.w	8005288 <_fflush_r>
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20001b58 	.word	0x20001b58
 8004aa8:	20001bc0 	.word	0x20001bc0
 8004aac:	20001c28 	.word	0x20001c28

08004ab0 <global_stdio_init.part.0>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <global_stdio_init.part.0+0x30>)
 8004ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8004ae4 <global_stdio_init.part.0+0x34>)
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae8 <global_stdio_init.part.0+0x38>)
 8004ab8:	4620      	mov	r0, r4
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	2104      	movs	r1, #4
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f7ff ff94 	bl	80049ec <std>
 8004ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ac8:	2201      	movs	r2, #1
 8004aca:	2109      	movs	r1, #9
 8004acc:	f7ff ff8e 	bl	80049ec <std>
 8004ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ada:	2112      	movs	r1, #18
 8004adc:	f7ff bf86 	b.w	80049ec <std>
 8004ae0:	20001c90 	.word	0x20001c90
 8004ae4:	20001b58 	.word	0x20001b58
 8004ae8:	08004a59 	.word	0x08004a59

08004aec <__sfp_lock_acquire>:
 8004aec:	4801      	ldr	r0, [pc, #4]	@ (8004af4 <__sfp_lock_acquire+0x8>)
 8004aee:	f000 ba44 	b.w	8004f7a <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	20001c99 	.word	0x20001c99

08004af8 <__sfp_lock_release>:
 8004af8:	4801      	ldr	r0, [pc, #4]	@ (8004b00 <__sfp_lock_release+0x8>)
 8004afa:	f000 ba3f 	b.w	8004f7c <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	20001c99 	.word	0x20001c99

08004b04 <__sinit>:
 8004b04:	b510      	push	{r4, lr}
 8004b06:	4604      	mov	r4, r0
 8004b08:	f7ff fff0 	bl	8004aec <__sfp_lock_acquire>
 8004b0c:	6a23      	ldr	r3, [r4, #32]
 8004b0e:	b11b      	cbz	r3, 8004b18 <__sinit+0x14>
 8004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b14:	f7ff bff0 	b.w	8004af8 <__sfp_lock_release>
 8004b18:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <__sinit+0x28>)
 8004b1a:	6223      	str	r3, [r4, #32]
 8004b1c:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <__sinit+0x2c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f5      	bne.n	8004b10 <__sinit+0xc>
 8004b24:	f7ff ffc4 	bl	8004ab0 <global_stdio_init.part.0>
 8004b28:	e7f2      	b.n	8004b10 <__sinit+0xc>
 8004b2a:	bf00      	nop
 8004b2c:	08004a71 	.word	0x08004a71
 8004b30:	20001c90 	.word	0x20001c90

08004b34 <_fwalk_sglue>:
 8004b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b38:	4607      	mov	r7, r0
 8004b3a:	4688      	mov	r8, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	2600      	movs	r6, #0
 8004b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b44:	f1b9 0901 	subs.w	r9, r9, #1
 8004b48:	d505      	bpl.n	8004b56 <_fwalk_sglue+0x22>
 8004b4a:	6824      	ldr	r4, [r4, #0]
 8004b4c:	2c00      	cmp	r4, #0
 8004b4e:	d1f7      	bne.n	8004b40 <_fwalk_sglue+0xc>
 8004b50:	4630      	mov	r0, r6
 8004b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d907      	bls.n	8004b6c <_fwalk_sglue+0x38>
 8004b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b60:	3301      	adds	r3, #1
 8004b62:	d003      	beq.n	8004b6c <_fwalk_sglue+0x38>
 8004b64:	4629      	mov	r1, r5
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c0      	blx	r8
 8004b6a:	4306      	orrs	r6, r0
 8004b6c:	3568      	adds	r5, #104	@ 0x68
 8004b6e:	e7e9      	b.n	8004b44 <_fwalk_sglue+0x10>

08004b70 <_puts_r>:
 8004b70:	6a03      	ldr	r3, [r0, #32]
 8004b72:	b570      	push	{r4, r5, r6, lr}
 8004b74:	4605      	mov	r5, r0
 8004b76:	460e      	mov	r6, r1
 8004b78:	6884      	ldr	r4, [r0, #8]
 8004b7a:	b90b      	cbnz	r3, 8004b80 <_puts_r+0x10>
 8004b7c:	f7ff ffc2 	bl	8004b04 <__sinit>
 8004b80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b82:	07db      	lsls	r3, r3, #31
 8004b84:	d405      	bmi.n	8004b92 <_puts_r+0x22>
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	0598      	lsls	r0, r3, #22
 8004b8a:	d402      	bmi.n	8004b92 <_puts_r+0x22>
 8004b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b8e:	f000 f9f4 	bl	8004f7a <__retarget_lock_acquire_recursive>
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	0719      	lsls	r1, r3, #28
 8004b96:	d502      	bpl.n	8004b9e <_puts_r+0x2e>
 8004b98:	6923      	ldr	r3, [r4, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d135      	bne.n	8004c0a <_puts_r+0x9a>
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 f8c5 	bl	8004d30 <__swsetup_r>
 8004ba6:	b380      	cbz	r0, 8004c0a <_puts_r+0x9a>
 8004ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8004bac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bae:	07da      	lsls	r2, r3, #31
 8004bb0:	d405      	bmi.n	8004bbe <_puts_r+0x4e>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	059b      	lsls	r3, r3, #22
 8004bb6:	d402      	bmi.n	8004bbe <_puts_r+0x4e>
 8004bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bba:	f000 f9df 	bl	8004f7c <__retarget_lock_release_recursive>
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da04      	bge.n	8004bd0 <_puts_r+0x60>
 8004bc6:	69a2      	ldr	r2, [r4, #24]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	dc17      	bgt.n	8004bfc <_puts_r+0x8c>
 8004bcc:	290a      	cmp	r1, #10
 8004bce:	d015      	beq.n	8004bfc <_puts_r+0x8c>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	6022      	str	r2, [r4, #0]
 8004bd6:	7019      	strb	r1, [r3, #0]
 8004bd8:	68a3      	ldr	r3, [r4, #8]
 8004bda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004bde:	3b01      	subs	r3, #1
 8004be0:	60a3      	str	r3, [r4, #8]
 8004be2:	2900      	cmp	r1, #0
 8004be4:	d1ed      	bne.n	8004bc2 <_puts_r+0x52>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da11      	bge.n	8004c0e <_puts_r+0x9e>
 8004bea:	4622      	mov	r2, r4
 8004bec:	210a      	movs	r1, #10
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 f85f 	bl	8004cb2 <__swbuf_r>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d0d7      	beq.n	8004ba8 <_puts_r+0x38>
 8004bf8:	250a      	movs	r5, #10
 8004bfa:	e7d7      	b.n	8004bac <_puts_r+0x3c>
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 f857 	bl	8004cb2 <__swbuf_r>
 8004c04:	3001      	adds	r0, #1
 8004c06:	d1e7      	bne.n	8004bd8 <_puts_r+0x68>
 8004c08:	e7ce      	b.n	8004ba8 <_puts_r+0x38>
 8004c0a:	3e01      	subs	r6, #1
 8004c0c:	e7e4      	b.n	8004bd8 <_puts_r+0x68>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	6022      	str	r2, [r4, #0]
 8004c14:	220a      	movs	r2, #10
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e7ee      	b.n	8004bf8 <_puts_r+0x88>
	...

08004c1c <puts>:
 8004c1c:	4b02      	ldr	r3, [pc, #8]	@ (8004c28 <puts+0xc>)
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f7ff bfa5 	b.w	8004b70 <_puts_r>
 8004c26:	bf00      	nop
 8004c28:	2000001c 	.word	0x2000001c

08004c2c <__sread>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	460c      	mov	r4, r1
 8004c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c34:	f000 f952 	bl	8004edc <_read_r>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	bfab      	itete	ge
 8004c3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c40:	181b      	addge	r3, r3, r0
 8004c42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c46:	bfac      	ite	ge
 8004c48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c4a:	81a3      	strhlt	r3, [r4, #12]
 8004c4c:	bd10      	pop	{r4, pc}

08004c4e <__swrite>:
 8004c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c52:	461f      	mov	r7, r3
 8004c54:	898b      	ldrh	r3, [r1, #12]
 8004c56:	4605      	mov	r5, r0
 8004c58:	05db      	lsls	r3, r3, #23
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	4616      	mov	r6, r2
 8004c5e:	d505      	bpl.n	8004c6c <__swrite+0x1e>
 8004c60:	2302      	movs	r3, #2
 8004c62:	2200      	movs	r2, #0
 8004c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c68:	f000 f926 	bl	8004eb8 <_lseek_r>
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	4632      	mov	r2, r6
 8004c70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	4628      	mov	r0, r5
 8004c78:	463b      	mov	r3, r7
 8004c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c82:	f000 b93d 	b.w	8004f00 <_write_r>

08004c86 <__sseek>:
 8004c86:	b510      	push	{r4, lr}
 8004c88:	460c      	mov	r4, r1
 8004c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8e:	f000 f913 	bl	8004eb8 <_lseek_r>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	bf15      	itete	ne
 8004c98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ca2:	81a3      	strheq	r3, [r4, #12]
 8004ca4:	bf18      	it	ne
 8004ca6:	81a3      	strhne	r3, [r4, #12]
 8004ca8:	bd10      	pop	{r4, pc}

08004caa <__sclose>:
 8004caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cae:	f000 b89d 	b.w	8004dec <_close_r>

08004cb2 <__swbuf_r>:
 8004cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb4:	460e      	mov	r6, r1
 8004cb6:	4614      	mov	r4, r2
 8004cb8:	4605      	mov	r5, r0
 8004cba:	b118      	cbz	r0, 8004cc4 <__swbuf_r+0x12>
 8004cbc:	6a03      	ldr	r3, [r0, #32]
 8004cbe:	b90b      	cbnz	r3, 8004cc4 <__swbuf_r+0x12>
 8004cc0:	f7ff ff20 	bl	8004b04 <__sinit>
 8004cc4:	69a3      	ldr	r3, [r4, #24]
 8004cc6:	60a3      	str	r3, [r4, #8]
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	071a      	lsls	r2, r3, #28
 8004ccc:	d501      	bpl.n	8004cd2 <__swbuf_r+0x20>
 8004cce:	6923      	ldr	r3, [r4, #16]
 8004cd0:	b943      	cbnz	r3, 8004ce4 <__swbuf_r+0x32>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	f000 f82b 	bl	8004d30 <__swsetup_r>
 8004cda:	b118      	cbz	r0, 8004ce4 <__swbuf_r+0x32>
 8004cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	6922      	ldr	r2, [r4, #16]
 8004ce8:	b2f6      	uxtb	r6, r6
 8004cea:	1a98      	subs	r0, r3, r2
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	4637      	mov	r7, r6
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	dc05      	bgt.n	8004d00 <__swbuf_r+0x4e>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f000 fac6 	bl	8005288 <_fflush_r>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d1ed      	bne.n	8004cdc <__swbuf_r+0x2a>
 8004d00:	68a3      	ldr	r3, [r4, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	60a3      	str	r3, [r4, #8]
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	701e      	strb	r6, [r3, #0]
 8004d0e:	6962      	ldr	r2, [r4, #20]
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d004      	beq.n	8004d20 <__swbuf_r+0x6e>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	07db      	lsls	r3, r3, #31
 8004d1a:	d5e1      	bpl.n	8004ce0 <__swbuf_r+0x2e>
 8004d1c:	2e0a      	cmp	r6, #10
 8004d1e:	d1df      	bne.n	8004ce0 <__swbuf_r+0x2e>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fab0 	bl	8005288 <_fflush_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0d9      	beq.n	8004ce0 <__swbuf_r+0x2e>
 8004d2c:	e7d6      	b.n	8004cdc <__swbuf_r+0x2a>
	...

08004d30 <__swsetup_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <__swsetup_r+0xa8>)
 8004d34:	4605      	mov	r5, r0
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	460c      	mov	r4, r1
 8004d3a:	b118      	cbz	r0, 8004d44 <__swsetup_r+0x14>
 8004d3c:	6a03      	ldr	r3, [r0, #32]
 8004d3e:	b90b      	cbnz	r3, 8004d44 <__swsetup_r+0x14>
 8004d40:	f7ff fee0 	bl	8004b04 <__sinit>
 8004d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d48:	0719      	lsls	r1, r3, #28
 8004d4a:	d422      	bmi.n	8004d92 <__swsetup_r+0x62>
 8004d4c:	06da      	lsls	r2, r3, #27
 8004d4e:	d407      	bmi.n	8004d60 <__swsetup_r+0x30>
 8004d50:	2209      	movs	r2, #9
 8004d52:	602a      	str	r2, [r5, #0]
 8004d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	81a3      	strh	r3, [r4, #12]
 8004d5e:	e033      	b.n	8004dc8 <__swsetup_r+0x98>
 8004d60:	0758      	lsls	r0, r3, #29
 8004d62:	d512      	bpl.n	8004d8a <__swsetup_r+0x5a>
 8004d64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d66:	b141      	cbz	r1, 8004d7a <__swsetup_r+0x4a>
 8004d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d6c:	4299      	cmp	r1, r3
 8004d6e:	d002      	beq.n	8004d76 <__swsetup_r+0x46>
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f913 	bl	8004f9c <_free_r>
 8004d76:	2300      	movs	r3, #0
 8004d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004d80:	81a3      	strh	r3, [r4, #12]
 8004d82:	2300      	movs	r3, #0
 8004d84:	6063      	str	r3, [r4, #4]
 8004d86:	6923      	ldr	r3, [r4, #16]
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	f043 0308 	orr.w	r3, r3, #8
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	6923      	ldr	r3, [r4, #16]
 8004d94:	b94b      	cbnz	r3, 8004daa <__swsetup_r+0x7a>
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004d9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004da0:	d003      	beq.n	8004daa <__swsetup_r+0x7a>
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 fabc 	bl	8005322 <__smakebuf_r>
 8004daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dae:	f013 0201 	ands.w	r2, r3, #1
 8004db2:	d00a      	beq.n	8004dca <__swsetup_r+0x9a>
 8004db4:	2200      	movs	r2, #0
 8004db6:	60a2      	str	r2, [r4, #8]
 8004db8:	6962      	ldr	r2, [r4, #20]
 8004dba:	4252      	negs	r2, r2
 8004dbc:	61a2      	str	r2, [r4, #24]
 8004dbe:	6922      	ldr	r2, [r4, #16]
 8004dc0:	b942      	cbnz	r2, 8004dd4 <__swsetup_r+0xa4>
 8004dc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004dc6:	d1c5      	bne.n	8004d54 <__swsetup_r+0x24>
 8004dc8:	bd38      	pop	{r3, r4, r5, pc}
 8004dca:	0799      	lsls	r1, r3, #30
 8004dcc:	bf58      	it	pl
 8004dce:	6962      	ldrpl	r2, [r4, #20]
 8004dd0:	60a2      	str	r2, [r4, #8]
 8004dd2:	e7f4      	b.n	8004dbe <__swsetup_r+0x8e>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	e7f7      	b.n	8004dc8 <__swsetup_r+0x98>
 8004dd8:	2000001c 	.word	0x2000001c

08004ddc <memset>:
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4402      	add	r2, r0
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memset+0xa>
 8004de4:	4770      	bx	lr
 8004de6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dea:	e7f9      	b.n	8004de0 <memset+0x4>

08004dec <_close_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	2300      	movs	r3, #0
 8004df0:	4d05      	ldr	r5, [pc, #20]	@ (8004e08 <_close_r+0x1c>)
 8004df2:	4604      	mov	r4, r0
 8004df4:	4608      	mov	r0, r1
 8004df6:	602b      	str	r3, [r5, #0]
 8004df8:	f7fb fc6f 	bl	80006da <_close>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_close_r+0x1a>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_close_r+0x1a>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	20001c94 	.word	0x20001c94

08004e0c <_reclaim_reent>:
 8004e0c:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <_reclaim_reent+0xa8>)
 8004e0e:	b570      	push	{r4, r5, r6, lr}
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4604      	mov	r4, r0
 8004e14:	4283      	cmp	r3, r0
 8004e16:	d04b      	beq.n	8004eb0 <_reclaim_reent+0xa4>
 8004e18:	69c3      	ldr	r3, [r0, #28]
 8004e1a:	b1ab      	cbz	r3, 8004e48 <_reclaim_reent+0x3c>
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	b16b      	cbz	r3, 8004e3c <_reclaim_reent+0x30>
 8004e20:	2500      	movs	r5, #0
 8004e22:	69e3      	ldr	r3, [r4, #28]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	5959      	ldr	r1, [r3, r5]
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d13b      	bne.n	8004ea4 <_reclaim_reent+0x98>
 8004e2c:	3504      	adds	r5, #4
 8004e2e:	2d80      	cmp	r5, #128	@ 0x80
 8004e30:	d1f7      	bne.n	8004e22 <_reclaim_reent+0x16>
 8004e32:	69e3      	ldr	r3, [r4, #28]
 8004e34:	4620      	mov	r0, r4
 8004e36:	68d9      	ldr	r1, [r3, #12]
 8004e38:	f000 f8b0 	bl	8004f9c <_free_r>
 8004e3c:	69e3      	ldr	r3, [r4, #28]
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	b111      	cbz	r1, 8004e48 <_reclaim_reent+0x3c>
 8004e42:	4620      	mov	r0, r4
 8004e44:	f000 f8aa 	bl	8004f9c <_free_r>
 8004e48:	6961      	ldr	r1, [r4, #20]
 8004e4a:	b111      	cbz	r1, 8004e52 <_reclaim_reent+0x46>
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f000 f8a5 	bl	8004f9c <_free_r>
 8004e52:	69e1      	ldr	r1, [r4, #28]
 8004e54:	b111      	cbz	r1, 8004e5c <_reclaim_reent+0x50>
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 f8a0 	bl	8004f9c <_free_r>
 8004e5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e5e:	b111      	cbz	r1, 8004e66 <_reclaim_reent+0x5a>
 8004e60:	4620      	mov	r0, r4
 8004e62:	f000 f89b 	bl	8004f9c <_free_r>
 8004e66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e68:	b111      	cbz	r1, 8004e70 <_reclaim_reent+0x64>
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f000 f896 	bl	8004f9c <_free_r>
 8004e70:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004e72:	b111      	cbz	r1, 8004e7a <_reclaim_reent+0x6e>
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 f891 	bl	8004f9c <_free_r>
 8004e7a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004e7c:	b111      	cbz	r1, 8004e84 <_reclaim_reent+0x78>
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 f88c 	bl	8004f9c <_free_r>
 8004e84:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004e86:	b111      	cbz	r1, 8004e8e <_reclaim_reent+0x82>
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 f887 	bl	8004f9c <_free_r>
 8004e8e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004e90:	b111      	cbz	r1, 8004e98 <_reclaim_reent+0x8c>
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f882 	bl	8004f9c <_free_r>
 8004e98:	6a23      	ldr	r3, [r4, #32]
 8004e9a:	b14b      	cbz	r3, 8004eb0 <_reclaim_reent+0xa4>
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ea2:	4718      	bx	r3
 8004ea4:	680e      	ldr	r6, [r1, #0]
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f000 f878 	bl	8004f9c <_free_r>
 8004eac:	4631      	mov	r1, r6
 8004eae:	e7bb      	b.n	8004e28 <_reclaim_reent+0x1c>
 8004eb0:	bd70      	pop	{r4, r5, r6, pc}
 8004eb2:	bf00      	nop
 8004eb4:	2000001c 	.word	0x2000001c

08004eb8 <_lseek_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4d05      	ldr	r5, [pc, #20]	@ (8004ed8 <_lseek_r+0x20>)
 8004ec4:	602a      	str	r2, [r5, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fb fc2b 	bl	8000722 <_lseek>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_lseek_r+0x1e>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_lseek_r+0x1e>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20001c94 	.word	0x20001c94

08004edc <_read_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4d05      	ldr	r5, [pc, #20]	@ (8004efc <_read_r+0x20>)
 8004ee8:	602a      	str	r2, [r5, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	f7fb fbbc 	bl	8000668 <_read>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_read_r+0x1e>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_read_r+0x1e>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	20001c94 	.word	0x20001c94

08004f00 <_write_r>:
 8004f00:	b538      	push	{r3, r4, r5, lr}
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4d05      	ldr	r5, [pc, #20]	@ (8004f20 <_write_r+0x20>)
 8004f0c:	602a      	str	r2, [r5, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7fb fbc7 	bl	80006a2 <_write>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_write_r+0x1e>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_write_r+0x1e>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	20001c94 	.word	0x20001c94

08004f24 <__errno>:
 8004f24:	4b01      	ldr	r3, [pc, #4]	@ (8004f2c <__errno+0x8>)
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	2000001c 	.word	0x2000001c

08004f30 <__libc_init_array>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	2600      	movs	r6, #0
 8004f34:	4d0c      	ldr	r5, [pc, #48]	@ (8004f68 <__libc_init_array+0x38>)
 8004f36:	4c0d      	ldr	r4, [pc, #52]	@ (8004f6c <__libc_init_array+0x3c>)
 8004f38:	1b64      	subs	r4, r4, r5
 8004f3a:	10a4      	asrs	r4, r4, #2
 8004f3c:	42a6      	cmp	r6, r4
 8004f3e:	d109      	bne.n	8004f54 <__libc_init_array+0x24>
 8004f40:	f000 fa5e 	bl	8005400 <_init>
 8004f44:	2600      	movs	r6, #0
 8004f46:	4d0a      	ldr	r5, [pc, #40]	@ (8004f70 <__libc_init_array+0x40>)
 8004f48:	4c0a      	ldr	r4, [pc, #40]	@ (8004f74 <__libc_init_array+0x44>)
 8004f4a:	1b64      	subs	r4, r4, r5
 8004f4c:	10a4      	asrs	r4, r4, #2
 8004f4e:	42a6      	cmp	r6, r4
 8004f50:	d105      	bne.n	8004f5e <__libc_init_array+0x2e>
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f58:	4798      	blx	r3
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7ee      	b.n	8004f3c <__libc_init_array+0xc>
 8004f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f62:	4798      	blx	r3
 8004f64:	3601      	adds	r6, #1
 8004f66:	e7f2      	b.n	8004f4e <__libc_init_array+0x1e>
 8004f68:	08005488 	.word	0x08005488
 8004f6c:	08005488 	.word	0x08005488
 8004f70:	08005488 	.word	0x08005488
 8004f74:	0800548c 	.word	0x0800548c

08004f78 <__retarget_lock_init_recursive>:
 8004f78:	4770      	bx	lr

08004f7a <__retarget_lock_acquire_recursive>:
 8004f7a:	4770      	bx	lr

08004f7c <__retarget_lock_release_recursive>:
 8004f7c:	4770      	bx	lr

08004f7e <memcpy>:
 8004f7e:	440a      	add	r2, r1
 8004f80:	4291      	cmp	r1, r2
 8004f82:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f86:	d100      	bne.n	8004f8a <memcpy+0xc>
 8004f88:	4770      	bx	lr
 8004f8a:	b510      	push	{r4, lr}
 8004f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f90:	4291      	cmp	r1, r2
 8004f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f96:	d1f9      	bne.n	8004f8c <memcpy+0xe>
 8004f98:	bd10      	pop	{r4, pc}
	...

08004f9c <_free_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	d040      	beq.n	8005026 <_free_r+0x8a>
 8004fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa8:	1f0c      	subs	r4, r1, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bfb8      	it	lt
 8004fae:	18e4      	addlt	r4, r4, r3
 8004fb0:	f000 f8de 	bl	8005170 <__malloc_lock>
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <_free_r+0x8c>)
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	b933      	cbnz	r3, 8004fc8 <_free_r+0x2c>
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fc4:	f000 b8da 	b.w	800517c <__malloc_unlock>
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d908      	bls.n	8004fde <_free_r+0x42>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	1821      	adds	r1, r4, r0
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	bf01      	itttt	eq
 8004fd4:	6819      	ldreq	r1, [r3, #0]
 8004fd6:	685b      	ldreq	r3, [r3, #4]
 8004fd8:	1809      	addeq	r1, r1, r0
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	e7ed      	b.n	8004fba <_free_r+0x1e>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b10b      	cbz	r3, 8004fe8 <_free_r+0x4c>
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d9fa      	bls.n	8004fde <_free_r+0x42>
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	1850      	adds	r0, r2, r1
 8004fec:	42a0      	cmp	r0, r4
 8004fee:	d10b      	bne.n	8005008 <_free_r+0x6c>
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	4401      	add	r1, r0
 8004ff4:	1850      	adds	r0, r2, r1
 8004ff6:	4283      	cmp	r3, r0
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	d1e0      	bne.n	8004fbe <_free_r+0x22>
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4408      	add	r0, r1
 8005002:	6010      	str	r0, [r2, #0]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	e7da      	b.n	8004fbe <_free_r+0x22>
 8005008:	d902      	bls.n	8005010 <_free_r+0x74>
 800500a:	230c      	movs	r3, #12
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	e7d6      	b.n	8004fbe <_free_r+0x22>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	1821      	adds	r1, r4, r0
 8005014:	428b      	cmp	r3, r1
 8005016:	bf01      	itttt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	1809      	addeq	r1, r1, r0
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	6054      	str	r4, [r2, #4]
 8005024:	e7cb      	b.n	8004fbe <_free_r+0x22>
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20001ca0 	.word	0x20001ca0

0800502c <sbrk_aligned>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0f      	ldr	r6, [pc, #60]	@ (800506c <sbrk_aligned+0x40>)
 8005030:	460c      	mov	r4, r1
 8005032:	6831      	ldr	r1, [r6, #0]
 8005034:	4605      	mov	r5, r0
 8005036:	b911      	cbnz	r1, 800503e <sbrk_aligned+0x12>
 8005038:	f000 f9d2 	bl	80053e0 <_sbrk_r>
 800503c:	6030      	str	r0, [r6, #0]
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 f9cd 	bl	80053e0 <_sbrk_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d103      	bne.n	8005052 <sbrk_aligned+0x26>
 800504a:	f04f 34ff 	mov.w	r4, #4294967295
 800504e:	4620      	mov	r0, r4
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	1cc4      	adds	r4, r0, #3
 8005054:	f024 0403 	bic.w	r4, r4, #3
 8005058:	42a0      	cmp	r0, r4
 800505a:	d0f8      	beq.n	800504e <sbrk_aligned+0x22>
 800505c:	1a21      	subs	r1, r4, r0
 800505e:	4628      	mov	r0, r5
 8005060:	f000 f9be 	bl	80053e0 <_sbrk_r>
 8005064:	3001      	adds	r0, #1
 8005066:	d1f2      	bne.n	800504e <sbrk_aligned+0x22>
 8005068:	e7ef      	b.n	800504a <sbrk_aligned+0x1e>
 800506a:	bf00      	nop
 800506c:	20001c9c 	.word	0x20001c9c

08005070 <_malloc_r>:
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005074:	1ccd      	adds	r5, r1, #3
 8005076:	f025 0503 	bic.w	r5, r5, #3
 800507a:	3508      	adds	r5, #8
 800507c:	2d0c      	cmp	r5, #12
 800507e:	bf38      	it	cc
 8005080:	250c      	movcc	r5, #12
 8005082:	2d00      	cmp	r5, #0
 8005084:	4606      	mov	r6, r0
 8005086:	db01      	blt.n	800508c <_malloc_r+0x1c>
 8005088:	42a9      	cmp	r1, r5
 800508a:	d904      	bls.n	8005096 <_malloc_r+0x26>
 800508c:	230c      	movs	r3, #12
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	2000      	movs	r0, #0
 8005092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800516c <_malloc_r+0xfc>
 800509a:	f000 f869 	bl	8005170 <__malloc_lock>
 800509e:	f8d8 3000 	ldr.w	r3, [r8]
 80050a2:	461c      	mov	r4, r3
 80050a4:	bb44      	cbnz	r4, 80050f8 <_malloc_r+0x88>
 80050a6:	4629      	mov	r1, r5
 80050a8:	4630      	mov	r0, r6
 80050aa:	f7ff ffbf 	bl	800502c <sbrk_aligned>
 80050ae:	1c43      	adds	r3, r0, #1
 80050b0:	4604      	mov	r4, r0
 80050b2:	d158      	bne.n	8005166 <_malloc_r+0xf6>
 80050b4:	f8d8 4000 	ldr.w	r4, [r8]
 80050b8:	4627      	mov	r7, r4
 80050ba:	2f00      	cmp	r7, #0
 80050bc:	d143      	bne.n	8005146 <_malloc_r+0xd6>
 80050be:	2c00      	cmp	r4, #0
 80050c0:	d04b      	beq.n	800515a <_malloc_r+0xea>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	4639      	mov	r1, r7
 80050c6:	4630      	mov	r0, r6
 80050c8:	eb04 0903 	add.w	r9, r4, r3
 80050cc:	f000 f988 	bl	80053e0 <_sbrk_r>
 80050d0:	4581      	cmp	r9, r0
 80050d2:	d142      	bne.n	800515a <_malloc_r+0xea>
 80050d4:	6821      	ldr	r1, [r4, #0]
 80050d6:	4630      	mov	r0, r6
 80050d8:	1a6d      	subs	r5, r5, r1
 80050da:	4629      	mov	r1, r5
 80050dc:	f7ff ffa6 	bl	800502c <sbrk_aligned>
 80050e0:	3001      	adds	r0, #1
 80050e2:	d03a      	beq.n	800515a <_malloc_r+0xea>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	442b      	add	r3, r5
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	f8d8 3000 	ldr.w	r3, [r8]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	bb62      	cbnz	r2, 800514c <_malloc_r+0xdc>
 80050f2:	f8c8 7000 	str.w	r7, [r8]
 80050f6:	e00f      	b.n	8005118 <_malloc_r+0xa8>
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	1b52      	subs	r2, r2, r5
 80050fc:	d420      	bmi.n	8005140 <_malloc_r+0xd0>
 80050fe:	2a0b      	cmp	r2, #11
 8005100:	d917      	bls.n	8005132 <_malloc_r+0xc2>
 8005102:	1961      	adds	r1, r4, r5
 8005104:	42a3      	cmp	r3, r4
 8005106:	6025      	str	r5, [r4, #0]
 8005108:	bf18      	it	ne
 800510a:	6059      	strne	r1, [r3, #4]
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	bf08      	it	eq
 8005110:	f8c8 1000 	streq.w	r1, [r8]
 8005114:	5162      	str	r2, [r4, r5]
 8005116:	604b      	str	r3, [r1, #4]
 8005118:	4630      	mov	r0, r6
 800511a:	f000 f82f 	bl	800517c <__malloc_unlock>
 800511e:	f104 000b 	add.w	r0, r4, #11
 8005122:	1d23      	adds	r3, r4, #4
 8005124:	f020 0007 	bic.w	r0, r0, #7
 8005128:	1ac2      	subs	r2, r0, r3
 800512a:	bf1c      	itt	ne
 800512c:	1a1b      	subne	r3, r3, r0
 800512e:	50a3      	strne	r3, [r4, r2]
 8005130:	e7af      	b.n	8005092 <_malloc_r+0x22>
 8005132:	6862      	ldr	r2, [r4, #4]
 8005134:	42a3      	cmp	r3, r4
 8005136:	bf0c      	ite	eq
 8005138:	f8c8 2000 	streq.w	r2, [r8]
 800513c:	605a      	strne	r2, [r3, #4]
 800513e:	e7eb      	b.n	8005118 <_malloc_r+0xa8>
 8005140:	4623      	mov	r3, r4
 8005142:	6864      	ldr	r4, [r4, #4]
 8005144:	e7ae      	b.n	80050a4 <_malloc_r+0x34>
 8005146:	463c      	mov	r4, r7
 8005148:	687f      	ldr	r7, [r7, #4]
 800514a:	e7b6      	b.n	80050ba <_malloc_r+0x4a>
 800514c:	461a      	mov	r2, r3
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	42a3      	cmp	r3, r4
 8005152:	d1fb      	bne.n	800514c <_malloc_r+0xdc>
 8005154:	2300      	movs	r3, #0
 8005156:	6053      	str	r3, [r2, #4]
 8005158:	e7de      	b.n	8005118 <_malloc_r+0xa8>
 800515a:	230c      	movs	r3, #12
 800515c:	4630      	mov	r0, r6
 800515e:	6033      	str	r3, [r6, #0]
 8005160:	f000 f80c 	bl	800517c <__malloc_unlock>
 8005164:	e794      	b.n	8005090 <_malloc_r+0x20>
 8005166:	6005      	str	r5, [r0, #0]
 8005168:	e7d6      	b.n	8005118 <_malloc_r+0xa8>
 800516a:	bf00      	nop
 800516c:	20001ca0 	.word	0x20001ca0

08005170 <__malloc_lock>:
 8005170:	4801      	ldr	r0, [pc, #4]	@ (8005178 <__malloc_lock+0x8>)
 8005172:	f7ff bf02 	b.w	8004f7a <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	20001c98 	.word	0x20001c98

0800517c <__malloc_unlock>:
 800517c:	4801      	ldr	r0, [pc, #4]	@ (8005184 <__malloc_unlock+0x8>)
 800517e:	f7ff befd 	b.w	8004f7c <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	20001c98 	.word	0x20001c98

08005188 <__sflush_r>:
 8005188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518e:	0716      	lsls	r6, r2, #28
 8005190:	4605      	mov	r5, r0
 8005192:	460c      	mov	r4, r1
 8005194:	d454      	bmi.n	8005240 <__sflush_r+0xb8>
 8005196:	684b      	ldr	r3, [r1, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dc02      	bgt.n	80051a2 <__sflush_r+0x1a>
 800519c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dd48      	ble.n	8005234 <__sflush_r+0xac>
 80051a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051a4:	2e00      	cmp	r6, #0
 80051a6:	d045      	beq.n	8005234 <__sflush_r+0xac>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051ae:	682f      	ldr	r7, [r5, #0]
 80051b0:	6a21      	ldr	r1, [r4, #32]
 80051b2:	602b      	str	r3, [r5, #0]
 80051b4:	d030      	beq.n	8005218 <__sflush_r+0x90>
 80051b6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	0759      	lsls	r1, r3, #29
 80051bc:	d505      	bpl.n	80051ca <__sflush_r+0x42>
 80051be:	6863      	ldr	r3, [r4, #4]
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051c4:	b10b      	cbz	r3, 80051ca <__sflush_r+0x42>
 80051c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051c8:	1ad2      	subs	r2, r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	4628      	mov	r0, r5
 80051ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051d0:	6a21      	ldr	r1, [r4, #32]
 80051d2:	47b0      	blx	r6
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	d106      	bne.n	80051e8 <__sflush_r+0x60>
 80051da:	6829      	ldr	r1, [r5, #0]
 80051dc:	291d      	cmp	r1, #29
 80051de:	d82b      	bhi.n	8005238 <__sflush_r+0xb0>
 80051e0:	4a28      	ldr	r2, [pc, #160]	@ (8005284 <__sflush_r+0xfc>)
 80051e2:	410a      	asrs	r2, r1
 80051e4:	07d6      	lsls	r6, r2, #31
 80051e6:	d427      	bmi.n	8005238 <__sflush_r+0xb0>
 80051e8:	2200      	movs	r2, #0
 80051ea:	6062      	str	r2, [r4, #4]
 80051ec:	6922      	ldr	r2, [r4, #16]
 80051ee:	04d9      	lsls	r1, r3, #19
 80051f0:	6022      	str	r2, [r4, #0]
 80051f2:	d504      	bpl.n	80051fe <__sflush_r+0x76>
 80051f4:	1c42      	adds	r2, r0, #1
 80051f6:	d101      	bne.n	80051fc <__sflush_r+0x74>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b903      	cbnz	r3, 80051fe <__sflush_r+0x76>
 80051fc:	6560      	str	r0, [r4, #84]	@ 0x54
 80051fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005200:	602f      	str	r7, [r5, #0]
 8005202:	b1b9      	cbz	r1, 8005234 <__sflush_r+0xac>
 8005204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005208:	4299      	cmp	r1, r3
 800520a:	d002      	beq.n	8005212 <__sflush_r+0x8a>
 800520c:	4628      	mov	r0, r5
 800520e:	f7ff fec5 	bl	8004f9c <_free_r>
 8005212:	2300      	movs	r3, #0
 8005214:	6363      	str	r3, [r4, #52]	@ 0x34
 8005216:	e00d      	b.n	8005234 <__sflush_r+0xac>
 8005218:	2301      	movs	r3, #1
 800521a:	4628      	mov	r0, r5
 800521c:	47b0      	blx	r6
 800521e:	4602      	mov	r2, r0
 8005220:	1c50      	adds	r0, r2, #1
 8005222:	d1c9      	bne.n	80051b8 <__sflush_r+0x30>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0c6      	beq.n	80051b8 <__sflush_r+0x30>
 800522a:	2b1d      	cmp	r3, #29
 800522c:	d001      	beq.n	8005232 <__sflush_r+0xaa>
 800522e:	2b16      	cmp	r3, #22
 8005230:	d11d      	bne.n	800526e <__sflush_r+0xe6>
 8005232:	602f      	str	r7, [r5, #0]
 8005234:	2000      	movs	r0, #0
 8005236:	e021      	b.n	800527c <__sflush_r+0xf4>
 8005238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800523c:	b21b      	sxth	r3, r3
 800523e:	e01a      	b.n	8005276 <__sflush_r+0xee>
 8005240:	690f      	ldr	r7, [r1, #16]
 8005242:	2f00      	cmp	r7, #0
 8005244:	d0f6      	beq.n	8005234 <__sflush_r+0xac>
 8005246:	0793      	lsls	r3, r2, #30
 8005248:	bf18      	it	ne
 800524a:	2300      	movne	r3, #0
 800524c:	680e      	ldr	r6, [r1, #0]
 800524e:	bf08      	it	eq
 8005250:	694b      	ldreq	r3, [r1, #20]
 8005252:	1bf6      	subs	r6, r6, r7
 8005254:	600f      	str	r7, [r1, #0]
 8005256:	608b      	str	r3, [r1, #8]
 8005258:	2e00      	cmp	r6, #0
 800525a:	ddeb      	ble.n	8005234 <__sflush_r+0xac>
 800525c:	4633      	mov	r3, r6
 800525e:	463a      	mov	r2, r7
 8005260:	4628      	mov	r0, r5
 8005262:	6a21      	ldr	r1, [r4, #32]
 8005264:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005268:	47e0      	blx	ip
 800526a:	2800      	cmp	r0, #0
 800526c:	dc07      	bgt.n	800527e <__sflush_r+0xf6>
 800526e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800527e:	4407      	add	r7, r0
 8005280:	1a36      	subs	r6, r6, r0
 8005282:	e7e9      	b.n	8005258 <__sflush_r+0xd0>
 8005284:	dfbffffe 	.word	0xdfbffffe

08005288 <_fflush_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	690b      	ldr	r3, [r1, #16]
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	b913      	cbnz	r3, 8005298 <_fflush_r+0x10>
 8005292:	2500      	movs	r5, #0
 8005294:	4628      	mov	r0, r5
 8005296:	bd38      	pop	{r3, r4, r5, pc}
 8005298:	b118      	cbz	r0, 80052a2 <_fflush_r+0x1a>
 800529a:	6a03      	ldr	r3, [r0, #32]
 800529c:	b90b      	cbnz	r3, 80052a2 <_fflush_r+0x1a>
 800529e:	f7ff fc31 	bl	8004b04 <__sinit>
 80052a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f3      	beq.n	8005292 <_fflush_r+0xa>
 80052aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052ac:	07d0      	lsls	r0, r2, #31
 80052ae:	d404      	bmi.n	80052ba <_fflush_r+0x32>
 80052b0:	0599      	lsls	r1, r3, #22
 80052b2:	d402      	bmi.n	80052ba <_fflush_r+0x32>
 80052b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052b6:	f7ff fe60 	bl	8004f7a <__retarget_lock_acquire_recursive>
 80052ba:	4628      	mov	r0, r5
 80052bc:	4621      	mov	r1, r4
 80052be:	f7ff ff63 	bl	8005188 <__sflush_r>
 80052c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052c4:	4605      	mov	r5, r0
 80052c6:	07da      	lsls	r2, r3, #31
 80052c8:	d4e4      	bmi.n	8005294 <_fflush_r+0xc>
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	059b      	lsls	r3, r3, #22
 80052ce:	d4e1      	bmi.n	8005294 <_fflush_r+0xc>
 80052d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052d2:	f7ff fe53 	bl	8004f7c <__retarget_lock_release_recursive>
 80052d6:	e7dd      	b.n	8005294 <_fflush_r+0xc>

080052d8 <__swhatbuf_r>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	460c      	mov	r4, r1
 80052dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e0:	4615      	mov	r5, r2
 80052e2:	2900      	cmp	r1, #0
 80052e4:	461e      	mov	r6, r3
 80052e6:	b096      	sub	sp, #88	@ 0x58
 80052e8:	da0c      	bge.n	8005304 <__swhatbuf_r+0x2c>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	2100      	movs	r1, #0
 80052ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052f2:	bf14      	ite	ne
 80052f4:	2340      	movne	r3, #64	@ 0x40
 80052f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052fa:	2000      	movs	r0, #0
 80052fc:	6031      	str	r1, [r6, #0]
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	b016      	add	sp, #88	@ 0x58
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	466a      	mov	r2, sp
 8005306:	f000 f849 	bl	800539c <_fstat_r>
 800530a:	2800      	cmp	r0, #0
 800530c:	dbed      	blt.n	80052ea <__swhatbuf_r+0x12>
 800530e:	9901      	ldr	r1, [sp, #4]
 8005310:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005314:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005318:	4259      	negs	r1, r3
 800531a:	4159      	adcs	r1, r3
 800531c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005320:	e7eb      	b.n	80052fa <__swhatbuf_r+0x22>

08005322 <__smakebuf_r>:
 8005322:	898b      	ldrh	r3, [r1, #12]
 8005324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005326:	079d      	lsls	r5, r3, #30
 8005328:	4606      	mov	r6, r0
 800532a:	460c      	mov	r4, r1
 800532c:	d507      	bpl.n	800533e <__smakebuf_r+0x1c>
 800532e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	2301      	movs	r3, #1
 8005338:	6163      	str	r3, [r4, #20]
 800533a:	b003      	add	sp, #12
 800533c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533e:	466a      	mov	r2, sp
 8005340:	ab01      	add	r3, sp, #4
 8005342:	f7ff ffc9 	bl	80052d8 <__swhatbuf_r>
 8005346:	9f00      	ldr	r7, [sp, #0]
 8005348:	4605      	mov	r5, r0
 800534a:	4639      	mov	r1, r7
 800534c:	4630      	mov	r0, r6
 800534e:	f7ff fe8f 	bl	8005070 <_malloc_r>
 8005352:	b948      	cbnz	r0, 8005368 <__smakebuf_r+0x46>
 8005354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005358:	059a      	lsls	r2, r3, #22
 800535a:	d4ee      	bmi.n	800533a <__smakebuf_r+0x18>
 800535c:	f023 0303 	bic.w	r3, r3, #3
 8005360:	f043 0302 	orr.w	r3, r3, #2
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	e7e2      	b.n	800532e <__smakebuf_r+0xc>
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800536e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005372:	81a3      	strh	r3, [r4, #12]
 8005374:	9b01      	ldr	r3, [sp, #4]
 8005376:	6020      	str	r0, [r4, #0]
 8005378:	b15b      	cbz	r3, 8005392 <__smakebuf_r+0x70>
 800537a:	4630      	mov	r0, r6
 800537c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005380:	f000 f81e 	bl	80053c0 <_isatty_r>
 8005384:	b128      	cbz	r0, 8005392 <__smakebuf_r+0x70>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	f023 0303 	bic.w	r3, r3, #3
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	431d      	orrs	r5, r3
 8005396:	81a5      	strh	r5, [r4, #12]
 8005398:	e7cf      	b.n	800533a <__smakebuf_r+0x18>
	...

0800539c <_fstat_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	2300      	movs	r3, #0
 80053a0:	4d06      	ldr	r5, [pc, #24]	@ (80053bc <_fstat_r+0x20>)
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	602b      	str	r3, [r5, #0]
 80053aa:	f7fb f9a1 	bl	80006f0 <_fstat>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	d102      	bne.n	80053b8 <_fstat_r+0x1c>
 80053b2:	682b      	ldr	r3, [r5, #0]
 80053b4:	b103      	cbz	r3, 80053b8 <_fstat_r+0x1c>
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	bd38      	pop	{r3, r4, r5, pc}
 80053ba:	bf00      	nop
 80053bc:	20001c94 	.word	0x20001c94

080053c0 <_isatty_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	2300      	movs	r3, #0
 80053c4:	4d05      	ldr	r5, [pc, #20]	@ (80053dc <_isatty_r+0x1c>)
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	f7fb f99f 	bl	800070e <_isatty>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_isatty_r+0x1a>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_isatty_r+0x1a>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	20001c94 	.word	0x20001c94

080053e0 <_sbrk_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	2300      	movs	r3, #0
 80053e4:	4d05      	ldr	r5, [pc, #20]	@ (80053fc <_sbrk_r+0x1c>)
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fb f9a6 	bl	800073c <_sbrk>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_sbrk_r+0x1a>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_sbrk_r+0x1a>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20001c94 	.word	0x20001c94

08005400 <_init>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr

0800540c <_fini>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr
