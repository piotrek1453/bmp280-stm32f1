
bmp280-stm32f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072e8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080073f8  080073f8  000083f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d8  080074d8  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  080074d8  080074d8  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074d8  080074d8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074d8  080074d8  000084d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080074e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce0  2000006c  0800754c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  0800754c  00009d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae72  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f74  00000000  00000000  00023f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00027e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001276  00000000  00000000  00029630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001beab  00000000  00000000  0002a8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0ac  00000000  00000000  00046751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099226  00000000  00000000  000647fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fda23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068dc  00000000  00000000  000fda68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00104344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080073e0 	.word	0x080073e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080073e0 	.word	0x080073e0

08000150 <BMP280_CalibrationConstantsRead_I2C>:
bool BMP280_InitI2C(uint8_t osrs_t, uint8_t osrs_p, uint8_t acq_mode,
                    uint8_t t_sb, uint8_t filter_tc,
                    I2C_HandleTypeDef i2c_handle) {}

void BMP280_CalibrationConstantsRead_I2C(I2C_HandleTypeDef i2c_handle,
                                         uint8_t device_address) {
 8000150:	b084      	sub	sp, #16
 8000152:	b580      	push	{r7, lr}
 8000154:	b08a      	sub	sp, #40	@ 0x28
 8000156:	af02      	add	r7, sp, #8
 8000158:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 800015c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t calibrationConstantsRaw[26];

  HAL_I2C_Mem_Read_DMA(&i2c_handle, device_address, BMP280_REG_CALIB00, 1,
 8000160:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000164:	b299      	uxth	r1, r3
 8000166:	231a      	movs	r3, #26
 8000168:	9301      	str	r3, [sp, #4]
 800016a:	1d3b      	adds	r3, r7, #4
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	2301      	movs	r3, #1
 8000170:	2288      	movs	r2, #136	@ 0x88
 8000172:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000176:	f001 fd37 	bl	8001be8 <HAL_I2C_Mem_Read_DMA>
                       calibrationConstantsRaw, 26);

  dig_T1 = calibrationConstantsRaw[0] | calibrationConstantsRaw[1] << 8;
 800017a:	793b      	ldrb	r3, [r7, #4]
 800017c:	b21a      	sxth	r2, r3
 800017e:	797b      	ldrb	r3, [r7, #5]
 8000180:	021b      	lsls	r3, r3, #8
 8000182:	b21b      	sxth	r3, r3
 8000184:	4313      	orrs	r3, r2
 8000186:	b21b      	sxth	r3, r3
 8000188:	b29a      	uxth	r2, r3
 800018a:	4b36      	ldr	r3, [pc, #216]	@ (8000264 <BMP280_CalibrationConstantsRead_I2C+0x114>)
 800018c:	801a      	strh	r2, [r3, #0]
  dig_T2 = calibrationConstantsRaw[2] | calibrationConstantsRaw[3] << 8;
 800018e:	79bb      	ldrb	r3, [r7, #6]
 8000190:	b21a      	sxth	r2, r3
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	021b      	lsls	r3, r3, #8
 8000196:	b21b      	sxth	r3, r3
 8000198:	4313      	orrs	r3, r2
 800019a:	b21a      	sxth	r2, r3
 800019c:	4b32      	ldr	r3, [pc, #200]	@ (8000268 <BMP280_CalibrationConstantsRead_I2C+0x118>)
 800019e:	801a      	strh	r2, [r3, #0]
  dig_T3 = calibrationConstantsRaw[4] | calibrationConstantsRaw[5] << 8;
 80001a0:	7a3b      	ldrb	r3, [r7, #8]
 80001a2:	b21a      	sxth	r2, r3
 80001a4:	7a7b      	ldrb	r3, [r7, #9]
 80001a6:	021b      	lsls	r3, r3, #8
 80001a8:	b21b      	sxth	r3, r3
 80001aa:	4313      	orrs	r3, r2
 80001ac:	b21a      	sxth	r2, r3
 80001ae:	4b2f      	ldr	r3, [pc, #188]	@ (800026c <BMP280_CalibrationConstantsRead_I2C+0x11c>)
 80001b0:	801a      	strh	r2, [r3, #0]

  dig_P1 = calibrationConstantsRaw[6] | calibrationConstantsRaw[7] << 8;
 80001b2:	7abb      	ldrb	r3, [r7, #10]
 80001b4:	b21a      	sxth	r2, r3
 80001b6:	7afb      	ldrb	r3, [r7, #11]
 80001b8:	021b      	lsls	r3, r3, #8
 80001ba:	b21b      	sxth	r3, r3
 80001bc:	4313      	orrs	r3, r2
 80001be:	b21b      	sxth	r3, r3
 80001c0:	b29a      	uxth	r2, r3
 80001c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000270 <BMP280_CalibrationConstantsRead_I2C+0x120>)
 80001c4:	801a      	strh	r2, [r3, #0]
  dig_P2 = calibrationConstantsRaw[8] | calibrationConstantsRaw[9] << 8;
 80001c6:	7b3b      	ldrb	r3, [r7, #12]
 80001c8:	b21a      	sxth	r2, r3
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	021b      	lsls	r3, r3, #8
 80001ce:	b21b      	sxth	r3, r3
 80001d0:	4313      	orrs	r3, r2
 80001d2:	b21a      	sxth	r2, r3
 80001d4:	4b27      	ldr	r3, [pc, #156]	@ (8000274 <BMP280_CalibrationConstantsRead_I2C+0x124>)
 80001d6:	801a      	strh	r2, [r3, #0]
  dig_P3 = calibrationConstantsRaw[10] | calibrationConstantsRaw[11] << 8;
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	b21a      	sxth	r2, r3
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
 80001de:	021b      	lsls	r3, r3, #8
 80001e0:	b21b      	sxth	r3, r3
 80001e2:	4313      	orrs	r3, r2
 80001e4:	b21a      	sxth	r2, r3
 80001e6:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <BMP280_CalibrationConstantsRead_I2C+0x128>)
 80001e8:	801a      	strh	r2, [r3, #0]
  dig_P4 = calibrationConstantsRaw[12] | calibrationConstantsRaw[13] << 8;
 80001ea:	7c3b      	ldrb	r3, [r7, #16]
 80001ec:	b21a      	sxth	r2, r3
 80001ee:	7c7b      	ldrb	r3, [r7, #17]
 80001f0:	021b      	lsls	r3, r3, #8
 80001f2:	b21b      	sxth	r3, r3
 80001f4:	4313      	orrs	r3, r2
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	4b20      	ldr	r3, [pc, #128]	@ (800027c <BMP280_CalibrationConstantsRead_I2C+0x12c>)
 80001fa:	801a      	strh	r2, [r3, #0]
  dig_P5 = calibrationConstantsRaw[14] | calibrationConstantsRaw[15] << 8;
 80001fc:	7cbb      	ldrb	r3, [r7, #18]
 80001fe:	b21a      	sxth	r2, r3
 8000200:	7cfb      	ldrb	r3, [r7, #19]
 8000202:	021b      	lsls	r3, r3, #8
 8000204:	b21b      	sxth	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b21a      	sxth	r2, r3
 800020a:	4b1d      	ldr	r3, [pc, #116]	@ (8000280 <BMP280_CalibrationConstantsRead_I2C+0x130>)
 800020c:	801a      	strh	r2, [r3, #0]
  dig_P6 = calibrationConstantsRaw[16] | calibrationConstantsRaw[17] << 8;
 800020e:	7d3b      	ldrb	r3, [r7, #20]
 8000210:	b21a      	sxth	r2, r3
 8000212:	7d7b      	ldrb	r3, [r7, #21]
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	b21b      	sxth	r3, r3
 8000218:	4313      	orrs	r3, r2
 800021a:	b21a      	sxth	r2, r3
 800021c:	4b19      	ldr	r3, [pc, #100]	@ (8000284 <BMP280_CalibrationConstantsRead_I2C+0x134>)
 800021e:	801a      	strh	r2, [r3, #0]
  dig_P7 = calibrationConstantsRaw[18] | calibrationConstantsRaw[19] << 8;
 8000220:	7dbb      	ldrb	r3, [r7, #22]
 8000222:	b21a      	sxth	r2, r3
 8000224:	7dfb      	ldrb	r3, [r7, #23]
 8000226:	021b      	lsls	r3, r3, #8
 8000228:	b21b      	sxth	r3, r3
 800022a:	4313      	orrs	r3, r2
 800022c:	b21a      	sxth	r2, r3
 800022e:	4b16      	ldr	r3, [pc, #88]	@ (8000288 <BMP280_CalibrationConstantsRead_I2C+0x138>)
 8000230:	801a      	strh	r2, [r3, #0]
  dig_P8 = calibrationConstantsRaw[20] | calibrationConstantsRaw[21] << 8;
 8000232:	7e3b      	ldrb	r3, [r7, #24]
 8000234:	b21a      	sxth	r2, r3
 8000236:	7e7b      	ldrb	r3, [r7, #25]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	b21b      	sxth	r3, r3
 800023c:	4313      	orrs	r3, r2
 800023e:	b21a      	sxth	r2, r3
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <BMP280_CalibrationConstantsRead_I2C+0x13c>)
 8000242:	801a      	strh	r2, [r3, #0]
  dig_P9 = calibrationConstantsRaw[22] | calibrationConstantsRaw[23] << 8;
 8000244:	7ebb      	ldrb	r3, [r7, #26]
 8000246:	b21a      	sxth	r2, r3
 8000248:	7efb      	ldrb	r3, [r7, #27]
 800024a:	021b      	lsls	r3, r3, #8
 800024c:	b21b      	sxth	r3, r3
 800024e:	4313      	orrs	r3, r2
 8000250:	b21a      	sxth	r2, r3
 8000252:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <BMP280_CalibrationConstantsRead_I2C+0x140>)
 8000254:	801a      	strh	r2, [r3, #0]
}
 8000256:	bf00      	nop
 8000258:	3720      	adds	r7, #32
 800025a:	46bd      	mov	sp, r7
 800025c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr
 8000264:	20000088 	.word	0x20000088
 8000268:	2000008c 	.word	0x2000008c
 800026c:	2000008e 	.word	0x2000008e
 8000270:	2000008a 	.word	0x2000008a
 8000274:	20000090 	.word	0x20000090
 8000278:	20000092 	.word	0x20000092
 800027c:	20000094 	.word	0x20000094
 8000280:	20000096 	.word	0x20000096
 8000284:	20000098 	.word	0x20000098
 8000288:	2000009a 	.word	0x2000009a
 800028c:	2000009c 	.word	0x2000009c
 8000290:	2000009e 	.word	0x2000009e

08000294 <BMP280_Wake_I2C>:

void BMP280_Wake_I2C(I2C_HandleTypeDef i2c_handle, uint8_t device_address) {
 8000294:	b084      	sub	sp, #16
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af02      	add	r7, sp, #8
 800029c:	f107 0c10 	add.w	ip, r7, #16
 80002a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t buffer;

  HAL_I2C_Mem_Read_DMA(&i2c_handle, device_address, BMP280_REG_CTRL_MEAS, 1,
 80002a4:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80002a8:	b299      	uxth	r1, r3
 80002aa:	2301      	movs	r3, #1
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2301      	movs	r3, #1
 80002b4:	22f4      	movs	r2, #244	@ 0xf4
 80002b6:	f107 0010 	add.w	r0, r7, #16
 80002ba:	f001 fc95 	bl	8001be8 <HAL_I2C_Mem_Read_DMA>
                       &buffer, 1);
  buffer |= BMP280_VAL_CTRL_MEAS_MODE_FORCED;
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write_DMA(&i2c_handle, device_address, BMP280_REG_CTRL_MEAS, 1,
 80002c8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80002cc:	b299      	uxth	r1, r3
 80002ce:	2301      	movs	r3, #1
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2301      	movs	r3, #1
 80002d8:	22f4      	movs	r2, #244	@ 0xf4
 80002da:	f107 0010 	add.w	r0, r7, #16
 80002de:	f001 fb2d 	bl	800193c <HAL_I2C_Mem_Write_DMA>
                        &buffer, 1);
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002f6:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <MX_DMA_Init+0x48>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000338 <MX_DMA_Init+0x48>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <MX_DMA_Init+0x48>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800030e:	2200      	movs	r2, #0
 8000310:	2105      	movs	r1, #5
 8000312:	2010      	movs	r0, #16
 8000314:	f000 fd87 	bl	8000e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000318:	2010      	movs	r0, #16
 800031a:	f000 fda0 	bl	8000e5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	2105      	movs	r1, #5
 8000322:	2011      	movs	r0, #17
 8000324:	f000 fd7f 	bl	8000e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000328:	2011      	movs	r0, #17
 800032a:	f000 fd98 	bl	8000e5e <HAL_NVIC_EnableIRQ>

}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <vApplicationIdleHook>:

/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void) {
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  memory allocated by the kernel to any task that has since been deleted. */
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
  //  HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
  // printf("idle task\r\n");
  //  vTaskDelay(pdMS_TO_TICKS(1000));
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of USART2TxMutex */
  USART2TxMutexHandle = osMutexNew(&USART2TxMutex_attributes);
 800034c:	480b      	ldr	r0, [pc, #44]	@ (800037c <MX_FREERTOS_Init+0x34>)
 800034e:	f003 fabf 	bl	80038d0 <osMutexNew>
 8000352:	4603      	mov	r3, r0
 8000354:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <MX_FREERTOS_Init+0x38>)
 8000356:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of statusTask */
  statusTaskHandle = osThreadNew(vStatusTask, NULL, &statusTask_attributes);
 8000358:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <MX_FREERTOS_Init+0x3c>)
 800035a:	2100      	movs	r1, #0
 800035c:	480a      	ldr	r0, [pc, #40]	@ (8000388 <MX_FREERTOS_Init+0x40>)
 800035e:	f003 f9df 	bl	8003720 <osThreadNew>
 8000362:	4603      	mov	r3, r0
 8000364:	4a09      	ldr	r2, [pc, #36]	@ (800038c <MX_FREERTOS_Init+0x44>)
 8000366:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(vLedTask, NULL, &ledTask_attributes);
 8000368:	4a09      	ldr	r2, [pc, #36]	@ (8000390 <MX_FREERTOS_Init+0x48>)
 800036a:	2100      	movs	r1, #0
 800036c:	4809      	ldr	r0, [pc, #36]	@ (8000394 <MX_FREERTOS_Init+0x4c>)
 800036e:	f003 f9d7 	bl	8003720 <osThreadNew>
 8000372:	4603      	mov	r3, r0
 8000374:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <MX_FREERTOS_Init+0x50>)
 8000376:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	0800749c 	.word	0x0800749c
 8000380:	200000a8 	.word	0x200000a8
 8000384:	08007454 	.word	0x08007454
 8000388:	0800039d 	.word	0x0800039d
 800038c:	200000a0 	.word	0x200000a0
 8000390:	08007478 	.word	0x08007478
 8000394:	080003e5 	.word	0x080003e5
 8000398:	200000a4 	.word	0x200000a4

0800039c <vStatusTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_vStatusTask */
void vStatusTask(void *argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStatusTask */
  /* Infinite loop */
  while (true && osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 80003a4:	e00b      	b.n	80003be <vStatusTask+0x22>
    printf("test\r\n");
 80003a6:	480d      	ldr	r0, [pc, #52]	@ (80003dc <vStatusTask+0x40>)
 80003a8:	f006 fc28 	bl	8006bfc <puts>
    osMutexRelease(USART2TxMutexHandle);
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <vStatusTask+0x44>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f003 fb85 	bl	8003ac0 <osMutexRelease>
    osDelay(1000);
 80003b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003ba:	f003 fa5b 	bl	8003874 <osDelay>
  while (true && osMutexAcquire(USART2TxMutexHandle, osWaitForever) == osOK) {
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <vStatusTask+0x44>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f04f 31ff 	mov.w	r1, #4294967295
 80003c6:	4618      	mov	r0, r3
 80003c8:	f003 fb1c 	bl	8003a04 <osMutexAcquire>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d0e9      	beq.n	80003a6 <vStatusTask+0xa>
  }
  /* USER CODE END vStatusTask */
}
 80003d2:	bf00      	nop
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	0800741c 	.word	0x0800741c
 80003e0:	200000a8 	.word	0x200000a8

080003e4 <vLedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_vLedTask */
void vLedTask(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vLedTask */
  /* Infinite loop */
  while (true) {
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 80003ec:	2104      	movs	r1, #4
 80003ee:	4807      	ldr	r0, [pc, #28]	@ (800040c <vLedTask+0x28>)
 80003f0:	f001 f946 	bl	8001680 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin);
 80003f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003f8:	4805      	ldr	r0, [pc, #20]	@ (8000410 <vLedTask+0x2c>)
 80003fa:	f001 f941 	bl	8001680 <HAL_GPIO_TogglePin>
    osDelay(1000);
 80003fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000402:	f003 fa37 	bl	8003874 <osDelay>
    HAL_GPIO_TogglePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin);
 8000406:	bf00      	nop
 8000408:	e7f0      	b.n	80003ec <vLedTask+0x8>
 800040a:	bf00      	nop
 800040c:	40010c00 	.word	0x40010c00
 8000410:	40011000 	.word	0x40011000

08000414 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000428:	4b38      	ldr	r3, [pc, #224]	@ (800050c <MX_GPIO_Init+0xf8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a37      	ldr	r2, [pc, #220]	@ (800050c <MX_GPIO_Init+0xf8>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b35      	ldr	r3, [pc, #212]	@ (800050c <MX_GPIO_Init+0xf8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	4b32      	ldr	r3, [pc, #200]	@ (800050c <MX_GPIO_Init+0xf8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a31      	ldr	r2, [pc, #196]	@ (800050c <MX_GPIO_Init+0xf8>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b2f      	ldr	r3, [pc, #188]	@ (800050c <MX_GPIO_Init+0xf8>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b2c      	ldr	r3, [pc, #176]	@ (800050c <MX_GPIO_Init+0xf8>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a2b      	ldr	r2, [pc, #172]	@ (800050c <MX_GPIO_Init+0xf8>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b29      	ldr	r3, [pc, #164]	@ (800050c <MX_GPIO_Init+0xf8>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b26      	ldr	r3, [pc, #152]	@ (800050c <MX_GPIO_Init+0xf8>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a25      	ldr	r2, [pc, #148]	@ (800050c <MX_GPIO_Init+0xf8>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b23      	ldr	r3, [pc, #140]	@ (800050c <MX_GPIO_Init+0xf8>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_2_GPIO_Port, ON_BOARD_LED_2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800048e:	4820      	ldr	r0, [pc, #128]	@ (8000510 <MX_GPIO_Init+0xfc>)
 8000490:	f001 f8de 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_BOARD_LED_1_GPIO_Port, ON_BOARD_LED_1_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2104      	movs	r1, #4
 8000498:	481e      	ldr	r0, [pc, #120]	@ (8000514 <MX_GPIO_Init+0x100>)
 800049a:	f001 f8d9 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_2_Pin;
 800049e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_2_GPIO_Port, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4816      	ldr	r0, [pc, #88]	@ (8000510 <MX_GPIO_Init+0xfc>)
 80004b8:	f000 ff46 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80004bc:	f649 73f3 	movw	r3, #40947	@ 0x9ff3
 80004c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c2:	2303      	movs	r3, #3
 80004c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4812      	ldr	r0, [pc, #72]	@ (8000518 <MX_GPIO_Init+0x104>)
 80004ce:	f000 ff3b 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80004d2:	f64f 733b 	movw	r3, #65339	@ 0xff3b
 80004d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d8:	2303      	movs	r3, #3
 80004da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	480c      	ldr	r0, [pc, #48]	@ (8000514 <MX_GPIO_Init+0x100>)
 80004e4:	f000 ff30 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_BOARD_LED_1_Pin;
 80004e8:	2304      	movs	r3, #4
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_BOARD_LED_1_GPIO_Port, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <MX_GPIO_Init+0x100>)
 8000500:	f000 ff22 	bl	8001348 <HAL_GPIO_Init>

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40011000 	.word	0x40011000
 8000514:	40010c00 	.word	0x40010c00
 8000518:	40010800 	.word	0x40010800

0800051c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_I2C1_Init+0x50>)
 8000522:	4a13      	ldr	r2, [pc, #76]	@ (8000570 <MX_I2C1_Init+0x54>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_I2C1_Init+0x50>)
 8000528:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <MX_I2C1_Init+0x58>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_I2C1_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_I2C1_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_I2C1_Init+0x50>)
 800053a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800053e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_I2C1_Init+0x50>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_I2C1_Init+0x50>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	@ (800056c <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <MX_I2C1_Init+0x50>)
 800055a:	f001 f8ab 	bl	80016b4 <HAL_I2C_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000564:	f000 f944 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200000ac 	.word	0x200000ac
 8000570:	40005400 	.word	0x40005400
 8000574:	000186a0 	.word	0x000186a0

08000578 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a3b      	ldr	r2, [pc, #236]	@ (8000680 <HAL_I2C_MspInit+0x108>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d16f      	bne.n	8000678 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000598:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <HAL_I2C_MspInit+0x10c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a39      	ldr	r2, [pc, #228]	@ (8000684 <HAL_I2C_MspInit+0x10c>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b37      	ldr	r3, [pc, #220]	@ (8000684 <HAL_I2C_MspInit+0x10c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0308 	and.w	r3, r3, #8
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b0:	23c0      	movs	r3, #192	@ 0xc0
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b4:	2312      	movs	r3, #18
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4831      	ldr	r0, [pc, #196]	@ (8000688 <HAL_I2C_MspInit+0x110>)
 80005c4:	f000 fec0 	bl	8001348 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000684 <HAL_I2C_MspInit+0x10c>)
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000684 <HAL_I2C_MspInit+0x10c>)
 80005ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d2:	61d3      	str	r3, [r2, #28]
 80005d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000684 <HAL_I2C_MspInit+0x10c>)
 80005d6:	69db      	ldr	r3, [r3, #28]
 80005d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80005e0:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <HAL_I2C_MspInit+0x114>)
 80005e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000690 <HAL_I2C_MspInit+0x118>)
 80005e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <HAL_I2C_MspInit+0x114>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005ec:	4b27      	ldr	r3, [pc, #156]	@ (800068c <HAL_I2C_MspInit+0x114>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005f2:	4b26      	ldr	r3, [pc, #152]	@ (800068c <HAL_I2C_MspInit+0x114>)
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005f8:	4b24      	ldr	r3, [pc, #144]	@ (800068c <HAL_I2C_MspInit+0x114>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005fe:	4b23      	ldr	r3, [pc, #140]	@ (800068c <HAL_I2C_MspInit+0x114>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <HAL_I2C_MspInit+0x114>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800060a:	4b20      	ldr	r3, [pc, #128]	@ (800068c <HAL_I2C_MspInit+0x114>)
 800060c:	2200      	movs	r2, #0
 800060e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000610:	481e      	ldr	r0, [pc, #120]	@ (800068c <HAL_I2C_MspInit+0x114>)
 8000612:	f000 fc33 	bl	8000e7c <HAL_DMA_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800061c:	f000 f8e8 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a1a      	ldr	r2, [pc, #104]	@ (800068c <HAL_I2C_MspInit+0x114>)
 8000624:	639a      	str	r2, [r3, #56]	@ 0x38
 8000626:	4a19      	ldr	r2, [pc, #100]	@ (800068c <HAL_I2C_MspInit+0x114>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 800062e:	4a1a      	ldr	r2, [pc, #104]	@ (8000698 <HAL_I2C_MspInit+0x120>)
 8000630:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000632:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 8000634:	2210      	movs	r2, #16
 8000636:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 8000640:	2280      	movs	r2, #128	@ 0x80
 8000642:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 800065e:	f000 fc0d 	bl	8000e7c <HAL_DMA_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000668:	f000 f8c2 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a09      	ldr	r2, [pc, #36]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34
 8000672:	4a08      	ldr	r2, [pc, #32]	@ (8000694 <HAL_I2C_MspInit+0x11c>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40005400 	.word	0x40005400
 8000684:	40021000 	.word	0x40021000
 8000688:	40010c00 	.word	0x40010c00
 800068c:	20000100 	.word	0x20000100
 8000690:	40020080 	.word	0x40020080
 8000694:	20000144 	.word	0x20000144
 8000698:	4002006c 	.word	0x4002006c

0800069c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b093      	sub	sp, #76	@ 0x4c
 80006a0:	af12      	add	r7, sp, #72	@ 0x48

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80006a2:	f000 fad9 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f833 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff feb3 	bl	8000414 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ae:	f7ff fe1f 	bl	80002f0 <MX_DMA_Init>
  MX_I2C1_Init();
 80006b2:	f7ff ff33 	bl	800051c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006b6:	f000 fa35 	bl	8000b24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("System initializing\r\n");
 80006ba:	4813      	ldr	r0, [pc, #76]	@ (8000708 <main+0x6c>)
 80006bc:	f006 fa9e 	bl	8006bfc <puts>
  BMP280_CalibrationConstantsRead_I2C(hi2c1, BMP280_DEVICE_ADDRESS_VDDIO);
 80006c0:	4c12      	ldr	r4, [pc, #72]	@ (800070c <main+0x70>)
 80006c2:	2377      	movs	r3, #119	@ 0x77
 80006c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80006c6:	4668      	mov	r0, sp
 80006c8:	f104 0310 	add.w	r3, r4, #16
 80006cc:	2244      	movs	r2, #68	@ 0x44
 80006ce:	4619      	mov	r1, r3
 80006d0:	f006 fc45 	bl	8006f5e <memcpy>
 80006d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006d8:	f7ff fd3a 	bl	8000150 <BMP280_CalibrationConstantsRead_I2C>
  BMP280_Wake_I2C(hi2c1, BMP280_DEVICE_ADDRESS_VDDIO);
 80006dc:	4c0b      	ldr	r4, [pc, #44]	@ (800070c <main+0x70>)
 80006de:	2377      	movs	r3, #119	@ 0x77
 80006e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80006e2:	4668      	mov	r0, sp
 80006e4:	f104 0310 	add.w	r3, r4, #16
 80006e8:	2244      	movs	r2, #68	@ 0x44
 80006ea:	4619      	mov	r1, r3
 80006ec:	f006 fc37 	bl	8006f5e <memcpy>
 80006f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006f4:	f7ff fdce 	bl	8000294 <BMP280_Wake_I2C>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006f8:	f002 ffac 	bl	8003654 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80006fc:	f7ff fe24 	bl	8000348 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000700:	f002 ffda 	bl	80036b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (true) {
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x68>
 8000708:	08007424 	.word	0x08007424
 800070c:	200000ac 	.word	0x200000ac

08000710 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b090      	sub	sp, #64	@ 0x40
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2228      	movs	r2, #40	@ 0x28
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 fb4c 	bl	8006dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800074e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000752:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000754:	f107 0318 	add.w	r3, r7, #24
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f813 	bl	8002784 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x58>
    Error_Handler();
 8000764:	f000 f844 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000768:	230f      	movs	r3, #15
 800076a:	607b      	str	r3, [r7, #4]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2102      	movs	r1, #2
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fa80 	bl	8002c88 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x82>
    Error_Handler();
 800078e:	f000 f82f 	bl	80007f0 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3740      	adds	r7, #64	@ 0x40
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <__io_putchar>:
 */

/**
 * @brief putchar() override - redirect printf to USART2
 */
int __io_putchar(int ch) {
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 80007a4:	e000      	b.n	80007a8 <__io_putchar+0xc>
    asm("nop");
 80007a6:	bf00      	nop
  while (!(USART2->SR & 0x0080)) { // wait until TX data register empty
 80007a8:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <__io_putchar+0x2c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f8      	beq.n	80007a6 <__io_putchar+0xa>
  }
  USART2->DR = (ch & 0xFF); // write data to TX register
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <__io_putchar+0x2c>)
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	6053      	str	r3, [r2, #4]
  return ch;
 80007bc:	687b      	ldr	r3, [r7, #4]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40004400 	.word	0x40004400

080007cc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 fa51 	bl	8000c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40000800 	.word	0x40000800

080007f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <HAL_MspInit+0x68>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_MspInit+0x68>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_MspInit+0x68>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <HAL_MspInit+0x68>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a11      	ldr	r2, [pc, #68]	@ (8000864 <HAL_MspInit+0x68>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <HAL_MspInit+0x68>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	210f      	movs	r1, #15
 8000836:	f06f 0001 	mvn.w	r0, #1
 800083a:	f000 faf4 	bl	8000e26 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_MspInit+0x6c>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	4a04      	ldr	r2, [pc, #16]	@ (8000868 <HAL_MspInit+0x6c>)
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	40010000 	.word	0x40010000

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	@ 0x38
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000882:	4b34      	ldr	r3, [pc, #208]	@ (8000954 <HAL_InitTick+0xe8>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a33      	ldr	r2, [pc, #204]	@ (8000954 <HAL_InitTick+0xe8>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b31      	ldr	r3, [pc, #196]	@ (8000954 <HAL_InitTick+0xe8>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800089a:	f107 0210 	add.w	r2, r7, #16
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fb5f 	bl	8002f68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d103      	bne.n	80008bc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008b4:	f002 fb30 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80008b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80008ba:	e004      	b.n	80008c6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008bc:	f002 fb2c 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80008c0:	4603      	mov	r3, r0
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008c8:	4a23      	ldr	r2, [pc, #140]	@ (8000958 <HAL_InitTick+0xec>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0c9b      	lsrs	r3, r3, #18
 80008d0:	3b01      	subs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008d4:	4b21      	ldr	r3, [pc, #132]	@ (800095c <HAL_InitTick+0xf0>)
 80008d6:	4a22      	ldr	r2, [pc, #136]	@ (8000960 <HAL_InitTick+0xf4>)
 80008d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <HAL_InitTick+0xf0>)
 80008dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008e0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <HAL_InitTick+0xf0>)
 80008e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <HAL_InitTick+0xf0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <HAL_InitTick+0xf0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	@ (800095c <HAL_InitTick+0xf0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80008fa:	4818      	ldr	r0, [pc, #96]	@ (800095c <HAL_InitTick+0xf0>)
 80008fc:	f002 fb82 	bl	8003004 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000906:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11b      	bne.n	8000946 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800090e:	4813      	ldr	r0, [pc, #76]	@ (800095c <HAL_InitTick+0xf0>)
 8000910:	f002 fbd0 	bl	80030b4 <HAL_TIM_Base_Start_IT>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800091a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800091e:	2b00      	cmp	r3, #0
 8000920:	d111      	bne.n	8000946 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000922:	201e      	movs	r0, #30
 8000924:	f000 fa9b 	bl	8000e5e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d808      	bhi.n	8000940 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800092e:	2200      	movs	r2, #0
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	201e      	movs	r0, #30
 8000934:	f000 fa77 	bl	8000e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000938:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <HAL_InitTick+0xf8>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e002      	b.n	8000946 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000946:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800094a:	4618      	mov	r0, r3
 800094c:	3738      	adds	r7, #56	@ 0x38
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	431bde83 	.word	0x431bde83
 800095c:	20000188 	.word	0x20000188
 8000960:	40000800 	.word	0x40000800
 8000964:	20000004 	.word	0x20000004

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <DMA1_Channel6_IRQHandler+0x10>)
 80009a2:	f000 fb9d 	bl	80010e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000144 	.word	0x20000144

080009b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <DMA1_Channel7_IRQHandler+0x10>)
 80009b6:	f000 fb93 	bl	80010e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000100 	.word	0x20000100

080009c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <TIM4_IRQHandler+0x10>)
 80009ca:	f002 fbc5 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000188 	.word	0x20000188

080009d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
  }

  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff feb5 	bl	800079c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
  }
  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a70:	605a      	str	r2, [r3, #4]
  return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr

08000a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b085      	sub	sp, #20
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	60f8      	str	r0, [r7, #12]
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
	...

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f006 fa12 	bl	8006f04 <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20005000 	.word	0x20005000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	200001d0 	.word	0x200001d0
 8000b14:	20001d50 	.word	0x20001d50

08000b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <MX_USART2_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	f002 fc9c 	bl	8003498 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b66:	f7ff fe43 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200001d4 	.word	0x200001d4
 8000b74:	40004400 	.word	0x40004400

08000b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a1b      	ldr	r2, [pc, #108]	@ (8000c00 <HAL_UART_MspInit+0x88>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d12f      	bne.n	8000bf8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <HAL_UART_MspInit+0x8c>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <HAL_UART_MspInit+0x8c>)
 8000b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba2:	61d3      	str	r3, [r2, #28]
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <HAL_UART_MspInit+0x8c>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <HAL_UART_MspInit+0x8c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a13      	ldr	r2, [pc, #76]	@ (8000c04 <HAL_UART_MspInit+0x8c>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_UART_MspInit+0x8c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <HAL_UART_MspInit+0x90>)
 8000bdc:	f000 fbb4 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000be0:	2308      	movs	r3, #8
 8000be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <HAL_UART_MspInit+0x90>)
 8000bf4:	f000 fba8 	bl	8001348 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010800 	.word	0x40010800

08000c0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f7ff ff84 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c12:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c28:	4c09      	ldr	r4, [pc, #36]	@ (8000c50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f006 f96b 	bl	8006f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff fd2f 	bl	800069c <main>
  bx lr
 8000c3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c48:	080074e0 	.word	0x080074e0
  ldr r2, =_sbss
 8000c4c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c50:	20001d4c 	.word	0x20001d4c

08000c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_2_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_Init+0x28>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_Init+0x28>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 f8d1 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f7ff fdfc 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fdc2 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40022000 	.word	0x40022000

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	2000021c 	.word	0x2000021c

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	@ (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	2000021c 	.word	0x2000021c

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4906      	ldr	r1, [pc, #24]	@ (8000d54 <__NVIC_EnableIRQ+0x34>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	@ (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	@ (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	@ 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	@ 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff4f 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff64 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ffb2 	bl	8000dac <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff81 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff57 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e043      	b.n	8000f1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b22      	ldr	r3, [pc, #136]	@ (8000f24 <HAL_DMA_Init+0xa8>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a22      	ldr	r2, [pc, #136]	@ (8000f28 <HAL_DMA_Init+0xac>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	009a      	lsls	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1f      	ldr	r2, [pc, #124]	@ (8000f2c <HAL_DMA_Init+0xb0>)
 8000eae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000ec6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000eca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	bffdfff8 	.word	0xbffdfff8
 8000f28:	cccccccd 	.word	0xcccccccd
 8000f2c:	40020000 	.word	0x40020000

08000f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_DMA_Start_IT+0x20>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e04b      	b.n	8000fe8 <HAL_DMA_Start_IT+0xb8>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d13a      	bne.n	8000fda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2202      	movs	r2, #2
 8000f68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0201 	bic.w	r2, r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 f9af 	bl	80012ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 020e 	orr.w	r2, r2, #14
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e00f      	b.n	8000fc8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0204 	bic.w	r2, r2, #4
 8000fb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f042 020a 	orr.w	r2, r2, #10
 8000fc6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	e005      	b.n	8000fe6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d005      	beq.n	8001014 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2204      	movs	r2, #4
 800100c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e051      	b.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 020e 	bic.w	r2, r2, #14
 8001022:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a22      	ldr	r2, [pc, #136]	@ (80010c4 <HAL_DMA_Abort_IT+0xd4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d029      	beq.n	8001092 <HAL_DMA_Abort_IT+0xa2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a21      	ldr	r2, [pc, #132]	@ (80010c8 <HAL_DMA_Abort_IT+0xd8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d022      	beq.n	800108e <HAL_DMA_Abort_IT+0x9e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1f      	ldr	r2, [pc, #124]	@ (80010cc <HAL_DMA_Abort_IT+0xdc>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01a      	beq.n	8001088 <HAL_DMA_Abort_IT+0x98>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_DMA_Abort_IT+0xe0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d012      	beq.n	8001082 <HAL_DMA_Abort_IT+0x92>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1c      	ldr	r2, [pc, #112]	@ (80010d4 <HAL_DMA_Abort_IT+0xe4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00a      	beq.n	800107c <HAL_DMA_Abort_IT+0x8c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <HAL_DMA_Abort_IT+0xe8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d102      	bne.n	8001076 <HAL_DMA_Abort_IT+0x86>
 8001070:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001074:	e00e      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001076:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800107a:	e00b      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 800107c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001080:	e008      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001086:	e005      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800108c:	e002      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 800108e:	2310      	movs	r3, #16
 8001090:	e000      	b.n	8001094 <HAL_DMA_Abort_IT+0xa4>
 8001092:	2301      	movs	r3, #1
 8001094:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <HAL_DMA_Abort_IT+0xec>)
 8001096:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	4798      	blx	r3
    } 
  }
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020008 	.word	0x40020008
 80010c8:	4002001c 	.word	0x4002001c
 80010cc:	40020030 	.word	0x40020030
 80010d0:	40020044 	.word	0x40020044
 80010d4:	40020058 	.word	0x40020058
 80010d8:	4002006c 	.word	0x4002006c
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	2204      	movs	r2, #4
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d04f      	beq.n	80011a8 <HAL_DMA_IRQHandler+0xc8>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	2b00      	cmp	r3, #0
 8001110:	d04a      	beq.n	80011a8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0320 	and.w	r3, r3, #32
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0204 	bic.w	r2, r2, #4
 800112e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a66      	ldr	r2, [pc, #408]	@ (80012d0 <HAL_DMA_IRQHandler+0x1f0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d029      	beq.n	800118e <HAL_DMA_IRQHandler+0xae>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a65      	ldr	r2, [pc, #404]	@ (80012d4 <HAL_DMA_IRQHandler+0x1f4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d022      	beq.n	800118a <HAL_DMA_IRQHandler+0xaa>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a63      	ldr	r2, [pc, #396]	@ (80012d8 <HAL_DMA_IRQHandler+0x1f8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d01a      	beq.n	8001184 <HAL_DMA_IRQHandler+0xa4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a62      	ldr	r2, [pc, #392]	@ (80012dc <HAL_DMA_IRQHandler+0x1fc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d012      	beq.n	800117e <HAL_DMA_IRQHandler+0x9e>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a60      	ldr	r2, [pc, #384]	@ (80012e0 <HAL_DMA_IRQHandler+0x200>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00a      	beq.n	8001178 <HAL_DMA_IRQHandler+0x98>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a5f      	ldr	r2, [pc, #380]	@ (80012e4 <HAL_DMA_IRQHandler+0x204>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d102      	bne.n	8001172 <HAL_DMA_IRQHandler+0x92>
 800116c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001170:	e00e      	b.n	8001190 <HAL_DMA_IRQHandler+0xb0>
 8001172:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001176:	e00b      	b.n	8001190 <HAL_DMA_IRQHandler+0xb0>
 8001178:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800117c:	e008      	b.n	8001190 <HAL_DMA_IRQHandler+0xb0>
 800117e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001182:	e005      	b.n	8001190 <HAL_DMA_IRQHandler+0xb0>
 8001184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001188:	e002      	b.n	8001190 <HAL_DMA_IRQHandler+0xb0>
 800118a:	2340      	movs	r3, #64	@ 0x40
 800118c:	e000      	b.n	8001190 <HAL_DMA_IRQHandler+0xb0>
 800118e:	2304      	movs	r3, #4
 8001190:	4a55      	ldr	r2, [pc, #340]	@ (80012e8 <HAL_DMA_IRQHandler+0x208>)
 8001192:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 8094 	beq.w	80012c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011a6:	e08e      	b.n	80012c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	2202      	movs	r2, #2
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d056      	beq.n	8001266 <HAL_DMA_IRQHandler+0x186>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d051      	beq.n	8001266 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d10b      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 020a 	bic.w	r2, r2, #10
 80011de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a38      	ldr	r2, [pc, #224]	@ (80012d0 <HAL_DMA_IRQHandler+0x1f0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d029      	beq.n	8001246 <HAL_DMA_IRQHandler+0x166>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a37      	ldr	r2, [pc, #220]	@ (80012d4 <HAL_DMA_IRQHandler+0x1f4>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d022      	beq.n	8001242 <HAL_DMA_IRQHandler+0x162>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a35      	ldr	r2, [pc, #212]	@ (80012d8 <HAL_DMA_IRQHandler+0x1f8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d01a      	beq.n	800123c <HAL_DMA_IRQHandler+0x15c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a34      	ldr	r2, [pc, #208]	@ (80012dc <HAL_DMA_IRQHandler+0x1fc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d012      	beq.n	8001236 <HAL_DMA_IRQHandler+0x156>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a32      	ldr	r2, [pc, #200]	@ (80012e0 <HAL_DMA_IRQHandler+0x200>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00a      	beq.n	8001230 <HAL_DMA_IRQHandler+0x150>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a31      	ldr	r2, [pc, #196]	@ (80012e4 <HAL_DMA_IRQHandler+0x204>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d102      	bne.n	800122a <HAL_DMA_IRQHandler+0x14a>
 8001224:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001228:	e00e      	b.n	8001248 <HAL_DMA_IRQHandler+0x168>
 800122a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800122e:	e00b      	b.n	8001248 <HAL_DMA_IRQHandler+0x168>
 8001230:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001234:	e008      	b.n	8001248 <HAL_DMA_IRQHandler+0x168>
 8001236:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123a:	e005      	b.n	8001248 <HAL_DMA_IRQHandler+0x168>
 800123c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001240:	e002      	b.n	8001248 <HAL_DMA_IRQHandler+0x168>
 8001242:	2320      	movs	r3, #32
 8001244:	e000      	b.n	8001248 <HAL_DMA_IRQHandler+0x168>
 8001246:	2302      	movs	r3, #2
 8001248:	4a27      	ldr	r2, [pc, #156]	@ (80012e8 <HAL_DMA_IRQHandler+0x208>)
 800124a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001258:	2b00      	cmp	r3, #0
 800125a:	d034      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001264:	e02f      	b.n	80012c6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	2208      	movs	r2, #8
 800126c:	409a      	lsls	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d028      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x1e8>
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	2b00      	cmp	r3, #0
 800127e:	d023      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 020e 	bic.w	r2, r2, #14
 800128e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001298:	2101      	movs	r1, #1
 800129a:	fa01 f202 	lsl.w	r2, r1, r2
 800129e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
    }
  }
  return;
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
}
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40020008 	.word	0x40020008
 80012d4:	4002001c 	.word	0x4002001c
 80012d8:	40020030 	.word	0x40020030
 80012dc:	40020044 	.word	0x40020044
 80012e0:	40020058 	.word	0x40020058
 80012e4:	4002006c 	.word	0x4002006c
 80012e8:	40020000 	.word	0x40020000

080012ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b10      	cmp	r3, #16
 8001318:	d108      	bne.n	800132c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800132a:	e007      	b.n	800133c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b08b      	sub	sp, #44	@ 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e169      	b.n	8001630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800135c:	2201      	movs	r2, #1
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8158 	bne.w	800162a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a9a      	ldr	r2, [pc, #616]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d05e      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001384:	4a98      	ldr	r2, [pc, #608]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d875      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 800138a:	4a98      	ldr	r2, [pc, #608]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d058      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001390:	4a96      	ldr	r2, [pc, #600]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d86f      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 8001396:	4a96      	ldr	r2, [pc, #600]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d052      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 800139c:	4a94      	ldr	r2, [pc, #592]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d869      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013a2:	4a94      	ldr	r2, [pc, #592]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d04c      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013a8:	4a92      	ldr	r2, [pc, #584]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d863      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ae:	4a92      	ldr	r2, [pc, #584]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d046      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013b4:	4a90      	ldr	r2, [pc, #576]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d85d      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d82a      	bhi.n	8001414 <HAL_GPIO_Init+0xcc>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d859      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_GPIO_Init+0x80>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	08001443 	.word	0x08001443
 80013cc:	0800141d 	.word	0x0800141d
 80013d0:	0800142f 	.word	0x0800142f
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001477 	.word	0x08001477
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	08001477 	.word	0x08001477
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001425 	.word	0x08001425
 8001410:	08001439 	.word	0x08001439
 8001414:	4a79      	ldr	r2, [pc, #484]	@ (80015fc <HAL_GPIO_Init+0x2b4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141a:	e02c      	b.n	8001476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e029      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e024      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3308      	adds	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e01f      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	330c      	adds	r3, #12
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e01a      	b.n	8001478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144a:	2304      	movs	r3, #4
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e013      	b.n	8001478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	611a      	str	r2, [r3, #16]
          break;
 8001462:	e009      	b.n	8001478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	615a      	str	r2, [r3, #20]
          break;
 800146e:	e003      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x130>
          break;
 8001476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	@ 0xff
 800147c:	d801      	bhi.n	8001482 <HAL_GPIO_Init+0x13a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_Init+0x13e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	@ 0xff
 800148c:	d802      	bhi.n	8001494 <HAL_GPIO_Init+0x14c>
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x152>
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	3b08      	subs	r3, #8
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	210f      	movs	r1, #15
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	6a39      	ldr	r1, [r7, #32]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80b1 	beq.w	800162a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e0:	4a48      	ldr	r2, [pc, #288]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <HAL_GPIO_Init+0x2c0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d013      	beq.n	8001534 <HAL_GPIO_Init+0x1ec>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3f      	ldr	r2, [pc, #252]	@ (800160c <HAL_GPIO_Init+0x2c4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00d      	beq.n	8001530 <HAL_GPIO_Init+0x1e8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3e      	ldr	r2, [pc, #248]	@ (8001610 <HAL_GPIO_Init+0x2c8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x1e4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3d      	ldr	r2, [pc, #244]	@ (8001614 <HAL_GPIO_Init+0x2cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_GPIO_Init+0x1e0>
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001528:	2304      	movs	r3, #4
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 800152c:	2302      	movs	r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001534:	2300      	movs	r3, #0
 8001536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001546:	492f      	ldr	r1, [pc, #188]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	492c      	ldr	r1, [pc, #176]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4928      	ldr	r1, [pc, #160]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4922      	ldr	r1, [pc, #136]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	491e      	ldr	r1, [pc, #120]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4918      	ldr	r1, [pc, #96]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4914      	ldr	r1, [pc, #80]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	490e      	ldr	r1, [pc, #56]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e021      	b.n	800162a <HAL_GPIO_Init+0x2e2>
 80015e6:	bf00      	nop
 80015e8:	10320000 	.word	0x10320000
 80015ec:	10310000 	.word	0x10310000
 80015f0:	10220000 	.word	0x10220000
 80015f4:	10210000 	.word	0x10210000
 80015f8:	10120000 	.word	0x10120000
 80015fc:	10110000 	.word	0x10110000
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400
 8001618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_GPIO_Init+0x304>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4909      	ldr	r1, [pc, #36]	@ (800164c <HAL_GPIO_Init+0x304>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	3301      	adds	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	f47f ae8e 	bne.w	800135c <HAL_GPIO_Init+0x14>
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	372c      	adds	r7, #44	@ 0x2c
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4013      	ands	r3, r2
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43d9      	mvns	r1, r3
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	400b      	ands	r3, r1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	611a      	str	r2, [r3, #16]
}
 80016a8:	bf00      	nop
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e12b      	b.n	800191e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d106      	bne.n	80016e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7fe ff4c 	bl	8000578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2224      	movs	r2, #36	@ 0x24
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001718:	f001 fbfe 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 800171c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a81      	ldr	r2, [pc, #516]	@ (8001928 <HAL_I2C_Init+0x274>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d807      	bhi.n	8001738 <HAL_I2C_Init+0x84>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a80      	ldr	r2, [pc, #512]	@ (800192c <HAL_I2C_Init+0x278>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	e006      	b.n	8001746 <HAL_I2C_Init+0x92>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a7d      	ldr	r2, [pc, #500]	@ (8001930 <HAL_I2C_Init+0x27c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	bf94      	ite	ls
 8001740:	2301      	movls	r3, #1
 8001742:	2300      	movhi	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0e7      	b.n	800191e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4a78      	ldr	r2, [pc, #480]	@ (8001934 <HAL_I2C_Init+0x280>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0c9b      	lsrs	r3, r3, #18
 8001758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a6a      	ldr	r2, [pc, #424]	@ (8001928 <HAL_I2C_Init+0x274>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d802      	bhi.n	8001788 <HAL_I2C_Init+0xd4>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	e009      	b.n	800179c <HAL_I2C_Init+0xe8>
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800178e:	fb02 f303 	mul.w	r3, r2, r3
 8001792:	4a69      	ldr	r2, [pc, #420]	@ (8001938 <HAL_I2C_Init+0x284>)
 8001794:	fba2 2303 	umull	r2, r3, r2, r3
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	3301      	adds	r3, #1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	495c      	ldr	r1, [pc, #368]	@ (8001928 <HAL_I2C_Init+0x274>)
 80017b8:	428b      	cmp	r3, r1
 80017ba:	d819      	bhi.n	80017f0 <HAL_I2C_Init+0x13c>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e59      	subs	r1, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ca:	1c59      	adds	r1, r3, #1
 80017cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017d0:	400b      	ands	r3, r1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <HAL_I2C_Init+0x138>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e59      	subs	r1, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	e051      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017ec:	2304      	movs	r3, #4
 80017ee:	e04f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d111      	bne.n	800181c <HAL_I2C_Init+0x168>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e58      	subs	r0, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6859      	ldr	r1, [r3, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	e012      	b.n	8001842 <HAL_I2C_Init+0x18e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1e58      	subs	r0, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	0099      	lsls	r1, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Init+0x196>
 8001846:	2301      	movs	r3, #1
 8001848:	e022      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10e      	bne.n	8001870 <HAL_I2C_Init+0x1bc>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1e58      	subs	r0, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6859      	ldr	r1, [r3, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	440b      	add	r3, r1
 8001860:	fbb0 f3f3 	udiv	r3, r0, r3
 8001864:	3301      	adds	r3, #1
 8001866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Init+0x1dc>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	0099      	lsls	r1, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	fbb0 f3f3 	udiv	r3, r0, r3
 8001886:	3301      	adds	r3, #1
 8001888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6809      	ldr	r1, [r1, #0]
 8001894:	4313      	orrs	r3, r2
 8001896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69da      	ldr	r2, [r3, #28]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6911      	ldr	r1, [r2, #16]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68d2      	ldr	r2, [r2, #12]
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2220      	movs	r2, #32
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	000186a0 	.word	0x000186a0
 800192c:	001e847f 	.word	0x001e847f
 8001930:	003d08ff 	.word	0x003d08ff
 8001934:	431bde83 	.word	0x431bde83
 8001938:	10624dd3 	.word	0x10624dd3

0800193c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	460b      	mov	r3, r1
 8001950:	813b      	strh	r3, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800195a:	f7ff f9a5 	bl	8000ca8 <HAL_GetTick>
 800195e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b20      	cmp	r3, #32
 800196a:	f040 812e 	bne.w	8001bca <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800196e:	4b99      	ldr	r3, [pc, #612]	@ (8001bd4 <HAL_I2C_Mem_Write_DMA+0x298>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	4a98      	ldr	r2, [pc, #608]	@ (8001bd8 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0a1a      	lsrs	r2, r3, #8
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009a      	lsls	r2, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3b01      	subs	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d112      	bne.n	80019ba <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2220      	movs	r2, #32
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f043 0220 	orr.w	r2, r3, #32
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80019b6:	2302      	movs	r3, #2
 80019b8:	e108      	b.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d0df      	beq.n	8001988 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Mem_Write_DMA+0x9a>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e0fa      	b.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x290>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d007      	beq.n	80019fc <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2221      	movs	r2, #33	@ 0x21
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a68      	ldr	r2, [pc, #416]	@ (8001bdc <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001a3e:	897a      	ldrh	r2, [r7, #10]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001a44:	893a      	ldrh	r2, [r7, #8]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001a4a:	88fa      	ldrh	r2, [r7, #6]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80a1 	beq.w	8001ba2 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d022      	beq.n	8001aae <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6c:	4a5c      	ldr	r2, [pc, #368]	@ (8001be0 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a74:	4a5b      	ldr	r2, [pc, #364]	@ (8001be4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8001a76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a84:	2200      	movs	r2, #0
 8001a86:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3310      	adds	r3, #16
 8001a98:	461a      	mov	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9e:	f7ff fa47 	bl	8000f30 <HAL_DMA_Start_IT>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001aa6:	7efb      	ldrb	r3, [r7, #27]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d166      	bne.n	8001b7a <HAL_I2C_Mem_Write_DMA+0x23e>
 8001aac:	e013      	b.n	8001ad6 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07a      	b.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001ad6:	88f8      	ldrh	r0, [r7, #6]
 8001ad8:	893a      	ldrh	r2, [r7, #8]
 8001ada:	8979      	ldrh	r1, [r7, #10]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2323      	movs	r3, #35	@ 0x23
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fa32 	bl	8001f50 <I2C_RequestMemoryWrite>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d022      	beq.n	8001b38 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fa7a 	bl	8000ff0 <HAL_DMA_Abort_IT>
 8001afc:	4603      	mov	r3, r0
 8001afe:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b16:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e049      	b.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b64:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b74:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e028      	b.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f043 0210 	orr.w	r2, r3, #16
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e014      	b.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
  }
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	14f8b589 	.word	0x14f8b589
 8001bdc:	ffff0000 	.word	0xffff0000
 8001be0:	0800224d 	.word	0x0800224d
 8001be4:	080023f7 	.word	0x080023f7

08001be8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	@ 0x30
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	817b      	strh	r3, [r7, #10]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	813b      	strh	r3, [r7, #8]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c02:	f7ff f851 	bl	8000ca8 <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	f040 8168 	bne.w	8001eea <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c1a:	4b98      	ldr	r3, [pc, #608]	@ (8001e7c <HAL_I2C_Mem_Read_DMA+0x294>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	08db      	lsrs	r3, r3, #3
 8001c20:	4a97      	ldr	r2, [pc, #604]	@ (8001e80 <HAL_I2C_Mem_Read_DMA+0x298>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0a1a      	lsrs	r2, r3, #8
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009a      	lsls	r2, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d112      	bne.n	8001c66 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f043 0220 	orr.w	r2, r3, #32
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001c62:	2302      	movs	r3, #2
 8001c64:	e142      	b.n	8001eec <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d0df      	beq.n	8001c34 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2C_Mem_Read_DMA+0x9a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e134      	b.n	8001eec <HAL_I2C_Mem_Read_DMA+0x304>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d007      	beq.n	8001ca8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2222      	movs	r2, #34	@ 0x22
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2240      	movs	r2, #64	@ 0x40
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4a67      	ldr	r2, [pc, #412]	@ (8001e84 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001cea:	897a      	ldrh	r2, [r7, #10]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001cf0:	893a      	ldrh	r2, [r7, #8]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80c2 	beq.w	8001e90 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d024      	beq.n	8001d5e <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d18:	4a5b      	ldr	r2, [pc, #364]	@ (8001e88 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d20:	4a5a      	ldr	r2, [pc, #360]	@ (8001e8c <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d28:	2200      	movs	r2, #0
 8001d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3310      	adds	r3, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	461a      	mov	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4a:	f7ff f8f1 	bl	8000f30 <HAL_DMA_Start_IT>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001d54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d17b      	bne.n	8001e54 <HAL_I2C_Mem_Read_DMA+0x26c>
 8001d5c:	e013      	b.n	8001d86 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0b2      	b.n	8001eec <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001d86:	88f8      	ldrh	r0, [r7, #6]
 8001d88:	893a      	ldrh	r2, [r7, #8]
 8001d8a:	8979      	ldrh	r1, [r7, #10]
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2323      	movs	r3, #35	@ 0x23
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4603      	mov	r3, r0
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f970 	bl	800207c <I2C_RequestMemoryRead>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d023      	beq.n	8001dea <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f922 	bl	8000ff0 <HAL_DMA_Abort_IT>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db6:	2200      	movs	r2, #0
 8001db8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc8:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e080      	b.n	8001eec <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e40:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	e048      	b.n	8001ee6 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	f043 0210 	orr.w	r2, r3, #16
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e037      	b.n	8001eec <HAL_I2C_Mem_Read_DMA+0x304>
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	14f8b589 	.word	0x14f8b589
 8001e84:	ffff0000 	.word	0xffff0000
 8001e88:	0800224d 	.word	0x0800224d
 8001e8c:	080023f7 	.word	0x080023f7
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001e90:	88f8      	ldrh	r0, [r7, #6]
 8001e92:	893a      	ldrh	r2, [r7, #8]
 8001e94:	8979      	ldrh	r1, [r7, #10]
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2323      	movs	r3, #35	@ 0x23
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f8eb 	bl	800207c <I2C_RequestMemoryRead>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e01d      	b.n	8001eec <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3728      	adds	r7, #40	@ 0x28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	817b      	strh	r3, [r7, #10]
 8001f62:	460b      	mov	r3, r1
 8001f64:	813b      	strh	r3, [r7, #8]
 8001f66:	4613      	mov	r3, r2
 8001f68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 fa6c 	bl	8002464 <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00d      	beq.n	8001fae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa0:	d103      	bne.n	8001faa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e05f      	b.n	800206e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fae:	897b      	ldrh	r3, [r7, #10]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	492d      	ldr	r1, [pc, #180]	@ (8002078 <I2C_RequestMemoryWrite+0x128>)
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fac7 	bl	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e04c      	b.n	800206e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 fb52 	bl	8002698 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00d      	beq.n	8002016 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d107      	bne.n	8002012 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e02b      	b.n	800206e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800201c:	893b      	ldrh	r3, [r7, #8]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	e021      	b.n	800206c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002028:	893b      	ldrh	r3, [r7, #8]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	b29b      	uxth	r3, r3
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002038:	6a39      	ldr	r1, [r7, #32]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fb2c 	bl	8002698 <I2C_WaitOnTXEFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	2b04      	cmp	r3, #4
 800204c:	d107      	bne.n	800205e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800205c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e005      	b.n	800206e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002062:	893b      	ldrh	r3, [r7, #8]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	00010002 	.word	0x00010002

0800207c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af02      	add	r7, sp, #8
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	4608      	mov	r0, r1
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	817b      	strh	r3, [r7, #10]
 800208e:	460b      	mov	r3, r1
 8002090:	813b      	strh	r3, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80020a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	2200      	movs	r2, #0
 80020be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f9ce 	bl	8002464 <I2C_WaitOnFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00d      	beq.n	80020ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020dc:	d103      	bne.n	80020e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0aa      	b.n	8002240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ea:	897b      	ldrh	r3, [r7, #10]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	4952      	ldr	r1, [pc, #328]	@ (8002248 <I2C_RequestMemoryRead+0x1cc>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fa29 	bl	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e097      	b.n	8002240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fab4 	bl	8002698 <I2C_WaitOnTXEFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e076      	b.n	8002240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002158:	893b      	ldrh	r3, [r7, #8]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e021      	b.n	80021a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002164:	893b      	ldrh	r3, [r7, #8]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	b29b      	uxth	r3, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002174:	6a39      	ldr	r1, [r7, #32]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fa8e 	bl	8002698 <I2C_WaitOnTXEFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	2b04      	cmp	r3, #4
 8002188:	d107      	bne.n	800219a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002198:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e050      	b.n	8002240 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800219e:	893b      	ldrh	r3, [r7, #8]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021aa:	6a39      	ldr	r1, [r7, #32]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fa73 	bl	8002698 <I2C_WaitOnTXEFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00d      	beq.n	80021d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d107      	bne.n	80021d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e035      	b.n	8002240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f937 	bl	8002464 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800220a:	d103      	bne.n	8002214 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e013      	b.n	8002240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	6a3a      	ldr	r2, [r7, #32]
 800222c:	4906      	ldr	r1, [pc, #24]	@ (8002248 <I2C_RequestMemoryRead+0x1cc>)
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f992 	bl	8002558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	00010002 	.word	0x00010002

0800224c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002260:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002268:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800227e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	2200      	movs	r2, #0
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	2200      	movs	r2, #0
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80022a6:	2b21      	cmp	r3, #33	@ 0x21
 80022a8:	d007      	beq.n	80022ba <I2C_DMAXferCplt+0x6e>
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80022b0:	2b22      	cmp	r3, #34	@ 0x22
 80022b2:	d131      	bne.n	8002318 <I2C_DMAXferCplt+0xcc>
 80022b4:	7cbb      	ldrb	r3, [r7, #18]
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	d12e      	bne.n	8002318 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2200      	movs	r2, #0
 80022ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	2b29      	cmp	r3, #41	@ 0x29
 80022d4:	d10a      	bne.n	80022ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2221      	movs	r2, #33	@ 0x21
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2228      	movs	r2, #40	@ 0x28
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022e4:	6978      	ldr	r0, [r7, #20]
 80022e6:	f7ff fe0e 	bl	8001f06 <HAL_I2C_SlaveTxCpltCallback>
 80022ea:	e00c      	b.n	8002306 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80022f0:	d109      	bne.n	8002306 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2222      	movs	r2, #34	@ 0x22
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	2228      	movs	r2, #40	@ 0x28
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002300:	6978      	ldr	r0, [r7, #20]
 8002302:	f7ff fe09 	bl	8001f18 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002314:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002316:	e06a      	b.n	80023ee <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d064      	beq.n	80023ee <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800233c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800234c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002354:	d009      	beq.n	800236a <I2C_DMAXferCplt+0x11e>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d006      	beq.n	800236a <I2C_DMAXferCplt+0x11e>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002362:	d002      	beq.n	800236a <I2C_DMAXferCplt+0x11e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b20      	cmp	r3, #32
 8002368:	d107      	bne.n	800237a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002378:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002388:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002398:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2200      	movs	r2, #0
 800239e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80023a8:	6978      	ldr	r0, [r7, #20]
 80023aa:	f7ff fdc7 	bl	8001f3c <HAL_I2C_ErrorCallback>
}
 80023ae:	e01e      	b.n	80023ee <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b40      	cmp	r3, #64	@ 0x40
 80023c2:	d10a      	bne.n	80023da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff fda9 	bl	8001f2a <HAL_I2C_MemRxCpltCallback>
}
 80023d8:	e009      	b.n	80023ee <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2212      	movs	r2, #18
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80023e8:	6978      	ldr	r0, [r7, #20]
 80023ea:	f7ff fd83 	bl	8001ef4 <HAL_I2C_MasterRxCpltCallback>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002410:	2200      	movs	r2, #0
 8002412:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002420:	2200      	movs	r2, #0
 8002422:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002432:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f043 0210 	orr.w	r2, r3, #16
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff fd70 	bl	8001f3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002474:	e048      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d044      	beq.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	f7fe fc13 	bl	8000ca8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d302      	bcc.n	8002494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d139      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	e00c      	b.n	80024d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	43da      	mvns	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d116      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e023      	b.n	8002550 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	0c1b      	lsrs	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10d      	bne.n	800252e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	43da      	mvns	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4013      	ands	r3, r2
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	e00c      	b.n	8002548 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	43da      	mvns	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	429a      	cmp	r2, r3
 800254c:	d093      	beq.n	8002476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002566:	e071      	b.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002576:	d123      	bne.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002586:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f043 0204 	orr.w	r2, r3, #4
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e067      	b.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d041      	beq.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c8:	f7fe fb6e 	bl	8000ca8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d302      	bcc.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d136      	bne.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10c      	bne.n	8002602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4013      	ands	r3, r2
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	e00b      	b.n	800261a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	43da      	mvns	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	4013      	ands	r3, r2
 800260e:	b29b      	uxth	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e021      	b.n	8002690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10c      	bne.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e00b      	b.n	8002688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4013      	ands	r3, r2
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf14      	ite	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2300      	moveq	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af6d 	bne.w	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a4:	e034      	b.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f83e 	bl	8002728 <I2C_IsAcknowledgeFailed>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d028      	beq.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7fe faf3 	bl	8000ca8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11d      	bne.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026de:	2b80      	cmp	r3, #128	@ 0x80
 80026e0:	d016      	beq.n	8002710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e007      	b.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800271a:	2b80      	cmp	r3, #128	@ 0x80
 800271c:	d1c3      	bne.n	80026a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d11b      	bne.n	8002778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e272      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b92      	ldr	r3, [pc, #584]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
 80027bc:	4b8c      	ldr	r3, [pc, #560]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x12c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e24c      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x76>
 80027ec:	4b80      	ldr	r3, [pc, #512]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7b      	ldr	r3, [pc, #492]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7a      	ldr	r2, [pc, #488]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b78      	ldr	r3, [pc, #480]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xbc>
 8002826:	4b72      	ldr	r3, [pc, #456]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a71      	ldr	r2, [pc, #452]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6f      	ldr	r3, [pc, #444]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002840:	4b6b      	ldr	r3, [pc, #428]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6a      	ldr	r2, [pc, #424]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b68      	ldr	r3, [pc, #416]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a67      	ldr	r2, [pc, #412]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fa22 	bl	8000ca8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fa1e 	bl	8000ca8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e200      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5d      	ldr	r3, [pc, #372]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe4>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fa0e 	bl	8000ca8 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe fa0a 	bl	8000ca8 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1ec      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b53      	ldr	r3, [pc, #332]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x10c>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b4c      	ldr	r3, [pc, #304]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ca:	4b49      	ldr	r3, [pc, #292]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
 80028d6:	4b46      	ldr	r3, [pc, #280]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b43      	ldr	r3, [pc, #268]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c0      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4939      	ldr	r1, [pc, #228]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe f9c3 	bl	8000ca8 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe f9bf 	bl	8000ca8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b2a      	ldr	r3, [pc, #168]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4927      	ldr	r1, [pc, #156]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe f9a2 	bl	8000ca8 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe f99e 	bl	8000ca8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e180      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <HAL_RCC_OscConfig+0x274>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe f982 	bl	8000ca8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe f97e 	bl	8000ca8 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e160      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fafe 	bl	8002fc8 <RCC_Delay>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe f968 	bl	8000ca8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe f964 	bl	8000ca8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e146      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	42420000 	.word	0x42420000
 80029f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b92      	ldr	r3, [pc, #584]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e9      	bne.n	80029dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a87      	ldr	r2, [pc, #540]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b85      	ldr	r3, [pc, #532]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b82      	ldr	r3, [pc, #520]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7e      	ldr	r2, [pc, #504]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe f925 	bl	8000ca8 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe f921 	bl	8000ca8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	@ 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e103      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b75      	ldr	r3, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a69      	ldr	r2, [pc, #420]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b67      	ldr	r3, [pc, #412]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a66      	ldr	r2, [pc, #408]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x356>
 8002ac0:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ada:	4b5b      	ldr	r3, [pc, #364]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a5a      	ldr	r2, [pc, #360]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b58      	ldr	r3, [pc, #352]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a57      	ldr	r2, [pc, #348]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe f8d5 	bl	8000ca8 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe f8d1 	bl	8000ca8 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0b1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x37e>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe f8bf 	bl	8000ca8 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe f8bb 	bl	8000ca8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e09b      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8087 	beq.w	8002c7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d061      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d146      	bne.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe f88f 	bl	8000ca8 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe f88b 	bl	8000ca8 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e06d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4921      	ldr	r1, [pc, #132]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a19      	ldr	r1, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	491b      	ldr	r1, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe f85f 	bl	8000ca8 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe f85b 	bl	8000ca8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e03d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x46a>
 8002c0c:	e035      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe f848 	bl	8000ca8 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe f844 	bl	8000ca8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e026      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
 8002c3a:	e01e      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e019      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_OscConfig+0x500>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0d0      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d910      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b67      	ldr	r3, [pc, #412]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4965      	ldr	r1, [pc, #404]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b63      	ldr	r3, [pc, #396]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce4:	4b59      	ldr	r3, [pc, #356]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfc:	4b53      	ldr	r3, [pc, #332]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a52      	ldr	r2, [pc, #328]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b50      	ldr	r3, [pc, #320]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	494d      	ldr	r1, [pc, #308]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d040      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b41      	ldr	r3, [pc, #260]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e073      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3d      	ldr	r3, [pc, #244]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06b      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b39      	ldr	r3, [pc, #228]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4936      	ldr	r1, [pc, #216]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fd ff96 	bl	8000ca8 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fd ff92 	bl	8000ca8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e053      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2d      	ldr	r3, [pc, #180]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d210      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4922      	ldr	r1, [pc, #136]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4916      	ldr	r1, [pc, #88]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	490e      	ldr	r1, [pc, #56]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e16:	f000 f821 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490a      	ldr	r1, [pc, #40]	@ (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a09      	ldr	r2, [pc, #36]	@ (8002e54 <HAL_RCC_ClockConfig+0x1cc>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_ClockConfig+0x1d0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fd18 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	080074ac 	.word	0x080074ac
 8002e54:	20000000 	.word	0x20000000
 8002e58:	20000004 	.word	0x20000004

08002e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d002      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x30>
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x36>
 8002e8a:	e027      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8e:	613b      	str	r3, [r7, #16]
      break;
 8002e90:	e027      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	0c9b      	lsrs	r3, r3, #18
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eaa:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0c5b      	lsrs	r3, r3, #17
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ebe:	fb03 f202 	mul.w	r2, r3, r2
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e004      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a0c      	ldr	r2, [pc, #48]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
      break;
 8002eda:	e002      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ede:	613b      	str	r3, [r7, #16]
      break;
 8002ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee2:	693b      	ldr	r3, [r7, #16]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	080074c4 	.word	0x080074c4
 8002efc:	080074d4 	.word	0x080074d4
 8002f00:	003d0900 	.word	0x003d0900

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b02      	ldr	r3, [pc, #8]	@ (8002f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000000 	.word	0x20000000

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff2 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	080074bc 	.word	0x080074bc

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffde 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	0adb      	lsrs	r3, r3, #11
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	080074bc 	.word	0x080074bc

08002f68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	220f      	movs	r2, #15
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <HAL_RCC_GetClockConfig+0x58>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0203 	and.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <HAL_RCC_GetClockConfig+0x58>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_GetClockConfig+0x58>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_RCC_GetClockConfig+0x58>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	08db      	lsrs	r3, r3, #3
 8002fa2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002faa:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0207 	and.w	r2, r3, #7
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <RCC_Delay+0x34>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <RCC_Delay+0x38>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0a5b      	lsrs	r3, r3, #9
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fe4:	bf00      	nop
  }
  while (Delay --);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e5a      	subs	r2, r3, #1
 8002fea:	60fa      	str	r2, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <RCC_Delay+0x1c>
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	20000000 	.word	0x20000000
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e041      	b.n	800309a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f839 	bl	80030a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f000 f9b4 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d001      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e03a      	b.n	8003142 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a18      	ldr	r2, [pc, #96]	@ (800314c <HAL_TIM_Base_Start_IT+0x98>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x58>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f6:	d009      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x58>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a14      	ldr	r2, [pc, #80]	@ (8003150 <HAL_TIM_Base_Start_IT+0x9c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x58>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a13      	ldr	r2, [pc, #76]	@ (8003154 <HAL_TIM_Base_Start_IT+0xa0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d111      	bne.n	8003130 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d010      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312e:	e007      	b.n	8003140 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0202 	mvn.w	r2, #2
 8003184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8ed 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f8e0 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8ef 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0204 	mvn.w	r2, #4
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8c3 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8b6 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8c5 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b08      	cmp	r3, #8
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f899 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f88c 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f89b 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b10      	cmp	r3, #16
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f86f 	bl	800337a <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f862 	bl	8003368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f871 	bl	800338c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fa78 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b80      	cmp	r3, #128	@ 0x80
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f4:	2b80      	cmp	r3, #128	@ 0x80
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8bf 	bl	8003486 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d10e      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b40      	cmp	r3, #64	@ 0x40
 8003322:	d107      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f835 	bl	800339e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0220 	mvn.w	r2, #32
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f88a 	bl	8003474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a29      	ldr	r2, [pc, #164]	@ (8003468 <TIM_Base_SetConfig+0xb8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <TIM_Base_SetConfig+0x30>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ce:	d007      	beq.n	80033e0 <TIM_Base_SetConfig+0x30>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a26      	ldr	r2, [pc, #152]	@ (800346c <TIM_Base_SetConfig+0xbc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_Base_SetConfig+0x30>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a25      	ldr	r2, [pc, #148]	@ (8003470 <TIM_Base_SetConfig+0xc0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d108      	bne.n	80033f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <TIM_Base_SetConfig+0xb8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00b      	beq.n	8003412 <TIM_Base_SetConfig+0x62>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003400:	d007      	beq.n	8003412 <TIM_Base_SetConfig+0x62>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a19      	ldr	r2, [pc, #100]	@ (800346c <TIM_Base_SetConfig+0xbc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_Base_SetConfig+0x62>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	@ (8003470 <TIM_Base_SetConfig+0xc0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d108      	bne.n	8003424 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a07      	ldr	r2, [pc, #28]	@ (8003468 <TIM_Base_SetConfig+0xb8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	615a      	str	r2, [r3, #20]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800

08003474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e042      	b.n	8003530 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fb5a 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	@ 0x24
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f82b 	bl	8003538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003572:	f023 030c 	bic.w	r3, r3, #12
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	430b      	orrs	r3, r1
 800357e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2c      	ldr	r2, [pc, #176]	@ (800364c <UART_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d103      	bne.n	80035a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7ff fcce 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	e002      	b.n	80035ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7ff fcb6 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 80035ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009a      	lsls	r2, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <UART_SetConfig+0x118>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	0119      	lsls	r1, r3, #4
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009a      	lsls	r2, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <UART_SetConfig+0x118>)
 80035e6:	fba3 0302 	umull	r0, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2064      	movs	r0, #100	@ 0x64
 80035ee:	fb00 f303 	mul.w	r3, r0, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	3332      	adds	r3, #50	@ 0x32
 80035f8:	4a15      	ldr	r2, [pc, #84]	@ (8003650 <UART_SetConfig+0x118>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003604:	4419      	add	r1, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009a      	lsls	r2, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fbb2 f2f3 	udiv	r2, r2, r3
 800361c:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <UART_SetConfig+0x118>)
 800361e:	fba3 0302 	umull	r0, r3, r3, r2
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2064      	movs	r0, #100	@ 0x64
 8003626:	fb00 f303 	mul.w	r3, r0, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	3332      	adds	r3, #50	@ 0x32
 8003630:	4a07      	ldr	r2, [pc, #28]	@ (8003650 <UART_SetConfig+0x118>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	440a      	add	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013800 	.word	0x40013800
 8003650:	51eb851f 	.word	0x51eb851f

08003654 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800365a:	f3ef 8305 	mrs	r3, IPSR
 800365e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003660:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	607b      	str	r3, [r7, #4]
  return(result);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <osKernelInitialize+0x32>
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <osKernelInitialize+0x60>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d109      	bne.n	800368e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800367a:	f3ef 8311 	mrs	r3, BASEPRI
 800367e:	603b      	str	r3, [r7, #0]
  return(result);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003686:	f06f 0305 	mvn.w	r3, #5
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e00c      	b.n	80036a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <osKernelInitialize+0x60>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <osKernelInitialize+0x60>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e002      	b.n	80036a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80036a2:	f04f 33ff 	mov.w	r3, #4294967295
 80036a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036a8:	68fb      	ldr	r3, [r7, #12]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	20000220 	.word	0x20000220

080036b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036be:	f3ef 8305 	mrs	r3, IPSR
 80036c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80036c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ca:	f3ef 8310 	mrs	r3, PRIMASK
 80036ce:	607b      	str	r3, [r7, #4]
  return(result);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <osKernelStart+0x32>
 80036d6:	4b11      	ldr	r3, [pc, #68]	@ (800371c <osKernelStart+0x64>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d109      	bne.n	80036f2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036de:	f3ef 8311 	mrs	r3, BASEPRI
 80036e2:	603b      	str	r3, [r7, #0]
  return(result);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80036ea:	f06f 0305 	mvn.w	r3, #5
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e00e      	b.n	8003710 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <osKernelStart+0x64>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d107      	bne.n	800370a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80036fa:	4b08      	ldr	r3, [pc, #32]	@ (800371c <osKernelStart+0x64>)
 80036fc:	2202      	movs	r2, #2
 80036fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003700:	f001 fc10 	bl	8004f24 <vTaskStartScheduler>
      stat = osOK;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e002      	b.n	8003710 <osKernelStart+0x58>
    } else {
      stat = osError;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000220 	.word	0x20000220

08003720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b092      	sub	sp, #72	@ 0x48
 8003724:	af04      	add	r7, sp, #16
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003730:	f3ef 8305 	mrs	r3, IPSR
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8094 	bne.w	8003866 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373e:	f3ef 8310 	mrs	r3, PRIMASK
 8003742:	623b      	str	r3, [r7, #32]
  return(result);
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 808d 	bne.w	8003866 <osThreadNew+0x146>
 800374c:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <osThreadNew+0x150>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d106      	bne.n	8003762 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003754:	f3ef 8311 	mrs	r3, BASEPRI
 8003758:	61fb      	str	r3, [r7, #28]
  return(result);
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f040 8082 	bne.w	8003866 <osThreadNew+0x146>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d07e      	beq.n	8003866 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003768:	2380      	movs	r3, #128	@ 0x80
 800376a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800376c:	2318      	movs	r3, #24
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003770:	2300      	movs	r3, #0
 8003772:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003774:	f107 031b 	add.w	r3, r7, #27
 8003778:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d045      	beq.n	8003812 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <osThreadNew+0x74>
        name = attr->name;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <osThreadNew+0x9a>
 80037a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037aa:	2b38      	cmp	r3, #56	@ 0x38
 80037ac:	d805      	bhi.n	80037ba <osThreadNew+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <osThreadNew+0x9e>
        return (NULL);
 80037ba:	2300      	movs	r3, #0
 80037bc:	e054      	b.n	8003868 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00e      	beq.n	80037f4 <osThreadNew+0xd4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2ba7      	cmp	r3, #167	@ 0xa7
 80037dc:	d90a      	bls.n	80037f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <osThreadNew+0xd4>
        mem = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037f2:	e010      	b.n	8003816 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10c      	bne.n	8003816 <osThreadNew+0xf6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d108      	bne.n	8003816 <osThreadNew+0xf6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <osThreadNew+0xf6>
          mem = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003810:	e001      	b.n	8003816 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003818:	2b01      	cmp	r3, #1
 800381a:	d110      	bne.n	800383e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003824:	9202      	str	r2, [sp, #8]
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003830:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f001 f98c 	bl	8004b50 <xTaskCreateStatic>
 8003838:	4603      	mov	r3, r0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e013      	b.n	8003866 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d110      	bne.n	8003866 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	b29a      	uxth	r2, r3
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f001 f9d9 	bl	8004c0e <xTaskCreate>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <osThreadNew+0x146>
          hTask = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003866:	697b      	ldr	r3, [r7, #20]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3738      	adds	r7, #56	@ 0x38
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000220 	.word	0x20000220

08003874 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800387c:	f3ef 8305 	mrs	r3, IPSR
 8003880:	613b      	str	r3, [r7, #16]
  return(result);
 8003882:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003888:	f3ef 8310 	mrs	r3, PRIMASK
 800388c:	60fb      	str	r3, [r7, #12]
  return(result);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d109      	bne.n	80038a8 <osDelay+0x34>
 8003894:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <osDelay+0x58>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d109      	bne.n	80038b0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800389c:	f3ef 8311 	mrs	r3, BASEPRI
 80038a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <osDelay+0x3c>
    stat = osErrorISR;
 80038a8:	f06f 0305 	mvn.w	r3, #5
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e007      	b.n	80038c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f001 fafc 	bl	8004eb8 <vTaskDelay>
    }
  }

  return (stat);
 80038c0:	697b      	ldr	r3, [r7, #20]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000220 	.word	0x20000220

080038d0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	@ 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038dc:	f3ef 8305 	mrs	r3, IPSR
 80038e0:	613b      	str	r3, [r7, #16]
  return(result);
 80038e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f040 8085 	bne.w	80039f4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ea:	f3ef 8310 	mrs	r3, PRIMASK
 80038ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d17e      	bne.n	80039f4 <osMutexNew+0x124>
 80038f6:	4b42      	ldr	r3, [pc, #264]	@ (8003a00 <osMutexNew+0x130>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d105      	bne.n	800390a <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003902:	60bb      	str	r3, [r7, #8]
  return(result);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d174      	bne.n	80039f4 <osMutexNew+0x124>
    if (attr != NULL) {
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <osMutexNew+0x48>
      type = attr->attr_bits;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	623b      	str	r3, [r7, #32]
 8003916:	e001      	b.n	800391c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <osMutexNew+0x5c>
      rmtx = 1U;
 8003926:	2301      	movs	r3, #1
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e001      	b.n	8003930 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d15c      	bne.n	80039f4 <osMutexNew+0x124>
      mem = -1;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295
 800393e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <osMutexNew+0x8c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b4f      	cmp	r3, #79	@ 0x4f
 8003954:	d902      	bls.n	800395c <osMutexNew+0x8c>
          mem = 1;
 8003956:	2301      	movs	r3, #1
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	e00c      	b.n	8003976 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d108      	bne.n	8003976 <osMutexNew+0xa6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <osMutexNew+0xa6>
            mem = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e001      	b.n	8003976 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d112      	bne.n	80039a2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d007      	beq.n	8003992 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4619      	mov	r1, r3
 8003988:	2004      	movs	r0, #4
 800398a:	f000 fb45 	bl	8004018 <xQueueCreateMutexStatic>
 800398e:	6278      	str	r0, [r7, #36]	@ 0x24
 8003990:	e016      	b.n	80039c0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4619      	mov	r1, r3
 8003998:	2001      	movs	r0, #1
 800399a:	f000 fb3d 	bl	8004018 <xQueueCreateMutexStatic>
 800399e:	6278      	str	r0, [r7, #36]	@ 0x24
 80039a0:	e00e      	b.n	80039c0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10b      	bne.n	80039c0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80039ae:	2004      	movs	r0, #4
 80039b0:	f000 fb1a 	bl	8003fe8 <xQueueCreateMutex>
 80039b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80039b6:	e003      	b.n	80039c0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80039b8:	2001      	movs	r0, #1
 80039ba:	f000 fb15 	bl	8003fe8 <xQueueCreateMutex>
 80039be:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <osMutexNew+0x110>
        if (attr != NULL) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <osMutexNew+0x104>
          name = attr->name;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	e001      	b.n	80039d8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80039d8:	6979      	ldr	r1, [r7, #20]
 80039da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039dc:	f001 f85c 	bl	8004a98 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <osMutexNew+0x124>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3728      	adds	r7, #40	@ 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000220 	.word	0x20000220

08003a04 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a22:	f3ef 8305 	mrs	r3, IPSR
 8003a26:	613b      	str	r3, [r7, #16]
  return(result);
 8003a28:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <osMutexAcquire+0x4a>
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <osMutexAcquire+0xb8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d109      	bne.n	8003a56 <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a42:	f3ef 8311 	mrs	r3, BASEPRI
 8003a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8003a4e:	f06f 0305 	mvn.w	r3, #5
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	e02c      	b.n	8003ab0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8003a5c:	f06f 0303 	mvn.w	r3, #3
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	e025      	b.n	8003ab0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d011      	beq.n	8003a8e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003a6a:	6839      	ldr	r1, [r7, #0]
 8003a6c:	69b8      	ldr	r0, [r7, #24]
 8003a6e:	f000 fb23 	bl	80040b8 <xQueueTakeMutexRecursive>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d01b      	beq.n	8003ab0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8003a7e:	f06f 0301 	mvn.w	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e014      	b.n	8003ab0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003a86:	f06f 0302 	mvn.w	r3, #2
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	e010      	b.n	8003ab0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003a8e:	6839      	ldr	r1, [r7, #0]
 8003a90:	69b8      	ldr	r0, [r7, #24]
 8003a92:	f000 fdc9 	bl	8004628 <xQueueSemaphoreTake>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d009      	beq.n	8003ab0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8003aa2:	f06f 0301 	mvn.w	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	e002      	b.n	8003ab0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003aaa:	f06f 0302 	mvn.w	r3, #2
 8003aae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3720      	adds	r7, #32
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000220 	.word	0x20000220

08003ac0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003adc:	f3ef 8305 	mrs	r3, IPSR
 8003ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10f      	bne.n	8003b08 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aec:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <osMutexRelease+0x48>
 8003af4:	4b19      	ldr	r3, [pc, #100]	@ (8003b5c <osMutexRelease+0x9c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d109      	bne.n	8003b10 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003afc:	f3ef 8311 	mrs	r3, BASEPRI
 8003b00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003b08:	f06f 0305 	mvn.w	r3, #5
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	e01f      	b.n	8003b50 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8003b16:	f06f 0303 	mvn.w	r3, #3
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e018      	b.n	8003b50 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003b24:	69b8      	ldr	r0, [r7, #24]
 8003b26:	f000 fa92 	bl	800404e <xQueueGiveMutexRecursive>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d00f      	beq.n	8003b50 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003b30:	f06f 0302 	mvn.w	r3, #2
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	e00b      	b.n	8003b50 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	69b8      	ldr	r0, [r7, #24]
 8003b40:	f000 faf2 	bl	8004128 <xQueueGenericSend>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d002      	beq.n	8003b50 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003b4a:	f06f 0302 	mvn.w	r3, #2
 8003b4e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8003b50:	69fb      	ldr	r3, [r7, #28]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000220 	.word	0x20000220

08003b60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a06      	ldr	r2, [pc, #24]	@ (8003b88 <vApplicationGetIdleTaskMemory+0x28>)
 8003b70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <vApplicationGetIdleTaskMemory+0x2c>)
 8003b76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2280      	movs	r2, #128	@ 0x80
 8003b7c:	601a      	str	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	20000224 	.word	0x20000224
 8003b8c:	200002cc 	.word	0x200002cc

08003b90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a07      	ldr	r2, [pc, #28]	@ (8003bbc <vApplicationGetTimerTaskMemory+0x2c>)
 8003ba0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a06      	ldr	r2, [pc, #24]	@ (8003bc0 <vApplicationGetTimerTaskMemory+0x30>)
 8003ba6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bae:	601a      	str	r2, [r3, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	200004cc 	.word	0x200004cc
 8003bc0:	20000574 	.word	0x20000574

08003bc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f103 0208 	add.w	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f103 0208 	add.w	r2, r3, #8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f103 0208 	add.w	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d103      	bne.n	8003c80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e00c      	b.n	8003c9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3308      	adds	r3, #8
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e002      	b.n	8003c8e <vListInsert+0x2e>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d2f6      	bcs.n	8003c88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6892      	ldr	r2, [r2, #8]
 8003ce6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6852      	ldr	r2, [r2, #4]
 8003cf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d103      	bne.n	8003d04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1e5a      	subs	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
	...

08003d24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d50:	f002 fb5c 	bl	800640c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	441a      	add	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d80:	3b01      	subs	r3, #1
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d86:	fb01 f303 	mul.w	r3, r1, r3
 8003d8a:	441a      	add	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	22ff      	movs	r2, #255	@ 0xff
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	22ff      	movs	r2, #255	@ 0xff
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d114      	bne.n	8003dd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01a      	beq.n	8003de4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3310      	adds	r3, #16
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 fb56 	bl	8005464 <xTaskRemoveFromEventList>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d012      	beq.n	8003de4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <xQueueGenericReset+0xd0>)
 8003dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	e009      	b.n	8003de4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3310      	adds	r3, #16
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fef5 	bl	8003bc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3324      	adds	r3, #36	@ 0x24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fef0 	bl	8003bc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003de4:	f002 fb42 	bl	800646c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003de8:	2301      	movs	r3, #1
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	@ 0x38
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10b      	bne.n	8003e24 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	e7fd      	b.n	8003e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <xQueueGenericCreateStatic+0x56>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <xQueueGenericCreateStatic+0x5a>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericCreateStatic+0x5c>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	623b      	str	r3, [r7, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <xQueueGenericCreateStatic+0x84>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <xQueueGenericCreateStatic+0x88>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <xQueueGenericCreateStatic+0x8a>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61fb      	str	r3, [r7, #28]
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e9e:	2350      	movs	r3, #80	@ 0x50
 8003ea0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b50      	cmp	r3, #80	@ 0x50
 8003ea6:	d00b      	beq.n	8003ec0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	61bb      	str	r3, [r7, #24]
}
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00d      	beq.n	8003ee6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ed2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f844 	bl	8003f6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3730      	adds	r7, #48	@ 0x30
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	@ 0x28
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <xQueueGenericCreate+0x2c>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	e004      	b.n	8003f32 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3350      	adds	r3, #80	@ 0x50
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 fb6a 	bl	8006610 <pvPortMalloc>
 8003f3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00f      	beq.n	8003f64 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	3350      	adds	r3, #80	@ 0x50
 8003f48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f52:	79fa      	ldrb	r2, [r7, #7]
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f805 	bl	8003f6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f64:	69bb      	ldr	r3, [r7, #24]
	}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	60f8      	str	r0, [r7, #12]
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e002      	b.n	8003f90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	69b8      	ldr	r0, [r7, #24]
 8003fa0:	f7ff fec0 	bl	8003d24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00e      	beq.n	8003fe0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8a4 	bl	8004128 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6939      	ldr	r1, [r7, #16]
 8004000:	6978      	ldr	r0, [r7, #20]
 8004002:	f7ff ff75 	bl	8003ef0 <xQueueGenericCreate>
 8004006:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7ff ffd3 	bl	8003fb4 <prvInitialiseMutex>

		return pxNewQueue;
 800400e:	68fb      	ldr	r3, [r7, #12]
	}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	4603      	mov	r3, r0
 8004020:	6039      	str	r1, [r7, #0]
 8004022:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	6939      	ldr	r1, [r7, #16]
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7ff fede 	bl	8003df8 <xQueueGenericCreateStatic>
 800403c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff ffb8 	bl	8003fb4 <prvInitialiseMutex>

		return pxNewQueue;
 8004044:	68fb      	ldr	r3, [r7, #12]
	}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800404e:	b590      	push	{r4, r7, lr}
 8004050:	b087      	sub	sp, #28
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60fb      	str	r3, [r7, #12]
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	685c      	ldr	r4, [r3, #4]
 800407c:	f001 fbbe 	bl	80057fc <xTaskGetCurrentTaskHandle>
 8004080:	4603      	mov	r3, r0
 8004082:	429c      	cmp	r4, r3
 8004084:	d111      	bne.n	80040aa <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	1e5a      	subs	r2, r3, #1
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004098:	2300      	movs	r3, #0
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	6938      	ldr	r0, [r7, #16]
 80040a0:	f000 f842 	bl	8004128 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80040a4:	2301      	movs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e001      	b.n	80040ae <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80040ae:	697b      	ldr	r3, [r7, #20]
	}
 80040b0:	4618      	mov	r0, r3
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd90      	pop	{r4, r7, pc}

080040b8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	60fb      	str	r3, [r7, #12]
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	e7fd      	b.n	80040e0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	685c      	ldr	r4, [r3, #4]
 80040e8:	f001 fb88 	bl	80057fc <xTaskGetCurrentTaskHandle>
 80040ec:	4603      	mov	r3, r0
 80040ee:	429c      	cmp	r4, r3
 80040f0:	d107      	bne.n	8004102 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e00c      	b.n	800411c <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	6938      	ldr	r0, [r7, #16]
 8004106:	f000 fa8f 	bl	8004628 <xQueueSemaphoreTake>
 800410a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d004      	beq.n	800411c <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800411c:	697b      	ldr	r3, [r7, #20]
	}
 800411e:	4618      	mov	r0, r3
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	bd90      	pop	{r4, r7, pc}
	...

08004128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08e      	sub	sp, #56	@ 0x38
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004136:	2300      	movs	r3, #0
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <xQueueGenericSend+0x34>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <xQueueGenericSend+0x42>
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <xQueueGenericSend+0x46>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueGenericSend+0x48>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <xQueueGenericSend+0x64>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004186:	bf00      	nop
 8004188:	bf00      	nop
 800418a:	e7fd      	b.n	8004188 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d103      	bne.n	800419a <xQueueGenericSend+0x72>
 8004192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <xQueueGenericSend+0x76>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <xQueueGenericSend+0x78>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10b      	bne.n	80041bc <xQueueGenericSend+0x94>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	623b      	str	r3, [r7, #32]
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041bc:	f001 fb2c 	bl	8005818 <xTaskGetSchedulerState>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d102      	bne.n	80041cc <xQueueGenericSend+0xa4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <xQueueGenericSend+0xa8>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <xQueueGenericSend+0xaa>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <xQueueGenericSend+0xc6>
	__asm volatile
 80041d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	61fb      	str	r3, [r7, #28]
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	e7fd      	b.n	80041ea <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ee:	f002 f90d 	bl	800640c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <xQueueGenericSend+0xdc>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d129      	bne.n	8004258 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800420a:	f000 fb34 	bl	8004876 <prvCopyDataToQueue>
 800420e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421a:	3324      	adds	r3, #36	@ 0x24
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f921 	bl	8005464 <xTaskRemoveFromEventList>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004228:	4b3f      	ldr	r3, [pc, #252]	@ (8004328 <xQueueGenericSend+0x200>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	e00a      	b.n	8004250 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800423a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004240:	4b39      	ldr	r3, [pc, #228]	@ (8004328 <xQueueGenericSend+0x200>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004250:	f002 f90c 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8004254:	2301      	movs	r3, #1
 8004256:	e063      	b.n	8004320 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800425e:	f002 f905 	bl	800646c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004262:	2300      	movs	r3, #0
 8004264:	e05c      	b.n	8004320 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	4618      	mov	r0, r3
 8004272:	f001 f95b 	bl	800552c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800427a:	f002 f8f7 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800427e:	f000 fec1 	bl	8005004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004282:	f002 f8c3 	bl	800640c <vPortEnterCritical>
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800428c:	b25b      	sxtb	r3, r3
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d103      	bne.n	800429c <xQueueGenericSend+0x174>
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800429c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042a2:	b25b      	sxtb	r3, r3
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSend+0x18a>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b2:	f002 f8db 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042b6:	1d3a      	adds	r2, r7, #4
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 f94a 	bl	8005558 <xTaskCheckForTimeOut>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d124      	bne.n	8004314 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042cc:	f000 fbcb 	bl	8004a66 <prvIsQueueFull>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d018      	beq.n	8004308 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	3310      	adds	r3, #16
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4611      	mov	r1, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 f86e 	bl	80053c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042e6:	f000 fb56 	bl	8004996 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ea:	f000 fe99 	bl	8005020 <xTaskResumeAll>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f47f af7c 	bne.w	80041ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80042f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <xQueueGenericSend+0x200>)
 80042f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	e772      	b.n	80041ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800430a:	f000 fb44 	bl	8004996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800430e:	f000 fe87 	bl	8005020 <xTaskResumeAll>
 8004312:	e76c      	b.n	80041ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004314:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004316:	f000 fb3e 	bl	8004996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800431a:	f000 fe81 	bl	8005020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800431e:	2300      	movs	r3, #0
		}
	}
}
 8004320:	4618      	mov	r0, r3
 8004322:	3738      	adds	r7, #56	@ 0x38
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	e000ed04 	.word	0xe000ed04

0800432c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	@ 0x38
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800433e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <xQueueGenericSendFromISR+0x3e>
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <xQueueGenericSendFromISR+0x42>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <xQueueGenericSendFromISR+0x44>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	623b      	str	r3, [r7, #32]
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d103      	bne.n	800439a <xQueueGenericSendFromISR+0x6e>
 8004392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <xQueueGenericSendFromISR+0x72>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <xQueueGenericSendFromISR+0x74>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	61fb      	str	r3, [r7, #28]
}
 80043b6:	bf00      	nop
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043bc:	f002 f8e8 	bl	8006590 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043c0:	f3ef 8211 	mrs	r2, BASEPRI
 80043c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	61ba      	str	r2, [r7, #24]
 80043d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d302      	bcc.n	80043ee <xQueueGenericSendFromISR+0xc2>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d12c      	bne.n	8004448 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043fe:	f000 fa3a 	bl	8004876 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004402:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d112      	bne.n	8004432 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	2b00      	cmp	r3, #0
 8004412:	d016      	beq.n	8004442 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	3324      	adds	r3, #36	@ 0x24
 8004418:	4618      	mov	r0, r3
 800441a:	f001 f823 	bl	8005464 <xTaskRemoveFromEventList>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e007      	b.n	8004442 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004432:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004436:	3301      	adds	r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	b25a      	sxtb	r2, r3
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004442:	2301      	movs	r3, #1
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004446:	e001      	b.n	800444c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004448:	2300      	movs	r3, #0
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004456:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800445a:	4618      	mov	r0, r3
 800445c:	3738      	adds	r7, #56	@ 0x38
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	@ 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10b      	bne.n	8004496 <xQueueReceive+0x32>
	__asm volatile
 800447e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	623b      	str	r3, [r7, #32]
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	e7fd      	b.n	8004492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d103      	bne.n	80044a4 <xQueueReceive+0x40>
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <xQueueReceive+0x44>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <xQueueReceive+0x46>
 80044a8:	2300      	movs	r3, #0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <xQueueReceive+0x62>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	61fb      	str	r3, [r7, #28]
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	e7fd      	b.n	80044c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044c6:	f001 f9a7 	bl	8005818 <xTaskGetSchedulerState>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <xQueueReceive+0x72>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <xQueueReceive+0x76>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <xQueueReceive+0x78>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <xQueueReceive+0x94>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61bb      	str	r3, [r7, #24]
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044f8:	f001 ff88 	bl	800640c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01f      	beq.n	8004548 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800450c:	f000 fa1d 	bl	800494a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	1e5a      	subs	r2, r3, #1
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00f      	beq.n	8004540 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	3310      	adds	r3, #16
 8004524:	4618      	mov	r0, r3
 8004526:	f000 ff9d 	bl	8005464 <xTaskRemoveFromEventList>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004530:	4b3c      	ldr	r3, [pc, #240]	@ (8004624 <xQueueReceive+0x1c0>)
 8004532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004540:	f001 ff94 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8004544:	2301      	movs	r3, #1
 8004546:	e069      	b.n	800461c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800454e:	f001 ff8d 	bl	800646c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004552:	2300      	movs	r3, #0
 8004554:	e062      	b.n	800461c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800455c:	f107 0310 	add.w	r3, r7, #16
 8004560:	4618      	mov	r0, r3
 8004562:	f000 ffe3 	bl	800552c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004566:	2301      	movs	r3, #1
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800456a:	f001 ff7f 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800456e:	f000 fd49 	bl	8005004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004572:	f001 ff4b 	bl	800640c <vPortEnterCritical>
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800457c:	b25b      	sxtb	r3, r3
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d103      	bne.n	800458c <xQueueReceive+0x128>
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800458c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004592:	b25b      	sxtb	r3, r3
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d103      	bne.n	80045a2 <xQueueReceive+0x13e>
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045a2:	f001 ff63 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045a6:	1d3a      	adds	r2, r7, #4
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 ffd2 	bl	8005558 <xTaskCheckForTimeOut>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d123      	bne.n	8004602 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045bc:	f000 fa3d 	bl	8004a3a <prvIsQueueEmpty>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d017      	beq.n	80045f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c8:	3324      	adds	r3, #36	@ 0x24
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fef6 	bl	80053c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045d6:	f000 f9de 	bl	8004996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045da:	f000 fd21 	bl	8005020 <xTaskResumeAll>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d189      	bne.n	80044f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80045e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004624 <xQueueReceive+0x1c0>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	e780      	b.n	80044f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045f8:	f000 f9cd 	bl	8004996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045fc:	f000 fd10 	bl	8005020 <xTaskResumeAll>
 8004600:	e77a      	b.n	80044f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004604:	f000 f9c7 	bl	8004996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004608:	f000 fd0a 	bl	8005020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800460c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800460e:	f000 fa14 	bl	8004a3a <prvIsQueueEmpty>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	f43f af6f 	beq.w	80044f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800461a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800461c:	4618      	mov	r0, r3
 800461e:	3730      	adds	r7, #48	@ 0x30
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08e      	sub	sp, #56	@ 0x38
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004632:	2300      	movs	r3, #0
 8004634:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800463a:	2300      	movs	r3, #0
 800463c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	623b      	str	r3, [r7, #32]
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	e7fd      	b.n	8004658 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	61fb      	str	r3, [r7, #28]
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800467c:	f001 f8cc 	bl	8005818 <xTaskGetSchedulerState>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <xQueueSemaphoreTake+0x64>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <xQueueSemaphoreTake+0x68>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <xQueueSemaphoreTake+0x6a>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	61bb      	str	r3, [r7, #24]
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	e7fd      	b.n	80046aa <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ae:	f001 fead 	bl	800640c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d024      	beq.n	8004708 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	1e5a      	subs	r2, r3, #1
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80046ce:	f001 fa27 	bl	8005b20 <pvTaskIncrementMutexHeldCount>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00f      	beq.n	8004700 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e2:	3310      	adds	r3, #16
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 febd 	bl	8005464 <xTaskRemoveFromEventList>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046f0:	4b54      	ldr	r3, [pc, #336]	@ (8004844 <xQueueSemaphoreTake+0x21c>)
 80046f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004700:	f001 feb4 	bl	800646c <vPortExitCritical>
				return pdPASS;
 8004704:	2301      	movs	r3, #1
 8004706:	e098      	b.n	800483a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d112      	bne.n	8004734 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	617b      	str	r3, [r7, #20]
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800472c:	f001 fe9e 	bl	800646c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004730:	2300      	movs	r3, #0
 8004732:	e082      	b.n	800483a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800473a:	f107 030c 	add.w	r3, r7, #12
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fef4 	bl	800552c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004748:	f001 fe90 	bl	800646c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800474c:	f000 fc5a 	bl	8005004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004750:	f001 fe5c 	bl	800640c <vPortEnterCritical>
 8004754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004756:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800475a:	b25b      	sxtb	r3, r3
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d103      	bne.n	800476a <xQueueSemaphoreTake+0x142>
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800476a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004770:	b25b      	sxtb	r3, r3
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d103      	bne.n	8004780 <xQueueSemaphoreTake+0x158>
 8004778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004780:	f001 fe74 	bl	800646c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004784:	463a      	mov	r2, r7
 8004786:	f107 030c 	add.w	r3, r7, #12
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fee3 	bl	8005558 <xTaskCheckForTimeOut>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d132      	bne.n	80047fe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800479a:	f000 f94e 	bl	8004a3a <prvIsQueueEmpty>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d026      	beq.n	80047f2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d109      	bne.n	80047c0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80047ac:	f001 fe2e 	bl	800640c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f84d 	bl	8005854 <xTaskPriorityInherit>
 80047ba:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80047bc:	f001 fe56 	bl	800646c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	3324      	adds	r3, #36	@ 0x24
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fdf9 	bl	80053c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80047d0:	f000 f8e1 	bl	8004996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047d4:	f000 fc24 	bl	8005020 <xTaskResumeAll>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f47f af67 	bne.w	80046ae <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80047e0:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <xQueueSemaphoreTake+0x21c>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	e75d      	b.n	80046ae <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80047f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80047f4:	f000 f8cf 	bl	8004996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047f8:	f000 fc12 	bl	8005020 <xTaskResumeAll>
 80047fc:	e757      	b.n	80046ae <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80047fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004800:	f000 f8c9 	bl	8004996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004804:	f000 fc0c 	bl	8005020 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004808:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800480a:	f000 f916 	bl	8004a3a <prvIsQueueEmpty>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	f43f af4c 	beq.w	80046ae <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800481c:	f001 fdf6 	bl	800640c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004820:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004822:	f000 f811 	bl	8004848 <prvGetDisinheritPriorityAfterTimeout>
 8004826:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800482e:	4618      	mov	r0, r3
 8004830:	f001 f8ee 	bl	8005a10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004834:	f001 fe1a 	bl	800646c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800483a:	4618      	mov	r0, r3
 800483c:	3738      	adds	r7, #56	@ 0x38
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e001      	b.n	800486a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800486a:	68fb      	ldr	r3, [r7, #12]
	}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10d      	bne.n	80048b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d14d      	bne.n	8004938 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 f845 	bl	8005930 <xTaskPriorityDisinherit>
 80048a6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	e043      	b.n	8004938 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d119      	bne.n	80048ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6898      	ldr	r0, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	461a      	mov	r2, r3
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	f002 fb4c 	bl	8006f5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	441a      	add	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d32b      	bcc.n	8004938 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	e026      	b.n	8004938 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68d8      	ldr	r0, [r3, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f2:	461a      	mov	r2, r3
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	f002 fb32 	bl	8006f5e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	425b      	negs	r3, r3
 8004904:	441a      	add	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d207      	bcs.n	8004926 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	425b      	negs	r3, r3
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d105      	bne.n	8004938 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	3b01      	subs	r3, #1
 8004936:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004940:	697b      	ldr	r3, [r7, #20]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d018      	beq.n	800498e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	429a      	cmp	r2, r3
 8004974:	d303      	bcc.n	800497e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68d9      	ldr	r1, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	461a      	mov	r2, r3
 8004988:	6838      	ldr	r0, [r7, #0]
 800498a:	f002 fae8 	bl	8006f5e <memcpy>
	}
}
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800499e:	f001 fd35 	bl	800640c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049aa:	e011      	b.n	80049d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d012      	beq.n	80049da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3324      	adds	r3, #36	@ 0x24
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fd53 	bl	8005464 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049c4:	f000 fe2c 	bl	8005620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dce9      	bgt.n	80049ac <prvUnlockQueue+0x16>
 80049d8:	e000      	b.n	80049dc <prvUnlockQueue+0x46>
					break;
 80049da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	22ff      	movs	r2, #255	@ 0xff
 80049e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80049e4:	f001 fd42 	bl	800646c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049e8:	f001 fd10 	bl	800640c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f4:	e011      	b.n	8004a1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d012      	beq.n	8004a24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3310      	adds	r3, #16
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fd2e 	bl	8005464 <xTaskRemoveFromEventList>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a0e:	f000 fe07 	bl	8005620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a12:	7bbb      	ldrb	r3, [r7, #14]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	dce9      	bgt.n	80049f6 <prvUnlockQueue+0x60>
 8004a22:	e000      	b.n	8004a26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	22ff      	movs	r2, #255	@ 0xff
 8004a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a2e:	f001 fd1d 	bl	800646c <vPortExitCritical>
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a42:	f001 fce3 	bl	800640c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	e001      	b.n	8004a58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a58:	f001 fd08 	bl	800646c <vPortExitCritical>

	return xReturn;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a6e:	f001 fccd 	bl	800640c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d102      	bne.n	8004a84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e001      	b.n	8004a88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a88:	f001 fcf0 	bl	800646c <vPortExitCritical>

	return xReturn;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e014      	b.n	8004ad2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8004ae4 <vQueueAddToRegistry+0x4c>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10b      	bne.n	8004acc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ab4:	490b      	ldr	r1, [pc, #44]	@ (8004ae4 <vQueueAddToRegistry+0x4c>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004abe:	4a09      	ldr	r2, [pc, #36]	@ (8004ae4 <vQueueAddToRegistry+0x4c>)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004aca:	e006      	b.n	8004ada <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b07      	cmp	r3, #7
 8004ad6:	d9e7      	bls.n	8004aa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	20000974 	.word	0x20000974

08004ae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004af8:	f001 fc88 	bl	800640c <vPortEnterCritical>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b02:	b25b      	sxtb	r3, r3
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d103      	bne.n	8004b12 <vQueueWaitForMessageRestricted+0x2a>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d103      	bne.n	8004b28 <vQueueWaitForMessageRestricted+0x40>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b28:	f001 fca0 	bl	800646c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3324      	adds	r3, #36	@ 0x24
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fc65 	bl	800540c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b42:	6978      	ldr	r0, [r7, #20]
 8004b44:	f7ff ff27 	bl	8004996 <prvUnlockQueue>
	}
 8004b48:	bf00      	nop
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08e      	sub	sp, #56	@ 0x38
 8004b54:	af04      	add	r7, sp, #16
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10b      	bne.n	8004b7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	623b      	str	r3, [r7, #32]
}
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	e7fd      	b.n	8004b78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	61fb      	str	r3, [r7, #28]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b9a:	23a8      	movs	r3, #168	@ 0xa8
 8004b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2ba8      	cmp	r3, #168	@ 0xa8
 8004ba2:	d00b      	beq.n	8004bbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61bb      	str	r3, [r7, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01e      	beq.n	8004c00 <xTaskCreateStatic+0xb0>
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01b      	beq.n	8004c00 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bd0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9303      	str	r3, [sp, #12]
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	9302      	str	r3, [sp, #8]
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f850 	bl	8004c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bfa:	f000 f8ed 	bl	8004dd8 <prvAddNewTaskToReadyList>
 8004bfe:	e001      	b.n	8004c04 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c04:	697b      	ldr	r3, [r7, #20]
	}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3728      	adds	r7, #40	@ 0x28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b08c      	sub	sp, #48	@ 0x30
 8004c12:	af04      	add	r7, sp, #16
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 fcf4 	bl	8006610 <pvPortMalloc>
 8004c28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c30:	20a8      	movs	r0, #168	@ 0xa8
 8004c32:	f001 fced 	bl	8006610 <pvPortMalloc>
 8004c36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c44:	e005      	b.n	8004c52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c46:	6978      	ldr	r0, [r7, #20]
 8004c48:	f001 fdaa 	bl	80067a0 <vPortFree>
 8004c4c:	e001      	b.n	8004c52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d017      	beq.n	8004c88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	2300      	movs	r3, #0
 8004c64:	9303      	str	r3, [sp, #12]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	9302      	str	r3, [sp, #8]
 8004c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f80e 	bl	8004c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c7c:	69f8      	ldr	r0, [r7, #28]
 8004c7e:	f000 f8ab 	bl	8004dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c82:	2301      	movs	r3, #1
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	e002      	b.n	8004c8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c88:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
	}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	461a      	mov	r2, r3
 8004cb0:	21a5      	movs	r1, #165	@ 0xa5
 8004cb2:	f002 f883 	bl	8006dbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	617b      	str	r3, [r7, #20]
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e012      	b.n	8004d1e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	7819      	ldrb	r1, [r3, #0]
 8004d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	3334      	adds	r3, #52	@ 0x34
 8004d08:	460a      	mov	r2, r1
 8004d0a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d006      	beq.n	8004d26 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	2b0f      	cmp	r3, #15
 8004d22:	d9e9      	bls.n	8004cf8 <prvInitialiseNewTask+0x60>
 8004d24:	e000      	b.n	8004d28 <prvInitialiseNewTask+0x90>
		{
			break;
 8004d26:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	2b37      	cmp	r3, #55	@ 0x37
 8004d34:	d901      	bls.n	8004d3a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d36:	2337      	movs	r3, #55	@ 0x37
 8004d38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	2200      	movs	r2, #0
 8004d4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe ff56 	bl	8003c02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	3318      	adds	r3, #24
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe ff51 	bl	8003c02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	3354      	adds	r3, #84	@ 0x54
 8004d8a:	224c      	movs	r2, #76	@ 0x4c
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f002 f814 	bl	8006dbc <memset>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	4a0d      	ldr	r2, [pc, #52]	@ (8004dcc <prvInitialiseNewTask+0x134>)
 8004d98:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <prvInitialiseNewTask+0x138>)
 8004d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <prvInitialiseNewTask+0x13c>)
 8004da4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	68f9      	ldr	r1, [r7, #12]
 8004daa:	69b8      	ldr	r0, [r7, #24]
 8004dac:	f001 fa40 	bl	8006230 <pxPortInitialiseStack>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d002      	beq.n	8004dc2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc2:	bf00      	nop
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20001c00 	.word	0x20001c00
 8004dd0:	20001c68 	.word	0x20001c68
 8004dd4:	20001cd0 	.word	0x20001cd0

08004dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004de0:	f001 fb14 	bl	800640c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004de4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <prvAddNewTaskToReadyList+0xc4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4a2c      	ldr	r2, [pc, #176]	@ (8004e9c <prvAddNewTaskToReadyList+0xc4>)
 8004dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dee:	4b2c      	ldr	r3, [pc, #176]	@ (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004df6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dfc:	4b27      	ldr	r3, [pc, #156]	@ (8004e9c <prvAddNewTaskToReadyList+0xc4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d110      	bne.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e04:	f000 fc32 	bl	800566c <prvInitialiseTaskLists>
 8004e08:	e00d      	b.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ea4 <prvAddNewTaskToReadyList+0xcc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e12:	4b23      	ldr	r3, [pc, #140]	@ (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d802      	bhi.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e20:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e26:	4b20      	ldr	r3, [pc, #128]	@ (8004ea8 <prvAddNewTaskToReadyList+0xd0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea8 <prvAddNewTaskToReadyList+0xd0>)
 8004e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <prvAddNewTaskToReadyList+0xd0>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eac <prvAddNewTaskToReadyList+0xd4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d903      	bls.n	8004e4c <prvAddNewTaskToReadyList+0x74>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	4a18      	ldr	r2, [pc, #96]	@ (8004eac <prvAddNewTaskToReadyList+0xd4>)
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4a15      	ldr	r2, [pc, #84]	@ (8004eb0 <prvAddNewTaskToReadyList+0xd8>)
 8004e5a:	441a      	add	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7fe fed9 	bl	8003c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e68:	f001 fb00 	bl	800646c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <prvAddNewTaskToReadyList+0xcc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d207      	bcs.n	8004e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e82:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb4 <prvAddNewTaskToReadyList+0xdc>)
 8004e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000e88 	.word	0x20000e88
 8004ea0:	200009b4 	.word	0x200009b4
 8004ea4:	20000e94 	.word	0x20000e94
 8004ea8:	20000ea4 	.word	0x20000ea4
 8004eac:	20000e90 	.word	0x20000e90
 8004eb0:	200009b8 	.word	0x200009b8
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eca:	4b14      	ldr	r3, [pc, #80]	@ (8004f1c <vTaskDelay+0x64>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <vTaskDelay+0x32>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	60bb      	str	r3, [r7, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004eea:	f000 f88b 	bl	8005004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eee:	2100      	movs	r1, #0
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fe29 	bl	8005b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ef6:	f000 f893 	bl	8005020 <xTaskResumeAll>
 8004efa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f02:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <vTaskDelay+0x68>)
 8004f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000eb0 	.word	0x20000eb0
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	@ 0x28
 8004f28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f32:	463a      	mov	r2, r7
 8004f34:	1d39      	adds	r1, r7, #4
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fe10 	bl	8003b60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	9202      	str	r2, [sp, #8]
 8004f48:	9301      	str	r3, [sp, #4]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	460a      	mov	r2, r1
 8004f52:	4924      	ldr	r1, [pc, #144]	@ (8004fe4 <vTaskStartScheduler+0xc0>)
 8004f54:	4824      	ldr	r0, [pc, #144]	@ (8004fe8 <vTaskStartScheduler+0xc4>)
 8004f56:	f7ff fdfb 	bl	8004b50 <xTaskCreateStatic>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4a23      	ldr	r2, [pc, #140]	@ (8004fec <vTaskStartScheduler+0xc8>)
 8004f5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f60:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <vTaskStartScheduler+0xc8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e001      	b.n	8004f72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d102      	bne.n	8004f7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f78:	f000 fe3a 	bl	8005bf0 <xTimerCreateTimerTask>
 8004f7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d11b      	bne.n	8004fbc <vTaskStartScheduler+0x98>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	613b      	str	r3, [r7, #16]
}
 8004f96:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f98:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <vTaskStartScheduler+0xcc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3354      	adds	r3, #84	@ 0x54
 8004f9e:	4a15      	ldr	r2, [pc, #84]	@ (8004ff4 <vTaskStartScheduler+0xd0>)
 8004fa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fa2:	4b15      	ldr	r3, [pc, #84]	@ (8004ff8 <vTaskStartScheduler+0xd4>)
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004faa:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <vTaskStartScheduler+0xd8>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004fb0:	4b13      	ldr	r3, [pc, #76]	@ (8005000 <vTaskStartScheduler+0xdc>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fb6:	f001 f9b7 	bl	8006328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fba:	e00f      	b.n	8004fdc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d10b      	bne.n	8004fdc <vTaskStartScheduler+0xb8>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60fb      	str	r3, [r7, #12]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <vTaskStartScheduler+0xb4>
}
 8004fdc:	bf00      	nop
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	0800743c 	.word	0x0800743c
 8004fe8:	08005639 	.word	0x08005639
 8004fec:	20000eac 	.word	0x20000eac
 8004ff0:	200009b4 	.word	0x200009b4
 8004ff4:	2000001c 	.word	0x2000001c
 8004ff8:	20000ea8 	.word	0x20000ea8
 8004ffc:	20000e94 	.word	0x20000e94
 8005000:	20000e8c 	.word	0x20000e8c

08005004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005008:	4b04      	ldr	r3, [pc, #16]	@ (800501c <vTaskSuspendAll+0x18>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	4a03      	ldr	r2, [pc, #12]	@ (800501c <vTaskSuspendAll+0x18>)
 8005010:	6013      	str	r3, [r2, #0]
}
 8005012:	bf00      	nop
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000eb0 	.word	0x20000eb0

08005020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800502e:	4b42      	ldr	r3, [pc, #264]	@ (8005138 <xTaskResumeAll+0x118>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <xTaskResumeAll+0x2e>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	603b      	str	r3, [r7, #0]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800504e:	f001 f9dd 	bl	800640c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005052:	4b39      	ldr	r3, [pc, #228]	@ (8005138 <xTaskResumeAll+0x118>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3b01      	subs	r3, #1
 8005058:	4a37      	ldr	r2, [pc, #220]	@ (8005138 <xTaskResumeAll+0x118>)
 800505a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800505c:	4b36      	ldr	r3, [pc, #216]	@ (8005138 <xTaskResumeAll+0x118>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d162      	bne.n	800512a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005064:	4b35      	ldr	r3, [pc, #212]	@ (800513c <xTaskResumeAll+0x11c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05e      	beq.n	800512a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800506c:	e02f      	b.n	80050ce <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800506e:	4b34      	ldr	r3, [pc, #208]	@ (8005140 <xTaskResumeAll+0x120>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3318      	adds	r3, #24
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fe28 	bl	8003cd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3304      	adds	r3, #4
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe fe23 	bl	8003cd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508e:	4b2d      	ldr	r3, [pc, #180]	@ (8005144 <xTaskResumeAll+0x124>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d903      	bls.n	800509e <xTaskResumeAll+0x7e>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a2a      	ldr	r2, [pc, #168]	@ (8005144 <xTaskResumeAll+0x124>)
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4a27      	ldr	r2, [pc, #156]	@ (8005148 <xTaskResumeAll+0x128>)
 80050ac:	441a      	add	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f7fe fdb0 	bl	8003c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050be:	4b23      	ldr	r3, [pc, #140]	@ (800514c <xTaskResumeAll+0x12c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d302      	bcc.n	80050ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80050c8:	4b21      	ldr	r3, [pc, #132]	@ (8005150 <xTaskResumeAll+0x130>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005140 <xTaskResumeAll+0x120>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1cb      	bne.n	800506e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050dc:	f000 fb6a 	bl	80057b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005154 <xTaskResumeAll+0x134>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050ec:	f000 f844 	bl	8005178 <xTaskIncrementTick>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050f6:	4b16      	ldr	r3, [pc, #88]	@ (8005150 <xTaskResumeAll+0x130>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3b01      	subs	r3, #1
 8005100:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f1      	bne.n	80050ec <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005108:	4b12      	ldr	r3, [pc, #72]	@ (8005154 <xTaskResumeAll+0x134>)
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800510e:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <xTaskResumeAll+0x130>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800511a:	4b0f      	ldr	r3, [pc, #60]	@ (8005158 <xTaskResumeAll+0x138>)
 800511c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800512a:	f001 f99f 	bl	800646c <vPortExitCritical>

	return xAlreadyYielded;
 800512e:	68bb      	ldr	r3, [r7, #8]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000eb0 	.word	0x20000eb0
 800513c:	20000e88 	.word	0x20000e88
 8005140:	20000e48 	.word	0x20000e48
 8005144:	20000e90 	.word	0x20000e90
 8005148:	200009b8 	.word	0x200009b8
 800514c:	200009b4 	.word	0x200009b4
 8005150:	20000e9c 	.word	0x20000e9c
 8005154:	20000e98 	.word	0x20000e98
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005162:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <xTaskGetTickCount+0x18>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005168:	687b      	ldr	r3, [r7, #4]
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr
 8005174:	20000e8c 	.word	0x20000e8c

08005178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005182:	4b52      	ldr	r3, [pc, #328]	@ (80052cc <xTaskIncrementTick+0x154>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 808f 	bne.w	80052aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800518c:	4b50      	ldr	r3, [pc, #320]	@ (80052d0 <xTaskIncrementTick+0x158>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005194:	4a4e      	ldr	r2, [pc, #312]	@ (80052d0 <xTaskIncrementTick+0x158>)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d121      	bne.n	80051e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80051a0:	4b4c      	ldr	r3, [pc, #304]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	603b      	str	r3, [r7, #0]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <xTaskIncrementTick+0x46>
 80051c2:	4b44      	ldr	r3, [pc, #272]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	4b43      	ldr	r3, [pc, #268]	@ (80052d8 <xTaskIncrementTick+0x160>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a41      	ldr	r2, [pc, #260]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4a41      	ldr	r2, [pc, #260]	@ (80052d8 <xTaskIncrementTick+0x160>)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b41      	ldr	r3, [pc, #260]	@ (80052dc <xTaskIncrementTick+0x164>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	4a3f      	ldr	r2, [pc, #252]	@ (80052dc <xTaskIncrementTick+0x164>)
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	f000 fae8 	bl	80057b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051e4:	4b3e      	ldr	r3, [pc, #248]	@ (80052e0 <xTaskIncrementTick+0x168>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d34e      	bcc.n	800528c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ee:	4b39      	ldr	r3, [pc, #228]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <xTaskIncrementTick+0x84>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <xTaskIncrementTick+0x86>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005202:	4b37      	ldr	r3, [pc, #220]	@ (80052e0 <xTaskIncrementTick+0x168>)
 8005204:	f04f 32ff 	mov.w	r2, #4294967295
 8005208:	601a      	str	r2, [r3, #0]
					break;
 800520a:	e03f      	b.n	800528c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800520c:	4b31      	ldr	r3, [pc, #196]	@ (80052d4 <xTaskIncrementTick+0x15c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d203      	bcs.n	800522c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005224:	4a2e      	ldr	r2, [pc, #184]	@ (80052e0 <xTaskIncrementTick+0x168>)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6013      	str	r3, [r2, #0]
						break;
 800522a:	e02f      	b.n	800528c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	3304      	adds	r3, #4
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fd4d 	bl	8003cd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	3318      	adds	r3, #24
 8005242:	4618      	mov	r0, r3
 8005244:	f7fe fd44 	bl	8003cd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <xTaskIncrementTick+0x16c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d903      	bls.n	800525c <xTaskIncrementTick+0xe4>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	4a22      	ldr	r2, [pc, #136]	@ (80052e4 <xTaskIncrementTick+0x16c>)
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4a1f      	ldr	r2, [pc, #124]	@ (80052e8 <xTaskIncrementTick+0x170>)
 800526a:	441a      	add	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7fe fcd1 	bl	8003c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527c:	4b1b      	ldr	r3, [pc, #108]	@ (80052ec <xTaskIncrementTick+0x174>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	429a      	cmp	r2, r3
 8005284:	d3b3      	bcc.n	80051ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005286:	2301      	movs	r3, #1
 8005288:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800528a:	e7b0      	b.n	80051ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800528c:	4b17      	ldr	r3, [pc, #92]	@ (80052ec <xTaskIncrementTick+0x174>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005292:	4915      	ldr	r1, [pc, #84]	@ (80052e8 <xTaskIncrementTick+0x170>)
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d907      	bls.n	80052b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80052a4:	2301      	movs	r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e004      	b.n	80052b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052aa:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <xTaskIncrementTick+0x178>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	4a0f      	ldr	r2, [pc, #60]	@ (80052f0 <xTaskIncrementTick+0x178>)
 80052b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052b4:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <xTaskIncrementTick+0x17c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052c0:	697b      	ldr	r3, [r7, #20]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000eb0 	.word	0x20000eb0
 80052d0:	20000e8c 	.word	0x20000e8c
 80052d4:	20000e40 	.word	0x20000e40
 80052d8:	20000e44 	.word	0x20000e44
 80052dc:	20000ea0 	.word	0x20000ea0
 80052e0:	20000ea8 	.word	0x20000ea8
 80052e4:	20000e90 	.word	0x20000e90
 80052e8:	200009b8 	.word	0x200009b8
 80052ec:	200009b4 	.word	0x200009b4
 80052f0:	20000e98 	.word	0x20000e98
 80052f4:	20000e9c 	.word	0x20000e9c

080052f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052fe:	4b2a      	ldr	r3, [pc, #168]	@ (80053a8 <vTaskSwitchContext+0xb0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005306:	4b29      	ldr	r3, [pc, #164]	@ (80053ac <vTaskSwitchContext+0xb4>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800530c:	e047      	b.n	800539e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800530e:	4b27      	ldr	r3, [pc, #156]	@ (80053ac <vTaskSwitchContext+0xb4>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005314:	4b26      	ldr	r3, [pc, #152]	@ (80053b0 <vTaskSwitchContext+0xb8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e011      	b.n	8005340 <vTaskSwitchContext+0x48>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <vTaskSwitchContext+0x42>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	607b      	str	r3, [r7, #4]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <vTaskSwitchContext+0x3e>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3b01      	subs	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	491c      	ldr	r1, [pc, #112]	@ (80053b4 <vTaskSwitchContext+0xbc>)
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0e3      	beq.n	800531c <vTaskSwitchContext+0x24>
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a15      	ldr	r2, [pc, #84]	@ (80053b4 <vTaskSwitchContext+0xbc>)
 8005360:	4413      	add	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	3308      	adds	r3, #8
 8005376:	429a      	cmp	r2, r3
 8005378:	d104      	bne.n	8005384 <vTaskSwitchContext+0x8c>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4a0b      	ldr	r2, [pc, #44]	@ (80053b8 <vTaskSwitchContext+0xc0>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4a08      	ldr	r2, [pc, #32]	@ (80053b0 <vTaskSwitchContext+0xb8>)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005394:	4b08      	ldr	r3, [pc, #32]	@ (80053b8 <vTaskSwitchContext+0xc0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3354      	adds	r3, #84	@ 0x54
 800539a:	4a08      	ldr	r2, [pc, #32]	@ (80053bc <vTaskSwitchContext+0xc4>)
 800539c:	6013      	str	r3, [r2, #0]
}
 800539e:	bf00      	nop
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	20000eb0 	.word	0x20000eb0
 80053ac:	20000e9c 	.word	0x20000e9c
 80053b0:	20000e90 	.word	0x20000e90
 80053b4:	200009b8 	.word	0x200009b8
 80053b8:	200009b4 	.word	0x200009b4
 80053bc:	2000001c 	.word	0x2000001c

080053c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053e8:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <vTaskPlaceOnEventList+0x48>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3318      	adds	r3, #24
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fe fc35 	bl	8003c60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053f6:	2101      	movs	r1, #1
 80053f8:	6838      	ldr	r0, [r7, #0]
 80053fa:	f000 fba5 	bl	8005b48 <prvAddCurrentTaskToDelayedList>
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	200009b4 	.word	0x200009b4

0800540c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005436:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <vTaskPlaceOnEventListRestricted+0x54>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3318      	adds	r3, #24
 800543c:	4619      	mov	r1, r3
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7fe fbeb 	bl	8003c1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800544a:	f04f 33ff 	mov.w	r3, #4294967295
 800544e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	68b8      	ldr	r0, [r7, #8]
 8005454:	f000 fb78 	bl	8005b48 <prvAddCurrentTaskToDelayedList>
	}
 8005458:	bf00      	nop
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200009b4 	.word	0x200009b4

08005464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	60fb      	str	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	e7fd      	b.n	800548e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3318      	adds	r3, #24
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fc1a 	bl	8003cd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549c:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <xTaskRemoveFromEventList+0xb0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11d      	bne.n	80054e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fc11 	bl	8003cd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b2:	4b19      	ldr	r3, [pc, #100]	@ (8005518 <xTaskRemoveFromEventList+0xb4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d903      	bls.n	80054c2 <xTaskRemoveFromEventList+0x5e>
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	4a16      	ldr	r2, [pc, #88]	@ (8005518 <xTaskRemoveFromEventList+0xb4>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a13      	ldr	r2, [pc, #76]	@ (800551c <xTaskRemoveFromEventList+0xb8>)
 80054d0:	441a      	add	r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fe fb9e 	bl	8003c1a <vListInsertEnd>
 80054de:	e005      	b.n	80054ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	3318      	adds	r3, #24
 80054e4:	4619      	mov	r1, r3
 80054e6:	480e      	ldr	r0, [pc, #56]	@ (8005520 <xTaskRemoveFromEventList+0xbc>)
 80054e8:	f7fe fb97 	bl	8003c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005524 <xTaskRemoveFromEventList+0xc0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d905      	bls.n	8005506 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054fa:	2301      	movs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <xTaskRemoveFromEventList+0xc4>)
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e001      	b.n	800550a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800550a:	697b      	ldr	r3, [r7, #20]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000eb0 	.word	0x20000eb0
 8005518:	20000e90 	.word	0x20000e90
 800551c:	200009b8 	.word	0x200009b8
 8005520:	20000e48 	.word	0x20000e48
 8005524:	200009b4 	.word	0x200009b4
 8005528:	20000e9c 	.word	0x20000e9c

0800552c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <vTaskInternalSetTimeOutState+0x24>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <vTaskInternalSetTimeOutState+0x28>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	605a      	str	r2, [r3, #4]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000ea0 	.word	0x20000ea0
 8005554:	20000e8c 	.word	0x20000e8c

08005558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	613b      	str	r3, [r7, #16]
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	e7fd      	b.n	800557c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800559e:	f000 ff35 	bl	800640c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <xTaskCheckForTimeOut+0xc0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d102      	bne.n	80055c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	e023      	b.n	800560a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b15      	ldr	r3, [pc, #84]	@ (800561c <xTaskCheckForTimeOut+0xc4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d007      	beq.n	80055de <xTaskCheckForTimeOut+0x86>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e015      	b.n	800560a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d20b      	bcs.n	8005600 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff99 	bl	800552c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e004      	b.n	800560a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800560a:	f000 ff2f 	bl	800646c <vPortExitCritical>

	return xReturn;
 800560e:	69fb      	ldr	r3, [r7, #28]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000e8c 	.word	0x20000e8c
 800561c:	20000ea0 	.word	0x20000ea0

08005620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005624:	4b03      	ldr	r3, [pc, #12]	@ (8005634 <vTaskMissedYield+0x14>)
 8005626:	2201      	movs	r2, #1
 8005628:	601a      	str	r2, [r3, #0]
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000e9c 	.word	0x20000e9c

08005638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005640:	f000 f854 	bl	80056ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005644:	4b07      	ldr	r3, [pc, #28]	@ (8005664 <prvIdleTask+0x2c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d907      	bls.n	800565c <prvIdleTask+0x24>
			{
				taskYIELD();
 800564c:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <prvIdleTask+0x30>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800565c:	f7fa fe6e 	bl	800033c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8005660:	e7ee      	b.n	8005640 <prvIdleTask+0x8>
 8005662:	bf00      	nop
 8005664:	200009b8 	.word	0x200009b8
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	e00c      	b.n	8005692 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4a12      	ldr	r2, [pc, #72]	@ (80056cc <prvInitialiseTaskLists+0x60>)
 8005684:	4413      	add	r3, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fa9c 	bl	8003bc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3301      	adds	r3, #1
 8005690:	607b      	str	r3, [r7, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b37      	cmp	r3, #55	@ 0x37
 8005696:	d9ef      	bls.n	8005678 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005698:	480d      	ldr	r0, [pc, #52]	@ (80056d0 <prvInitialiseTaskLists+0x64>)
 800569a:	f7fe fa93 	bl	8003bc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800569e:	480d      	ldr	r0, [pc, #52]	@ (80056d4 <prvInitialiseTaskLists+0x68>)
 80056a0:	f7fe fa90 	bl	8003bc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056a4:	480c      	ldr	r0, [pc, #48]	@ (80056d8 <prvInitialiseTaskLists+0x6c>)
 80056a6:	f7fe fa8d 	bl	8003bc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056aa:	480c      	ldr	r0, [pc, #48]	@ (80056dc <prvInitialiseTaskLists+0x70>)
 80056ac:	f7fe fa8a 	bl	8003bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056b0:	480b      	ldr	r0, [pc, #44]	@ (80056e0 <prvInitialiseTaskLists+0x74>)
 80056b2:	f7fe fa87 	bl	8003bc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056b6:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <prvInitialiseTaskLists+0x78>)
 80056b8:	4a05      	ldr	r2, [pc, #20]	@ (80056d0 <prvInitialiseTaskLists+0x64>)
 80056ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056bc:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <prvInitialiseTaskLists+0x7c>)
 80056be:	4a05      	ldr	r2, [pc, #20]	@ (80056d4 <prvInitialiseTaskLists+0x68>)
 80056c0:	601a      	str	r2, [r3, #0]
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	200009b8 	.word	0x200009b8
 80056d0:	20000e18 	.word	0x20000e18
 80056d4:	20000e2c 	.word	0x20000e2c
 80056d8:	20000e48 	.word	0x20000e48
 80056dc:	20000e5c 	.word	0x20000e5c
 80056e0:	20000e74 	.word	0x20000e74
 80056e4:	20000e40 	.word	0x20000e40
 80056e8:	20000e44 	.word	0x20000e44

080056ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056f2:	e019      	b.n	8005728 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056f4:	f000 fe8a 	bl	800640c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80056f8:	4b10      	ldr	r3, [pc, #64]	@ (800573c <prvCheckTasksWaitingTermination+0x50>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe fae3 	bl	8003cd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800570a:	4b0d      	ldr	r3, [pc, #52]	@ (8005740 <prvCheckTasksWaitingTermination+0x54>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3b01      	subs	r3, #1
 8005710:	4a0b      	ldr	r2, [pc, #44]	@ (8005740 <prvCheckTasksWaitingTermination+0x54>)
 8005712:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005714:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <prvCheckTasksWaitingTermination+0x58>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <prvCheckTasksWaitingTermination+0x58>)
 800571c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800571e:	f000 fea5 	bl	800646c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f810 	bl	8005748 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005728:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <prvCheckTasksWaitingTermination+0x58>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e1      	bne.n	80056f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000e5c 	.word	0x20000e5c
 8005740:	20000e88 	.word	0x20000e88
 8005744:	20000e70 	.word	0x20000e70

08005748 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3354      	adds	r3, #84	@ 0x54
 8005754:	4618      	mov	r0, r3
 8005756:	f001 fb49 	bl	8006dec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005760:	2b00      	cmp	r3, #0
 8005762:	d108      	bne.n	8005776 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005768:	4618      	mov	r0, r3
 800576a:	f001 f819 	bl	80067a0 <vPortFree>
				vPortFree( pxTCB );
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f001 f816 	bl	80067a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005774:	e019      	b.n	80057aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800577c:	2b01      	cmp	r3, #1
 800577e:	d103      	bne.n	8005788 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 f80d 	bl	80067a0 <vPortFree>
	}
 8005786:	e010      	b.n	80057aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800578e:	2b02      	cmp	r3, #2
 8005790:	d00b      	beq.n	80057aa <prvDeleteTCB+0x62>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	60fb      	str	r3, [r7, #12]
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	e7fd      	b.n	80057a6 <prvDeleteTCB+0x5e>
	}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ba:	4b0e      	ldr	r3, [pc, #56]	@ (80057f4 <prvResetNextTaskUnblockTime+0x40>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <prvResetNextTaskUnblockTime+0x14>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <prvResetNextTaskUnblockTime+0x16>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057ce:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <prvResetNextTaskUnblockTime+0x44>)
 80057d0:	f04f 32ff 	mov.w	r2, #4294967295
 80057d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057d6:	e008      	b.n	80057ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057d8:	4b06      	ldr	r3, [pc, #24]	@ (80057f4 <prvResetNextTaskUnblockTime+0x40>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4a04      	ldr	r2, [pc, #16]	@ (80057f8 <prvResetNextTaskUnblockTime+0x44>)
 80057e8:	6013      	str	r3, [r2, #0]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr
 80057f4:	20000e40 	.word	0x20000e40
 80057f8:	20000ea8 	.word	0x20000ea8

080057fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005802:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <xTaskGetCurrentTaskHandle+0x18>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005808:	687b      	ldr	r3, [r7, #4]
	}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	200009b4 	.word	0x200009b4

08005818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <xTaskGetSchedulerState+0x34>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005826:	2301      	movs	r3, #1
 8005828:	607b      	str	r3, [r7, #4]
 800582a:	e008      	b.n	800583e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582c:	4b08      	ldr	r3, [pc, #32]	@ (8005850 <xTaskGetSchedulerState+0x38>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005834:	2302      	movs	r3, #2
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e001      	b.n	800583e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800583e:	687b      	ldr	r3, [r7, #4]
	}
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	20000e94 	.word	0x20000e94
 8005850:	20000eb0 	.word	0x20000eb0

08005854 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d056      	beq.n	8005918 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586e:	4b2d      	ldr	r3, [pc, #180]	@ (8005924 <xTaskPriorityInherit+0xd0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d246      	bcs.n	8005906 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	db06      	blt.n	800588e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005880:	4b28      	ldr	r3, [pc, #160]	@ (8005924 <xTaskPriorityInherit+0xd0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005886:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6959      	ldr	r1, [r3, #20]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4a22      	ldr	r2, [pc, #136]	@ (8005928 <xTaskPriorityInherit+0xd4>)
 80058a0:	4413      	add	r3, r2
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d101      	bne.n	80058aa <xTaskPriorityInherit+0x56>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <xTaskPriorityInherit+0x58>
 80058aa:	2300      	movs	r3, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d022      	beq.n	80058f6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fa0b 	bl	8003cd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005924 <xTaskPriorityInherit+0xd0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c8:	4b18      	ldr	r3, [pc, #96]	@ (800592c <xTaskPriorityInherit+0xd8>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d903      	bls.n	80058d8 <xTaskPriorityInherit+0x84>
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a15      	ldr	r2, [pc, #84]	@ (800592c <xTaskPriorityInherit+0xd8>)
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4a10      	ldr	r2, [pc, #64]	@ (8005928 <xTaskPriorityInherit+0xd4>)
 80058e6:	441a      	add	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7fe f993 	bl	8003c1a <vListInsertEnd>
 80058f4:	e004      	b.n	8005900 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <xTaskPriorityInherit+0xd0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005900:	2301      	movs	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e008      	b.n	8005918 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <xTaskPriorityInherit+0xd0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	429a      	cmp	r2, r3
 8005912:	d201      	bcs.n	8005918 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005918:	68fb      	ldr	r3, [r7, #12]
	}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	200009b4 	.word	0x200009b4
 8005928:	200009b8 	.word	0x200009b8
 800592c:	20000e90 	.word	0x20000e90

08005930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d058      	beq.n	80059f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005946:	4b2f      	ldr	r3, [pc, #188]	@ (8005a04 <xTaskPriorityDisinherit+0xd4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d00b      	beq.n	8005968 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60fb      	str	r3, [r7, #12]
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	60bb      	str	r3, [r7, #8]
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598c:	1e5a      	subs	r2, r3, #1
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599a:	429a      	cmp	r2, r3
 800599c:	d02c      	beq.n	80059f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d128      	bne.n	80059f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe f990 	bl	8003cd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a08 <xTaskPriorityDisinherit+0xd8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d903      	bls.n	80059d8 <xTaskPriorityDisinherit+0xa8>
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005a08 <xTaskPriorityDisinherit+0xd8>)
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4a09      	ldr	r2, [pc, #36]	@ (8005a0c <xTaskPriorityDisinherit+0xdc>)
 80059e6:	441a      	add	r2, r3
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7fe f913 	bl	8003c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059f8:	697b      	ldr	r3, [r7, #20]
	}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200009b4 	.word	0x200009b4
 8005a08:	20000e90 	.word	0x20000e90
 8005a0c:	200009b8 	.word	0x200009b8

08005a10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d071      	beq.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	60fb      	str	r3, [r7, #12]
}
 8005a42:	bf00      	nop
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d902      	bls.n	8005a58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	61fb      	str	r3, [r7, #28]
 8005a56:	e002      	b.n	8005a5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d051      	beq.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d14c      	bne.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a72:	4b28      	ldr	r3, [pc, #160]	@ (8005b14 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10b      	bne.n	8005a94 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60bb      	str	r3, [r7, #8]
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	e7fd      	b.n	8005a90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	db04      	blt.n	8005ab2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4a15      	ldr	r2, [pc, #84]	@ (8005b18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005ac2:	4413      	add	r3, r2
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	d101      	bne.n	8005acc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d01c      	beq.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe f8fa 	bl	8003cd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b1c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d903      	bls.n	8005af0 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	4a0b      	ldr	r2, [pc, #44]	@ (8005b1c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4a06      	ldr	r2, [pc, #24]	@ (8005b18 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005afe:	441a      	add	r2, r3
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7fe f887 	bl	8003c1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b0c:	bf00      	nop
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	200009b4 	.word	0x200009b4
 8005b18:	200009b8 	.word	0x200009b8
 8005b1c:	20000e90 	.word	0x20000e90

08005b20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b24:	4b07      	ldr	r3, [pc, #28]	@ (8005b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b2c:	4b05      	ldr	r3, [pc, #20]	@ (8005b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b32:	3201      	adds	r2, #1
 8005b34:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005b36:	4b03      	ldr	r3, [pc, #12]	@ (8005b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b38:	681b      	ldr	r3, [r3, #0]
	}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	200009b4 	.word	0x200009b4

08005b48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b52:	4b21      	ldr	r3, [pc, #132]	@ (8005bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b58:	4b20      	ldr	r3, [pc, #128]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe f8b6 	bl	8003cd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6a:	d10a      	bne.n	8005b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b72:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4819      	ldr	r0, [pc, #100]	@ (8005be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b7c:	f7fe f84d 	bl	8003c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b80:	e026      	b.n	8005bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4413      	add	r3, r2
 8005b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b8a:	4b14      	ldr	r3, [pc, #80]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d209      	bcs.n	8005bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9a:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f7fe f85a 	bl	8003c60 <vListInsert>
}
 8005bac:	e010      	b.n	8005bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bae:	4b0e      	ldr	r3, [pc, #56]	@ (8005be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f7fe f850 	bl	8003c60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d202      	bcs.n	8005bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bca:	4a08      	ldr	r2, [pc, #32]	@ (8005bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6013      	str	r3, [r2, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000e8c 	.word	0x20000e8c
 8005bdc:	200009b4 	.word	0x200009b4
 8005be0:	20000e74 	.word	0x20000e74
 8005be4:	20000e44 	.word	0x20000e44
 8005be8:	20000e40 	.word	0x20000e40
 8005bec:	20000ea8 	.word	0x20000ea8

08005bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	@ 0x28
 8005bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bfa:	f000 fad9 	bl	80061b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <xTimerCreateTimerTask+0x84>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d021      	beq.n	8005c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c0e:	1d3a      	adds	r2, r7, #4
 8005c10:	f107 0108 	add.w	r1, r7, #8
 8005c14:	f107 030c 	add.w	r3, r7, #12
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fd ffb9 	bl	8003b90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	9202      	str	r2, [sp, #8]
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	2302      	movs	r3, #2
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	460a      	mov	r2, r1
 8005c30:	4911      	ldr	r1, [pc, #68]	@ (8005c78 <xTimerCreateTimerTask+0x88>)
 8005c32:	4812      	ldr	r0, [pc, #72]	@ (8005c7c <xTimerCreateTimerTask+0x8c>)
 8005c34:	f7fe ff8c 	bl	8004b50 <xTaskCreateStatic>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <xTimerCreateTimerTask+0x90>)
 8005c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c3e:	4b10      	ldr	r3, [pc, #64]	@ (8005c80 <xTimerCreateTimerTask+0x90>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c46:	2301      	movs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	613b      	str	r3, [r7, #16]
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c68:	697b      	ldr	r3, [r7, #20]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000ee4 	.word	0x20000ee4
 8005c78:	08007444 	.word	0x08007444
 8005c7c:	08005da5 	.word	0x08005da5
 8005c80:	20000ee8 	.word	0x20000ee8

08005c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	@ 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	623b      	str	r3, [r7, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	bf00      	nop
 8005cb2:	e7fd      	b.n	8005cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005cb4:	4b19      	ldr	r3, [pc, #100]	@ (8005d1c <xTimerGenericCommand+0x98>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02a      	beq.n	8005d12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	dc18      	bgt.n	8005d00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cce:	f7ff fda3 	bl	8005818 <xTaskGetSchedulerState>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d109      	bne.n	8005cec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cd8:	4b10      	ldr	r3, [pc, #64]	@ (8005d1c <xTimerGenericCommand+0x98>)
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	f107 0110 	add.w	r1, r7, #16
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ce4:	f7fe fa20 	bl	8004128 <xQueueGenericSend>
 8005ce8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cea:	e012      	b.n	8005d12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cec:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <xTimerGenericCommand+0x98>)
 8005cee:	6818      	ldr	r0, [r3, #0]
 8005cf0:	f107 0110 	add.w	r1, r7, #16
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f7fe fa16 	bl	8004128 <xQueueGenericSend>
 8005cfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cfe:	e008      	b.n	8005d12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d00:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <xTimerGenericCommand+0x98>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	f107 0110 	add.w	r1, r7, #16
 8005d08:	2300      	movs	r3, #0
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	f7fe fb0e 	bl	800432c <xQueueGenericSendFromISR>
 8005d10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3728      	adds	r7, #40	@ 0x28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000ee4 	.word	0x20000ee4

08005d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af02      	add	r7, sp, #8
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005da0 <prvProcessExpiredTimer+0x80>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fd ffc9 	bl	8003cd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d123      	bne.n	8005d8e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	18d1      	adds	r1, r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f000 f8cc 	bl	8005ef0 <prvInsertTimerInActiveList>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d017      	beq.n	8005d8e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	2100      	movs	r1, #0
 8005d68:	6978      	ldr	r0, [r7, #20]
 8005d6a:	f7ff ff8b 	bl	8005c84 <xTimerGenericCommand>
 8005d6e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	60fb      	str	r3, [r7, #12]
}
 8005d88:	bf00      	nop
 8005d8a:	bf00      	nop
 8005d8c:	e7fd      	b.n	8005d8a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	4798      	blx	r3
}
 8005d96:	bf00      	nop
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000edc 	.word	0x20000edc

08005da4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dac:	f107 0308 	add.w	r3, r7, #8
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f859 	bl	8005e68 <prvGetNextExpireTime>
 8005db6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f805 	bl	8005dcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dc2:	f000 f8d7 	bl	8005f74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dc6:	bf00      	nop
 8005dc8:	e7f0      	b.n	8005dac <prvTimerTask+0x8>
	...

08005dcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dd6:	f7ff f915 	bl	8005004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dda:	f107 0308 	add.w	r3, r7, #8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f866 	bl	8005eb0 <prvSampleTimeNow>
 8005de4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d130      	bne.n	8005e4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <prvProcessTimerOrBlockTask+0x3c>
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d806      	bhi.n	8005e08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005dfa:	f7ff f911 	bl	8005020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff ff8d 	bl	8005d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e06:	e024      	b.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e0e:	4b13      	ldr	r3, [pc, #76]	@ (8005e5c <prvProcessTimerOrBlockTask+0x90>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf0c      	ite	eq
 8005e18:	2301      	moveq	r3, #1
 8005e1a:	2300      	movne	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e20:	4b0f      	ldr	r3, [pc, #60]	@ (8005e60 <prvProcessTimerOrBlockTask+0x94>)
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f7fe fe5b 	bl	8004ae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e32:	f7ff f8f5 	bl	8005020 <xTaskResumeAll>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e3c:	4b09      	ldr	r3, [pc, #36]	@ (8005e64 <prvProcessTimerOrBlockTask+0x98>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
}
 8005e4c:	e001      	b.n	8005e52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e4e:	f7ff f8e7 	bl	8005020 <xTaskResumeAll>
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000ee0 	.word	0x20000ee0
 8005e60:	20000ee4 	.word	0x20000ee4
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e70:	4b0e      	ldr	r3, [pc, #56]	@ (8005eac <prvGetNextExpireTime+0x44>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e8e:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <prvGetNextExpireTime+0x44>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e001      	b.n	8005e9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	20000edc 	.word	0x20000edc

08005eb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005eb8:	f7ff f950 	bl	800515c <xTaskGetTickCount>
 8005ebc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <prvSampleTimeNow+0x3c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d205      	bcs.n	8005ed4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ec8:	f000 f910 	bl	80060ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e002      	b.n	8005eda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005eda:	4a04      	ldr	r2, [pc, #16]	@ (8005eec <prvSampleTimeNow+0x3c>)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000eec 	.word	0x20000eec

08005ef0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d812      	bhi.n	8005f3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	1ad2      	subs	r2, r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d302      	bcc.n	8005f2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
 8005f28:	e01b      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f2a:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <prvInsertTimerInActiveList+0x7c>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f7fd fe93 	bl	8003c60 <vListInsert>
 8005f3a:	e012      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d206      	bcs.n	8005f52 <prvInsertTimerInActiveList+0x62>
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e007      	b.n	8005f62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f52:	4b07      	ldr	r3, [pc, #28]	@ (8005f70 <prvInsertTimerInActiveList+0x80>)
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7fd fe7f 	bl	8003c60 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f62:	697b      	ldr	r3, [r7, #20]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000ee0 	.word	0x20000ee0
 8005f70:	20000edc 	.word	0x20000edc

08005f74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	@ 0x38
 8005f78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f7a:	e0a5      	b.n	80060c8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	da19      	bge.n	8005fb6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f82:	1d3b      	adds	r3, r7, #4
 8005f84:	3304      	adds	r3, #4
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10b      	bne.n	8005fa6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	61fb      	str	r3, [r7, #28]
}
 8005fa0:	bf00      	nop
 8005fa2:	bf00      	nop
 8005fa4:	e7fd      	b.n	8005fa2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fac:	6850      	ldr	r0, [r2, #4]
 8005fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb0:	6892      	ldr	r2, [r2, #8]
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f2c0 8085 	blt.w	80060c8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd fe7e 	bl	8003cd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ff6a 	bl	8005eb0 <prvSampleTimeNow>
 8005fdc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b09      	cmp	r3, #9
 8005fe2:	d86c      	bhi.n	80060be <prvProcessReceivedCommands+0x14a>
 8005fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <prvProcessReceivedCommands+0x78>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	080060bf 	.word	0x080060bf
 8005ffc:	08006073 	.word	0x08006073
 8006000:	080060ad 	.word	0x080060ad
 8006004:	08006015 	.word	0x08006015
 8006008:	08006015 	.word	0x08006015
 800600c:	080060bf 	.word	0x080060bf
 8006010:	08006073 	.word	0x08006073
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	18d1      	adds	r1, r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006022:	f7ff ff65 	bl	8005ef0 <prvInsertTimerInActiveList>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d04a      	beq.n	80060c2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800602c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006032:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d142      	bne.n	80060c2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	441a      	add	r2, r3
 8006044:	2300      	movs	r3, #0
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	2100      	movs	r1, #0
 800604c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800604e:	f7ff fe19 	bl	8005c84 <xTimerGenericCommand>
 8006052:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d133      	bne.n	80060c2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61bb      	str	r3, [r7, #24]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	617b      	str	r3, [r7, #20]
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	18d1      	adds	r1, r2, r3
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a6:	f7ff ff23 	bl	8005ef0 <prvInsertTimerInActiveList>
					break;
 80060aa:	e00d      	b.n	80060c8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d107      	bne.n	80060c6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80060b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b8:	f000 fb72 	bl	80067a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80060bc:	e003      	b.n	80060c6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80060be:	bf00      	nop
 80060c0:	e002      	b.n	80060c8 <prvProcessReceivedCommands+0x154>
					break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <prvProcessReceivedCommands+0x154>
					break;
 80060c6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060c8:	4b07      	ldr	r3, [pc, #28]	@ (80060e8 <prvProcessReceivedCommands+0x174>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	1d39      	adds	r1, r7, #4
 80060ce:	2200      	movs	r2, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe f9c7 	bl	8004464 <xQueueReceive>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f47f af4f 	bne.w	8005f7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	3730      	adds	r7, #48	@ 0x30
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000ee4 	.word	0x20000ee4

080060ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060f2:	e046      	b.n	8006182 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060f4:	4b2c      	ldr	r3, [pc, #176]	@ (80061a8 <prvSwitchTimerLists+0xbc>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060fe:	4b2a      	ldr	r3, [pc, #168]	@ (80061a8 <prvSwitchTimerLists+0xbc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3304      	adds	r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd fddf 	bl	8003cd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d12f      	bne.n	8006182 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	d90e      	bls.n	8006152 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006140:	4b19      	ldr	r3, [pc, #100]	@ (80061a8 <prvSwitchTimerLists+0xbc>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3304      	adds	r3, #4
 8006148:	4619      	mov	r1, r3
 800614a:	4610      	mov	r0, r2
 800614c:	f7fd fd88 	bl	8003c60 <vListInsert>
 8006150:	e017      	b.n	8006182 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006152:	2300      	movs	r3, #0
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	2100      	movs	r1, #0
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff fd91 	bl	8005c84 <xTimerGenericCommand>
 8006162:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <prvSwitchTimerLists+0x96>
	__asm volatile
 800616a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	603b      	str	r3, [r7, #0]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006182:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <prvSwitchTimerLists+0xbc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1b3      	bne.n	80060f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <prvSwitchTimerLists+0xbc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006192:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <prvSwitchTimerLists+0xc0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a04      	ldr	r2, [pc, #16]	@ (80061a8 <prvSwitchTimerLists+0xbc>)
 8006198:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800619a:	4a04      	ldr	r2, [pc, #16]	@ (80061ac <prvSwitchTimerLists+0xc0>)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	6013      	str	r3, [r2, #0]
}
 80061a0:	bf00      	nop
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	20000edc 	.word	0x20000edc
 80061ac:	20000ee0 	.word	0x20000ee0

080061b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80061b6:	f000 f929 	bl	800640c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80061ba:	4b15      	ldr	r3, [pc, #84]	@ (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d120      	bne.n	8006204 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061c2:	4814      	ldr	r0, [pc, #80]	@ (8006214 <prvCheckForValidListAndQueue+0x64>)
 80061c4:	f7fd fcfe 	bl	8003bc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061c8:	4813      	ldr	r0, [pc, #76]	@ (8006218 <prvCheckForValidListAndQueue+0x68>)
 80061ca:	f7fd fcfb 	bl	8003bc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061ce:	4b13      	ldr	r3, [pc, #76]	@ (800621c <prvCheckForValidListAndQueue+0x6c>)
 80061d0:	4a10      	ldr	r2, [pc, #64]	@ (8006214 <prvCheckForValidListAndQueue+0x64>)
 80061d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061d4:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <prvCheckForValidListAndQueue+0x70>)
 80061d6:	4a10      	ldr	r2, [pc, #64]	@ (8006218 <prvCheckForValidListAndQueue+0x68>)
 80061d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061da:	2300      	movs	r3, #0
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	4b11      	ldr	r3, [pc, #68]	@ (8006224 <prvCheckForValidListAndQueue+0x74>)
 80061e0:	4a11      	ldr	r2, [pc, #68]	@ (8006228 <prvCheckForValidListAndQueue+0x78>)
 80061e2:	2110      	movs	r1, #16
 80061e4:	200a      	movs	r0, #10
 80061e6:	f7fd fe07 	bl	8003df8 <xQueueGenericCreateStatic>
 80061ea:	4603      	mov	r3, r0
 80061ec:	4a08      	ldr	r2, [pc, #32]	@ (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061f0:	4b07      	ldr	r3, [pc, #28]	@ (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d005      	beq.n	8006204 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061f8:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <prvCheckForValidListAndQueue+0x60>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	490b      	ldr	r1, [pc, #44]	@ (800622c <prvCheckForValidListAndQueue+0x7c>)
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe fc4a 	bl	8004a98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006204:	f000 f932 	bl	800646c <vPortExitCritical>
}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000ee4 	.word	0x20000ee4
 8006214:	20000eb4 	.word	0x20000eb4
 8006218:	20000ec8 	.word	0x20000ec8
 800621c:	20000edc 	.word	0x20000edc
 8006220:	20000ee0 	.word	0x20000ee0
 8006224:	20000f90 	.word	0x20000f90
 8006228:	20000ef0 	.word	0x20000ef0
 800622c:	0800744c 	.word	0x0800744c

08006230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3b04      	subs	r3, #4
 8006240:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b04      	subs	r3, #4
 800624e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f023 0201 	bic.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b04      	subs	r3, #4
 800625e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006260:	4a08      	ldr	r2, [pc, #32]	@ (8006284 <pxPortInitialiseStack+0x54>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b14      	subs	r3, #20
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3b20      	subs	r3, #32
 8006276:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006278:	68fb      	ldr	r3, [r7, #12]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr
 8006284:	08006289 	.word	0x08006289

08006288 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006292:	4b12      	ldr	r3, [pc, #72]	@ (80062dc <prvTaskExitError+0x54>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d00b      	beq.n	80062b4 <prvTaskExitError+0x2c>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	60fb      	str	r3, [r7, #12]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <prvTaskExitError+0x28>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	60bb      	str	r3, [r7, #8]
}
 80062c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062c8:	bf00      	nop
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0fc      	beq.n	80062ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062d0:	bf00      	nop
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr
 80062dc:	2000000c 	.word	0x2000000c

080062e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062e0:	4b07      	ldr	r3, [pc, #28]	@ (8006300 <pxCurrentTCBConst2>)
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	6808      	ldr	r0, [r1, #0]
 80062e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80062ea:	f380 8809 	msr	PSP, r0
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8811 	msr	BASEPRI, r0
 80062fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80062fe:	4770      	bx	lr

08006300 <pxCurrentTCBConst2>:
 8006300:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006308:	4806      	ldr	r0, [pc, #24]	@ (8006324 <prvPortStartFirstTask+0x1c>)
 800630a:	6800      	ldr	r0, [r0, #0]
 800630c:	6800      	ldr	r0, [r0, #0]
 800630e:	f380 8808 	msr	MSP, r0
 8006312:	b662      	cpsie	i
 8006314:	b661      	cpsie	f
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	df00      	svc	0
 8006320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006322:	bf00      	nop
 8006324:	e000ed08 	.word	0xe000ed08

08006328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800632e:	4b32      	ldr	r3, [pc, #200]	@ (80063f8 <xPortStartScheduler+0xd0>)
 8006330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	22ff      	movs	r2, #255	@ 0xff
 800633e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006350:	b2da      	uxtb	r2, r3
 8006352:	4b2a      	ldr	r3, [pc, #168]	@ (80063fc <xPortStartScheduler+0xd4>)
 8006354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006356:	4b2a      	ldr	r3, [pc, #168]	@ (8006400 <xPortStartScheduler+0xd8>)
 8006358:	2207      	movs	r2, #7
 800635a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800635c:	e009      	b.n	8006372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800635e:	4b28      	ldr	r3, [pc, #160]	@ (8006400 <xPortStartScheduler+0xd8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3b01      	subs	r3, #1
 8006364:	4a26      	ldr	r2, [pc, #152]	@ (8006400 <xPortStartScheduler+0xd8>)
 8006366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	b2db      	uxtb	r3, r3
 8006370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637a:	2b80      	cmp	r3, #128	@ 0x80
 800637c:	d0ef      	beq.n	800635e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800637e:	4b20      	ldr	r3, [pc, #128]	@ (8006400 <xPortStartScheduler+0xd8>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f1c3 0307 	rsb	r3, r3, #7
 8006386:	2b04      	cmp	r3, #4
 8006388:	d00b      	beq.n	80063a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	60bb      	str	r3, [r7, #8]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063a2:	4b17      	ldr	r3, [pc, #92]	@ (8006400 <xPortStartScheduler+0xd8>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	4a15      	ldr	r2, [pc, #84]	@ (8006400 <xPortStartScheduler+0xd8>)
 80063aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063ac:	4b14      	ldr	r3, [pc, #80]	@ (8006400 <xPortStartScheduler+0xd8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063b4:	4a12      	ldr	r2, [pc, #72]	@ (8006400 <xPortStartScheduler+0xd8>)
 80063b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063c0:	4b10      	ldr	r3, [pc, #64]	@ (8006404 <xPortStartScheduler+0xdc>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006404 <xPortStartScheduler+0xdc>)
 80063c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006404 <xPortStartScheduler+0xdc>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006404 <xPortStartScheduler+0xdc>)
 80063d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80063d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063d8:	f000 f8b8 	bl	800654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <xPortStartScheduler+0xe0>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063e2:	f7ff ff91 	bl	8006308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063e6:	f7fe ff87 	bl	80052f8 <vTaskSwitchContext>
	prvTaskExitError();
 80063ea:	f7ff ff4d 	bl	8006288 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	e000e400 	.word	0xe000e400
 80063fc:	20000fe0 	.word	0x20000fe0
 8006400:	20000fe4 	.word	0x20000fe4
 8006404:	e000ed20 	.word	0xe000ed20
 8006408:	2000000c 	.word	0x2000000c

0800640c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	607b      	str	r3, [r7, #4]
}
 8006424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006426:	4b0f      	ldr	r3, [pc, #60]	@ (8006464 <vPortEnterCritical+0x58>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	4a0d      	ldr	r2, [pc, #52]	@ (8006464 <vPortEnterCritical+0x58>)
 800642e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006430:	4b0c      	ldr	r3, [pc, #48]	@ (8006464 <vPortEnterCritical+0x58>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d110      	bne.n	800645a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <vPortEnterCritical+0x5c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00b      	beq.n	800645a <vPortEnterCritical+0x4e>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	603b      	str	r3, [r7, #0]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <vPortEnterCritical+0x4a>
	}
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	2000000c 	.word	0x2000000c
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <vPortExitCritical+0x26>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	607b      	str	r3, [r7, #4]
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	e7fd      	b.n	800648e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006492:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3b01      	subs	r3, #1
 8006498:	4a08      	ldr	r2, [pc, #32]	@ (80064bc <vPortExitCritical+0x50>)
 800649a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800649c:	4b07      	ldr	r3, [pc, #28]	@ (80064bc <vPortExitCritical+0x50>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <vPortExitCritical+0x44>
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	2000000c 	.word	0x2000000c

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064d0:	6010      	str	r0, [r2, #0]
 80064d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80064d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064da:	f380 8811 	msr	BASEPRI, r0
 80064de:	f7fe ff0b 	bl	80052f8 <vTaskSwitchContext>
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f380 8811 	msr	BASEPRI, r0
 80064ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80064ee:	6819      	ldr	r1, [r3, #0]
 80064f0:	6808      	ldr	r0, [r1, #0]
 80064f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80064f6:	f380 8809 	msr	PSP, r0
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	4770      	bx	lr

08006500 <pxCurrentTCBConst>:
 8006500:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006522:	f7fe fe29 	bl	8005178 <xTaskIncrementTick>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800652c:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <SysTick_Handler+0x40>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006550:	4b0a      	ldr	r3, [pc, #40]	@ (800657c <vPortSetupTimerInterrupt+0x30>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006556:	4b0a      	ldr	r3, [pc, #40]	@ (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800655c:	4b09      	ldr	r3, [pc, #36]	@ (8006584 <vPortSetupTimerInterrupt+0x38>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a09      	ldr	r2, [pc, #36]	@ (8006588 <vPortSetupTimerInterrupt+0x3c>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	4a08      	ldr	r2, [pc, #32]	@ (800658c <vPortSetupTimerInterrupt+0x40>)
 800656a:	3b01      	subs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800656e:	4b03      	ldr	r3, [pc, #12]	@ (800657c <vPortSetupTimerInterrupt+0x30>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr
 800657c:	e000e010 	.word	0xe000e010
 8006580:	e000e018 	.word	0xe000e018
 8006584:	20000000 	.word	0x20000000
 8006588:	10624dd3 	.word	0x10624dd3
 800658c:	e000e014 	.word	0xe000e014

08006590 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006596:	f3ef 8305 	mrs	r3, IPSR
 800659a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d915      	bls.n	80065ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065a2:	4a17      	ldr	r2, [pc, #92]	@ (8006600 <vPortValidateInterruptPriority+0x70>)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065ac:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <vPortValidateInterruptPriority+0x74>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	7afa      	ldrb	r2, [r7, #11]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d20b      	bcs.n	80065ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	607b      	str	r3, [r7, #4]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006608 <vPortValidateInterruptPriority+0x78>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065d6:	4b0d      	ldr	r3, [pc, #52]	@ (800660c <vPortValidateInterruptPriority+0x7c>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d90b      	bls.n	80065f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	603b      	str	r3, [r7, #0]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <vPortValidateInterruptPriority+0x62>
	}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	e000e3f0 	.word	0xe000e3f0
 8006604:	20000fe0 	.word	0x20000fe0
 8006608:	e000ed0c 	.word	0xe000ed0c
 800660c:	20000fe4 	.word	0x20000fe4

08006610 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b08a      	sub	sp, #40	@ 0x28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800661c:	f7fe fcf2 	bl	8005004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006620:	4b5a      	ldr	r3, [pc, #360]	@ (800678c <pvPortMalloc+0x17c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006628:	f000 f916 	bl	8006858 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800662c:	4b58      	ldr	r3, [pc, #352]	@ (8006790 <pvPortMalloc+0x180>)
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 8090 	bne.w	800675a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006640:	2208      	movs	r2, #8
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b00      	cmp	r3, #0
 8006650:	d015      	beq.n	800667e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f023 0307 	bic.w	r3, r3, #7
 8006658:	3308      	adds	r3, #8
 800665a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <pvPortMalloc+0x6e>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	617b      	str	r3, [r7, #20]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d06a      	beq.n	800675a <pvPortMalloc+0x14a>
 8006684:	4b43      	ldr	r3, [pc, #268]	@ (8006794 <pvPortMalloc+0x184>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d865      	bhi.n	800675a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800668e:	4b42      	ldr	r3, [pc, #264]	@ (8006798 <pvPortMalloc+0x188>)
 8006690:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006692:	4b41      	ldr	r3, [pc, #260]	@ (8006798 <pvPortMalloc+0x188>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006698:	e004      	b.n	80066a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d903      	bls.n	80066b6 <pvPortMalloc+0xa6>
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f1      	bne.n	800669a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066b6:	4b35      	ldr	r3, [pc, #212]	@ (800678c <pvPortMalloc+0x17c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066bc:	429a      	cmp	r2, r3
 80066be:	d04c      	beq.n	800675a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2208      	movs	r2, #8
 80066c6:	4413      	add	r3, r2
 80066c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	1ad2      	subs	r2, r2, r3
 80066da:	2308      	movs	r3, #8
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	429a      	cmp	r2, r3
 80066e0:	d920      	bls.n	8006724 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4413      	add	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00b      	beq.n	800670c <pvPortMalloc+0xfc>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	613b      	str	r3, [r7, #16]
}
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	1ad2      	subs	r2, r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800671e:	69b8      	ldr	r0, [r7, #24]
 8006720:	f000 f8fc 	bl	800691c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006724:	4b1b      	ldr	r3, [pc, #108]	@ (8006794 <pvPortMalloc+0x184>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	4a19      	ldr	r2, [pc, #100]	@ (8006794 <pvPortMalloc+0x184>)
 8006730:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006732:	4b18      	ldr	r3, [pc, #96]	@ (8006794 <pvPortMalloc+0x184>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b19      	ldr	r3, [pc, #100]	@ (800679c <pvPortMalloc+0x18c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d203      	bcs.n	8006746 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800673e:	4b15      	ldr	r3, [pc, #84]	@ (8006794 <pvPortMalloc+0x184>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a16      	ldr	r2, [pc, #88]	@ (800679c <pvPortMalloc+0x18c>)
 8006744:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	4b11      	ldr	r3, [pc, #68]	@ (8006790 <pvPortMalloc+0x180>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	431a      	orrs	r2, r3
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800675a:	f7fe fc61 	bl	8005020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <pvPortMalloc+0x170>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	60fb      	str	r3, [r7, #12]
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <pvPortMalloc+0x16c>
	return pvReturn;
 8006780:	69fb      	ldr	r3, [r7, #28]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3728      	adds	r7, #40	@ 0x28
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20001bf0 	.word	0x20001bf0
 8006790:	20001bfc 	.word	0x20001bfc
 8006794:	20001bf4 	.word	0x20001bf4
 8006798:	20001be8 	.word	0x20001be8
 800679c:	20001bf8 	.word	0x20001bf8

080067a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d04a      	beq.n	8006848 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067b2:	2308      	movs	r3, #8
 80067b4:	425b      	negs	r3, r3
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	4b22      	ldr	r3, [pc, #136]	@ (8006850 <vPortFree+0xb0>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <vPortFree+0x46>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60fb      	str	r3, [r7, #12]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00b      	beq.n	8006806 <vPortFree+0x66>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	60bb      	str	r3, [r7, #8]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	4b11      	ldr	r3, [pc, #68]	@ (8006850 <vPortFree+0xb0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d019      	beq.n	8006848 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d115      	bne.n	8006848 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	4b0b      	ldr	r3, [pc, #44]	@ (8006850 <vPortFree+0xb0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	43db      	mvns	r3, r3
 8006826:	401a      	ands	r2, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800682c:	f7fe fbea 	bl	8005004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	4b07      	ldr	r3, [pc, #28]	@ (8006854 <vPortFree+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4413      	add	r3, r2
 800683a:	4a06      	ldr	r2, [pc, #24]	@ (8006854 <vPortFree+0xb4>)
 800683c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800683e:	6938      	ldr	r0, [r7, #16]
 8006840:	f000 f86c 	bl	800691c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006844:	f7fe fbec 	bl	8005020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006848:	bf00      	nop
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20001bfc 	.word	0x20001bfc
 8006854:	20001bf4 	.word	0x20001bf4

08006858 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800685e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006862:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006864:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <prvHeapInit+0xac>)
 8006866:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3307      	adds	r3, #7
 8006876:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	4a1f      	ldr	r2, [pc, #124]	@ (8006904 <prvHeapInit+0xac>)
 8006888:	4413      	add	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006890:	4a1d      	ldr	r2, [pc, #116]	@ (8006908 <prvHeapInit+0xb0>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006896:	4b1c      	ldr	r3, [pc, #112]	@ (8006908 <prvHeapInit+0xb0>)
 8006898:	2200      	movs	r2, #0
 800689a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4413      	add	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068a4:	2208      	movs	r2, #8
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0307 	bic.w	r3, r3, #7
 80068b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4a15      	ldr	r2, [pc, #84]	@ (800690c <prvHeapInit+0xb4>)
 80068b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068ba:	4b14      	ldr	r3, [pc, #80]	@ (800690c <prvHeapInit+0xb4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2200      	movs	r2, #0
 80068c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068c2:	4b12      	ldr	r3, [pc, #72]	@ (800690c <prvHeapInit+0xb4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	1ad2      	subs	r2, r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068d8:	4b0c      	ldr	r3, [pc, #48]	@ (800690c <prvHeapInit+0xb4>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006910 <prvHeapInit+0xb8>)
 80068e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4a09      	ldr	r2, [pc, #36]	@ (8006914 <prvHeapInit+0xbc>)
 80068ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068f0:	4b09      	ldr	r3, [pc, #36]	@ (8006918 <prvHeapInit+0xc0>)
 80068f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80068f6:	601a      	str	r2, [r3, #0]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000fe8 	.word	0x20000fe8
 8006908:	20001be8 	.word	0x20001be8
 800690c:	20001bf0 	.word	0x20001bf0
 8006910:	20001bf8 	.word	0x20001bf8
 8006914:	20001bf4 	.word	0x20001bf4
 8006918:	20001bfc 	.word	0x20001bfc

0800691c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006924:	4b27      	ldr	r3, [pc, #156]	@ (80069c4 <prvInsertBlockIntoFreeList+0xa8>)
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e002      	b.n	8006930 <prvInsertBlockIntoFreeList+0x14>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d8f7      	bhi.n	800692a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	4413      	add	r3, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d108      	bne.n	800695e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	441a      	add	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	d118      	bne.n	80069a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b14      	ldr	r3, [pc, #80]	@ (80069c8 <prvInsertBlockIntoFreeList+0xac>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d00d      	beq.n	800699a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	441a      	add	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e008      	b.n	80069ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800699a:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <prvInsertBlockIntoFreeList+0xac>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e003      	b.n	80069ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d002      	beq.n	80069ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr
 80069c4:	20001be8 	.word	0x20001be8
 80069c8:	20001bf0 	.word	0x20001bf0

080069cc <std>:
 80069cc:	2300      	movs	r3, #0
 80069ce:	b510      	push	{r4, lr}
 80069d0:	4604      	mov	r4, r0
 80069d2:	e9c0 3300 	strd	r3, r3, [r0]
 80069d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069da:	6083      	str	r3, [r0, #8]
 80069dc:	8181      	strh	r1, [r0, #12]
 80069de:	6643      	str	r3, [r0, #100]	@ 0x64
 80069e0:	81c2      	strh	r2, [r0, #14]
 80069e2:	6183      	str	r3, [r0, #24]
 80069e4:	4619      	mov	r1, r3
 80069e6:	2208      	movs	r2, #8
 80069e8:	305c      	adds	r0, #92	@ 0x5c
 80069ea:	f000 f9e7 	bl	8006dbc <memset>
 80069ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006a24 <std+0x58>)
 80069f0:	6224      	str	r4, [r4, #32]
 80069f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80069f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a28 <std+0x5c>)
 80069f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069f8:	4b0c      	ldr	r3, [pc, #48]	@ (8006a2c <std+0x60>)
 80069fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <std+0x64>)
 80069fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a00:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <std+0x68>)
 8006a02:	429c      	cmp	r4, r3
 8006a04:	d006      	beq.n	8006a14 <std+0x48>
 8006a06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a0a:	4294      	cmp	r4, r2
 8006a0c:	d002      	beq.n	8006a14 <std+0x48>
 8006a0e:	33d0      	adds	r3, #208	@ 0xd0
 8006a10:	429c      	cmp	r4, r3
 8006a12:	d105      	bne.n	8006a20 <std+0x54>
 8006a14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a1c:	f000 ba9c 	b.w	8006f58 <__retarget_lock_init_recursive>
 8006a20:	bd10      	pop	{r4, pc}
 8006a22:	bf00      	nop
 8006a24:	08006c0d 	.word	0x08006c0d
 8006a28:	08006c2f 	.word	0x08006c2f
 8006a2c:	08006c67 	.word	0x08006c67
 8006a30:	08006c8b 	.word	0x08006c8b
 8006a34:	20001c00 	.word	0x20001c00

08006a38 <stdio_exit_handler>:
 8006a38:	4a02      	ldr	r2, [pc, #8]	@ (8006a44 <stdio_exit_handler+0xc>)
 8006a3a:	4903      	ldr	r1, [pc, #12]	@ (8006a48 <stdio_exit_handler+0x10>)
 8006a3c:	4803      	ldr	r0, [pc, #12]	@ (8006a4c <stdio_exit_handler+0x14>)
 8006a3e:	f000 b869 	b.w	8006b14 <_fwalk_sglue>
 8006a42:	bf00      	nop
 8006a44:	20000010 	.word	0x20000010
 8006a48:	08007269 	.word	0x08007269
 8006a4c:	20000020 	.word	0x20000020

08006a50 <cleanup_stdio>:
 8006a50:	6841      	ldr	r1, [r0, #4]
 8006a52:	4b0c      	ldr	r3, [pc, #48]	@ (8006a84 <cleanup_stdio+0x34>)
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4299      	cmp	r1, r3
 8006a58:	4604      	mov	r4, r0
 8006a5a:	d001      	beq.n	8006a60 <cleanup_stdio+0x10>
 8006a5c:	f000 fc04 	bl	8007268 <_fflush_r>
 8006a60:	68a1      	ldr	r1, [r4, #8]
 8006a62:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <cleanup_stdio+0x38>)
 8006a64:	4299      	cmp	r1, r3
 8006a66:	d002      	beq.n	8006a6e <cleanup_stdio+0x1e>
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fbfd 	bl	8007268 <_fflush_r>
 8006a6e:	68e1      	ldr	r1, [r4, #12]
 8006a70:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <cleanup_stdio+0x3c>)
 8006a72:	4299      	cmp	r1, r3
 8006a74:	d004      	beq.n	8006a80 <cleanup_stdio+0x30>
 8006a76:	4620      	mov	r0, r4
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f000 bbf4 	b.w	8007268 <_fflush_r>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	20001c00 	.word	0x20001c00
 8006a88:	20001c68 	.word	0x20001c68
 8006a8c:	20001cd0 	.word	0x20001cd0

08006a90 <global_stdio_init.part.0>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <global_stdio_init.part.0+0x30>)
 8006a94:	4c0b      	ldr	r4, [pc, #44]	@ (8006ac4 <global_stdio_init.part.0+0x34>)
 8006a96:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac8 <global_stdio_init.part.0+0x38>)
 8006a98:	4620      	mov	r0, r4
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f7ff ff94 	bl	80069cc <std>
 8006aa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	2109      	movs	r1, #9
 8006aac:	f7ff ff8e 	bl	80069cc <std>
 8006ab0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aba:	2112      	movs	r1, #18
 8006abc:	f7ff bf86 	b.w	80069cc <std>
 8006ac0:	20001d38 	.word	0x20001d38
 8006ac4:	20001c00 	.word	0x20001c00
 8006ac8:	08006a39 	.word	0x08006a39

08006acc <__sfp_lock_acquire>:
 8006acc:	4801      	ldr	r0, [pc, #4]	@ (8006ad4 <__sfp_lock_acquire+0x8>)
 8006ace:	f000 ba44 	b.w	8006f5a <__retarget_lock_acquire_recursive>
 8006ad2:	bf00      	nop
 8006ad4:	20001d41 	.word	0x20001d41

08006ad8 <__sfp_lock_release>:
 8006ad8:	4801      	ldr	r0, [pc, #4]	@ (8006ae0 <__sfp_lock_release+0x8>)
 8006ada:	f000 ba3f 	b.w	8006f5c <__retarget_lock_release_recursive>
 8006ade:	bf00      	nop
 8006ae0:	20001d41 	.word	0x20001d41

08006ae4 <__sinit>:
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	f7ff fff0 	bl	8006acc <__sfp_lock_acquire>
 8006aec:	6a23      	ldr	r3, [r4, #32]
 8006aee:	b11b      	cbz	r3, 8006af8 <__sinit+0x14>
 8006af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af4:	f7ff bff0 	b.w	8006ad8 <__sfp_lock_release>
 8006af8:	4b04      	ldr	r3, [pc, #16]	@ (8006b0c <__sinit+0x28>)
 8006afa:	6223      	str	r3, [r4, #32]
 8006afc:	4b04      	ldr	r3, [pc, #16]	@ (8006b10 <__sinit+0x2c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f5      	bne.n	8006af0 <__sinit+0xc>
 8006b04:	f7ff ffc4 	bl	8006a90 <global_stdio_init.part.0>
 8006b08:	e7f2      	b.n	8006af0 <__sinit+0xc>
 8006b0a:	bf00      	nop
 8006b0c:	08006a51 	.word	0x08006a51
 8006b10:	20001d38 	.word	0x20001d38

08006b14 <_fwalk_sglue>:
 8006b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	4607      	mov	r7, r0
 8006b1a:	4688      	mov	r8, r1
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	2600      	movs	r6, #0
 8006b20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b24:	f1b9 0901 	subs.w	r9, r9, #1
 8006b28:	d505      	bpl.n	8006b36 <_fwalk_sglue+0x22>
 8006b2a:	6824      	ldr	r4, [r4, #0]
 8006b2c:	2c00      	cmp	r4, #0
 8006b2e:	d1f7      	bne.n	8006b20 <_fwalk_sglue+0xc>
 8006b30:	4630      	mov	r0, r6
 8006b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b36:	89ab      	ldrh	r3, [r5, #12]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d907      	bls.n	8006b4c <_fwalk_sglue+0x38>
 8006b3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b40:	3301      	adds	r3, #1
 8006b42:	d003      	beq.n	8006b4c <_fwalk_sglue+0x38>
 8006b44:	4629      	mov	r1, r5
 8006b46:	4638      	mov	r0, r7
 8006b48:	47c0      	blx	r8
 8006b4a:	4306      	orrs	r6, r0
 8006b4c:	3568      	adds	r5, #104	@ 0x68
 8006b4e:	e7e9      	b.n	8006b24 <_fwalk_sglue+0x10>

08006b50 <_puts_r>:
 8006b50:	6a03      	ldr	r3, [r0, #32]
 8006b52:	b570      	push	{r4, r5, r6, lr}
 8006b54:	4605      	mov	r5, r0
 8006b56:	460e      	mov	r6, r1
 8006b58:	6884      	ldr	r4, [r0, #8]
 8006b5a:	b90b      	cbnz	r3, 8006b60 <_puts_r+0x10>
 8006b5c:	f7ff ffc2 	bl	8006ae4 <__sinit>
 8006b60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b62:	07db      	lsls	r3, r3, #31
 8006b64:	d405      	bmi.n	8006b72 <_puts_r+0x22>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	0598      	lsls	r0, r3, #22
 8006b6a:	d402      	bmi.n	8006b72 <_puts_r+0x22>
 8006b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b6e:	f000 f9f4 	bl	8006f5a <__retarget_lock_acquire_recursive>
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	0719      	lsls	r1, r3, #28
 8006b76:	d502      	bpl.n	8006b7e <_puts_r+0x2e>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d135      	bne.n	8006bea <_puts_r+0x9a>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 f8c5 	bl	8006d10 <__swsetup_r>
 8006b86:	b380      	cbz	r0, 8006bea <_puts_r+0x9a>
 8006b88:	f04f 35ff 	mov.w	r5, #4294967295
 8006b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b8e:	07da      	lsls	r2, r3, #31
 8006b90:	d405      	bmi.n	8006b9e <_puts_r+0x4e>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	059b      	lsls	r3, r3, #22
 8006b96:	d402      	bmi.n	8006b9e <_puts_r+0x4e>
 8006b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b9a:	f000 f9df 	bl	8006f5c <__retarget_lock_release_recursive>
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da04      	bge.n	8006bb0 <_puts_r+0x60>
 8006ba6:	69a2      	ldr	r2, [r4, #24]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	dc17      	bgt.n	8006bdc <_puts_r+0x8c>
 8006bac:	290a      	cmp	r1, #10
 8006bae:	d015      	beq.n	8006bdc <_puts_r+0x8c>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	6022      	str	r2, [r4, #0]
 8006bb6:	7019      	strb	r1, [r3, #0]
 8006bb8:	68a3      	ldr	r3, [r4, #8]
 8006bba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	60a3      	str	r3, [r4, #8]
 8006bc2:	2900      	cmp	r1, #0
 8006bc4:	d1ed      	bne.n	8006ba2 <_puts_r+0x52>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	da11      	bge.n	8006bee <_puts_r+0x9e>
 8006bca:	4622      	mov	r2, r4
 8006bcc:	210a      	movs	r1, #10
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f85f 	bl	8006c92 <__swbuf_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d0d7      	beq.n	8006b88 <_puts_r+0x38>
 8006bd8:	250a      	movs	r5, #10
 8006bda:	e7d7      	b.n	8006b8c <_puts_r+0x3c>
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 f857 	bl	8006c92 <__swbuf_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d1e7      	bne.n	8006bb8 <_puts_r+0x68>
 8006be8:	e7ce      	b.n	8006b88 <_puts_r+0x38>
 8006bea:	3e01      	subs	r6, #1
 8006bec:	e7e4      	b.n	8006bb8 <_puts_r+0x68>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	e7ee      	b.n	8006bd8 <_puts_r+0x88>
	...

08006bfc <puts>:
 8006bfc:	4b02      	ldr	r3, [pc, #8]	@ (8006c08 <puts+0xc>)
 8006bfe:	4601      	mov	r1, r0
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f7ff bfa5 	b.w	8006b50 <_puts_r>
 8006c06:	bf00      	nop
 8006c08:	2000001c 	.word	0x2000001c

08006c0c <__sread>:
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	460c      	mov	r4, r1
 8006c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c14:	f000 f952 	bl	8006ebc <_read_r>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	bfab      	itete	ge
 8006c1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c20:	181b      	addge	r3, r3, r0
 8006c22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c26:	bfac      	ite	ge
 8006c28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c2a:	81a3      	strhlt	r3, [r4, #12]
 8006c2c:	bd10      	pop	{r4, pc}

08006c2e <__swrite>:
 8006c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c32:	461f      	mov	r7, r3
 8006c34:	898b      	ldrh	r3, [r1, #12]
 8006c36:	4605      	mov	r5, r0
 8006c38:	05db      	lsls	r3, r3, #23
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	4616      	mov	r6, r2
 8006c3e:	d505      	bpl.n	8006c4c <__swrite+0x1e>
 8006c40:	2302      	movs	r3, #2
 8006c42:	2200      	movs	r2, #0
 8006c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c48:	f000 f926 	bl	8006e98 <_lseek_r>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	4632      	mov	r2, r6
 8006c50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	4628      	mov	r0, r5
 8006c58:	463b      	mov	r3, r7
 8006c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c62:	f000 b93d 	b.w	8006ee0 <_write_r>

08006c66 <__sseek>:
 8006c66:	b510      	push	{r4, lr}
 8006c68:	460c      	mov	r4, r1
 8006c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6e:	f000 f913 	bl	8006e98 <_lseek_r>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	bf15      	itete	ne
 8006c78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c82:	81a3      	strheq	r3, [r4, #12]
 8006c84:	bf18      	it	ne
 8006c86:	81a3      	strhne	r3, [r4, #12]
 8006c88:	bd10      	pop	{r4, pc}

08006c8a <__sclose>:
 8006c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8e:	f000 b89d 	b.w	8006dcc <_close_r>

08006c92 <__swbuf_r>:
 8006c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c94:	460e      	mov	r6, r1
 8006c96:	4614      	mov	r4, r2
 8006c98:	4605      	mov	r5, r0
 8006c9a:	b118      	cbz	r0, 8006ca4 <__swbuf_r+0x12>
 8006c9c:	6a03      	ldr	r3, [r0, #32]
 8006c9e:	b90b      	cbnz	r3, 8006ca4 <__swbuf_r+0x12>
 8006ca0:	f7ff ff20 	bl	8006ae4 <__sinit>
 8006ca4:	69a3      	ldr	r3, [r4, #24]
 8006ca6:	60a3      	str	r3, [r4, #8]
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	071a      	lsls	r2, r3, #28
 8006cac:	d501      	bpl.n	8006cb2 <__swbuf_r+0x20>
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	b943      	cbnz	r3, 8006cc4 <__swbuf_r+0x32>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 f82b 	bl	8006d10 <__swsetup_r>
 8006cba:	b118      	cbz	r0, 8006cc4 <__swbuf_r+0x32>
 8006cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	6922      	ldr	r2, [r4, #16]
 8006cc8:	b2f6      	uxtb	r6, r6
 8006cca:	1a98      	subs	r0, r3, r2
 8006ccc:	6963      	ldr	r3, [r4, #20]
 8006cce:	4637      	mov	r7, r6
 8006cd0:	4283      	cmp	r3, r0
 8006cd2:	dc05      	bgt.n	8006ce0 <__swbuf_r+0x4e>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 fac6 	bl	8007268 <_fflush_r>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1ed      	bne.n	8006cbc <__swbuf_r+0x2a>
 8006ce0:	68a3      	ldr	r3, [r4, #8]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	60a3      	str	r3, [r4, #8]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	701e      	strb	r6, [r3, #0]
 8006cee:	6962      	ldr	r2, [r4, #20]
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d004      	beq.n	8006d00 <__swbuf_r+0x6e>
 8006cf6:	89a3      	ldrh	r3, [r4, #12]
 8006cf8:	07db      	lsls	r3, r3, #31
 8006cfa:	d5e1      	bpl.n	8006cc0 <__swbuf_r+0x2e>
 8006cfc:	2e0a      	cmp	r6, #10
 8006cfe:	d1df      	bne.n	8006cc0 <__swbuf_r+0x2e>
 8006d00:	4621      	mov	r1, r4
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fab0 	bl	8007268 <_fflush_r>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d0d9      	beq.n	8006cc0 <__swbuf_r+0x2e>
 8006d0c:	e7d6      	b.n	8006cbc <__swbuf_r+0x2a>
	...

08006d10 <__swsetup_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4b29      	ldr	r3, [pc, #164]	@ (8006db8 <__swsetup_r+0xa8>)
 8006d14:	4605      	mov	r5, r0
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	460c      	mov	r4, r1
 8006d1a:	b118      	cbz	r0, 8006d24 <__swsetup_r+0x14>
 8006d1c:	6a03      	ldr	r3, [r0, #32]
 8006d1e:	b90b      	cbnz	r3, 8006d24 <__swsetup_r+0x14>
 8006d20:	f7ff fee0 	bl	8006ae4 <__sinit>
 8006d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d28:	0719      	lsls	r1, r3, #28
 8006d2a:	d422      	bmi.n	8006d72 <__swsetup_r+0x62>
 8006d2c:	06da      	lsls	r2, r3, #27
 8006d2e:	d407      	bmi.n	8006d40 <__swsetup_r+0x30>
 8006d30:	2209      	movs	r2, #9
 8006d32:	602a      	str	r2, [r5, #0]
 8006d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	e033      	b.n	8006da8 <__swsetup_r+0x98>
 8006d40:	0758      	lsls	r0, r3, #29
 8006d42:	d512      	bpl.n	8006d6a <__swsetup_r+0x5a>
 8006d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d46:	b141      	cbz	r1, 8006d5a <__swsetup_r+0x4a>
 8006d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	d002      	beq.n	8006d56 <__swsetup_r+0x46>
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 f913 	bl	8006f7c <_free_r>
 8006d56:	2300      	movs	r3, #0
 8006d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	2300      	movs	r3, #0
 8006d64:	6063      	str	r3, [r4, #4]
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f043 0308 	orr.w	r3, r3, #8
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	b94b      	cbnz	r3, 8006d8a <__swsetup_r+0x7a>
 8006d76:	89a3      	ldrh	r3, [r4, #12]
 8006d78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d80:	d003      	beq.n	8006d8a <__swsetup_r+0x7a>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 fabc 	bl	8007302 <__smakebuf_r>
 8006d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d8e:	f013 0201 	ands.w	r2, r3, #1
 8006d92:	d00a      	beq.n	8006daa <__swsetup_r+0x9a>
 8006d94:	2200      	movs	r2, #0
 8006d96:	60a2      	str	r2, [r4, #8]
 8006d98:	6962      	ldr	r2, [r4, #20]
 8006d9a:	4252      	negs	r2, r2
 8006d9c:	61a2      	str	r2, [r4, #24]
 8006d9e:	6922      	ldr	r2, [r4, #16]
 8006da0:	b942      	cbnz	r2, 8006db4 <__swsetup_r+0xa4>
 8006da2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006da6:	d1c5      	bne.n	8006d34 <__swsetup_r+0x24>
 8006da8:	bd38      	pop	{r3, r4, r5, pc}
 8006daa:	0799      	lsls	r1, r3, #30
 8006dac:	bf58      	it	pl
 8006dae:	6962      	ldrpl	r2, [r4, #20]
 8006db0:	60a2      	str	r2, [r4, #8]
 8006db2:	e7f4      	b.n	8006d9e <__swsetup_r+0x8e>
 8006db4:	2000      	movs	r0, #0
 8006db6:	e7f7      	b.n	8006da8 <__swsetup_r+0x98>
 8006db8:	2000001c 	.word	0x2000001c

08006dbc <memset>:
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4402      	add	r2, r0
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d100      	bne.n	8006dc6 <memset+0xa>
 8006dc4:	4770      	bx	lr
 8006dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dca:	e7f9      	b.n	8006dc0 <memset+0x4>

08006dcc <_close_r>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4d05      	ldr	r5, [pc, #20]	@ (8006de8 <_close_r+0x1c>)
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	f7f9 fe37 	bl	8000a4a <_close>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_close_r+0x1a>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_close_r+0x1a>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	20001d3c 	.word	0x20001d3c

08006dec <_reclaim_reent>:
 8006dec:	4b29      	ldr	r3, [pc, #164]	@ (8006e94 <_reclaim_reent+0xa8>)
 8006dee:	b570      	push	{r4, r5, r6, lr}
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4604      	mov	r4, r0
 8006df4:	4283      	cmp	r3, r0
 8006df6:	d04b      	beq.n	8006e90 <_reclaim_reent+0xa4>
 8006df8:	69c3      	ldr	r3, [r0, #28]
 8006dfa:	b1ab      	cbz	r3, 8006e28 <_reclaim_reent+0x3c>
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	b16b      	cbz	r3, 8006e1c <_reclaim_reent+0x30>
 8006e00:	2500      	movs	r5, #0
 8006e02:	69e3      	ldr	r3, [r4, #28]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	5959      	ldr	r1, [r3, r5]
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d13b      	bne.n	8006e84 <_reclaim_reent+0x98>
 8006e0c:	3504      	adds	r5, #4
 8006e0e:	2d80      	cmp	r5, #128	@ 0x80
 8006e10:	d1f7      	bne.n	8006e02 <_reclaim_reent+0x16>
 8006e12:	69e3      	ldr	r3, [r4, #28]
 8006e14:	4620      	mov	r0, r4
 8006e16:	68d9      	ldr	r1, [r3, #12]
 8006e18:	f000 f8b0 	bl	8006f7c <_free_r>
 8006e1c:	69e3      	ldr	r3, [r4, #28]
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	b111      	cbz	r1, 8006e28 <_reclaim_reent+0x3c>
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 f8aa 	bl	8006f7c <_free_r>
 8006e28:	6961      	ldr	r1, [r4, #20]
 8006e2a:	b111      	cbz	r1, 8006e32 <_reclaim_reent+0x46>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f8a5 	bl	8006f7c <_free_r>
 8006e32:	69e1      	ldr	r1, [r4, #28]
 8006e34:	b111      	cbz	r1, 8006e3c <_reclaim_reent+0x50>
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 f8a0 	bl	8006f7c <_free_r>
 8006e3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e3e:	b111      	cbz	r1, 8006e46 <_reclaim_reent+0x5a>
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 f89b 	bl	8006f7c <_free_r>
 8006e46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e48:	b111      	cbz	r1, 8006e50 <_reclaim_reent+0x64>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f896 	bl	8006f7c <_free_r>
 8006e50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e52:	b111      	cbz	r1, 8006e5a <_reclaim_reent+0x6e>
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 f891 	bl	8006f7c <_free_r>
 8006e5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e5c:	b111      	cbz	r1, 8006e64 <_reclaim_reent+0x78>
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 f88c 	bl	8006f7c <_free_r>
 8006e64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e66:	b111      	cbz	r1, 8006e6e <_reclaim_reent+0x82>
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f000 f887 	bl	8006f7c <_free_r>
 8006e6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e70:	b111      	cbz	r1, 8006e78 <_reclaim_reent+0x8c>
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 f882 	bl	8006f7c <_free_r>
 8006e78:	6a23      	ldr	r3, [r4, #32]
 8006e7a:	b14b      	cbz	r3, 8006e90 <_reclaim_reent+0xa4>
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e82:	4718      	bx	r3
 8006e84:	680e      	ldr	r6, [r1, #0]
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 f878 	bl	8006f7c <_free_r>
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	e7bb      	b.n	8006e08 <_reclaim_reent+0x1c>
 8006e90:	bd70      	pop	{r4, r5, r6, pc}
 8006e92:	bf00      	nop
 8006e94:	2000001c 	.word	0x2000001c

08006e98 <_lseek_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4d05      	ldr	r5, [pc, #20]	@ (8006eb8 <_lseek_r+0x20>)
 8006ea4:	602a      	str	r2, [r5, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f7f9 fdf3 	bl	8000a92 <_lseek>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_lseek_r+0x1e>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_lseek_r+0x1e>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20001d3c 	.word	0x20001d3c

08006ebc <_read_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4d05      	ldr	r5, [pc, #20]	@ (8006edc <_read_r+0x20>)
 8006ec8:	602a      	str	r2, [r5, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f7f9 fd84 	bl	80009d8 <_read>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_read_r+0x1e>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_read_r+0x1e>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20001d3c 	.word	0x20001d3c

08006ee0 <_write_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4d05      	ldr	r5, [pc, #20]	@ (8006f00 <_write_r+0x20>)
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7f9 fd8f 	bl	8000a12 <_write>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_write_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_write_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	20001d3c 	.word	0x20001d3c

08006f04 <__errno>:
 8006f04:	4b01      	ldr	r3, [pc, #4]	@ (8006f0c <__errno+0x8>)
 8006f06:	6818      	ldr	r0, [r3, #0]
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	2000001c 	.word	0x2000001c

08006f10 <__libc_init_array>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	2600      	movs	r6, #0
 8006f14:	4d0c      	ldr	r5, [pc, #48]	@ (8006f48 <__libc_init_array+0x38>)
 8006f16:	4c0d      	ldr	r4, [pc, #52]	@ (8006f4c <__libc_init_array+0x3c>)
 8006f18:	1b64      	subs	r4, r4, r5
 8006f1a:	10a4      	asrs	r4, r4, #2
 8006f1c:	42a6      	cmp	r6, r4
 8006f1e:	d109      	bne.n	8006f34 <__libc_init_array+0x24>
 8006f20:	f000 fa5e 	bl	80073e0 <_init>
 8006f24:	2600      	movs	r6, #0
 8006f26:	4d0a      	ldr	r5, [pc, #40]	@ (8006f50 <__libc_init_array+0x40>)
 8006f28:	4c0a      	ldr	r4, [pc, #40]	@ (8006f54 <__libc_init_array+0x44>)
 8006f2a:	1b64      	subs	r4, r4, r5
 8006f2c:	10a4      	asrs	r4, r4, #2
 8006f2e:	42a6      	cmp	r6, r4
 8006f30:	d105      	bne.n	8006f3e <__libc_init_array+0x2e>
 8006f32:	bd70      	pop	{r4, r5, r6, pc}
 8006f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f38:	4798      	blx	r3
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	e7ee      	b.n	8006f1c <__libc_init_array+0xc>
 8006f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f42:	4798      	blx	r3
 8006f44:	3601      	adds	r6, #1
 8006f46:	e7f2      	b.n	8006f2e <__libc_init_array+0x1e>
 8006f48:	080074d8 	.word	0x080074d8
 8006f4c:	080074d8 	.word	0x080074d8
 8006f50:	080074d8 	.word	0x080074d8
 8006f54:	080074dc 	.word	0x080074dc

08006f58 <__retarget_lock_init_recursive>:
 8006f58:	4770      	bx	lr

08006f5a <__retarget_lock_acquire_recursive>:
 8006f5a:	4770      	bx	lr

08006f5c <__retarget_lock_release_recursive>:
 8006f5c:	4770      	bx	lr

08006f5e <memcpy>:
 8006f5e:	440a      	add	r2, r1
 8006f60:	4291      	cmp	r1, r2
 8006f62:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f66:	d100      	bne.n	8006f6a <memcpy+0xc>
 8006f68:	4770      	bx	lr
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f70:	4291      	cmp	r1, r2
 8006f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f76:	d1f9      	bne.n	8006f6c <memcpy+0xe>
 8006f78:	bd10      	pop	{r4, pc}
	...

08006f7c <_free_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4605      	mov	r5, r0
 8006f80:	2900      	cmp	r1, #0
 8006f82:	d040      	beq.n	8007006 <_free_r+0x8a>
 8006f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f88:	1f0c      	subs	r4, r1, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bfb8      	it	lt
 8006f8e:	18e4      	addlt	r4, r4, r3
 8006f90:	f000 f8de 	bl	8007150 <__malloc_lock>
 8006f94:	4a1c      	ldr	r2, [pc, #112]	@ (8007008 <_free_r+0x8c>)
 8006f96:	6813      	ldr	r3, [r2, #0]
 8006f98:	b933      	cbnz	r3, 8006fa8 <_free_r+0x2c>
 8006f9a:	6063      	str	r3, [r4, #4]
 8006f9c:	6014      	str	r4, [r2, #0]
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa4:	f000 b8da 	b.w	800715c <__malloc_unlock>
 8006fa8:	42a3      	cmp	r3, r4
 8006faa:	d908      	bls.n	8006fbe <_free_r+0x42>
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	1821      	adds	r1, r4, r0
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf01      	itttt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	1809      	addeq	r1, r1, r0
 8006fba:	6021      	streq	r1, [r4, #0]
 8006fbc:	e7ed      	b.n	8006f9a <_free_r+0x1e>
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b10b      	cbz	r3, 8006fc8 <_free_r+0x4c>
 8006fc4:	42a3      	cmp	r3, r4
 8006fc6:	d9fa      	bls.n	8006fbe <_free_r+0x42>
 8006fc8:	6811      	ldr	r1, [r2, #0]
 8006fca:	1850      	adds	r0, r2, r1
 8006fcc:	42a0      	cmp	r0, r4
 8006fce:	d10b      	bne.n	8006fe8 <_free_r+0x6c>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	4401      	add	r1, r0
 8006fd4:	1850      	adds	r0, r2, r1
 8006fd6:	4283      	cmp	r3, r0
 8006fd8:	6011      	str	r1, [r2, #0]
 8006fda:	d1e0      	bne.n	8006f9e <_free_r+0x22>
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	4408      	add	r0, r1
 8006fe2:	6010      	str	r0, [r2, #0]
 8006fe4:	6053      	str	r3, [r2, #4]
 8006fe6:	e7da      	b.n	8006f9e <_free_r+0x22>
 8006fe8:	d902      	bls.n	8006ff0 <_free_r+0x74>
 8006fea:	230c      	movs	r3, #12
 8006fec:	602b      	str	r3, [r5, #0]
 8006fee:	e7d6      	b.n	8006f9e <_free_r+0x22>
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	1821      	adds	r1, r4, r0
 8006ff4:	428b      	cmp	r3, r1
 8006ff6:	bf01      	itttt	eq
 8006ff8:	6819      	ldreq	r1, [r3, #0]
 8006ffa:	685b      	ldreq	r3, [r3, #4]
 8006ffc:	1809      	addeq	r1, r1, r0
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6063      	str	r3, [r4, #4]
 8007002:	6054      	str	r4, [r2, #4]
 8007004:	e7cb      	b.n	8006f9e <_free_r+0x22>
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	20001d48 	.word	0x20001d48

0800700c <sbrk_aligned>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4e0f      	ldr	r6, [pc, #60]	@ (800704c <sbrk_aligned+0x40>)
 8007010:	460c      	mov	r4, r1
 8007012:	6831      	ldr	r1, [r6, #0]
 8007014:	4605      	mov	r5, r0
 8007016:	b911      	cbnz	r1, 800701e <sbrk_aligned+0x12>
 8007018:	f000 f9d2 	bl	80073c0 <_sbrk_r>
 800701c:	6030      	str	r0, [r6, #0]
 800701e:	4621      	mov	r1, r4
 8007020:	4628      	mov	r0, r5
 8007022:	f000 f9cd 	bl	80073c0 <_sbrk_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	d103      	bne.n	8007032 <sbrk_aligned+0x26>
 800702a:	f04f 34ff 	mov.w	r4, #4294967295
 800702e:	4620      	mov	r0, r4
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	1cc4      	adds	r4, r0, #3
 8007034:	f024 0403 	bic.w	r4, r4, #3
 8007038:	42a0      	cmp	r0, r4
 800703a:	d0f8      	beq.n	800702e <sbrk_aligned+0x22>
 800703c:	1a21      	subs	r1, r4, r0
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f9be 	bl	80073c0 <_sbrk_r>
 8007044:	3001      	adds	r0, #1
 8007046:	d1f2      	bne.n	800702e <sbrk_aligned+0x22>
 8007048:	e7ef      	b.n	800702a <sbrk_aligned+0x1e>
 800704a:	bf00      	nop
 800704c:	20001d44 	.word	0x20001d44

08007050 <_malloc_r>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	1ccd      	adds	r5, r1, #3
 8007056:	f025 0503 	bic.w	r5, r5, #3
 800705a:	3508      	adds	r5, #8
 800705c:	2d0c      	cmp	r5, #12
 800705e:	bf38      	it	cc
 8007060:	250c      	movcc	r5, #12
 8007062:	2d00      	cmp	r5, #0
 8007064:	4606      	mov	r6, r0
 8007066:	db01      	blt.n	800706c <_malloc_r+0x1c>
 8007068:	42a9      	cmp	r1, r5
 800706a:	d904      	bls.n	8007076 <_malloc_r+0x26>
 800706c:	230c      	movs	r3, #12
 800706e:	6033      	str	r3, [r6, #0]
 8007070:	2000      	movs	r0, #0
 8007072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800714c <_malloc_r+0xfc>
 800707a:	f000 f869 	bl	8007150 <__malloc_lock>
 800707e:	f8d8 3000 	ldr.w	r3, [r8]
 8007082:	461c      	mov	r4, r3
 8007084:	bb44      	cbnz	r4, 80070d8 <_malloc_r+0x88>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff ffbf 	bl	800700c <sbrk_aligned>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	4604      	mov	r4, r0
 8007092:	d158      	bne.n	8007146 <_malloc_r+0xf6>
 8007094:	f8d8 4000 	ldr.w	r4, [r8]
 8007098:	4627      	mov	r7, r4
 800709a:	2f00      	cmp	r7, #0
 800709c:	d143      	bne.n	8007126 <_malloc_r+0xd6>
 800709e:	2c00      	cmp	r4, #0
 80070a0:	d04b      	beq.n	800713a <_malloc_r+0xea>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	4639      	mov	r1, r7
 80070a6:	4630      	mov	r0, r6
 80070a8:	eb04 0903 	add.w	r9, r4, r3
 80070ac:	f000 f988 	bl	80073c0 <_sbrk_r>
 80070b0:	4581      	cmp	r9, r0
 80070b2:	d142      	bne.n	800713a <_malloc_r+0xea>
 80070b4:	6821      	ldr	r1, [r4, #0]
 80070b6:	4630      	mov	r0, r6
 80070b8:	1a6d      	subs	r5, r5, r1
 80070ba:	4629      	mov	r1, r5
 80070bc:	f7ff ffa6 	bl	800700c <sbrk_aligned>
 80070c0:	3001      	adds	r0, #1
 80070c2:	d03a      	beq.n	800713a <_malloc_r+0xea>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	442b      	add	r3, r5
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	f8d8 3000 	ldr.w	r3, [r8]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	bb62      	cbnz	r2, 800712c <_malloc_r+0xdc>
 80070d2:	f8c8 7000 	str.w	r7, [r8]
 80070d6:	e00f      	b.n	80070f8 <_malloc_r+0xa8>
 80070d8:	6822      	ldr	r2, [r4, #0]
 80070da:	1b52      	subs	r2, r2, r5
 80070dc:	d420      	bmi.n	8007120 <_malloc_r+0xd0>
 80070de:	2a0b      	cmp	r2, #11
 80070e0:	d917      	bls.n	8007112 <_malloc_r+0xc2>
 80070e2:	1961      	adds	r1, r4, r5
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	6025      	str	r5, [r4, #0]
 80070e8:	bf18      	it	ne
 80070ea:	6059      	strne	r1, [r3, #4]
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	bf08      	it	eq
 80070f0:	f8c8 1000 	streq.w	r1, [r8]
 80070f4:	5162      	str	r2, [r4, r5]
 80070f6:	604b      	str	r3, [r1, #4]
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 f82f 	bl	800715c <__malloc_unlock>
 80070fe:	f104 000b 	add.w	r0, r4, #11
 8007102:	1d23      	adds	r3, r4, #4
 8007104:	f020 0007 	bic.w	r0, r0, #7
 8007108:	1ac2      	subs	r2, r0, r3
 800710a:	bf1c      	itt	ne
 800710c:	1a1b      	subne	r3, r3, r0
 800710e:	50a3      	strne	r3, [r4, r2]
 8007110:	e7af      	b.n	8007072 <_malloc_r+0x22>
 8007112:	6862      	ldr	r2, [r4, #4]
 8007114:	42a3      	cmp	r3, r4
 8007116:	bf0c      	ite	eq
 8007118:	f8c8 2000 	streq.w	r2, [r8]
 800711c:	605a      	strne	r2, [r3, #4]
 800711e:	e7eb      	b.n	80070f8 <_malloc_r+0xa8>
 8007120:	4623      	mov	r3, r4
 8007122:	6864      	ldr	r4, [r4, #4]
 8007124:	e7ae      	b.n	8007084 <_malloc_r+0x34>
 8007126:	463c      	mov	r4, r7
 8007128:	687f      	ldr	r7, [r7, #4]
 800712a:	e7b6      	b.n	800709a <_malloc_r+0x4a>
 800712c:	461a      	mov	r2, r3
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	42a3      	cmp	r3, r4
 8007132:	d1fb      	bne.n	800712c <_malloc_r+0xdc>
 8007134:	2300      	movs	r3, #0
 8007136:	6053      	str	r3, [r2, #4]
 8007138:	e7de      	b.n	80070f8 <_malloc_r+0xa8>
 800713a:	230c      	movs	r3, #12
 800713c:	4630      	mov	r0, r6
 800713e:	6033      	str	r3, [r6, #0]
 8007140:	f000 f80c 	bl	800715c <__malloc_unlock>
 8007144:	e794      	b.n	8007070 <_malloc_r+0x20>
 8007146:	6005      	str	r5, [r0, #0]
 8007148:	e7d6      	b.n	80070f8 <_malloc_r+0xa8>
 800714a:	bf00      	nop
 800714c:	20001d48 	.word	0x20001d48

08007150 <__malloc_lock>:
 8007150:	4801      	ldr	r0, [pc, #4]	@ (8007158 <__malloc_lock+0x8>)
 8007152:	f7ff bf02 	b.w	8006f5a <__retarget_lock_acquire_recursive>
 8007156:	bf00      	nop
 8007158:	20001d40 	.word	0x20001d40

0800715c <__malloc_unlock>:
 800715c:	4801      	ldr	r0, [pc, #4]	@ (8007164 <__malloc_unlock+0x8>)
 800715e:	f7ff befd 	b.w	8006f5c <__retarget_lock_release_recursive>
 8007162:	bf00      	nop
 8007164:	20001d40 	.word	0x20001d40

08007168 <__sflush_r>:
 8007168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	0716      	lsls	r6, r2, #28
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	d454      	bmi.n	8007220 <__sflush_r+0xb8>
 8007176:	684b      	ldr	r3, [r1, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	dc02      	bgt.n	8007182 <__sflush_r+0x1a>
 800717c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	dd48      	ble.n	8007214 <__sflush_r+0xac>
 8007182:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007184:	2e00      	cmp	r6, #0
 8007186:	d045      	beq.n	8007214 <__sflush_r+0xac>
 8007188:	2300      	movs	r3, #0
 800718a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800718e:	682f      	ldr	r7, [r5, #0]
 8007190:	6a21      	ldr	r1, [r4, #32]
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	d030      	beq.n	80071f8 <__sflush_r+0x90>
 8007196:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	0759      	lsls	r1, r3, #29
 800719c:	d505      	bpl.n	80071aa <__sflush_r+0x42>
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	1ad2      	subs	r2, r2, r3
 80071a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071a4:	b10b      	cbz	r3, 80071aa <__sflush_r+0x42>
 80071a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	2300      	movs	r3, #0
 80071ac:	4628      	mov	r0, r5
 80071ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071b0:	6a21      	ldr	r1, [r4, #32]
 80071b2:	47b0      	blx	r6
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	d106      	bne.n	80071c8 <__sflush_r+0x60>
 80071ba:	6829      	ldr	r1, [r5, #0]
 80071bc:	291d      	cmp	r1, #29
 80071be:	d82b      	bhi.n	8007218 <__sflush_r+0xb0>
 80071c0:	4a28      	ldr	r2, [pc, #160]	@ (8007264 <__sflush_r+0xfc>)
 80071c2:	410a      	asrs	r2, r1
 80071c4:	07d6      	lsls	r6, r2, #31
 80071c6:	d427      	bmi.n	8007218 <__sflush_r+0xb0>
 80071c8:	2200      	movs	r2, #0
 80071ca:	6062      	str	r2, [r4, #4]
 80071cc:	6922      	ldr	r2, [r4, #16]
 80071ce:	04d9      	lsls	r1, r3, #19
 80071d0:	6022      	str	r2, [r4, #0]
 80071d2:	d504      	bpl.n	80071de <__sflush_r+0x76>
 80071d4:	1c42      	adds	r2, r0, #1
 80071d6:	d101      	bne.n	80071dc <__sflush_r+0x74>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b903      	cbnz	r3, 80071de <__sflush_r+0x76>
 80071dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80071de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071e0:	602f      	str	r7, [r5, #0]
 80071e2:	b1b9      	cbz	r1, 8007214 <__sflush_r+0xac>
 80071e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071e8:	4299      	cmp	r1, r3
 80071ea:	d002      	beq.n	80071f2 <__sflush_r+0x8a>
 80071ec:	4628      	mov	r0, r5
 80071ee:	f7ff fec5 	bl	8006f7c <_free_r>
 80071f2:	2300      	movs	r3, #0
 80071f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80071f6:	e00d      	b.n	8007214 <__sflush_r+0xac>
 80071f8:	2301      	movs	r3, #1
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b0      	blx	r6
 80071fe:	4602      	mov	r2, r0
 8007200:	1c50      	adds	r0, r2, #1
 8007202:	d1c9      	bne.n	8007198 <__sflush_r+0x30>
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0c6      	beq.n	8007198 <__sflush_r+0x30>
 800720a:	2b1d      	cmp	r3, #29
 800720c:	d001      	beq.n	8007212 <__sflush_r+0xaa>
 800720e:	2b16      	cmp	r3, #22
 8007210:	d11d      	bne.n	800724e <__sflush_r+0xe6>
 8007212:	602f      	str	r7, [r5, #0]
 8007214:	2000      	movs	r0, #0
 8007216:	e021      	b.n	800725c <__sflush_r+0xf4>
 8007218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800721c:	b21b      	sxth	r3, r3
 800721e:	e01a      	b.n	8007256 <__sflush_r+0xee>
 8007220:	690f      	ldr	r7, [r1, #16]
 8007222:	2f00      	cmp	r7, #0
 8007224:	d0f6      	beq.n	8007214 <__sflush_r+0xac>
 8007226:	0793      	lsls	r3, r2, #30
 8007228:	bf18      	it	ne
 800722a:	2300      	movne	r3, #0
 800722c:	680e      	ldr	r6, [r1, #0]
 800722e:	bf08      	it	eq
 8007230:	694b      	ldreq	r3, [r1, #20]
 8007232:	1bf6      	subs	r6, r6, r7
 8007234:	600f      	str	r7, [r1, #0]
 8007236:	608b      	str	r3, [r1, #8]
 8007238:	2e00      	cmp	r6, #0
 800723a:	ddeb      	ble.n	8007214 <__sflush_r+0xac>
 800723c:	4633      	mov	r3, r6
 800723e:	463a      	mov	r2, r7
 8007240:	4628      	mov	r0, r5
 8007242:	6a21      	ldr	r1, [r4, #32]
 8007244:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007248:	47e0      	blx	ip
 800724a:	2800      	cmp	r0, #0
 800724c:	dc07      	bgt.n	800725e <__sflush_r+0xf6>
 800724e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	81a3      	strh	r3, [r4, #12]
 800725c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800725e:	4407      	add	r7, r0
 8007260:	1a36      	subs	r6, r6, r0
 8007262:	e7e9      	b.n	8007238 <__sflush_r+0xd0>
 8007264:	dfbffffe 	.word	0xdfbffffe

08007268 <_fflush_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	690b      	ldr	r3, [r1, #16]
 800726c:	4605      	mov	r5, r0
 800726e:	460c      	mov	r4, r1
 8007270:	b913      	cbnz	r3, 8007278 <_fflush_r+0x10>
 8007272:	2500      	movs	r5, #0
 8007274:	4628      	mov	r0, r5
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	b118      	cbz	r0, 8007282 <_fflush_r+0x1a>
 800727a:	6a03      	ldr	r3, [r0, #32]
 800727c:	b90b      	cbnz	r3, 8007282 <_fflush_r+0x1a>
 800727e:	f7ff fc31 	bl	8006ae4 <__sinit>
 8007282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f3      	beq.n	8007272 <_fflush_r+0xa>
 800728a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800728c:	07d0      	lsls	r0, r2, #31
 800728e:	d404      	bmi.n	800729a <_fflush_r+0x32>
 8007290:	0599      	lsls	r1, r3, #22
 8007292:	d402      	bmi.n	800729a <_fflush_r+0x32>
 8007294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007296:	f7ff fe60 	bl	8006f5a <__retarget_lock_acquire_recursive>
 800729a:	4628      	mov	r0, r5
 800729c:	4621      	mov	r1, r4
 800729e:	f7ff ff63 	bl	8007168 <__sflush_r>
 80072a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072a4:	4605      	mov	r5, r0
 80072a6:	07da      	lsls	r2, r3, #31
 80072a8:	d4e4      	bmi.n	8007274 <_fflush_r+0xc>
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	059b      	lsls	r3, r3, #22
 80072ae:	d4e1      	bmi.n	8007274 <_fflush_r+0xc>
 80072b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072b2:	f7ff fe53 	bl	8006f5c <__retarget_lock_release_recursive>
 80072b6:	e7dd      	b.n	8007274 <_fflush_r+0xc>

080072b8 <__swhatbuf_r>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	460c      	mov	r4, r1
 80072bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c0:	4615      	mov	r5, r2
 80072c2:	2900      	cmp	r1, #0
 80072c4:	461e      	mov	r6, r3
 80072c6:	b096      	sub	sp, #88	@ 0x58
 80072c8:	da0c      	bge.n	80072e4 <__swhatbuf_r+0x2c>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	2100      	movs	r1, #0
 80072ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072d2:	bf14      	ite	ne
 80072d4:	2340      	movne	r3, #64	@ 0x40
 80072d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072da:	2000      	movs	r0, #0
 80072dc:	6031      	str	r1, [r6, #0]
 80072de:	602b      	str	r3, [r5, #0]
 80072e0:	b016      	add	sp, #88	@ 0x58
 80072e2:	bd70      	pop	{r4, r5, r6, pc}
 80072e4:	466a      	mov	r2, sp
 80072e6:	f000 f849 	bl	800737c <_fstat_r>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	dbed      	blt.n	80072ca <__swhatbuf_r+0x12>
 80072ee:	9901      	ldr	r1, [sp, #4]
 80072f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072f8:	4259      	negs	r1, r3
 80072fa:	4159      	adcs	r1, r3
 80072fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007300:	e7eb      	b.n	80072da <__swhatbuf_r+0x22>

08007302 <__smakebuf_r>:
 8007302:	898b      	ldrh	r3, [r1, #12]
 8007304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007306:	079d      	lsls	r5, r3, #30
 8007308:	4606      	mov	r6, r0
 800730a:	460c      	mov	r4, r1
 800730c:	d507      	bpl.n	800731e <__smakebuf_r+0x1c>
 800730e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	2301      	movs	r3, #1
 8007318:	6163      	str	r3, [r4, #20]
 800731a:	b003      	add	sp, #12
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731e:	466a      	mov	r2, sp
 8007320:	ab01      	add	r3, sp, #4
 8007322:	f7ff ffc9 	bl	80072b8 <__swhatbuf_r>
 8007326:	9f00      	ldr	r7, [sp, #0]
 8007328:	4605      	mov	r5, r0
 800732a:	4639      	mov	r1, r7
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff fe8f 	bl	8007050 <_malloc_r>
 8007332:	b948      	cbnz	r0, 8007348 <__smakebuf_r+0x46>
 8007334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007338:	059a      	lsls	r2, r3, #22
 800733a:	d4ee      	bmi.n	800731a <__smakebuf_r+0x18>
 800733c:	f023 0303 	bic.w	r3, r3, #3
 8007340:	f043 0302 	orr.w	r3, r3, #2
 8007344:	81a3      	strh	r3, [r4, #12]
 8007346:	e7e2      	b.n	800730e <__smakebuf_r+0xc>
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800734e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	9b01      	ldr	r3, [sp, #4]
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	b15b      	cbz	r3, 8007372 <__smakebuf_r+0x70>
 800735a:	4630      	mov	r0, r6
 800735c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007360:	f000 f81e 	bl	80073a0 <_isatty_r>
 8007364:	b128      	cbz	r0, 8007372 <__smakebuf_r+0x70>
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	f023 0303 	bic.w	r3, r3, #3
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	431d      	orrs	r5, r3
 8007376:	81a5      	strh	r5, [r4, #12]
 8007378:	e7cf      	b.n	800731a <__smakebuf_r+0x18>
	...

0800737c <_fstat_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	2300      	movs	r3, #0
 8007380:	4d06      	ldr	r5, [pc, #24]	@ (800739c <_fstat_r+0x20>)
 8007382:	4604      	mov	r4, r0
 8007384:	4608      	mov	r0, r1
 8007386:	4611      	mov	r1, r2
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	f7f9 fb69 	bl	8000a60 <_fstat>
 800738e:	1c43      	adds	r3, r0, #1
 8007390:	d102      	bne.n	8007398 <_fstat_r+0x1c>
 8007392:	682b      	ldr	r3, [r5, #0]
 8007394:	b103      	cbz	r3, 8007398 <_fstat_r+0x1c>
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	bd38      	pop	{r3, r4, r5, pc}
 800739a:	bf00      	nop
 800739c:	20001d3c 	.word	0x20001d3c

080073a0 <_isatty_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	2300      	movs	r3, #0
 80073a4:	4d05      	ldr	r5, [pc, #20]	@ (80073bc <_isatty_r+0x1c>)
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7f9 fb67 	bl	8000a7e <_isatty>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_isatty_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_isatty_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20001d3c 	.word	0x20001d3c

080073c0 <_sbrk_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	2300      	movs	r3, #0
 80073c4:	4d05      	ldr	r5, [pc, #20]	@ (80073dc <_sbrk_r+0x1c>)
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f7f9 fb6e 	bl	8000aac <_sbrk>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d102      	bne.n	80073da <_sbrk_r+0x1a>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b103      	cbz	r3, 80073da <_sbrk_r+0x1a>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	20001d3c 	.word	0x20001d3c

080073e0 <_init>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	bf00      	nop
 80073e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e6:	bc08      	pop	{r3}
 80073e8:	469e      	mov	lr, r3
 80073ea:	4770      	bx	lr

080073ec <_fini>:
 80073ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ee:	bf00      	nop
 80073f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f2:	bc08      	pop	{r3}
 80073f4:	469e      	mov	lr, r3
 80073f6:	4770      	bx	lr
